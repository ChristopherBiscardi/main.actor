{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Packages /tmp/tmp.0vJBxwE5k8/http/0.2.0/http assert buffered builtin capsicum collections encode/base64 files format itertools net net/ssl ponytest promises random signals strings term time","title":"http"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http--index/","text":"This package includes all the support functions necessary to build client and server applications for the HTTP protocol. The important interfaces an application needs to deal with are: HTTPSession , the API to an HTTP connection. HTTPHandler , the interface to a handler you need to write that will receive notifications from the HTTPSession . HandlerFactory , the interface to a class you need to write that creates instances of your HTTPHandler . Payload , the class that represents a single HTTP message, with its headers. If you are writing a client, you will need to deal with the HTTPClient class. If you are writing a server, you will need to deal with the HTTPServer class. Public Types primitive URLPartUser primitive URLPartPassword primitive URLPartHost primitive URLPartPath primitive URLPartQuery primitive URLPartFragment type URLPart primitive URLEncode class URL trait Status primitive StatusContinue primitive StatusSwitchingProtocols primitive StatusOK primitive StatusCreated primitive StatusAccepted primitive StatusNonAuthoritativeInfo primitive StatusNoContent primitive StatusResetContent primitive StatusPartialContent primitive StatusMultipleChoices primitive StatusMovedPermanently primitive StatusFound primitive StatusSeeOther primitive StatusNotModified primitive StatusUseProxy primitive StatusTemporaryRedirect primitive StatusBadRequest primitive StatusUnauthorized primitive StatusPaymentRequired primitive StatusForbidden primitive StatusNotFound primitive StatusMethodNotAllowed primitive StatusNotAcceptable primitive StatusProxyAuthRequired primitive StatusRequestTimeout primitive StatusConflict primitive StatusGone primitive StatusLengthRequired primitive StatusPreconditionFailed primitive StatusRequestEntityTooLarge primitive StatusRequestURITooLong primitive StatusUnsupportedMediaType primitive StatusRequestedRangeNotSatisfiable primitive StatusExpectationFailed primitive StatusTeapot primitive StatusPreconditionRequired primitive StatusTooManyRequests primitive StatusRequestHeaderFieldsTooLarge primitive StatusUnavailableForLegalReasons primitive StatusInternalServerError primitive StatusNotImplemented primitive StatusBadGateway primitive StatusServiceUnavailable primitive StatusGatewayTimeout primitive StatusHTTPVersionNotSupported primitive StatusNetworkAuthenticationRequired interface Logger interface ServerNotify actor HTTPServer primitive ChunkedTransfer primitive StreamTransfer primitive OneshotTransfer type TransferMode class Payload primitive MimeTypes interface HTTPSession primitive ParseError class HTTPParser interface HTTPHandler interface HandlerFactory primitive DiscardLog class ContentsLog class CommonLog class HTTPClient Private Types primitive _ExpectRequest primitive _ExpectResponse primitive _ExpectHeaders primitive _ExpectContentLength primitive _ExpectChunkStart primitive _ExpectChunk primitive _ExpectChunkEnd primitive _ExpectBody primitive _ExpectReady primitive _ExpectError type _PayloadState class _SessionGuard class _HTTPConnTestHandler class _HTTPConnTestHandlerFactory primitive _FixedResponseHTTPServerNotify class _ServerListener actor _ServerConnection class _ServerConnHandler class _HostService primitive _ConnConnecting actor _ClientConnection class _ClientConnHandler","title":"Package"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http--index/#public-types","text":"primitive URLPartUser primitive URLPartPassword primitive URLPartHost primitive URLPartPath primitive URLPartQuery primitive URLPartFragment type URLPart primitive URLEncode class URL trait Status primitive StatusContinue primitive StatusSwitchingProtocols primitive StatusOK primitive StatusCreated primitive StatusAccepted primitive StatusNonAuthoritativeInfo primitive StatusNoContent primitive StatusResetContent primitive StatusPartialContent primitive StatusMultipleChoices primitive StatusMovedPermanently primitive StatusFound primitive StatusSeeOther primitive StatusNotModified primitive StatusUseProxy primitive StatusTemporaryRedirect primitive StatusBadRequest primitive StatusUnauthorized primitive StatusPaymentRequired primitive StatusForbidden primitive StatusNotFound primitive StatusMethodNotAllowed primitive StatusNotAcceptable primitive StatusProxyAuthRequired primitive StatusRequestTimeout primitive StatusConflict primitive StatusGone primitive StatusLengthRequired primitive StatusPreconditionFailed primitive StatusRequestEntityTooLarge primitive StatusRequestURITooLong primitive StatusUnsupportedMediaType primitive StatusRequestedRangeNotSatisfiable primitive StatusExpectationFailed primitive StatusTeapot primitive StatusPreconditionRequired primitive StatusTooManyRequests primitive StatusRequestHeaderFieldsTooLarge primitive StatusUnavailableForLegalReasons primitive StatusInternalServerError primitive StatusNotImplemented primitive StatusBadGateway primitive StatusServiceUnavailable primitive StatusGatewayTimeout primitive StatusHTTPVersionNotSupported primitive StatusNetworkAuthenticationRequired interface Logger interface ServerNotify actor HTTPServer primitive ChunkedTransfer primitive StreamTransfer primitive OneshotTransfer type TransferMode class Payload primitive MimeTypes interface HTTPSession primitive ParseError class HTTPParser interface HTTPHandler interface HandlerFactory primitive DiscardLog class ContentsLog class CommonLog class HTTPClient","title":"Public Types"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http--index/#private-types","text":"primitive _ExpectRequest primitive _ExpectResponse primitive _ExpectHeaders primitive _ExpectContentLength primitive _ExpectChunkStart primitive _ExpectChunk primitive _ExpectChunkEnd primitive _ExpectBody primitive _ExpectReady primitive _ExpectError type _PayloadState class _SessionGuard class _HTTPConnTestHandler class _HTTPConnTestHandlerFactory primitive _FixedResponseHTTPServerNotify class _ServerListener actor _ServerConnection class _ServerConnHandler class _HostService primitive _ConnConnecting actor _ClientConnection class _ClientConnHandler","title":"Private Types"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ChunkedTransfer/","text":"ChunkedTransfer [Source] primitive val ChunkedTransfer Constructors create [Source] new val create() : ChunkedTransfer val^ Returns ChunkedTransfer val^ Public Functions eq [Source] fun box eq( that: ChunkedTransfer val) : Bool val Parameters that: ChunkedTransfer val Returns Bool val ne [Source] fun box ne( that: ChunkedTransfer val) : Bool val Parameters that: ChunkedTransfer val Returns Bool val","title":"primitive ChunkedTransfer"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ChunkedTransfer/#chunkedtransfer","text":"[Source] primitive val ChunkedTransfer","title":"ChunkedTransfer"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ChunkedTransfer/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ChunkedTransfer/#create","text":"[Source] new val create() : ChunkedTransfer val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ChunkedTransfer/#returns","text":"ChunkedTransfer val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ChunkedTransfer/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ChunkedTransfer/#eq","text":"[Source] fun box eq( that: ChunkedTransfer val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ChunkedTransfer/#parameters","text":"that: ChunkedTransfer val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ChunkedTransfer/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ChunkedTransfer/#ne","text":"[Source] fun box ne( that: ChunkedTransfer val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ChunkedTransfer/#parameters_1","text":"that: ChunkedTransfer val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ChunkedTransfer/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-CommonLog/","text":"CommonLog [Source] Logs HTTP requests in the common log format. class ref CommonLog is Logger val Implements Logger val Constructors create [Source] new val create( out: OutStream tag) : CommonLog val^ Parameters out: OutStream tag Returns CommonLog val^ Public Functions apply [Source] fun val apply( ip: String val, body_size: USize val, request: Payload val, response: Payload val) : None val Parameters ip: String val body_size: USize val request: Payload val response: Payload val Returns None val Private Functions _entry [Source] fun box _entry( s: String val) : String val Parameters s: String val Returns String val _log_time [Source] fun box _log_time() : String val ? Returns String val ?","title":"class CommonLog"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-CommonLog/#commonlog","text":"[Source] Logs HTTP requests in the common log format. class ref CommonLog is Logger val","title":"CommonLog"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-CommonLog/#implements","text":"Logger val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-CommonLog/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-CommonLog/#create","text":"[Source] new val create( out: OutStream tag) : CommonLog val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-CommonLog/#parameters","text":"out: OutStream tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-CommonLog/#returns","text":"CommonLog val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-CommonLog/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-CommonLog/#apply","text":"[Source] fun val apply( ip: String val, body_size: USize val, request: Payload val, response: Payload val) : None val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-CommonLog/#parameters_1","text":"ip: String val body_size: USize val request: Payload val response: Payload val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-CommonLog/#returns_1","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-CommonLog/#private-functions","text":"","title":"Private Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-CommonLog/#_entry","text":"[Source] fun box _entry( s: String val) : String val","title":"_entry"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-CommonLog/#parameters_2","text":"s: String val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-CommonLog/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-CommonLog/#_log_time","text":"[Source] fun box _log_time() : String val ?","title":"_log_time"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-CommonLog/#returns_3","text":"String val ?","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ContentsLog/","text":"ContentsLog [Source] Logs the contents of HTTP requests and responses. class ref ContentsLog is Logger val Implements Logger val Constructors create [Source] new val create( out: OutStream tag) : ContentsLog val^ Parameters out: OutStream tag Returns ContentsLog val^ Public Functions apply [Source] fun val apply( ip: String val, body_size: USize val, request: Payload val, response: Payload val) : None val Parameters ip: String val body_size: USize val request: Payload val response: Payload val Returns None val","title":"class ContentsLog"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ContentsLog/#contentslog","text":"[Source] Logs the contents of HTTP requests and responses. class ref ContentsLog is Logger val","title":"ContentsLog"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ContentsLog/#implements","text":"Logger val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ContentsLog/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ContentsLog/#create","text":"[Source] new val create( out: OutStream tag) : ContentsLog val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ContentsLog/#parameters","text":"out: OutStream tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ContentsLog/#returns","text":"ContentsLog val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ContentsLog/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ContentsLog/#apply","text":"[Source] fun val apply( ip: String val, body_size: USize val, request: Payload val, response: Payload val) : None val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ContentsLog/#parameters_1","text":"ip: String val body_size: USize val request: Payload val response: Payload val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ContentsLog/#returns_1","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-DiscardLog/","text":"DiscardLog [Source] Doesn't log anything. primitive val DiscardLog Constructors create [Source] new val create() : DiscardLog val^ Returns DiscardLog val^ Public Functions apply [Source] fun val apply( ip: String val, body_size: USize val, request: Payload val, response: Payload val) : None val Parameters ip: String val body_size: USize val request: Payload val response: Payload val Returns None val eq [Source] fun box eq( that: DiscardLog val) : Bool val Parameters that: DiscardLog val Returns Bool val ne [Source] fun box ne( that: DiscardLog val) : Bool val Parameters that: DiscardLog val Returns Bool val","title":"primitive DiscardLog"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-DiscardLog/#discardlog","text":"[Source] Doesn't log anything. primitive val DiscardLog","title":"DiscardLog"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-DiscardLog/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-DiscardLog/#create","text":"[Source] new val create() : DiscardLog val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-DiscardLog/#returns","text":"DiscardLog val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-DiscardLog/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-DiscardLog/#apply","text":"[Source] fun val apply( ip: String val, body_size: USize val, request: Payload val, response: Payload val) : None val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-DiscardLog/#parameters","text":"ip: String val body_size: USize val request: Payload val response: Payload val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-DiscardLog/#returns_1","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-DiscardLog/#eq","text":"[Source] fun box eq( that: DiscardLog val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-DiscardLog/#parameters_1","text":"that: DiscardLog val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-DiscardLog/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-DiscardLog/#ne","text":"[Source] fun box ne( that: DiscardLog val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-DiscardLog/#parameters_2","text":"that: DiscardLog val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-DiscardLog/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPClient/","text":"HTTPClient [Source] Manages a group of HTTP connections on behalf of a client application. A client should create one instance of this class. class ref HTTPClient Constructors create [Source] Create the context in which all HTTP sessions will originate. new ref create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val), sslctx: (SSLContext val | None val) = seq, pipeline: Bool val = seq) : HTTPClient ref^ Parameters auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) sslctx: ( SSLContext val | None val) = seq pipeline: Bool val = seq Returns HTTPClient ref^ Public Functions apply [Source] Schedule a request on an HTTP session. If a new connection is created, a new instance of the application's Receive Handler will be created for it. A val copy of the Payload is returned, and it can not be modified after this point. This is useful in Stream and Chunked transfer modes, so that the application can follow up with calls to Client.send_body . fun ref apply( request: Payload trn, handlermaker: HandlerFactory val) : Payload val ? Parameters request: Payload trn handlermaker: HandlerFactory val Returns Payload val ? dispose [Source] Disposes the sessions and cancels all pending requests. fun ref dispose() : None val Returns None val send_body [Source] fun ref send_body( data: (String val | Array[U8 val] val), session: HTTPSession tag) : None val Parameters data: ( String val | Array [ U8 val] val) session: HTTPSession tag Returns None val Private Functions _get_session [Source] Gets or creates an HTTP Session for the given URL. If a new session is created, a new Receive Handler instance is created too. fun ref _get_session( url: URL val, handlermaker: HandlerFactory val) : _ClientConnection tag ? Parameters url: URL val handlermaker: HandlerFactory val Returns _ClientConnection tag ?","title":"class HTTPClient"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPClient/#httpclient","text":"[Source] Manages a group of HTTP connections on behalf of a client application. A client should create one instance of this class. class ref HTTPClient","title":"HTTPClient"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPClient/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPClient/#create","text":"[Source] Create the context in which all HTTP sessions will originate. new ref create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val), sslctx: (SSLContext val | None val) = seq, pipeline: Bool val = seq) : HTTPClient ref^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPClient/#parameters","text":"auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) sslctx: ( SSLContext val | None val) = seq pipeline: Bool val = seq","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPClient/#returns","text":"HTTPClient ref^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPClient/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPClient/#apply","text":"[Source] Schedule a request on an HTTP session. If a new connection is created, a new instance of the application's Receive Handler will be created for it. A val copy of the Payload is returned, and it can not be modified after this point. This is useful in Stream and Chunked transfer modes, so that the application can follow up with calls to Client.send_body . fun ref apply( request: Payload trn, handlermaker: HandlerFactory val) : Payload val ?","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPClient/#parameters_1","text":"request: Payload trn handlermaker: HandlerFactory val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPClient/#returns_1","text":"Payload val ?","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPClient/#dispose","text":"[Source] Disposes the sessions and cancels all pending requests. fun ref dispose() : None val","title":"dispose"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPClient/#returns_2","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPClient/#send_body","text":"[Source] fun ref send_body( data: (String val | Array[U8 val] val), session: HTTPSession tag) : None val","title":"send_body"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPClient/#parameters_2","text":"data: ( String val | Array [ U8 val] val) session: HTTPSession tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPClient/#returns_3","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPClient/#private-functions","text":"","title":"Private Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPClient/#_get_session","text":"[Source] Gets or creates an HTTP Session for the given URL. If a new session is created, a new Receive Handler instance is created too. fun ref _get_session( url: URL val, handlermaker: HandlerFactory val) : _ClientConnection tag ?","title":"_get_session"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPClient/#parameters_3","text":"url: URL val handlermaker: HandlerFactory val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPClient/#returns_4","text":"_ClientConnection tag ?","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPHandler/","text":"HTTPHandler [Source] This is the interface through which HTTP messages are delivered to application code. On the server, this will be HTTP Requests (GET, HEAD, DELETE, POST, etc) sent from a client. On the client, this will be the HTTP Responses coming back from the server. The protocol is largely symmetrical and the same interface definition is used, though what processing happens behind the interface will of course vary. This interface delivers asynchronous events when receiving an HTTP message (called a Payload ). Calls to these methods are made in the context of the HTTPSession actor so most of them should be passing data on to a processing actor. Each HTTPSession must have a unique instance of the handler. The application code does not necessarily know when an HTTPSession is created, so the application must provide an instance of HandlerFactory that will be called at the appropriate time. interface ref HTTPHandler Public Functions apply [Source] fun ref apply( payload: Payload val) : Any tag Parameters payload: Payload val Returns Any tag chunk [Source] fun ref chunk( data: (String val | Array[U8 val] val)) : None val Parameters data: ( String val | Array [ U8 val] val) Returns None val finished [Source] fun ref finished() : None val Returns None val cancelled [Source] fun ref cancelled() : None val Returns None val throttled [Source] fun ref throttled() : None val Returns None val unthrottled [Source] fun ref unthrottled() : None val Returns None val need_body [Source] fun ref need_body() : None val Returns None val","title":"interface HTTPHandler"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPHandler/#httphandler","text":"[Source] This is the interface through which HTTP messages are delivered to application code. On the server, this will be HTTP Requests (GET, HEAD, DELETE, POST, etc) sent from a client. On the client, this will be the HTTP Responses coming back from the server. The protocol is largely symmetrical and the same interface definition is used, though what processing happens behind the interface will of course vary. This interface delivers asynchronous events when receiving an HTTP message (called a Payload ). Calls to these methods are made in the context of the HTTPSession actor so most of them should be passing data on to a processing actor. Each HTTPSession must have a unique instance of the handler. The application code does not necessarily know when an HTTPSession is created, so the application must provide an instance of HandlerFactory that will be called at the appropriate time. interface ref HTTPHandler","title":"HTTPHandler"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPHandler/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPHandler/#apply","text":"[Source] fun ref apply( payload: Payload val) : Any tag","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPHandler/#parameters","text":"payload: Payload val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPHandler/#returns","text":"Any tag","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPHandler/#chunk","text":"[Source] fun ref chunk( data: (String val | Array[U8 val] val)) : None val","title":"chunk"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPHandler/#parameters_1","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPHandler/#returns_1","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPHandler/#finished","text":"[Source] fun ref finished() : None val","title":"finished"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPHandler/#returns_2","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPHandler/#cancelled","text":"[Source] fun ref cancelled() : None val","title":"cancelled"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPHandler/#returns_3","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPHandler/#throttled","text":"[Source] fun ref throttled() : None val","title":"throttled"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPHandler/#returns_4","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPHandler/#unthrottled","text":"[Source] fun ref unthrottled() : None val","title":"unthrottled"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPHandler/#returns_5","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPHandler/#need_body","text":"[Source] fun ref need_body() : None val","title":"need_body"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPHandler/#returns_6","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/","text":"HTTPParser [Source] This is the HTTP parser that builds a message Payload object representing either a Request or a Response from received chunks of data. class ref HTTPParser Constructors request [Source] Expect HTTP requests to arrive on a session. new ref request( session': HTTPSession tag) : HTTPParser ref^ Parameters session': HTTPSession tag Returns HTTPParser ref^ response [Source] Expect HTTP responses to arrive on a session. new ref response( session': HTTPSession tag) : HTTPParser ref^ Parameters session': HTTPSession tag Returns HTTPParser ref^ Public Functions parse [Source] Analyze new data based on the parser's current internal state. fun ref parse( buffer: Reader ref) : (ParseError val | None val) Parameters buffer: Reader ref Returns ( ParseError val | None val) restart [Source] Restart parser state for the next message. It will be of the same kind as the last one. fun ref restart() : None val Returns None val closed [Source] The connection has closed, which may signal that all remaining data is the payload body. fun ref closed( buffer: Reader ref) : None val Parameters buffer: Reader ref Returns None val Private Functions _deliver [Source] The parser is finished with the message headers so we can push it to the HTTPSession . The body may come later. fun ref _deliver() : None val Returns None val _parse_request [Source] Look for \" \", the first line of an HTTP 'request' message. fun ref _parse_request( buffer: Reader ref) : (ParseError val | None val) Parameters buffer: Reader ref Returns ( ParseError val | None val) _parse_response [Source] Look for \" \", the first line of an HTTP 'response' message. fun ref _parse_response( buffer: Reader ref) : (ParseError val | None val) Parameters buffer: Reader ref Returns ( ParseError val | None val) _parse_headers [Source] Look for: \" : \" or the empty line that marks the end of all the headers. fun ref _parse_headers( buffer: Reader ref) : (ParseError val | None val) Parameters buffer: Reader ref Returns ( ParseError val | None val) _process_header [Source] Save a header value. Raise an error on not finding the colon or can't interpret the value. fun ref _process_header( line: String val) : None val ? Parameters line: String val Returns None val ? _setauth [Source] Fill in username and password from an authentication header. fun ref _setauth( auth: String val) : None val Parameters auth: String val Returns None val _set_header_end [Source] Line size is zero, so we have reached the end of the headers. Certain status codes mean there is no body. fun ref _set_header_end() : None val Returns None val _parse_content_length [Source] Look for _expected_length bytes set by having seen a Content-Length header. We may not see it all at once but we process the lesser of what we need and what is available in the buffer. fun ref _parse_content_length( buffer: Reader ref) : None val Parameters buffer: Reader ref Returns None val _parse_chunk_start [Source] Look for the beginning of a chunk, which is a length in hex on a line terminated by CRLF. An explicit length of zero marks the end of the entire chunked message body. fun ref _parse_chunk_start( buffer: Reader ref) : (ParseError val | None val) Parameters buffer: Reader ref Returns ( ParseError val | None val) _parse_chunk [Source] Look for a chunk of the size set by _parse_chunk_start . We may not see it all at once but we process the lesser of what we need and what is available in the buffer. ChunkedTransfer mode always delivers directly to the HTTPSession handler. fun ref _parse_chunk( buffer: Reader ref) : None val Parameters buffer: Reader ref Returns None val _parse_chunk_end [Source] Look for the CRLF that ends every chunk. AFter that we look for the next chunk, or that was the special ending chunk. fun ref _parse_chunk_end( buffer: Reader ref) : None val Parameters buffer: Reader ref Returns None val","title":"class HTTPParser"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#httpparser","text":"[Source] This is the HTTP parser that builds a message Payload object representing either a Request or a Response from received chunks of data. class ref HTTPParser","title":"HTTPParser"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#request","text":"[Source] Expect HTTP requests to arrive on a session. new ref request( session': HTTPSession tag) : HTTPParser ref^","title":"request"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#parameters","text":"session': HTTPSession tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#returns","text":"HTTPParser ref^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#response","text":"[Source] Expect HTTP responses to arrive on a session. new ref response( session': HTTPSession tag) : HTTPParser ref^","title":"response"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#parameters_1","text":"session': HTTPSession tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#returns_1","text":"HTTPParser ref^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#parse","text":"[Source] Analyze new data based on the parser's current internal state. fun ref parse( buffer: Reader ref) : (ParseError val | None val)","title":"parse"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#parameters_2","text":"buffer: Reader ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#returns_2","text":"( ParseError val | None val)","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#restart","text":"[Source] Restart parser state for the next message. It will be of the same kind as the last one. fun ref restart() : None val","title":"restart"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#returns_3","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#closed","text":"[Source] The connection has closed, which may signal that all remaining data is the payload body. fun ref closed( buffer: Reader ref) : None val","title":"closed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#parameters_3","text":"buffer: Reader ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#returns_4","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#private-functions","text":"","title":"Private Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#_deliver","text":"[Source] The parser is finished with the message headers so we can push it to the HTTPSession . The body may come later. fun ref _deliver() : None val","title":"_deliver"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#returns_5","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#_parse_request","text":"[Source] Look for \" \", the first line of an HTTP 'request' message. fun ref _parse_request( buffer: Reader ref) : (ParseError val | None val)","title":"_parse_request"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#parameters_4","text":"buffer: Reader ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#returns_6","text":"( ParseError val | None val)","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#_parse_response","text":"[Source] Look for \" \", the first line of an HTTP 'response' message. fun ref _parse_response( buffer: Reader ref) : (ParseError val | None val)","title":"_parse_response"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#parameters_5","text":"buffer: Reader ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#returns_7","text":"( ParseError val | None val)","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#_parse_headers","text":"[Source] Look for: \" : \" or the empty line that marks the end of all the headers. fun ref _parse_headers( buffer: Reader ref) : (ParseError val | None val)","title":"_parse_headers"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#parameters_6","text":"buffer: Reader ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#returns_8","text":"( ParseError val | None val)","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#_process_header","text":"[Source] Save a header value. Raise an error on not finding the colon or can't interpret the value. fun ref _process_header( line: String val) : None val ?","title":"_process_header"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#parameters_7","text":"line: String val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#returns_9","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#_setauth","text":"[Source] Fill in username and password from an authentication header. fun ref _setauth( auth: String val) : None val","title":"_setauth"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#parameters_8","text":"auth: String val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#returns_10","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#_set_header_end","text":"[Source] Line size is zero, so we have reached the end of the headers. Certain status codes mean there is no body. fun ref _set_header_end() : None val","title":"_set_header_end"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#returns_11","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#_parse_content_length","text":"[Source] Look for _expected_length bytes set by having seen a Content-Length header. We may not see it all at once but we process the lesser of what we need and what is available in the buffer. fun ref _parse_content_length( buffer: Reader ref) : None val","title":"_parse_content_length"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#parameters_9","text":"buffer: Reader ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#returns_12","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#_parse_chunk_start","text":"[Source] Look for the beginning of a chunk, which is a length in hex on a line terminated by CRLF. An explicit length of zero marks the end of the entire chunked message body. fun ref _parse_chunk_start( buffer: Reader ref) : (ParseError val | None val)","title":"_parse_chunk_start"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#parameters_10","text":"buffer: Reader ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#returns_13","text":"( ParseError val | None val)","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#_parse_chunk","text":"[Source] Look for a chunk of the size set by _parse_chunk_start . We may not see it all at once but we process the lesser of what we need and what is available in the buffer. ChunkedTransfer mode always delivers directly to the HTTPSession handler. fun ref _parse_chunk( buffer: Reader ref) : None val","title":"_parse_chunk"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#parameters_11","text":"buffer: Reader ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#returns_14","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#_parse_chunk_end","text":"[Source] Look for the CRLF that ends every chunk. AFter that we look for the next chunk, or that was the special ending chunk. fun ref _parse_chunk_end( buffer: Reader ref) : None val","title":"_parse_chunk_end"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#parameters_12","text":"buffer: Reader ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPParser/#returns_15","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/","text":"HTTPServer [Source] Runs an HTTP server. Server operation Information flow into the Server is as follows: Server listens for incoming TCP connections. RequestBuilder is the notification class for new connections. It creates a ServerConnection actor and receives all the raw data from TCP. It uses the HTTPParser to assemble complete Payload objects which are passed off to the ServerConnection . The ServerConnection actor deals with completely formed requests that have been parsed by the HTTPParser . This is where requests get dispatched to the caller-provided Handler. With streaming content, dispatch to the application's back end Handler has to happen before all of the body has been received. This has to be carefully choreographed because a Payload is an iso object and can only belong to one actor at a time, yet the RequestBuilder is running within the TCPConnection actor while the RequestHandler is running under the ServerConnection actor. Each incoming bufferful of body data, a ByteSeq val , is handed off to ServerConnection , to be passed on to the back end Handler. It turns out that the issues in sending a request and a response are the same, as are the issues in receiving them. Therefore the same notification interface, HTTPHandler is used on both ends, and the same sending interface HTTPSession is used. This makes the code easier to read as well. HTTPHandler.apply() will be the way the client/server is informed of a new response/request message. All of the headers will be present so that the request can be dispatched for correct processing. Subsequent calls to a new function HTTPHandler.chunk will provide the body data, if any. This stream will be terminated by a call to the new function HTTPHandler.finished . Pipelining of requests is to optimize the transmission of requests over slow links (such as over satellites), not to cause simultaneous execution on the server within one session. Multiple received simple requests ( GET , HEAD , and OPTIONS ) are queued in the server and passed to the back end application one at a time. If a client wants true parallel execution of requests, it should use multiple sessions (which many browsers actually do already). Since processing of a streaming response can take a relatively long time, acting on additional requests in the meantime does nothing but use up memory since responses would have to be queued. And if the server is being used to stream media, it is possible that these additional requests will themselves generate large responses. Instead we will just let the requests queue up until a maximum queue length is reached (a small number) at which point we will back-pressure the inbound TCP stream. actor tag HTTPServer Constructors create [Source] Create a server bound to the given host and service. To do this we listen for incoming TCP connections, with a notification handler that will create a server session actor for each one. new tag create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val), notify: ServerNotify iso, handler: HandlerFactory val, logger: Logger val = seq, host: String val = seq, service: String val = seq, limit: USize val = seq, sslctx: (SSLContext val | None val) = seq, reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | None val) = seq) : HTTPServer tag^ Parameters auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) notify: ServerNotify iso handler: HandlerFactory val logger: Logger val = seq host: String val = seq service: String val = seq limit: USize val = seq sslctx: ( SSLContext val | None val) = seq reversedns: ( AmbientAuth val | NetAuth val | DNSAuth val | None val) = seq Returns HTTPServer tag^ Public Behaviours register_session [Source] be register_session( conn: TCPConnection tag) Parameters conn: TCPConnection tag unregister_session [Source] be unregister_session( conn: TCPConnection tag) Parameters conn: TCPConnection tag set_handler [Source] Replace the request handler. be set_handler( handler: HandlerFactory val) Parameters handler: HandlerFactory val set_logger [Source] Replace the logger. be set_logger( logger: Logger val) Parameters logger: Logger val dispose [Source] Shut down the server gracefully. To do this we have to eliminate and source of further inputs. So we stop listening for new incoming TCP connections, and close any that still exist. be dispose() Public Functions local_address [Source] Returns the locally bound address. fun box local_address() : NetAddress val Returns NetAddress val Private Behaviours _listening [Source] Called when we are listening. be _listening( address: NetAddress val) Parameters address: NetAddress val _not_listening [Source] Called when we fail to listen. be _not_listening() _closed [Source] Called when we stop listening. be _closed()","title":"actor HTTPServer"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#httpserver","text":"[Source] Runs an HTTP server.","title":"HTTPServer"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#server-operation","text":"Information flow into the Server is as follows: Server listens for incoming TCP connections. RequestBuilder is the notification class for new connections. It creates a ServerConnection actor and receives all the raw data from TCP. It uses the HTTPParser to assemble complete Payload objects which are passed off to the ServerConnection . The ServerConnection actor deals with completely formed requests that have been parsed by the HTTPParser . This is where requests get dispatched to the caller-provided Handler. With streaming content, dispatch to the application's back end Handler has to happen before all of the body has been received. This has to be carefully choreographed because a Payload is an iso object and can only belong to one actor at a time, yet the RequestBuilder is running within the TCPConnection actor while the RequestHandler is running under the ServerConnection actor. Each incoming bufferful of body data, a ByteSeq val , is handed off to ServerConnection , to be passed on to the back end Handler. It turns out that the issues in sending a request and a response are the same, as are the issues in receiving them. Therefore the same notification interface, HTTPHandler is used on both ends, and the same sending interface HTTPSession is used. This makes the code easier to read as well. HTTPHandler.apply() will be the way the client/server is informed of a new response/request message. All of the headers will be present so that the request can be dispatched for correct processing. Subsequent calls to a new function HTTPHandler.chunk will provide the body data, if any. This stream will be terminated by a call to the new function HTTPHandler.finished . Pipelining of requests is to optimize the transmission of requests over slow links (such as over satellites), not to cause simultaneous execution on the server within one session. Multiple received simple requests ( GET , HEAD , and OPTIONS ) are queued in the server and passed to the back end application one at a time. If a client wants true parallel execution of requests, it should use multiple sessions (which many browsers actually do already). Since processing of a streaming response can take a relatively long time, acting on additional requests in the meantime does nothing but use up memory since responses would have to be queued. And if the server is being used to stream media, it is possible that these additional requests will themselves generate large responses. Instead we will just let the requests queue up until a maximum queue length is reached (a small number) at which point we will back-pressure the inbound TCP stream. actor tag HTTPServer","title":"Server operation"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#create","text":"[Source] Create a server bound to the given host and service. To do this we listen for incoming TCP connections, with a notification handler that will create a server session actor for each one. new tag create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val), notify: ServerNotify iso, handler: HandlerFactory val, logger: Logger val = seq, host: String val = seq, service: String val = seq, limit: USize val = seq, sslctx: (SSLContext val | None val) = seq, reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | None val) = seq) : HTTPServer tag^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#parameters","text":"auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) notify: ServerNotify iso handler: HandlerFactory val logger: Logger val = seq host: String val = seq service: String val = seq limit: USize val = seq sslctx: ( SSLContext val | None val) = seq reversedns: ( AmbientAuth val | NetAuth val | DNSAuth val | None val) = seq","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#returns","text":"HTTPServer tag^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#register_session","text":"[Source] be register_session( conn: TCPConnection tag)","title":"register_session"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#parameters_1","text":"conn: TCPConnection tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#unregister_session","text":"[Source] be unregister_session( conn: TCPConnection tag)","title":"unregister_session"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#parameters_2","text":"conn: TCPConnection tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#set_handler","text":"[Source] Replace the request handler. be set_handler( handler: HandlerFactory val)","title":"set_handler"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#parameters_3","text":"handler: HandlerFactory val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#set_logger","text":"[Source] Replace the logger. be set_logger( logger: Logger val)","title":"set_logger"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#parameters_4","text":"logger: Logger val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#dispose","text":"[Source] Shut down the server gracefully. To do this we have to eliminate and source of further inputs. So we stop listening for new incoming TCP connections, and close any that still exist. be dispose()","title":"dispose"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#local_address","text":"[Source] Returns the locally bound address. fun box local_address() : NetAddress val","title":"local_address"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#returns_1","text":"NetAddress val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#_listening","text":"[Source] Called when we are listening. be _listening( address: NetAddress val)","title":"_listening"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#parameters_5","text":"address: NetAddress val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#_not_listening","text":"[Source] Called when we fail to listen. be _not_listening()","title":"_not_listening"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPServer/#_closed","text":"[Source] Called when we stop listening. be _closed()","title":"_closed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPSession/","text":"HTTPSession [Source] An HTTP Session is the external API to the communication link between client and server. A session can only transfer one message at a time in each direction. The client and server each have their own ways of implementing this interface, but to application code (either in the client or in the server 'back end') this interface provides a common view of how information is passed into the http package. interface tag HTTPSession Public Behaviours apply [Source] Start sending a request or response. The Payload must have all its essential fields filled in at this point, because ownership is being transferred to the session actor. This begins an outbound message. be apply( payload: Payload val) Parameters payload: Payload val finish [Source] Indicate that all outbound add_chunk calls have been made and submission of the HTTP message is complete. be finish() dispose [Source] Close the connection from this end. be dispose() write [Source] Write raw byte stream to the outbound TCP connection. be write( data: (String val | Array[U8 val] val)) Parameters data: ( String val | Array [ U8 val] val) cancel [Source] Tell the session to stop sending an outbound message. be cancel( msg: Payload val) Parameters msg: Payload val Private Behaviours _mute [Source] Stop delivering incoming data to the handler. This may not be effective instantly. be _mute() _unmute [Source] Resume delivering incoming data to the handler. be _unmute() _deliver [Source] The appropriate Payload Builder will call this from the TCPConnection actor to start delivery of a new inbound message. If the Payload s transfer_mode is OneshotTransfer , this is the only notification that will happen for the message. Otherwise there will be one or more _chunk calls followed by a _finish call. be _deliver( payload: Payload val) Parameters payload: Payload val _chunk [Source] Deliver a piece of inbound body data to the application HTTPHandler This is called by the PayloadBuilder. be _chunk( data: (String val | Array[U8 val] val)) Parameters data: ( String val | Array [ U8 val] val) _finish [Source] Inidcates that the last inbound body chunk has been sent to _chunk . This is called by the PayloadBuilder. be _finish()","title":"interface HTTPSession"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPSession/#httpsession","text":"[Source] An HTTP Session is the external API to the communication link between client and server. A session can only transfer one message at a time in each direction. The client and server each have their own ways of implementing this interface, but to application code (either in the client or in the server 'back end') this interface provides a common view of how information is passed into the http package. interface tag HTTPSession","title":"HTTPSession"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPSession/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPSession/#apply","text":"[Source] Start sending a request or response. The Payload must have all its essential fields filled in at this point, because ownership is being transferred to the session actor. This begins an outbound message. be apply( payload: Payload val)","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPSession/#parameters","text":"payload: Payload val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPSession/#finish","text":"[Source] Indicate that all outbound add_chunk calls have been made and submission of the HTTP message is complete. be finish()","title":"finish"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPSession/#dispose","text":"[Source] Close the connection from this end. be dispose()","title":"dispose"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPSession/#write","text":"[Source] Write raw byte stream to the outbound TCP connection. be write( data: (String val | Array[U8 val] val))","title":"write"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPSession/#parameters_1","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPSession/#cancel","text":"[Source] Tell the session to stop sending an outbound message. be cancel( msg: Payload val)","title":"cancel"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPSession/#parameters_2","text":"msg: Payload val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPSession/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPSession/#_mute","text":"[Source] Stop delivering incoming data to the handler. This may not be effective instantly. be _mute()","title":"_mute"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPSession/#_unmute","text":"[Source] Resume delivering incoming data to the handler. be _unmute()","title":"_unmute"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPSession/#_deliver","text":"[Source] The appropriate Payload Builder will call this from the TCPConnection actor to start delivery of a new inbound message. If the Payload s transfer_mode is OneshotTransfer , this is the only notification that will happen for the message. Otherwise there will be one or more _chunk calls followed by a _finish call. be _deliver( payload: Payload val)","title":"_deliver"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPSession/#parameters_3","text":"payload: Payload val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPSession/#_chunk","text":"[Source] Deliver a piece of inbound body data to the application HTTPHandler This is called by the PayloadBuilder. be _chunk( data: (String val | Array[U8 val] val))","title":"_chunk"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPSession/#parameters_4","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HTTPSession/#_finish","text":"[Source] Inidcates that the last inbound body chunk has been sent to _chunk . This is called by the PayloadBuilder. be _finish()","title":"_finish"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HandlerFactory/","text":"HandlerFactory [Source] The TCP connections that underlie HTTP sessions get created within the http package at times that the application code can not predict. Yet, the application code has to provide custom hooks into these connections as they are created. To accomplish this, the application code provides an instance of a class that implements this interface. The HandlerFactory.apply method will be called when a new HTTPSession is created, giving the application a chance to create an instance of its own HTTPHandler . This happens on both client and server ends. interface ref HandlerFactory Public Functions apply [Source] Called by the HTTPSession when it needs a new instance of the application's HTTPHandler . It is suggested that the session value be passed to the constructor for the new HTTPHandler so that it is available for making throttle and unthrottle calls. fun box apply( session: HTTPSession tag) : HTTPHandler ref^ Parameters session: HTTPSession tag Returns HTTPHandler ref^","title":"interface HandlerFactory"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HandlerFactory/#handlerfactory","text":"[Source] The TCP connections that underlie HTTP sessions get created within the http package at times that the application code can not predict. Yet, the application code has to provide custom hooks into these connections as they are created. To accomplish this, the application code provides an instance of a class that implements this interface. The HandlerFactory.apply method will be called when a new HTTPSession is created, giving the application a chance to create an instance of its own HTTPHandler . This happens on both client and server ends. interface ref HandlerFactory","title":"HandlerFactory"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HandlerFactory/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HandlerFactory/#apply","text":"[Source] Called by the HTTPSession when it needs a new instance of the application's HTTPHandler . It is suggested that the session value be passed to the constructor for the new HTTPHandler so that it is available for making throttle and unthrottle calls. fun box apply( session: HTTPSession tag) : HTTPHandler ref^","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HandlerFactory/#parameters","text":"session: HTTPSession tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-HandlerFactory/#returns","text":"HTTPHandler ref^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Logger/","text":"Logger [Source] Handles logging request/response pairs. interface val Logger Public Functions apply [Source] fun val apply( ip: String val, body_size: USize val, request: Payload val, response: Payload val) : Any tag Parameters ip: String val body_size: USize val request: Payload val response: Payload val Returns Any tag","title":"interface Logger"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Logger/#logger","text":"[Source] Handles logging request/response pairs. interface val Logger","title":"Logger"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Logger/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Logger/#apply","text":"[Source] fun val apply( ip: String val, body_size: USize val, request: Payload val, response: Payload val) : Any tag","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Logger/#parameters","text":"ip: String val body_size: USize val request: Payload val response: Payload val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Logger/#returns","text":"Any tag","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-MimeTypes/","text":"MimeTypes [Source] Provide mapping from file names to MIME types. TODO load from /etc/mime.types primitive val MimeTypes Constructors create [Source] new val create() : MimeTypes val^ Returns MimeTypes val^ Public Functions apply [Source] Mapping is based on the file type, following the last period in the name. fun box apply( name: String val) : String val^ Parameters name: String val Returns String val^ eq [Source] fun box eq( that: MimeTypes val) : Bool val Parameters that: MimeTypes val Returns Bool val ne [Source] fun box ne( that: MimeTypes val) : Bool val Parameters that: MimeTypes val Returns Bool val","title":"primitive MimeTypes"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-MimeTypes/#mimetypes","text":"[Source] Provide mapping from file names to MIME types. TODO load from /etc/mime.types primitive val MimeTypes","title":"MimeTypes"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-MimeTypes/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-MimeTypes/#create","text":"[Source] new val create() : MimeTypes val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-MimeTypes/#returns","text":"MimeTypes val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-MimeTypes/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-MimeTypes/#apply","text":"[Source] Mapping is based on the file type, following the last period in the name. fun box apply( name: String val) : String val^","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-MimeTypes/#parameters","text":"name: String val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-MimeTypes/#returns_1","text":"String val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-MimeTypes/#eq","text":"[Source] fun box eq( that: MimeTypes val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-MimeTypes/#parameters_1","text":"that: MimeTypes val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-MimeTypes/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-MimeTypes/#ne","text":"[Source] fun box ne( that: MimeTypes val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-MimeTypes/#parameters_2","text":"that: MimeTypes val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-MimeTypes/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-OneshotTransfer/","text":"OneshotTransfer [Source] primitive val OneshotTransfer Constructors create [Source] new val create() : OneshotTransfer val^ Returns OneshotTransfer val^ Public Functions eq [Source] fun box eq( that: OneshotTransfer val) : Bool val Parameters that: OneshotTransfer val Returns Bool val ne [Source] fun box ne( that: OneshotTransfer val) : Bool val Parameters that: OneshotTransfer val Returns Bool val","title":"primitive OneshotTransfer"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-OneshotTransfer/#oneshottransfer","text":"[Source] primitive val OneshotTransfer","title":"OneshotTransfer"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-OneshotTransfer/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-OneshotTransfer/#create","text":"[Source] new val create() : OneshotTransfer val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-OneshotTransfer/#returns","text":"OneshotTransfer val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-OneshotTransfer/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-OneshotTransfer/#eq","text":"[Source] fun box eq( that: OneshotTransfer val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-OneshotTransfer/#parameters","text":"that: OneshotTransfer val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-OneshotTransfer/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-OneshotTransfer/#ne","text":"[Source] fun box ne( that: OneshotTransfer val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-OneshotTransfer/#parameters_1","text":"that: OneshotTransfer val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-OneshotTransfer/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ParseError/","text":"ParseError [Source] primitive val ParseError Constructors create [Source] new val create() : ParseError val^ Returns ParseError val^ Public Functions eq [Source] fun box eq( that: ParseError val) : Bool val Parameters that: ParseError val Returns Bool val ne [Source] fun box ne( that: ParseError val) : Bool val Parameters that: ParseError val Returns Bool val","title":"primitive ParseError"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ParseError/#parseerror","text":"[Source] primitive val ParseError","title":"ParseError"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ParseError/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ParseError/#create","text":"[Source] new val create() : ParseError val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ParseError/#returns","text":"ParseError val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ParseError/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ParseError/#eq","text":"[Source] fun box eq( that: ParseError val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ParseError/#parameters","text":"that: ParseError val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ParseError/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ParseError/#ne","text":"[Source] fun box ne( that: ParseError val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ParseError/#parameters_1","text":"that: ParseError val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ParseError/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/","text":"Payload [Source] This class represent a single HTTP message, which can be either a request or a response . Transfer Modes HTTP provides two ways to encode the transmission of a message 'body', of any size. This package supports both of them: StreamTransfer . This is used for payload bodies where the exact length is known in advance, including most transfers of files. It is selected by calling Payload.set_length with an integer bytecount. Appication buffer sizes determine how much data is fed to the TCP connection at once, but the total amount must match this size. ChunkedTransfer . This is used when the payload length can not be known in advance, but can be large. It is selected by calling Payload.set_length with a parameter of None . On the TCP link this mode can be detected because there is no Content-Length header at all, being replaced by the Transfer-Encoding: chunked header. In addition, the message body is separated into chunks, each with its own bytecount. As with StreamTransfer mode, transmission can be spread out over time with the difference that it is the original data source that determines the chunk size. If Payload.set_length is never called at all, a variation on StreamTransfer called OneshotTransfer is used. In this case, all of the message body is placed into the message at once, using Payload.add_chunk calls. The size will be determined when the message is submitted for transmission. Care must be taken not to consume too much memory, especially on a server where there can be multiple messages in transit at once. The type of transfer being used by an incoming message can be determined from its transfer_mode field, which will be one of the TransferMode types. Sequence For example, to send a message of possibly large size: Create the message with a call to Payload.request or Payload.response . Set the session field of the message. Call Payload.set_length to indicate the length of the body. Add any additional headers that may be required, such as Content-type . Submit the message for transmission by calling the either the HTTPSession.apply method (in servers) or the HTTPCLient.apply method in clients. Wait for the send_body notification. Make any number of calls to Payload.send_chunk . Call Payload.finish . To send a message of small, reasonable size (say, under 20KB), this simplified method can be used instead: Create the message with a call to Payload.request or Payload.response . Set the session field of the message. Add any additional headers that may be required, such as Content-type . Call add_chunk one or more times to add body data. Submit the message for transmission by calling the either the HTTPSession .apply method (in servers) or the HTTPClient .apply method in clients. class trn Payload Constructors request [Source] Create an HTTP request message. new iso request( method': String val = seq, url': URL val = seq) : Payload iso^ Parameters method': String val = seq url': URL val = seq Returns Payload iso^ response [Source] Create an HTTP response message. new iso response( status': Status val = seq) : Payload iso^ Parameters status': Status val = seq Returns Payload iso^ _empty [Source] Create an empty HTTP payload. new iso _empty( response': Bool val = seq) : Payload iso^ Parameters response': Bool val = seq Returns Payload iso^ Public fields var proto: String val [Source] The HTTP protocol string var status: U16 val [Source] Internal representation of the response Status . Will be 0 for HTTP requests. var method: String val [Source] The HTTP Method. GET , POST , DELETE , OPTIONS , ... For HTTP responses this will be the status string, for a 200 status this will be 200 OK , for 404 , 404 Not Found etc.. var url: URL val [Source] The HTTP request URL . It will be used for the HTTP path and the Host header. The user and password fields are ignored. For HTTP responses this will be an empty URL . var transfer_mode: ( ChunkedTransfer val | StreamTransfer val | OneshotTransfer val) [Source] Determines the transfer mode of this message. In case of outgoing requests or responses, use set_length to control the transfer mode. In case of incoming requests, this field determines how the request is transferred. var session: ( HTTPSession tag | None val) [Source] var username: String val [Source] The username extracted from an Authentication header of an HTTP request received via HTTPServer . This is not used and not sent using HTTPClient , use update to set an Authentication header instead. var password: String val [Source] The password extracted from an Authentication header of an HTTP request received via HTTPServer . This is not used and not sent using HTTPClient , use update to set an Authentication header instead. Public Functions apply [Source] Get a header. fun box apply( key: String val) : String val ? Parameters key: String val Returns String val ? is_safe [Source] A request method is \"safe\" if it does not modify state in the resource. These methods can be guaranteed not to have any body data. Return true for a safe request method, false otherwise. fun box is_safe() : Bool val Returns Bool val body [Source] Get the body in OneshotTransfer mode. In the other modes it raises an error. fun box body() : this- Array[(String val | Array[U8 val] val)] ref ? Returns this- Array [( String val | Array [ U8 val] val)] ref ? set_length [Source] Set the body length when known in advance. This determines the transfer mode that will be used. A parameter of 'None' will use Chunked Transfer Encoding. A numeric value will use Streamed transfer. Not calling this function at all will use Oneshot transfer. fun ref set_length( bytecount: (USize val | None val)) : None val Parameters bytecount: ( USize val | None val) Returns None val update [Source] Set any header. If we've already received the header, append the value as a comma separated list, as per RFC 2616 section 4.2. fun ref update( key: String val, value: String val) : Payload ref^ Parameters key: String val value: String val Returns Payload ref^ headers [Source] Get all the headers. fun box headers() : this- HashMap[String val, String val, HashEq[String val] val] ref Returns this- HashMap [ String val, String val, HashEq [ String val] val] ref body_size [Source] Get the total intended size of the body. ServerConnection accumulates actual size transferred for logging. fun box body_size() : (USize val | None val) Returns ( USize val | None val) add_chunk [Source] This is how application code adds data to the body in OneshotTransfer mode. For large bodies, call set_length and use send_chunk instead. fun ref add_chunk( data: (String val | Array[U8 val] val)) : Payload ref^ Parameters data: ( String val | Array [ U8 val] val) Returns Payload ref^ send_chunk [Source] This is how application code sends body data in StreamTransfer and ChunkedTransfer modes. For smaller body lengths, add_chunk in Oneshot mode can be used instead. fun box send_chunk( data: (String val | Array[U8 val] val)) : None val Parameters data: ( String val | Array [ U8 val] val) Returns None val finish [Source] Mark the end of body transmission. This does not do anything, and is unnecessary, in Oneshot mode. fun val finish() : None val Returns None val respond [Source] Start sending a response from the server to the client. fun val respond( response': Payload trn) : None val Parameters response': Payload trn Returns None val has_body [Source] Determines whether a message has a body portion. fun box has_body() : Bool val Returns Bool val Private Functions _client_fail [Source] Start sending an error response. fun val _client_fail() : None val Returns None val _write [Source] Writes the payload to an HTTPSession. Requests and Responses differ only in the first line of text - everything after that is the same format. fun val _write( keepalive: Bool val = seq, conn: TCPConnection tag) : None val Parameters keepalive: Bool val = seq conn: TCPConnection tag Returns None val _write_request [Source] Writes the 'request' parts of an HTTP message. fun val _write_request( keepalive: Bool val, conn: TCPConnection tag) : None val Parameters keepalive: Bool val conn: TCPConnection tag Returns None val _write_common [Source] Writes the parts of an HTTP message common to both requests and responses. fun val _write_common( conn: TCPConnection tag) : None val Parameters conn: TCPConnection tag Returns None val _write_response [Source] Write the response-specific parts of an HTTP message. This is the status line, consisting of the protocol name, the status value, and a string representation of the status (carried in the method field). Since writing it out is an actor behavior call, we go to the trouble of packaging it into a single string before sending. fun val _write_response( keepalive: Bool val, conn: TCPConnection tag) : None val Parameters keepalive: Bool val conn: TCPConnection tag Returns None val _write_headers [Source] Write all of the HTTP headers to the comm link. fun box _write_headers( conn: TCPConnection tag) : None val Parameters conn: TCPConnection tag Returns None val","title":"class Payload"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#payload","text":"[Source] This class represent a single HTTP message, which can be either a request or a response .","title":"Payload"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#transfer-modes","text":"HTTP provides two ways to encode the transmission of a message 'body', of any size. This package supports both of them: StreamTransfer . This is used for payload bodies where the exact length is known in advance, including most transfers of files. It is selected by calling Payload.set_length with an integer bytecount. Appication buffer sizes determine how much data is fed to the TCP connection at once, but the total amount must match this size. ChunkedTransfer . This is used when the payload length can not be known in advance, but can be large. It is selected by calling Payload.set_length with a parameter of None . On the TCP link this mode can be detected because there is no Content-Length header at all, being replaced by the Transfer-Encoding: chunked header. In addition, the message body is separated into chunks, each with its own bytecount. As with StreamTransfer mode, transmission can be spread out over time with the difference that it is the original data source that determines the chunk size. If Payload.set_length is never called at all, a variation on StreamTransfer called OneshotTransfer is used. In this case, all of the message body is placed into the message at once, using Payload.add_chunk calls. The size will be determined when the message is submitted for transmission. Care must be taken not to consume too much memory, especially on a server where there can be multiple messages in transit at once. The type of transfer being used by an incoming message can be determined from its transfer_mode field, which will be one of the TransferMode types.","title":"Transfer Modes"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#sequence","text":"For example, to send a message of possibly large size: Create the message with a call to Payload.request or Payload.response . Set the session field of the message. Call Payload.set_length to indicate the length of the body. Add any additional headers that may be required, such as Content-type . Submit the message for transmission by calling the either the HTTPSession.apply method (in servers) or the HTTPCLient.apply method in clients. Wait for the send_body notification. Make any number of calls to Payload.send_chunk . Call Payload.finish . To send a message of small, reasonable size (say, under 20KB), this simplified method can be used instead: Create the message with a call to Payload.request or Payload.response . Set the session field of the message. Add any additional headers that may be required, such as Content-type . Call add_chunk one or more times to add body data. Submit the message for transmission by calling the either the HTTPSession .apply method (in servers) or the HTTPClient .apply method in clients. class trn Payload","title":"Sequence"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#request","text":"[Source] Create an HTTP request message. new iso request( method': String val = seq, url': URL val = seq) : Payload iso^","title":"request"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#parameters","text":"method': String val = seq url': URL val = seq","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns","text":"Payload iso^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#response","text":"[Source] Create an HTTP response message. new iso response( status': Status val = seq) : Payload iso^","title":"response"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#parameters_1","text":"status': Status val = seq","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_1","text":"Payload iso^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#_empty","text":"[Source] Create an empty HTTP payload. new iso _empty( response': Bool val = seq) : Payload iso^","title":"_empty"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#parameters_2","text":"response': Bool val = seq","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_2","text":"Payload iso^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#public-fields","text":"","title":"Public fields"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#var-proto-string-val","text":"[Source] The HTTP protocol string","title":"var proto: String val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#var-status-u16-val","text":"[Source] Internal representation of the response Status . Will be 0 for HTTP requests.","title":"var status: U16 val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#var-method-string-val","text":"[Source] The HTTP Method. GET , POST , DELETE , OPTIONS , ... For HTTP responses this will be the status string, for a 200 status this will be 200 OK , for 404 , 404 Not Found etc..","title":"var method: String val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#var-url-url-val","text":"[Source] The HTTP request URL . It will be used for the HTTP path and the Host header. The user and password fields are ignored. For HTTP responses this will be an empty URL .","title":"var url: URL val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#var-transfer_mode-chunkedtransfer-val-streamtransfer-val-oneshottransfer-val","text":"[Source] Determines the transfer mode of this message. In case of outgoing requests or responses, use set_length to control the transfer mode. In case of incoming requests, this field determines how the request is transferred.","title":"var transfer_mode: (ChunkedTransfer val | StreamTransfer val | OneshotTransfer val)"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#var-session-httpsession-tag-none-val","text":"[Source]","title":"var session: (HTTPSession tag | None val)"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#var-username-string-val","text":"[Source] The username extracted from an Authentication header of an HTTP request received via HTTPServer . This is not used and not sent using HTTPClient , use update to set an Authentication header instead.","title":"var username: String val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#var-password-string-val","text":"[Source] The password extracted from an Authentication header of an HTTP request received via HTTPServer . This is not used and not sent using HTTPClient , use update to set an Authentication header instead.","title":"var password: String val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#apply","text":"[Source] Get a header. fun box apply( key: String val) : String val ?","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#parameters_3","text":"key: String val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_3","text":"String val ?","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#is_safe","text":"[Source] A request method is \"safe\" if it does not modify state in the resource. These methods can be guaranteed not to have any body data. Return true for a safe request method, false otherwise. fun box is_safe() : Bool val","title":"is_safe"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#body","text":"[Source] Get the body in OneshotTransfer mode. In the other modes it raises an error. fun box body() : this- Array[(String val | Array[U8 val] val)] ref ?","title":"body"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_5","text":"this- Array [( String val | Array [ U8 val] val)] ref ?","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#set_length","text":"[Source] Set the body length when known in advance. This determines the transfer mode that will be used. A parameter of 'None' will use Chunked Transfer Encoding. A numeric value will use Streamed transfer. Not calling this function at all will use Oneshot transfer. fun ref set_length( bytecount: (USize val | None val)) : None val","title":"set_length"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#parameters_4","text":"bytecount: ( USize val | None val)","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_6","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#update","text":"[Source] Set any header. If we've already received the header, append the value as a comma separated list, as per RFC 2616 section 4.2. fun ref update( key: String val, value: String val) : Payload ref^","title":"update"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#parameters_5","text":"key: String val value: String val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_7","text":"Payload ref^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#headers","text":"[Source] Get all the headers. fun box headers() : this- HashMap[String val, String val, HashEq[String val] val] ref","title":"headers"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_8","text":"this- HashMap [ String val, String val, HashEq [ String val] val] ref","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#body_size","text":"[Source] Get the total intended size of the body. ServerConnection accumulates actual size transferred for logging. fun box body_size() : (USize val | None val)","title":"body_size"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_9","text":"( USize val | None val)","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#add_chunk","text":"[Source] This is how application code adds data to the body in OneshotTransfer mode. For large bodies, call set_length and use send_chunk instead. fun ref add_chunk( data: (String val | Array[U8 val] val)) : Payload ref^","title":"add_chunk"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#parameters_6","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_10","text":"Payload ref^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#send_chunk","text":"[Source] This is how application code sends body data in StreamTransfer and ChunkedTransfer modes. For smaller body lengths, add_chunk in Oneshot mode can be used instead. fun box send_chunk( data: (String val | Array[U8 val] val)) : None val","title":"send_chunk"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#parameters_7","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_11","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#finish","text":"[Source] Mark the end of body transmission. This does not do anything, and is unnecessary, in Oneshot mode. fun val finish() : None val","title":"finish"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_12","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#respond","text":"[Source] Start sending a response from the server to the client. fun val respond( response': Payload trn) : None val","title":"respond"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#parameters_8","text":"response': Payload trn","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_13","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#has_body","text":"[Source] Determines whether a message has a body portion. fun box has_body() : Bool val","title":"has_body"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_14","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#private-functions","text":"","title":"Private Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#_client_fail","text":"[Source] Start sending an error response. fun val _client_fail() : None val","title":"_client_fail"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_15","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#_write","text":"[Source] Writes the payload to an HTTPSession. Requests and Responses differ only in the first line of text - everything after that is the same format. fun val _write( keepalive: Bool val = seq, conn: TCPConnection tag) : None val","title":"_write"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#parameters_9","text":"keepalive: Bool val = seq conn: TCPConnection tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_16","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#_write_request","text":"[Source] Writes the 'request' parts of an HTTP message. fun val _write_request( keepalive: Bool val, conn: TCPConnection tag) : None val","title":"_write_request"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#parameters_10","text":"keepalive: Bool val conn: TCPConnection tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_17","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#_write_common","text":"[Source] Writes the parts of an HTTP message common to both requests and responses. fun val _write_common( conn: TCPConnection tag) : None val","title":"_write_common"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#parameters_11","text":"conn: TCPConnection tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_18","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#_write_response","text":"[Source] Write the response-specific parts of an HTTP message. This is the status line, consisting of the protocol name, the status value, and a string representation of the status (carried in the method field). Since writing it out is an actor behavior call, we go to the trouble of packaging it into a single string before sending. fun val _write_response( keepalive: Bool val, conn: TCPConnection tag) : None val","title":"_write_response"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#parameters_12","text":"keepalive: Bool val conn: TCPConnection tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_19","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#_write_headers","text":"[Source] Write all of the HTTP headers to the comm link. fun box _write_headers( conn: TCPConnection tag) : None val","title":"_write_headers"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#parameters_13","text":"conn: TCPConnection tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Payload/#returns_20","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ServerNotify/","text":"ServerNotify [Source] Notifications about the creation and closing of TCPConnection s within HTTP servers. interface ref ServerNotify Public Functions listening [Source] Called when we are listening. fun ref listening( server: HTTPServer ref) : None val Parameters server: HTTPServer ref Returns None val not_listening [Source] Called when we fail to listen. fun ref not_listening( server: HTTPServer ref) : None val Parameters server: HTTPServer ref Returns None val closed [Source] Called when we stop listening. fun ref closed( server: HTTPServer ref) : None val Parameters server: HTTPServer ref Returns None val","title":"interface ServerNotify"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ServerNotify/#servernotify","text":"[Source] Notifications about the creation and closing of TCPConnection s within HTTP servers. interface ref ServerNotify","title":"ServerNotify"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ServerNotify/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ServerNotify/#listening","text":"[Source] Called when we are listening. fun ref listening( server: HTTPServer ref) : None val","title":"listening"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ServerNotify/#parameters","text":"server: HTTPServer ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ServerNotify/#returns","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ServerNotify/#not_listening","text":"[Source] Called when we fail to listen. fun ref not_listening( server: HTTPServer ref) : None val","title":"not_listening"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ServerNotify/#parameters_1","text":"server: HTTPServer ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ServerNotify/#returns_1","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ServerNotify/#closed","text":"[Source] Called when we stop listening. fun ref closed( server: HTTPServer ref) : None val","title":"closed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ServerNotify/#parameters_2","text":"server: HTTPServer ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-ServerNotify/#returns_2","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Status/","text":"Status [Source] trait val Status Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val","title":"trait Status"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Status/#status","text":"[Source] trait val Status","title":"Status"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Status/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Status/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Status/#returns","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Status/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-Status/#returns_1","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusAccepted/","text":"StatusAccepted [Source] primitive val StatusAccepted is Status val Implements Status val Constructors create [Source] new val create() : StatusAccepted val^ Returns StatusAccepted val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusAccepted val) : Bool val Parameters that: StatusAccepted val Returns Bool val ne [Source] fun box ne( that: StatusAccepted val) : Bool val Parameters that: StatusAccepted val Returns Bool val","title":"primitive StatusAccepted"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusAccepted/#statusaccepted","text":"[Source] primitive val StatusAccepted is Status val","title":"StatusAccepted"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusAccepted/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusAccepted/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusAccepted/#create","text":"[Source] new val create() : StatusAccepted val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusAccepted/#returns","text":"StatusAccepted val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusAccepted/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusAccepted/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusAccepted/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusAccepted/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusAccepted/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusAccepted/#eq","text":"[Source] fun box eq( that: StatusAccepted val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusAccepted/#parameters","text":"that: StatusAccepted val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusAccepted/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusAccepted/#ne","text":"[Source] fun box ne( that: StatusAccepted val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusAccepted/#parameters_1","text":"that: StatusAccepted val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusAccepted/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadGateway/","text":"StatusBadGateway [Source] primitive val StatusBadGateway is Status val Implements Status val Constructors create [Source] new val create() : StatusBadGateway val^ Returns StatusBadGateway val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusBadGateway val) : Bool val Parameters that: StatusBadGateway val Returns Bool val ne [Source] fun box ne( that: StatusBadGateway val) : Bool val Parameters that: StatusBadGateway val Returns Bool val","title":"primitive StatusBadGateway"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadGateway/#statusbadgateway","text":"[Source] primitive val StatusBadGateway is Status val","title":"StatusBadGateway"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadGateway/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadGateway/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadGateway/#create","text":"[Source] new val create() : StatusBadGateway val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadGateway/#returns","text":"StatusBadGateway val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadGateway/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadGateway/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadGateway/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadGateway/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadGateway/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadGateway/#eq","text":"[Source] fun box eq( that: StatusBadGateway val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadGateway/#parameters","text":"that: StatusBadGateway val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadGateway/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadGateway/#ne","text":"[Source] fun box ne( that: StatusBadGateway val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadGateway/#parameters_1","text":"that: StatusBadGateway val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadGateway/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadRequest/","text":"StatusBadRequest [Source] primitive val StatusBadRequest is Status val Implements Status val Constructors create [Source] new val create() : StatusBadRequest val^ Returns StatusBadRequest val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusBadRequest val) : Bool val Parameters that: StatusBadRequest val Returns Bool val ne [Source] fun box ne( that: StatusBadRequest val) : Bool val Parameters that: StatusBadRequest val Returns Bool val","title":"primitive StatusBadRequest"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadRequest/#statusbadrequest","text":"[Source] primitive val StatusBadRequest is Status val","title":"StatusBadRequest"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadRequest/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadRequest/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadRequest/#create","text":"[Source] new val create() : StatusBadRequest val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadRequest/#returns","text":"StatusBadRequest val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadRequest/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadRequest/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadRequest/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadRequest/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadRequest/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadRequest/#eq","text":"[Source] fun box eq( that: StatusBadRequest val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadRequest/#parameters","text":"that: StatusBadRequest val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadRequest/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadRequest/#ne","text":"[Source] fun box ne( that: StatusBadRequest val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadRequest/#parameters_1","text":"that: StatusBadRequest val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusBadRequest/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusConflict/","text":"StatusConflict [Source] primitive val StatusConflict is Status val Implements Status val Constructors create [Source] new val create() : StatusConflict val^ Returns StatusConflict val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusConflict val) : Bool val Parameters that: StatusConflict val Returns Bool val ne [Source] fun box ne( that: StatusConflict val) : Bool val Parameters that: StatusConflict val Returns Bool val","title":"primitive StatusConflict"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusConflict/#statusconflict","text":"[Source] primitive val StatusConflict is Status val","title":"StatusConflict"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusConflict/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusConflict/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusConflict/#create","text":"[Source] new val create() : StatusConflict val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusConflict/#returns","text":"StatusConflict val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusConflict/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusConflict/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusConflict/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusConflict/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusConflict/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusConflict/#eq","text":"[Source] fun box eq( that: StatusConflict val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusConflict/#parameters","text":"that: StatusConflict val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusConflict/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusConflict/#ne","text":"[Source] fun box ne( that: StatusConflict val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusConflict/#parameters_1","text":"that: StatusConflict val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusConflict/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusContinue/","text":"StatusContinue [Source] primitive val StatusContinue is Status val Implements Status val Constructors create [Source] new val create() : StatusContinue val^ Returns StatusContinue val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusContinue val) : Bool val Parameters that: StatusContinue val Returns Bool val ne [Source] fun box ne( that: StatusContinue val) : Bool val Parameters that: StatusContinue val Returns Bool val","title":"primitive StatusContinue"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusContinue/#statuscontinue","text":"[Source] primitive val StatusContinue is Status val","title":"StatusContinue"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusContinue/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusContinue/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusContinue/#create","text":"[Source] new val create() : StatusContinue val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusContinue/#returns","text":"StatusContinue val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusContinue/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusContinue/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusContinue/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusContinue/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusContinue/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusContinue/#eq","text":"[Source] fun box eq( that: StatusContinue val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusContinue/#parameters","text":"that: StatusContinue val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusContinue/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusContinue/#ne","text":"[Source] fun box ne( that: StatusContinue val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusContinue/#parameters_1","text":"that: StatusContinue val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusContinue/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusCreated/","text":"StatusCreated [Source] primitive val StatusCreated is Status val Implements Status val Constructors create [Source] new val create() : StatusCreated val^ Returns StatusCreated val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusCreated val) : Bool val Parameters that: StatusCreated val Returns Bool val ne [Source] fun box ne( that: StatusCreated val) : Bool val Parameters that: StatusCreated val Returns Bool val","title":"primitive StatusCreated"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusCreated/#statuscreated","text":"[Source] primitive val StatusCreated is Status val","title":"StatusCreated"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusCreated/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusCreated/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusCreated/#create","text":"[Source] new val create() : StatusCreated val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusCreated/#returns","text":"StatusCreated val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusCreated/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusCreated/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusCreated/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusCreated/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusCreated/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusCreated/#eq","text":"[Source] fun box eq( that: StatusCreated val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusCreated/#parameters","text":"that: StatusCreated val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusCreated/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusCreated/#ne","text":"[Source] fun box ne( that: StatusCreated val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusCreated/#parameters_1","text":"that: StatusCreated val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusCreated/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusExpectationFailed/","text":"StatusExpectationFailed [Source] primitive val StatusExpectationFailed is Status val Implements Status val Constructors create [Source] new val create() : StatusExpectationFailed val^ Returns StatusExpectationFailed val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusExpectationFailed val) : Bool val Parameters that: StatusExpectationFailed val Returns Bool val ne [Source] fun box ne( that: StatusExpectationFailed val) : Bool val Parameters that: StatusExpectationFailed val Returns Bool val","title":"primitive StatusExpectationFailed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusExpectationFailed/#statusexpectationfailed","text":"[Source] primitive val StatusExpectationFailed is Status val","title":"StatusExpectationFailed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusExpectationFailed/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusExpectationFailed/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusExpectationFailed/#create","text":"[Source] new val create() : StatusExpectationFailed val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusExpectationFailed/#returns","text":"StatusExpectationFailed val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusExpectationFailed/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusExpectationFailed/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusExpectationFailed/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusExpectationFailed/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusExpectationFailed/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusExpectationFailed/#eq","text":"[Source] fun box eq( that: StatusExpectationFailed val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusExpectationFailed/#parameters","text":"that: StatusExpectationFailed val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusExpectationFailed/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusExpectationFailed/#ne","text":"[Source] fun box ne( that: StatusExpectationFailed val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusExpectationFailed/#parameters_1","text":"that: StatusExpectationFailed val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusExpectationFailed/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusForbidden/","text":"StatusForbidden [Source] primitive val StatusForbidden is Status val Implements Status val Constructors create [Source] new val create() : StatusForbidden val^ Returns StatusForbidden val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusForbidden val) : Bool val Parameters that: StatusForbidden val Returns Bool val ne [Source] fun box ne( that: StatusForbidden val) : Bool val Parameters that: StatusForbidden val Returns Bool val","title":"primitive StatusForbidden"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusForbidden/#statusforbidden","text":"[Source] primitive val StatusForbidden is Status val","title":"StatusForbidden"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusForbidden/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusForbidden/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusForbidden/#create","text":"[Source] new val create() : StatusForbidden val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusForbidden/#returns","text":"StatusForbidden val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusForbidden/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusForbidden/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusForbidden/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusForbidden/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusForbidden/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusForbidden/#eq","text":"[Source] fun box eq( that: StatusForbidden val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusForbidden/#parameters","text":"that: StatusForbidden val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusForbidden/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusForbidden/#ne","text":"[Source] fun box ne( that: StatusForbidden val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusForbidden/#parameters_1","text":"that: StatusForbidden val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusForbidden/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusFound/","text":"StatusFound [Source] primitive val StatusFound is Status val Implements Status val Constructors create [Source] new val create() : StatusFound val^ Returns StatusFound val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusFound val) : Bool val Parameters that: StatusFound val Returns Bool val ne [Source] fun box ne( that: StatusFound val) : Bool val Parameters that: StatusFound val Returns Bool val","title":"primitive StatusFound"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusFound/#statusfound","text":"[Source] primitive val StatusFound is Status val","title":"StatusFound"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusFound/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusFound/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusFound/#create","text":"[Source] new val create() : StatusFound val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusFound/#returns","text":"StatusFound val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusFound/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusFound/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusFound/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusFound/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusFound/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusFound/#eq","text":"[Source] fun box eq( that: StatusFound val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusFound/#parameters","text":"that: StatusFound val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusFound/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusFound/#ne","text":"[Source] fun box ne( that: StatusFound val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusFound/#parameters_1","text":"that: StatusFound val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusFound/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGatewayTimeout/","text":"StatusGatewayTimeout [Source] primitive val StatusGatewayTimeout is Status val Implements Status val Constructors create [Source] new val create() : StatusGatewayTimeout val^ Returns StatusGatewayTimeout val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusGatewayTimeout val) : Bool val Parameters that: StatusGatewayTimeout val Returns Bool val ne [Source] fun box ne( that: StatusGatewayTimeout val) : Bool val Parameters that: StatusGatewayTimeout val Returns Bool val","title":"primitive StatusGatewayTimeout"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGatewayTimeout/#statusgatewaytimeout","text":"[Source] primitive val StatusGatewayTimeout is Status val","title":"StatusGatewayTimeout"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGatewayTimeout/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGatewayTimeout/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGatewayTimeout/#create","text":"[Source] new val create() : StatusGatewayTimeout val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGatewayTimeout/#returns","text":"StatusGatewayTimeout val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGatewayTimeout/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGatewayTimeout/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGatewayTimeout/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGatewayTimeout/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGatewayTimeout/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGatewayTimeout/#eq","text":"[Source] fun box eq( that: StatusGatewayTimeout val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGatewayTimeout/#parameters","text":"that: StatusGatewayTimeout val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGatewayTimeout/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGatewayTimeout/#ne","text":"[Source] fun box ne( that: StatusGatewayTimeout val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGatewayTimeout/#parameters_1","text":"that: StatusGatewayTimeout val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGatewayTimeout/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGone/","text":"StatusGone [Source] primitive val StatusGone is Status val Implements Status val Constructors create [Source] new val create() : StatusGone val^ Returns StatusGone val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusGone val) : Bool val Parameters that: StatusGone val Returns Bool val ne [Source] fun box ne( that: StatusGone val) : Bool val Parameters that: StatusGone val Returns Bool val","title":"primitive StatusGone"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGone/#statusgone","text":"[Source] primitive val StatusGone is Status val","title":"StatusGone"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGone/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGone/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGone/#create","text":"[Source] new val create() : StatusGone val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGone/#returns","text":"StatusGone val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGone/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGone/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGone/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGone/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGone/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGone/#eq","text":"[Source] fun box eq( that: StatusGone val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGone/#parameters","text":"that: StatusGone val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGone/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGone/#ne","text":"[Source] fun box ne( that: StatusGone val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGone/#parameters_1","text":"that: StatusGone val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusGone/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusHTTPVersionNotSupported/","text":"StatusHTTPVersionNotSupported [Source] primitive val StatusHTTPVersionNotSupported is Status val Implements Status val Constructors create [Source] new val create() : StatusHTTPVersionNotSupported val^ Returns StatusHTTPVersionNotSupported val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusHTTPVersionNotSupported val) : Bool val Parameters that: StatusHTTPVersionNotSupported val Returns Bool val ne [Source] fun box ne( that: StatusHTTPVersionNotSupported val) : Bool val Parameters that: StatusHTTPVersionNotSupported val Returns Bool val","title":"primitive StatusHTTPVersionNotSupported"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusHTTPVersionNotSupported/#statushttpversionnotsupported","text":"[Source] primitive val StatusHTTPVersionNotSupported is Status val","title":"StatusHTTPVersionNotSupported"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusHTTPVersionNotSupported/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusHTTPVersionNotSupported/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusHTTPVersionNotSupported/#create","text":"[Source] new val create() : StatusHTTPVersionNotSupported val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusHTTPVersionNotSupported/#returns","text":"StatusHTTPVersionNotSupported val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusHTTPVersionNotSupported/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusHTTPVersionNotSupported/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusHTTPVersionNotSupported/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusHTTPVersionNotSupported/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusHTTPVersionNotSupported/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusHTTPVersionNotSupported/#eq","text":"[Source] fun box eq( that: StatusHTTPVersionNotSupported val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusHTTPVersionNotSupported/#parameters","text":"that: StatusHTTPVersionNotSupported val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusHTTPVersionNotSupported/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusHTTPVersionNotSupported/#ne","text":"[Source] fun box ne( that: StatusHTTPVersionNotSupported val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusHTTPVersionNotSupported/#parameters_1","text":"that: StatusHTTPVersionNotSupported val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusHTTPVersionNotSupported/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusInternalServerError/","text":"StatusInternalServerError [Source] primitive val StatusInternalServerError is Status val Implements Status val Constructors create [Source] new val create() : StatusInternalServerError val^ Returns StatusInternalServerError val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusInternalServerError val) : Bool val Parameters that: StatusInternalServerError val Returns Bool val ne [Source] fun box ne( that: StatusInternalServerError val) : Bool val Parameters that: StatusInternalServerError val Returns Bool val","title":"primitive StatusInternalServerError"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusInternalServerError/#statusinternalservererror","text":"[Source] primitive val StatusInternalServerError is Status val","title":"StatusInternalServerError"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusInternalServerError/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusInternalServerError/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusInternalServerError/#create","text":"[Source] new val create() : StatusInternalServerError val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusInternalServerError/#returns","text":"StatusInternalServerError val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusInternalServerError/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusInternalServerError/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusInternalServerError/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusInternalServerError/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusInternalServerError/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusInternalServerError/#eq","text":"[Source] fun box eq( that: StatusInternalServerError val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusInternalServerError/#parameters","text":"that: StatusInternalServerError val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusInternalServerError/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusInternalServerError/#ne","text":"[Source] fun box ne( that: StatusInternalServerError val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusInternalServerError/#parameters_1","text":"that: StatusInternalServerError val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusInternalServerError/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusLengthRequired/","text":"StatusLengthRequired [Source] primitive val StatusLengthRequired is Status val Implements Status val Constructors create [Source] new val create() : StatusLengthRequired val^ Returns StatusLengthRequired val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusLengthRequired val) : Bool val Parameters that: StatusLengthRequired val Returns Bool val ne [Source] fun box ne( that: StatusLengthRequired val) : Bool val Parameters that: StatusLengthRequired val Returns Bool val","title":"primitive StatusLengthRequired"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusLengthRequired/#statuslengthrequired","text":"[Source] primitive val StatusLengthRequired is Status val","title":"StatusLengthRequired"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusLengthRequired/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusLengthRequired/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusLengthRequired/#create","text":"[Source] new val create() : StatusLengthRequired val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusLengthRequired/#returns","text":"StatusLengthRequired val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusLengthRequired/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusLengthRequired/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusLengthRequired/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusLengthRequired/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusLengthRequired/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusLengthRequired/#eq","text":"[Source] fun box eq( that: StatusLengthRequired val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusLengthRequired/#parameters","text":"that: StatusLengthRequired val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusLengthRequired/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusLengthRequired/#ne","text":"[Source] fun box ne( that: StatusLengthRequired val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusLengthRequired/#parameters_1","text":"that: StatusLengthRequired val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusLengthRequired/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMethodNotAllowed/","text":"StatusMethodNotAllowed [Source] primitive val StatusMethodNotAllowed is Status val Implements Status val Constructors create [Source] new val create() : StatusMethodNotAllowed val^ Returns StatusMethodNotAllowed val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusMethodNotAllowed val) : Bool val Parameters that: StatusMethodNotAllowed val Returns Bool val ne [Source] fun box ne( that: StatusMethodNotAllowed val) : Bool val Parameters that: StatusMethodNotAllowed val Returns Bool val","title":"primitive StatusMethodNotAllowed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMethodNotAllowed/#statusmethodnotallowed","text":"[Source] primitive val StatusMethodNotAllowed is Status val","title":"StatusMethodNotAllowed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMethodNotAllowed/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMethodNotAllowed/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMethodNotAllowed/#create","text":"[Source] new val create() : StatusMethodNotAllowed val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMethodNotAllowed/#returns","text":"StatusMethodNotAllowed val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMethodNotAllowed/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMethodNotAllowed/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMethodNotAllowed/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMethodNotAllowed/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMethodNotAllowed/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMethodNotAllowed/#eq","text":"[Source] fun box eq( that: StatusMethodNotAllowed val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMethodNotAllowed/#parameters","text":"that: StatusMethodNotAllowed val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMethodNotAllowed/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMethodNotAllowed/#ne","text":"[Source] fun box ne( that: StatusMethodNotAllowed val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMethodNotAllowed/#parameters_1","text":"that: StatusMethodNotAllowed val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMethodNotAllowed/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMovedPermanently/","text":"StatusMovedPermanently [Source] primitive val StatusMovedPermanently is Status val Implements Status val Constructors create [Source] new val create() : StatusMovedPermanently val^ Returns StatusMovedPermanently val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusMovedPermanently val) : Bool val Parameters that: StatusMovedPermanently val Returns Bool val ne [Source] fun box ne( that: StatusMovedPermanently val) : Bool val Parameters that: StatusMovedPermanently val Returns Bool val","title":"primitive StatusMovedPermanently"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMovedPermanently/#statusmovedpermanently","text":"[Source] primitive val StatusMovedPermanently is Status val","title":"StatusMovedPermanently"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMovedPermanently/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMovedPermanently/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMovedPermanently/#create","text":"[Source] new val create() : StatusMovedPermanently val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMovedPermanently/#returns","text":"StatusMovedPermanently val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMovedPermanently/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMovedPermanently/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMovedPermanently/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMovedPermanently/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMovedPermanently/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMovedPermanently/#eq","text":"[Source] fun box eq( that: StatusMovedPermanently val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMovedPermanently/#parameters","text":"that: StatusMovedPermanently val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMovedPermanently/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMovedPermanently/#ne","text":"[Source] fun box ne( that: StatusMovedPermanently val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMovedPermanently/#parameters_1","text":"that: StatusMovedPermanently val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMovedPermanently/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMultipleChoices/","text":"StatusMultipleChoices [Source] primitive val StatusMultipleChoices is Status val Implements Status val Constructors create [Source] new val create() : StatusMultipleChoices val^ Returns StatusMultipleChoices val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusMultipleChoices val) : Bool val Parameters that: StatusMultipleChoices val Returns Bool val ne [Source] fun box ne( that: StatusMultipleChoices val) : Bool val Parameters that: StatusMultipleChoices val Returns Bool val","title":"primitive StatusMultipleChoices"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMultipleChoices/#statusmultiplechoices","text":"[Source] primitive val StatusMultipleChoices is Status val","title":"StatusMultipleChoices"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMultipleChoices/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMultipleChoices/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMultipleChoices/#create","text":"[Source] new val create() : StatusMultipleChoices val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMultipleChoices/#returns","text":"StatusMultipleChoices val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMultipleChoices/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMultipleChoices/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMultipleChoices/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMultipleChoices/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMultipleChoices/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMultipleChoices/#eq","text":"[Source] fun box eq( that: StatusMultipleChoices val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMultipleChoices/#parameters","text":"that: StatusMultipleChoices val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMultipleChoices/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMultipleChoices/#ne","text":"[Source] fun box ne( that: StatusMultipleChoices val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMultipleChoices/#parameters_1","text":"that: StatusMultipleChoices val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusMultipleChoices/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNetworkAuthenticationRequired/","text":"StatusNetworkAuthenticationRequired [Source] primitive val StatusNetworkAuthenticationRequired is Status val Implements Status val Constructors create [Source] new val create() : StatusNetworkAuthenticationRequired val^ Returns StatusNetworkAuthenticationRequired val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusNetworkAuthenticationRequired val) : Bool val Parameters that: StatusNetworkAuthenticationRequired val Returns Bool val ne [Source] fun box ne( that: StatusNetworkAuthenticationRequired val) : Bool val Parameters that: StatusNetworkAuthenticationRequired val Returns Bool val","title":"primitive StatusNetworkAuthenticationRequired"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNetworkAuthenticationRequired/#statusnetworkauthenticationrequired","text":"[Source] primitive val StatusNetworkAuthenticationRequired is Status val","title":"StatusNetworkAuthenticationRequired"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNetworkAuthenticationRequired/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNetworkAuthenticationRequired/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNetworkAuthenticationRequired/#create","text":"[Source] new val create() : StatusNetworkAuthenticationRequired val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNetworkAuthenticationRequired/#returns","text":"StatusNetworkAuthenticationRequired val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNetworkAuthenticationRequired/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNetworkAuthenticationRequired/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNetworkAuthenticationRequired/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNetworkAuthenticationRequired/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNetworkAuthenticationRequired/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNetworkAuthenticationRequired/#eq","text":"[Source] fun box eq( that: StatusNetworkAuthenticationRequired val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNetworkAuthenticationRequired/#parameters","text":"that: StatusNetworkAuthenticationRequired val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNetworkAuthenticationRequired/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNetworkAuthenticationRequired/#ne","text":"[Source] fun box ne( that: StatusNetworkAuthenticationRequired val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNetworkAuthenticationRequired/#parameters_1","text":"that: StatusNetworkAuthenticationRequired val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNetworkAuthenticationRequired/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNoContent/","text":"StatusNoContent [Source] primitive val StatusNoContent is Status val Implements Status val Constructors create [Source] new val create() : StatusNoContent val^ Returns StatusNoContent val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusNoContent val) : Bool val Parameters that: StatusNoContent val Returns Bool val ne [Source] fun box ne( that: StatusNoContent val) : Bool val Parameters that: StatusNoContent val Returns Bool val","title":"primitive StatusNoContent"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNoContent/#statusnocontent","text":"[Source] primitive val StatusNoContent is Status val","title":"StatusNoContent"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNoContent/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNoContent/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNoContent/#create","text":"[Source] new val create() : StatusNoContent val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNoContent/#returns","text":"StatusNoContent val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNoContent/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNoContent/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNoContent/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNoContent/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNoContent/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNoContent/#eq","text":"[Source] fun box eq( that: StatusNoContent val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNoContent/#parameters","text":"that: StatusNoContent val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNoContent/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNoContent/#ne","text":"[Source] fun box ne( that: StatusNoContent val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNoContent/#parameters_1","text":"that: StatusNoContent val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNoContent/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNonAuthoritativeInfo/","text":"StatusNonAuthoritativeInfo [Source] primitive val StatusNonAuthoritativeInfo is Status val Implements Status val Constructors create [Source] new val create() : StatusNonAuthoritativeInfo val^ Returns StatusNonAuthoritativeInfo val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusNonAuthoritativeInfo val) : Bool val Parameters that: StatusNonAuthoritativeInfo val Returns Bool val ne [Source] fun box ne( that: StatusNonAuthoritativeInfo val) : Bool val Parameters that: StatusNonAuthoritativeInfo val Returns Bool val","title":"primitive StatusNonAuthoritativeInfo"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNonAuthoritativeInfo/#statusnonauthoritativeinfo","text":"[Source] primitive val StatusNonAuthoritativeInfo is Status val","title":"StatusNonAuthoritativeInfo"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNonAuthoritativeInfo/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNonAuthoritativeInfo/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNonAuthoritativeInfo/#create","text":"[Source] new val create() : StatusNonAuthoritativeInfo val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNonAuthoritativeInfo/#returns","text":"StatusNonAuthoritativeInfo val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNonAuthoritativeInfo/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNonAuthoritativeInfo/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNonAuthoritativeInfo/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNonAuthoritativeInfo/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNonAuthoritativeInfo/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNonAuthoritativeInfo/#eq","text":"[Source] fun box eq( that: StatusNonAuthoritativeInfo val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNonAuthoritativeInfo/#parameters","text":"that: StatusNonAuthoritativeInfo val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNonAuthoritativeInfo/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNonAuthoritativeInfo/#ne","text":"[Source] fun box ne( that: StatusNonAuthoritativeInfo val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNonAuthoritativeInfo/#parameters_1","text":"that: StatusNonAuthoritativeInfo val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNonAuthoritativeInfo/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotAcceptable/","text":"StatusNotAcceptable [Source] primitive val StatusNotAcceptable is Status val Implements Status val Constructors create [Source] new val create() : StatusNotAcceptable val^ Returns StatusNotAcceptable val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusNotAcceptable val) : Bool val Parameters that: StatusNotAcceptable val Returns Bool val ne [Source] fun box ne( that: StatusNotAcceptable val) : Bool val Parameters that: StatusNotAcceptable val Returns Bool val","title":"primitive StatusNotAcceptable"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotAcceptable/#statusnotacceptable","text":"[Source] primitive val StatusNotAcceptable is Status val","title":"StatusNotAcceptable"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotAcceptable/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotAcceptable/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotAcceptable/#create","text":"[Source] new val create() : StatusNotAcceptable val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotAcceptable/#returns","text":"StatusNotAcceptable val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotAcceptable/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotAcceptable/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotAcceptable/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotAcceptable/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotAcceptable/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotAcceptable/#eq","text":"[Source] fun box eq( that: StatusNotAcceptable val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotAcceptable/#parameters","text":"that: StatusNotAcceptable val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotAcceptable/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotAcceptable/#ne","text":"[Source] fun box ne( that: StatusNotAcceptable val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotAcceptable/#parameters_1","text":"that: StatusNotAcceptable val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotAcceptable/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotFound/","text":"StatusNotFound [Source] primitive val StatusNotFound is Status val Implements Status val Constructors create [Source] new val create() : StatusNotFound val^ Returns StatusNotFound val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusNotFound val) : Bool val Parameters that: StatusNotFound val Returns Bool val ne [Source] fun box ne( that: StatusNotFound val) : Bool val Parameters that: StatusNotFound val Returns Bool val","title":"primitive StatusNotFound"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotFound/#statusnotfound","text":"[Source] primitive val StatusNotFound is Status val","title":"StatusNotFound"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotFound/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotFound/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotFound/#create","text":"[Source] new val create() : StatusNotFound val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotFound/#returns","text":"StatusNotFound val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotFound/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotFound/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotFound/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotFound/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotFound/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotFound/#eq","text":"[Source] fun box eq( that: StatusNotFound val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotFound/#parameters","text":"that: StatusNotFound val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotFound/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotFound/#ne","text":"[Source] fun box ne( that: StatusNotFound val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotFound/#parameters_1","text":"that: StatusNotFound val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotFound/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotImplemented/","text":"StatusNotImplemented [Source] primitive val StatusNotImplemented is Status val Implements Status val Constructors create [Source] new val create() : StatusNotImplemented val^ Returns StatusNotImplemented val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusNotImplemented val) : Bool val Parameters that: StatusNotImplemented val Returns Bool val ne [Source] fun box ne( that: StatusNotImplemented val) : Bool val Parameters that: StatusNotImplemented val Returns Bool val","title":"primitive StatusNotImplemented"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotImplemented/#statusnotimplemented","text":"[Source] primitive val StatusNotImplemented is Status val","title":"StatusNotImplemented"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotImplemented/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotImplemented/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotImplemented/#create","text":"[Source] new val create() : StatusNotImplemented val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotImplemented/#returns","text":"StatusNotImplemented val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotImplemented/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotImplemented/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotImplemented/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotImplemented/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotImplemented/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotImplemented/#eq","text":"[Source] fun box eq( that: StatusNotImplemented val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotImplemented/#parameters","text":"that: StatusNotImplemented val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotImplemented/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotImplemented/#ne","text":"[Source] fun box ne( that: StatusNotImplemented val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotImplemented/#parameters_1","text":"that: StatusNotImplemented val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotImplemented/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotModified/","text":"StatusNotModified [Source] primitive val StatusNotModified is Status val Implements Status val Constructors create [Source] new val create() : StatusNotModified val^ Returns StatusNotModified val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusNotModified val) : Bool val Parameters that: StatusNotModified val Returns Bool val ne [Source] fun box ne( that: StatusNotModified val) : Bool val Parameters that: StatusNotModified val Returns Bool val","title":"primitive StatusNotModified"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotModified/#statusnotmodified","text":"[Source] primitive val StatusNotModified is Status val","title":"StatusNotModified"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotModified/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotModified/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotModified/#create","text":"[Source] new val create() : StatusNotModified val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotModified/#returns","text":"StatusNotModified val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotModified/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotModified/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotModified/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotModified/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotModified/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotModified/#eq","text":"[Source] fun box eq( that: StatusNotModified val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotModified/#parameters","text":"that: StatusNotModified val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotModified/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotModified/#ne","text":"[Source] fun box ne( that: StatusNotModified val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotModified/#parameters_1","text":"that: StatusNotModified val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusNotModified/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusOK/","text":"StatusOK [Source] primitive val StatusOK is Status val Implements Status val Constructors create [Source] new val create() : StatusOK val^ Returns StatusOK val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusOK val) : Bool val Parameters that: StatusOK val Returns Bool val ne [Source] fun box ne( that: StatusOK val) : Bool val Parameters that: StatusOK val Returns Bool val","title":"primitive StatusOK"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusOK/#statusok","text":"[Source] primitive val StatusOK is Status val","title":"StatusOK"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusOK/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusOK/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusOK/#create","text":"[Source] new val create() : StatusOK val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusOK/#returns","text":"StatusOK val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusOK/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusOK/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusOK/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusOK/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusOK/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusOK/#eq","text":"[Source] fun box eq( that: StatusOK val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusOK/#parameters","text":"that: StatusOK val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusOK/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusOK/#ne","text":"[Source] fun box ne( that: StatusOK val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusOK/#parameters_1","text":"that: StatusOK val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusOK/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPartialContent/","text":"StatusPartialContent [Source] primitive val StatusPartialContent is Status val Implements Status val Constructors create [Source] new val create() : StatusPartialContent val^ Returns StatusPartialContent val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusPartialContent val) : Bool val Parameters that: StatusPartialContent val Returns Bool val ne [Source] fun box ne( that: StatusPartialContent val) : Bool val Parameters that: StatusPartialContent val Returns Bool val","title":"primitive StatusPartialContent"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPartialContent/#statuspartialcontent","text":"[Source] primitive val StatusPartialContent is Status val","title":"StatusPartialContent"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPartialContent/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPartialContent/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPartialContent/#create","text":"[Source] new val create() : StatusPartialContent val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPartialContent/#returns","text":"StatusPartialContent val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPartialContent/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPartialContent/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPartialContent/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPartialContent/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPartialContent/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPartialContent/#eq","text":"[Source] fun box eq( that: StatusPartialContent val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPartialContent/#parameters","text":"that: StatusPartialContent val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPartialContent/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPartialContent/#ne","text":"[Source] fun box ne( that: StatusPartialContent val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPartialContent/#parameters_1","text":"that: StatusPartialContent val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPartialContent/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPaymentRequired/","text":"StatusPaymentRequired [Source] primitive val StatusPaymentRequired is Status val Implements Status val Constructors create [Source] new val create() : StatusPaymentRequired val^ Returns StatusPaymentRequired val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusPaymentRequired val) : Bool val Parameters that: StatusPaymentRequired val Returns Bool val ne [Source] fun box ne( that: StatusPaymentRequired val) : Bool val Parameters that: StatusPaymentRequired val Returns Bool val","title":"primitive StatusPaymentRequired"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPaymentRequired/#statuspaymentrequired","text":"[Source] primitive val StatusPaymentRequired is Status val","title":"StatusPaymentRequired"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPaymentRequired/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPaymentRequired/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPaymentRequired/#create","text":"[Source] new val create() : StatusPaymentRequired val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPaymentRequired/#returns","text":"StatusPaymentRequired val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPaymentRequired/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPaymentRequired/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPaymentRequired/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPaymentRequired/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPaymentRequired/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPaymentRequired/#eq","text":"[Source] fun box eq( that: StatusPaymentRequired val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPaymentRequired/#parameters","text":"that: StatusPaymentRequired val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPaymentRequired/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPaymentRequired/#ne","text":"[Source] fun box ne( that: StatusPaymentRequired val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPaymentRequired/#parameters_1","text":"that: StatusPaymentRequired val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPaymentRequired/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionFailed/","text":"StatusPreconditionFailed [Source] primitive val StatusPreconditionFailed is Status val Implements Status val Constructors create [Source] new val create() : StatusPreconditionFailed val^ Returns StatusPreconditionFailed val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusPreconditionFailed val) : Bool val Parameters that: StatusPreconditionFailed val Returns Bool val ne [Source] fun box ne( that: StatusPreconditionFailed val) : Bool val Parameters that: StatusPreconditionFailed val Returns Bool val","title":"primitive StatusPreconditionFailed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionFailed/#statuspreconditionfailed","text":"[Source] primitive val StatusPreconditionFailed is Status val","title":"StatusPreconditionFailed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionFailed/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionFailed/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionFailed/#create","text":"[Source] new val create() : StatusPreconditionFailed val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionFailed/#returns","text":"StatusPreconditionFailed val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionFailed/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionFailed/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionFailed/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionFailed/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionFailed/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionFailed/#eq","text":"[Source] fun box eq( that: StatusPreconditionFailed val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionFailed/#parameters","text":"that: StatusPreconditionFailed val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionFailed/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionFailed/#ne","text":"[Source] fun box ne( that: StatusPreconditionFailed val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionFailed/#parameters_1","text":"that: StatusPreconditionFailed val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionFailed/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionRequired/","text":"StatusPreconditionRequired [Source] primitive val StatusPreconditionRequired is Status val Implements Status val Constructors create [Source] new val create() : StatusPreconditionRequired val^ Returns StatusPreconditionRequired val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusPreconditionRequired val) : Bool val Parameters that: StatusPreconditionRequired val Returns Bool val ne [Source] fun box ne( that: StatusPreconditionRequired val) : Bool val Parameters that: StatusPreconditionRequired val Returns Bool val","title":"primitive StatusPreconditionRequired"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionRequired/#statuspreconditionrequired","text":"[Source] primitive val StatusPreconditionRequired is Status val","title":"StatusPreconditionRequired"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionRequired/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionRequired/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionRequired/#create","text":"[Source] new val create() : StatusPreconditionRequired val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionRequired/#returns","text":"StatusPreconditionRequired val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionRequired/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionRequired/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionRequired/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionRequired/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionRequired/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionRequired/#eq","text":"[Source] fun box eq( that: StatusPreconditionRequired val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionRequired/#parameters","text":"that: StatusPreconditionRequired val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionRequired/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionRequired/#ne","text":"[Source] fun box ne( that: StatusPreconditionRequired val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionRequired/#parameters_1","text":"that: StatusPreconditionRequired val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusPreconditionRequired/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusProxyAuthRequired/","text":"StatusProxyAuthRequired [Source] primitive val StatusProxyAuthRequired is Status val Implements Status val Constructors create [Source] new val create() : StatusProxyAuthRequired val^ Returns StatusProxyAuthRequired val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusProxyAuthRequired val) : Bool val Parameters that: StatusProxyAuthRequired val Returns Bool val ne [Source] fun box ne( that: StatusProxyAuthRequired val) : Bool val Parameters that: StatusProxyAuthRequired val Returns Bool val","title":"primitive StatusProxyAuthRequired"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusProxyAuthRequired/#statusproxyauthrequired","text":"[Source] primitive val StatusProxyAuthRequired is Status val","title":"StatusProxyAuthRequired"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusProxyAuthRequired/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusProxyAuthRequired/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusProxyAuthRequired/#create","text":"[Source] new val create() : StatusProxyAuthRequired val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusProxyAuthRequired/#returns","text":"StatusProxyAuthRequired val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusProxyAuthRequired/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusProxyAuthRequired/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusProxyAuthRequired/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusProxyAuthRequired/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusProxyAuthRequired/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusProxyAuthRequired/#eq","text":"[Source] fun box eq( that: StatusProxyAuthRequired val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusProxyAuthRequired/#parameters","text":"that: StatusProxyAuthRequired val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusProxyAuthRequired/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusProxyAuthRequired/#ne","text":"[Source] fun box ne( that: StatusProxyAuthRequired val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusProxyAuthRequired/#parameters_1","text":"that: StatusProxyAuthRequired val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusProxyAuthRequired/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestEntityTooLarge/","text":"StatusRequestEntityTooLarge [Source] primitive val StatusRequestEntityTooLarge is Status val Implements Status val Constructors create [Source] new val create() : StatusRequestEntityTooLarge val^ Returns StatusRequestEntityTooLarge val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusRequestEntityTooLarge val) : Bool val Parameters that: StatusRequestEntityTooLarge val Returns Bool val ne [Source] fun box ne( that: StatusRequestEntityTooLarge val) : Bool val Parameters that: StatusRequestEntityTooLarge val Returns Bool val","title":"primitive StatusRequestEntityTooLarge"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestEntityTooLarge/#statusrequestentitytoolarge","text":"[Source] primitive val StatusRequestEntityTooLarge is Status val","title":"StatusRequestEntityTooLarge"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestEntityTooLarge/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestEntityTooLarge/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestEntityTooLarge/#create","text":"[Source] new val create() : StatusRequestEntityTooLarge val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestEntityTooLarge/#returns","text":"StatusRequestEntityTooLarge val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestEntityTooLarge/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestEntityTooLarge/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestEntityTooLarge/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestEntityTooLarge/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestEntityTooLarge/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestEntityTooLarge/#eq","text":"[Source] fun box eq( that: StatusRequestEntityTooLarge val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestEntityTooLarge/#parameters","text":"that: StatusRequestEntityTooLarge val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestEntityTooLarge/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestEntityTooLarge/#ne","text":"[Source] fun box ne( that: StatusRequestEntityTooLarge val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestEntityTooLarge/#parameters_1","text":"that: StatusRequestEntityTooLarge val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestEntityTooLarge/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestHeaderFieldsTooLarge/","text":"StatusRequestHeaderFieldsTooLarge [Source] primitive val StatusRequestHeaderFieldsTooLarge is Status val Implements Status val Constructors create [Source] new val create() : StatusRequestHeaderFieldsTooLarge val^ Returns StatusRequestHeaderFieldsTooLarge val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusRequestHeaderFieldsTooLarge val) : Bool val Parameters that: StatusRequestHeaderFieldsTooLarge val Returns Bool val ne [Source] fun box ne( that: StatusRequestHeaderFieldsTooLarge val) : Bool val Parameters that: StatusRequestHeaderFieldsTooLarge val Returns Bool val","title":"primitive StatusRequestHeaderFieldsTooLarge"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestHeaderFieldsTooLarge/#statusrequestheaderfieldstoolarge","text":"[Source] primitive val StatusRequestHeaderFieldsTooLarge is Status val","title":"StatusRequestHeaderFieldsTooLarge"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestHeaderFieldsTooLarge/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestHeaderFieldsTooLarge/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestHeaderFieldsTooLarge/#create","text":"[Source] new val create() : StatusRequestHeaderFieldsTooLarge val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestHeaderFieldsTooLarge/#returns","text":"StatusRequestHeaderFieldsTooLarge val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestHeaderFieldsTooLarge/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestHeaderFieldsTooLarge/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestHeaderFieldsTooLarge/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestHeaderFieldsTooLarge/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestHeaderFieldsTooLarge/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestHeaderFieldsTooLarge/#eq","text":"[Source] fun box eq( that: StatusRequestHeaderFieldsTooLarge val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestHeaderFieldsTooLarge/#parameters","text":"that: StatusRequestHeaderFieldsTooLarge val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestHeaderFieldsTooLarge/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestHeaderFieldsTooLarge/#ne","text":"[Source] fun box ne( that: StatusRequestHeaderFieldsTooLarge val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestHeaderFieldsTooLarge/#parameters_1","text":"that: StatusRequestHeaderFieldsTooLarge val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestHeaderFieldsTooLarge/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestTimeout/","text":"StatusRequestTimeout [Source] primitive val StatusRequestTimeout is Status val Implements Status val Constructors create [Source] new val create() : StatusRequestTimeout val^ Returns StatusRequestTimeout val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusRequestTimeout val) : Bool val Parameters that: StatusRequestTimeout val Returns Bool val ne [Source] fun box ne( that: StatusRequestTimeout val) : Bool val Parameters that: StatusRequestTimeout val Returns Bool val","title":"primitive StatusRequestTimeout"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestTimeout/#statusrequesttimeout","text":"[Source] primitive val StatusRequestTimeout is Status val","title":"StatusRequestTimeout"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestTimeout/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestTimeout/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestTimeout/#create","text":"[Source] new val create() : StatusRequestTimeout val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestTimeout/#returns","text":"StatusRequestTimeout val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestTimeout/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestTimeout/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestTimeout/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestTimeout/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestTimeout/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestTimeout/#eq","text":"[Source] fun box eq( that: StatusRequestTimeout val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestTimeout/#parameters","text":"that: StatusRequestTimeout val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestTimeout/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestTimeout/#ne","text":"[Source] fun box ne( that: StatusRequestTimeout val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestTimeout/#parameters_1","text":"that: StatusRequestTimeout val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestTimeout/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestURITooLong/","text":"StatusRequestURITooLong [Source] primitive val StatusRequestURITooLong is Status val Implements Status val Constructors create [Source] new val create() : StatusRequestURITooLong val^ Returns StatusRequestURITooLong val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusRequestURITooLong val) : Bool val Parameters that: StatusRequestURITooLong val Returns Bool val ne [Source] fun box ne( that: StatusRequestURITooLong val) : Bool val Parameters that: StatusRequestURITooLong val Returns Bool val","title":"primitive StatusRequestURITooLong"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestURITooLong/#statusrequesturitoolong","text":"[Source] primitive val StatusRequestURITooLong is Status val","title":"StatusRequestURITooLong"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestURITooLong/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestURITooLong/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestURITooLong/#create","text":"[Source] new val create() : StatusRequestURITooLong val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestURITooLong/#returns","text":"StatusRequestURITooLong val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestURITooLong/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestURITooLong/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestURITooLong/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestURITooLong/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestURITooLong/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestURITooLong/#eq","text":"[Source] fun box eq( that: StatusRequestURITooLong val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestURITooLong/#parameters","text":"that: StatusRequestURITooLong val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestURITooLong/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestURITooLong/#ne","text":"[Source] fun box ne( that: StatusRequestURITooLong val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestURITooLong/#parameters_1","text":"that: StatusRequestURITooLong val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestURITooLong/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestedRangeNotSatisfiable/","text":"StatusRequestedRangeNotSatisfiable [Source] primitive val StatusRequestedRangeNotSatisfiable is Status val Implements Status val Constructors create [Source] new val create() : StatusRequestedRangeNotSatisfiable val^ Returns StatusRequestedRangeNotSatisfiable val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusRequestedRangeNotSatisfiable val) : Bool val Parameters that: StatusRequestedRangeNotSatisfiable val Returns Bool val ne [Source] fun box ne( that: StatusRequestedRangeNotSatisfiable val) : Bool val Parameters that: StatusRequestedRangeNotSatisfiable val Returns Bool val","title":"primitive StatusRequestedRangeNotSatisfiable"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestedRangeNotSatisfiable/#statusrequestedrangenotsatisfiable","text":"[Source] primitive val StatusRequestedRangeNotSatisfiable is Status val","title":"StatusRequestedRangeNotSatisfiable"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestedRangeNotSatisfiable/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestedRangeNotSatisfiable/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestedRangeNotSatisfiable/#create","text":"[Source] new val create() : StatusRequestedRangeNotSatisfiable val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestedRangeNotSatisfiable/#returns","text":"StatusRequestedRangeNotSatisfiable val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestedRangeNotSatisfiable/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestedRangeNotSatisfiable/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestedRangeNotSatisfiable/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestedRangeNotSatisfiable/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestedRangeNotSatisfiable/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestedRangeNotSatisfiable/#eq","text":"[Source] fun box eq( that: StatusRequestedRangeNotSatisfiable val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestedRangeNotSatisfiable/#parameters","text":"that: StatusRequestedRangeNotSatisfiable val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestedRangeNotSatisfiable/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestedRangeNotSatisfiable/#ne","text":"[Source] fun box ne( that: StatusRequestedRangeNotSatisfiable val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestedRangeNotSatisfiable/#parameters_1","text":"that: StatusRequestedRangeNotSatisfiable val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusRequestedRangeNotSatisfiable/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusResetContent/","text":"StatusResetContent [Source] primitive val StatusResetContent is Status val Implements Status val Constructors create [Source] new val create() : StatusResetContent val^ Returns StatusResetContent val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusResetContent val) : Bool val Parameters that: StatusResetContent val Returns Bool val ne [Source] fun box ne( that: StatusResetContent val) : Bool val Parameters that: StatusResetContent val Returns Bool val","title":"primitive StatusResetContent"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusResetContent/#statusresetcontent","text":"[Source] primitive val StatusResetContent is Status val","title":"StatusResetContent"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusResetContent/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusResetContent/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusResetContent/#create","text":"[Source] new val create() : StatusResetContent val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusResetContent/#returns","text":"StatusResetContent val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusResetContent/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusResetContent/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusResetContent/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusResetContent/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusResetContent/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusResetContent/#eq","text":"[Source] fun box eq( that: StatusResetContent val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusResetContent/#parameters","text":"that: StatusResetContent val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusResetContent/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusResetContent/#ne","text":"[Source] fun box ne( that: StatusResetContent val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusResetContent/#parameters_1","text":"that: StatusResetContent val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusResetContent/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSeeOther/","text":"StatusSeeOther [Source] primitive val StatusSeeOther is Status val Implements Status val Constructors create [Source] new val create() : StatusSeeOther val^ Returns StatusSeeOther val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusSeeOther val) : Bool val Parameters that: StatusSeeOther val Returns Bool val ne [Source] fun box ne( that: StatusSeeOther val) : Bool val Parameters that: StatusSeeOther val Returns Bool val","title":"primitive StatusSeeOther"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSeeOther/#statusseeother","text":"[Source] primitive val StatusSeeOther is Status val","title":"StatusSeeOther"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSeeOther/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSeeOther/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSeeOther/#create","text":"[Source] new val create() : StatusSeeOther val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSeeOther/#returns","text":"StatusSeeOther val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSeeOther/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSeeOther/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSeeOther/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSeeOther/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSeeOther/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSeeOther/#eq","text":"[Source] fun box eq( that: StatusSeeOther val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSeeOther/#parameters","text":"that: StatusSeeOther val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSeeOther/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSeeOther/#ne","text":"[Source] fun box ne( that: StatusSeeOther val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSeeOther/#parameters_1","text":"that: StatusSeeOther val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSeeOther/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusServiceUnavailable/","text":"StatusServiceUnavailable [Source] primitive val StatusServiceUnavailable is Status val Implements Status val Constructors create [Source] new val create() : StatusServiceUnavailable val^ Returns StatusServiceUnavailable val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusServiceUnavailable val) : Bool val Parameters that: StatusServiceUnavailable val Returns Bool val ne [Source] fun box ne( that: StatusServiceUnavailable val) : Bool val Parameters that: StatusServiceUnavailable val Returns Bool val","title":"primitive StatusServiceUnavailable"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusServiceUnavailable/#statusserviceunavailable","text":"[Source] primitive val StatusServiceUnavailable is Status val","title":"StatusServiceUnavailable"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusServiceUnavailable/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusServiceUnavailable/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusServiceUnavailable/#create","text":"[Source] new val create() : StatusServiceUnavailable val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusServiceUnavailable/#returns","text":"StatusServiceUnavailable val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusServiceUnavailable/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusServiceUnavailable/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusServiceUnavailable/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusServiceUnavailable/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusServiceUnavailable/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusServiceUnavailable/#eq","text":"[Source] fun box eq( that: StatusServiceUnavailable val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusServiceUnavailable/#parameters","text":"that: StatusServiceUnavailable val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusServiceUnavailable/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusServiceUnavailable/#ne","text":"[Source] fun box ne( that: StatusServiceUnavailable val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusServiceUnavailable/#parameters_1","text":"that: StatusServiceUnavailable val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusServiceUnavailable/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSwitchingProtocols/","text":"StatusSwitchingProtocols [Source] primitive val StatusSwitchingProtocols is Status val Implements Status val Constructors create [Source] new val create() : StatusSwitchingProtocols val^ Returns StatusSwitchingProtocols val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusSwitchingProtocols val) : Bool val Parameters that: StatusSwitchingProtocols val Returns Bool val ne [Source] fun box ne( that: StatusSwitchingProtocols val) : Bool val Parameters that: StatusSwitchingProtocols val Returns Bool val","title":"primitive StatusSwitchingProtocols"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSwitchingProtocols/#statusswitchingprotocols","text":"[Source] primitive val StatusSwitchingProtocols is Status val","title":"StatusSwitchingProtocols"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSwitchingProtocols/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSwitchingProtocols/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSwitchingProtocols/#create","text":"[Source] new val create() : StatusSwitchingProtocols val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSwitchingProtocols/#returns","text":"StatusSwitchingProtocols val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSwitchingProtocols/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSwitchingProtocols/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSwitchingProtocols/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSwitchingProtocols/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSwitchingProtocols/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSwitchingProtocols/#eq","text":"[Source] fun box eq( that: StatusSwitchingProtocols val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSwitchingProtocols/#parameters","text":"that: StatusSwitchingProtocols val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSwitchingProtocols/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSwitchingProtocols/#ne","text":"[Source] fun box ne( that: StatusSwitchingProtocols val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSwitchingProtocols/#parameters_1","text":"that: StatusSwitchingProtocols val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusSwitchingProtocols/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTeapot/","text":"StatusTeapot [Source] primitive val StatusTeapot is Status val Implements Status val Constructors create [Source] new val create() : StatusTeapot val^ Returns StatusTeapot val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusTeapot val) : Bool val Parameters that: StatusTeapot val Returns Bool val ne [Source] fun box ne( that: StatusTeapot val) : Bool val Parameters that: StatusTeapot val Returns Bool val","title":"primitive StatusTeapot"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTeapot/#statusteapot","text":"[Source] primitive val StatusTeapot is Status val","title":"StatusTeapot"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTeapot/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTeapot/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTeapot/#create","text":"[Source] new val create() : StatusTeapot val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTeapot/#returns","text":"StatusTeapot val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTeapot/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTeapot/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTeapot/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTeapot/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTeapot/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTeapot/#eq","text":"[Source] fun box eq( that: StatusTeapot val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTeapot/#parameters","text":"that: StatusTeapot val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTeapot/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTeapot/#ne","text":"[Source] fun box ne( that: StatusTeapot val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTeapot/#parameters_1","text":"that: StatusTeapot val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTeapot/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTemporaryRedirect/","text":"StatusTemporaryRedirect [Source] primitive val StatusTemporaryRedirect is Status val Implements Status val Constructors create [Source] new val create() : StatusTemporaryRedirect val^ Returns StatusTemporaryRedirect val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusTemporaryRedirect val) : Bool val Parameters that: StatusTemporaryRedirect val Returns Bool val ne [Source] fun box ne( that: StatusTemporaryRedirect val) : Bool val Parameters that: StatusTemporaryRedirect val Returns Bool val","title":"primitive StatusTemporaryRedirect"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTemporaryRedirect/#statustemporaryredirect","text":"[Source] primitive val StatusTemporaryRedirect is Status val","title":"StatusTemporaryRedirect"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTemporaryRedirect/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTemporaryRedirect/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTemporaryRedirect/#create","text":"[Source] new val create() : StatusTemporaryRedirect val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTemporaryRedirect/#returns","text":"StatusTemporaryRedirect val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTemporaryRedirect/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTemporaryRedirect/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTemporaryRedirect/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTemporaryRedirect/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTemporaryRedirect/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTemporaryRedirect/#eq","text":"[Source] fun box eq( that: StatusTemporaryRedirect val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTemporaryRedirect/#parameters","text":"that: StatusTemporaryRedirect val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTemporaryRedirect/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTemporaryRedirect/#ne","text":"[Source] fun box ne( that: StatusTemporaryRedirect val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTemporaryRedirect/#parameters_1","text":"that: StatusTemporaryRedirect val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTemporaryRedirect/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTooManyRequests/","text":"StatusTooManyRequests [Source] primitive val StatusTooManyRequests is Status val Implements Status val Constructors create [Source] new val create() : StatusTooManyRequests val^ Returns StatusTooManyRequests val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusTooManyRequests val) : Bool val Parameters that: StatusTooManyRequests val Returns Bool val ne [Source] fun box ne( that: StatusTooManyRequests val) : Bool val Parameters that: StatusTooManyRequests val Returns Bool val","title":"primitive StatusTooManyRequests"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTooManyRequests/#statustoomanyrequests","text":"[Source] primitive val StatusTooManyRequests is Status val","title":"StatusTooManyRequests"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTooManyRequests/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTooManyRequests/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTooManyRequests/#create","text":"[Source] new val create() : StatusTooManyRequests val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTooManyRequests/#returns","text":"StatusTooManyRequests val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTooManyRequests/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTooManyRequests/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTooManyRequests/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTooManyRequests/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTooManyRequests/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTooManyRequests/#eq","text":"[Source] fun box eq( that: StatusTooManyRequests val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTooManyRequests/#parameters","text":"that: StatusTooManyRequests val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTooManyRequests/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTooManyRequests/#ne","text":"[Source] fun box ne( that: StatusTooManyRequests val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTooManyRequests/#parameters_1","text":"that: StatusTooManyRequests val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusTooManyRequests/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnauthorized/","text":"StatusUnauthorized [Source] primitive val StatusUnauthorized is Status val Implements Status val Constructors create [Source] new val create() : StatusUnauthorized val^ Returns StatusUnauthorized val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusUnauthorized val) : Bool val Parameters that: StatusUnauthorized val Returns Bool val ne [Source] fun box ne( that: StatusUnauthorized val) : Bool val Parameters that: StatusUnauthorized val Returns Bool val","title":"primitive StatusUnauthorized"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnauthorized/#statusunauthorized","text":"[Source] primitive val StatusUnauthorized is Status val","title":"StatusUnauthorized"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnauthorized/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnauthorized/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnauthorized/#create","text":"[Source] new val create() : StatusUnauthorized val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnauthorized/#returns","text":"StatusUnauthorized val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnauthorized/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnauthorized/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnauthorized/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnauthorized/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnauthorized/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnauthorized/#eq","text":"[Source] fun box eq( that: StatusUnauthorized val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnauthorized/#parameters","text":"that: StatusUnauthorized val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnauthorized/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnauthorized/#ne","text":"[Source] fun box ne( that: StatusUnauthorized val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnauthorized/#parameters_1","text":"that: StatusUnauthorized val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnauthorized/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnavailableForLegalReasons/","text":"StatusUnavailableForLegalReasons [Source] primitive val StatusUnavailableForLegalReasons is Status val Implements Status val Constructors create [Source] new val create() : StatusUnavailableForLegalReasons val^ Returns StatusUnavailableForLegalReasons val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusUnavailableForLegalReasons val) : Bool val Parameters that: StatusUnavailableForLegalReasons val Returns Bool val ne [Source] fun box ne( that: StatusUnavailableForLegalReasons val) : Bool val Parameters that: StatusUnavailableForLegalReasons val Returns Bool val","title":"primitive StatusUnavailableForLegalReasons"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnavailableForLegalReasons/#statusunavailableforlegalreasons","text":"[Source] primitive val StatusUnavailableForLegalReasons is Status val","title":"StatusUnavailableForLegalReasons"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnavailableForLegalReasons/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnavailableForLegalReasons/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnavailableForLegalReasons/#create","text":"[Source] new val create() : StatusUnavailableForLegalReasons val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnavailableForLegalReasons/#returns","text":"StatusUnavailableForLegalReasons val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnavailableForLegalReasons/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnavailableForLegalReasons/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnavailableForLegalReasons/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnavailableForLegalReasons/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnavailableForLegalReasons/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnavailableForLegalReasons/#eq","text":"[Source] fun box eq( that: StatusUnavailableForLegalReasons val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnavailableForLegalReasons/#parameters","text":"that: StatusUnavailableForLegalReasons val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnavailableForLegalReasons/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnavailableForLegalReasons/#ne","text":"[Source] fun box ne( that: StatusUnavailableForLegalReasons val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnavailableForLegalReasons/#parameters_1","text":"that: StatusUnavailableForLegalReasons val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnavailableForLegalReasons/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnsupportedMediaType/","text":"StatusUnsupportedMediaType [Source] primitive val StatusUnsupportedMediaType is Status val Implements Status val Constructors create [Source] new val create() : StatusUnsupportedMediaType val^ Returns StatusUnsupportedMediaType val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusUnsupportedMediaType val) : Bool val Parameters that: StatusUnsupportedMediaType val Returns Bool val ne [Source] fun box ne( that: StatusUnsupportedMediaType val) : Bool val Parameters that: StatusUnsupportedMediaType val Returns Bool val","title":"primitive StatusUnsupportedMediaType"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnsupportedMediaType/#statusunsupportedmediatype","text":"[Source] primitive val StatusUnsupportedMediaType is Status val","title":"StatusUnsupportedMediaType"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnsupportedMediaType/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnsupportedMediaType/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnsupportedMediaType/#create","text":"[Source] new val create() : StatusUnsupportedMediaType val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnsupportedMediaType/#returns","text":"StatusUnsupportedMediaType val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnsupportedMediaType/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnsupportedMediaType/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnsupportedMediaType/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnsupportedMediaType/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnsupportedMediaType/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnsupportedMediaType/#eq","text":"[Source] fun box eq( that: StatusUnsupportedMediaType val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnsupportedMediaType/#parameters","text":"that: StatusUnsupportedMediaType val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnsupportedMediaType/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnsupportedMediaType/#ne","text":"[Source] fun box ne( that: StatusUnsupportedMediaType val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnsupportedMediaType/#parameters_1","text":"that: StatusUnsupportedMediaType val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUnsupportedMediaType/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUseProxy/","text":"StatusUseProxy [Source] primitive val StatusUseProxy is Status val Implements Status val Constructors create [Source] new val create() : StatusUseProxy val^ Returns StatusUseProxy val^ Public Functions apply [Source] fun box apply() : U16 val Returns U16 val string [Source] fun box string() : String val Returns String val eq [Source] fun box eq( that: StatusUseProxy val) : Bool val Parameters that: StatusUseProxy val Returns Bool val ne [Source] fun box ne( that: StatusUseProxy val) : Bool val Parameters that: StatusUseProxy val Returns Bool val","title":"primitive StatusUseProxy"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUseProxy/#statususeproxy","text":"[Source] primitive val StatusUseProxy is Status val","title":"StatusUseProxy"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUseProxy/#implements","text":"Status val","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUseProxy/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUseProxy/#create","text":"[Source] new val create() : StatusUseProxy val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUseProxy/#returns","text":"StatusUseProxy val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUseProxy/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUseProxy/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUseProxy/#returns_1","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUseProxy/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUseProxy/#returns_2","text":"String val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUseProxy/#eq","text":"[Source] fun box eq( that: StatusUseProxy val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUseProxy/#parameters","text":"that: StatusUseProxy val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUseProxy/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUseProxy/#ne","text":"[Source] fun box ne( that: StatusUseProxy val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUseProxy/#parameters_1","text":"that: StatusUseProxy val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StatusUseProxy/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StreamTransfer/","text":"StreamTransfer [Source] primitive val StreamTransfer Constructors create [Source] new val create() : StreamTransfer val^ Returns StreamTransfer val^ Public Functions eq [Source] fun box eq( that: StreamTransfer val) : Bool val Parameters that: StreamTransfer val Returns Bool val ne [Source] fun box ne( that: StreamTransfer val) : Bool val Parameters that: StreamTransfer val Returns Bool val","title":"primitive StreamTransfer"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StreamTransfer/#streamtransfer","text":"[Source] primitive val StreamTransfer","title":"StreamTransfer"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StreamTransfer/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StreamTransfer/#create","text":"[Source] new val create() : StreamTransfer val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StreamTransfer/#returns","text":"StreamTransfer val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StreamTransfer/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StreamTransfer/#eq","text":"[Source] fun box eq( that: StreamTransfer val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StreamTransfer/#parameters","text":"that: StreamTransfer val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StreamTransfer/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StreamTransfer/#ne","text":"[Source] fun box ne( that: StreamTransfer val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StreamTransfer/#parameters_1","text":"that: StreamTransfer val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-StreamTransfer/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-TransferMode/","text":"TransferMode [Source] type TransferMode is (ChunkedTransfer val | StreamTransfer val | OneshotTransfer val) Type Alias For ( ChunkedTransfer val | StreamTransfer val | OneshotTransfer val)","title":"type TransferMode"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-TransferMode/#transfermode","text":"[Source] type TransferMode is (ChunkedTransfer val | StreamTransfer val | OneshotTransfer val)","title":"TransferMode"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-TransferMode/#type-alias-for","text":"( ChunkedTransfer val | StreamTransfer val | OneshotTransfer val)","title":"Type Alias For"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/","text":"URL [Source] Holds the components of a URL. These are always stored as valid, URL-encoded values. class val URL Constructors create [Source] Create an empty URL. new val create() : URL val^ Returns URL val^ build [Source] Parse the URL string into its components. If it isn't URL encoded, encode it. If existing URL encoding is invalid, raise an error. new val build( from: String val, percent_encoded: Bool val = seq) : URL val^ ? Parameters from: String val percent_encoded: Bool val = seq Returns URL val^ ? valid [Source] Parse the URL string into its components. If it isn't URL encoded, raise an error. new val valid( from: String val) : URL val^ ? Parameters from: String val Returns URL val^ ? Public fields var scheme: String val [Source] URL scheme. If the given URL does not provide a scheme, this will be the empty string. See also RFC 3986 . var user: String val [Source] URL user as part of the URLs authority component: authority = [ user [ : password ] @ ] host [ : port ] If the URL does not provide user information, this will be the empty string. See also RFC 3986 . var password: String val [Source] URL password as part of the URLs authority component: authority = [ user [ : password ] @ ] host [ : port ] If the URL does not provide a password, this will be the empty string. See also RFC 3986 . var host: String val [Source] URL host as part of the URLs authority component: authority = [ user [ : password ] @ ] host [ : port ] If the URL does not provide a host, this will be the empty string. See also RFC 3986 . var port: U16 val [Source] URL port as part of the URLs authority component: authority = [ user [ : password ] @ ] host [ : port ] If the URL does not provide a port, this will be the empty string. See also RFC 3986 . var path: String val [Source] URL path component. If the URL does not provide a path component, this will be the empty string. See also RFC 3986 . var query: String val [Source] URL query component. If the URL does not provide a query component, this will be the empty string. See also RFC 3986 . var fragment: String val [Source] Url fragment identifier component. If the URL does not provide a fragment identifier component, this will be the empty string. See also RFC 3986 . Public Functions is_valid [Source] Return true if all elements are correctly URL encoded. fun box is_valid() : Bool val Returns Bool val string [Source] Combine the components into a string. fun box string() : String iso^ Returns String iso^ join [Source] Using this as a base URL, concatenate with another, possibly relative, URL in the same way a browser does for a link. fun val join( that: URL val) : URL val Parameters that: URL val Returns URL val default_port [Source] Report the default port for our scheme. Returns 0 for unrecognised schemes. fun box default_port() : U16 val Returns U16 val Private Functions _parse [Source] Parse the given string as a URL. Raises an error on invalid port number. fun ref _parse( from: String val) : None val ? Parameters from: String val Returns None val ? _parse_scheme [Source] Find the scheme, if any, at the start of the given string. The offset of the part following the scheme is returned. fun box _parse_scheme( from: String val) : (ISize val , String val) Parameters from: String val Returns ( ISize val , String val) _parse_part [Source] Attempt to parse the specified part out of the given string. Only attempt the parse if the given prefix is found first. Pass \"\" if no prefix is needed. The part ends when any one of the given terminator characters is found, or the end of the input is reached. The offset of the terminator is returned, if one is found. fun box _parse_part( from: String val, prefix: String val, terminators: String val, offset: ISize val) : (ISize val , String val) Parameters from: String val prefix: String val terminators: String val offset: ISize val Returns ( ISize val , String val) _split [Source] Split the given string in 2 around the first instance of the specified separator. If the string does not contain the separator then the first resulting string is the whole src and the second is empty. fun box _split( src: String val, separator: U8 val) : (String val , String val) Parameters src: String val separator: U8 val Returns ( String val , String val) _parse_hostport [Source] Split the given \"host and port\" string into the host and port parts. fun box _parse_hostport( hostport: String val) : (String val , String val) Parameters hostport: String val Returns ( String val , String val)","title":"class URL"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#url","text":"[Source] Holds the components of a URL. These are always stored as valid, URL-encoded values. class val URL","title":"URL"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#create","text":"[Source] Create an empty URL. new val create() : URL val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#returns","text":"URL val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#build","text":"[Source] Parse the URL string into its components. If it isn't URL encoded, encode it. If existing URL encoding is invalid, raise an error. new val build( from: String val, percent_encoded: Bool val = seq) : URL val^ ?","title":"build"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#parameters","text":"from: String val percent_encoded: Bool val = seq","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#returns_1","text":"URL val^ ?","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#valid","text":"[Source] Parse the URL string into its components. If it isn't URL encoded, raise an error. new val valid( from: String val) : URL val^ ?","title":"valid"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#parameters_1","text":"from: String val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#returns_2","text":"URL val^ ?","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#public-fields","text":"","title":"Public fields"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#var-scheme-string-val","text":"[Source] URL scheme. If the given URL does not provide a scheme, this will be the empty string. See also RFC 3986 .","title":"var scheme: String val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#var-user-string-val","text":"[Source] URL user as part of the URLs authority component: authority = [ user [ : password ] @ ] host [ : port ] If the URL does not provide user information, this will be the empty string. See also RFC 3986 .","title":"var user: String val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#var-password-string-val","text":"[Source] URL password as part of the URLs authority component: authority = [ user [ : password ] @ ] host [ : port ] If the URL does not provide a password, this will be the empty string. See also RFC 3986 .","title":"var password: String val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#var-host-string-val","text":"[Source] URL host as part of the URLs authority component: authority = [ user [ : password ] @ ] host [ : port ] If the URL does not provide a host, this will be the empty string. See also RFC 3986 .","title":"var host: String val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#var-port-u16-val","text":"[Source] URL port as part of the URLs authority component: authority = [ user [ : password ] @ ] host [ : port ] If the URL does not provide a port, this will be the empty string. See also RFC 3986 .","title":"var port: U16 val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#var-path-string-val","text":"[Source] URL path component. If the URL does not provide a path component, this will be the empty string. See also RFC 3986 .","title":"var path: String val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#var-query-string-val","text":"[Source] URL query component. If the URL does not provide a query component, this will be the empty string. See also RFC 3986 .","title":"var query: String val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#var-fragment-string-val","text":"[Source] Url fragment identifier component. If the URL does not provide a fragment identifier component, this will be the empty string. See also RFC 3986 .","title":"var fragment: String val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#is_valid","text":"[Source] Return true if all elements are correctly URL encoded. fun box is_valid() : Bool val","title":"is_valid"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#string","text":"[Source] Combine the components into a string. fun box string() : String iso^","title":"string"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#returns_4","text":"String iso^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#join","text":"[Source] Using this as a base URL, concatenate with another, possibly relative, URL in the same way a browser does for a link. fun val join( that: URL val) : URL val","title":"join"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#parameters_2","text":"that: URL val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#returns_5","text":"URL val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#default_port","text":"[Source] Report the default port for our scheme. Returns 0 for unrecognised schemes. fun box default_port() : U16 val","title":"default_port"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#returns_6","text":"U16 val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#private-functions","text":"","title":"Private Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#_parse","text":"[Source] Parse the given string as a URL. Raises an error on invalid port number. fun ref _parse( from: String val) : None val ?","title":"_parse"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#parameters_3","text":"from: String val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#returns_7","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#_parse_scheme","text":"[Source] Find the scheme, if any, at the start of the given string. The offset of the part following the scheme is returned. fun box _parse_scheme( from: String val) : (ISize val , String val)","title":"_parse_scheme"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#parameters_4","text":"from: String val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#returns_8","text":"( ISize val , String val)","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#_parse_part","text":"[Source] Attempt to parse the specified part out of the given string. Only attempt the parse if the given prefix is found first. Pass \"\" if no prefix is needed. The part ends when any one of the given terminator characters is found, or the end of the input is reached. The offset of the terminator is returned, if one is found. fun box _parse_part( from: String val, prefix: String val, terminators: String val, offset: ISize val) : (ISize val , String val)","title":"_parse_part"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#parameters_5","text":"from: String val prefix: String val terminators: String val offset: ISize val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#returns_9","text":"( ISize val , String val)","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#_split","text":"[Source] Split the given string in 2 around the first instance of the specified separator. If the string does not contain the separator then the first resulting string is the whole src and the second is empty. fun box _split( src: String val, separator: U8 val) : (String val , String val)","title":"_split"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#parameters_6","text":"src: String val separator: U8 val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#returns_10","text":"( String val , String val)","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#_parse_hostport","text":"[Source] Split the given \"host and port\" string into the host and port parts. fun box _parse_hostport( hostport: String val) : (String val , String val)","title":"_parse_hostport"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#parameters_7","text":"hostport: String val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URL/#returns_11","text":"( String val , String val)","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/","text":"URLEncode [Source] Functions for checking, encoding, and decoding parts of URLs. primitive val URLEncode Constructors create [Source] new val create() : URLEncode val^ Returns URLEncode val^ Public Functions encode [Source] URL encode and normilase the given string. The percent_encoded parameter indicates how '%' characters should be interpretted. true = given string is already at least partially encoded, so '%'s indicate an encoded character. false = given string is not yet encoded at all, so '%'s are just '%'s. An error is raised on invalid existing encoding or illegal characters that cannot be encoded. fun box encode( from: String val, part: (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val), percent_encoded: Bool val = seq) : String val ? Parameters from: String val part: ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val) percent_encoded: Bool val = seq Returns String val ? decode [Source] URL decode a string. Raise an error on invalid URL encoded. fun box decode( from: String val) : String val ? Parameters from: String val Returns String val ? check_scheme [Source] Check that the given string is a valid scheme. fun box check_scheme( scheme: String val) : Bool val Parameters scheme: String val Returns Bool val check [Source] Check that the given string is valid to be the given URL part without further encoding. Canonical form is not checked for, merely validity. fun box check( from: String val, part: (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)) : Bool val Parameters from: String val part: ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val) Returns Bool val eq [Source] fun box eq( that: URLEncode val) : Bool val Parameters that: URLEncode val Returns Bool val ne [Source] fun box ne( that: URLEncode val) : Bool val Parameters that: URLEncode val Returns Bool val Private Functions _is_char_legal [Source] Determine whether the given character is legal to appear in the specified URL part. fun box _is_char_legal( value: U8 val, part: (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)) : Bool val Parameters value: U8 val part: ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val) Returns Bool val _normal_decode [Source] Determine whether the given character should be decoded to give normal form. Some characters, such as sub-delims, are valid to have either in encoded or unencoded form. These should be left as they are when normalising. This will return false for such characters. fun box _normal_decode( value: U8 val, part: (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)) : Bool val Parameters value: U8 val part: ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val) Returns Bool val _is_host_ipv6 [Source] Check whether the given string is a valid IPv6 format host. Returns: true if string is a valid IPv6 format host. false if string is not an IPv6 foramt host at all. Raises an error if string is an invalid IPv6 format host. fun box _is_host_ipv6( host: String val, part: (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)) : Bool val ? Parameters host: String val part: ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val) Returns Bool val ? _hex [Source] Turn 4 bits into a hex value. fun box _hex( value: U8 val) : U8 val ? Parameters value: U8 val Returns U8 val ? _unhex [Source] Turn a hex value into 4 bits. fun box _unhex( value: U8 val) : U8 val ? Parameters value: U8 val Returns U8 val ?","title":"primitive URLEncode"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#urlencode","text":"[Source] Functions for checking, encoding, and decoding parts of URLs. primitive val URLEncode","title":"URLEncode"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#create","text":"[Source] new val create() : URLEncode val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#returns","text":"URLEncode val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#encode","text":"[Source] URL encode and normilase the given string. The percent_encoded parameter indicates how '%' characters should be interpretted. true = given string is already at least partially encoded, so '%'s indicate an encoded character. false = given string is not yet encoded at all, so '%'s are just '%'s. An error is raised on invalid existing encoding or illegal characters that cannot be encoded. fun box encode( from: String val, part: (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val), percent_encoded: Bool val = seq) : String val ?","title":"encode"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#parameters","text":"from: String val part: ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val) percent_encoded: Bool val = seq","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#returns_1","text":"String val ?","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#decode","text":"[Source] URL decode a string. Raise an error on invalid URL encoded. fun box decode( from: String val) : String val ?","title":"decode"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#parameters_1","text":"from: String val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#returns_2","text":"String val ?","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#check_scheme","text":"[Source] Check that the given string is a valid scheme. fun box check_scheme( scheme: String val) : Bool val","title":"check_scheme"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#parameters_2","text":"scheme: String val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#check","text":"[Source] Check that the given string is valid to be the given URL part without further encoding. Canonical form is not checked for, merely validity. fun box check( from: String val, part: (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)) : Bool val","title":"check"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#parameters_3","text":"from: String val part: ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#eq","text":"[Source] fun box eq( that: URLEncode val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#parameters_4","text":"that: URLEncode val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#returns_5","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#ne","text":"[Source] fun box ne( that: URLEncode val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#parameters_5","text":"that: URLEncode val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#returns_6","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#private-functions","text":"","title":"Private Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#_is_char_legal","text":"[Source] Determine whether the given character is legal to appear in the specified URL part. fun box _is_char_legal( value: U8 val, part: (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)) : Bool val","title":"_is_char_legal"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#parameters_6","text":"value: U8 val part: ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#returns_7","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#_normal_decode","text":"[Source] Determine whether the given character should be decoded to give normal form. Some characters, such as sub-delims, are valid to have either in encoded or unencoded form. These should be left as they are when normalising. This will return false for such characters. fun box _normal_decode( value: U8 val, part: (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)) : Bool val","title":"_normal_decode"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#parameters_7","text":"value: U8 val part: ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#returns_8","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#_is_host_ipv6","text":"[Source] Check whether the given string is a valid IPv6 format host. Returns: true if string is a valid IPv6 format host. false if string is not an IPv6 foramt host at all. Raises an error if string is an invalid IPv6 format host. fun box _is_host_ipv6( host: String val, part: (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)) : Bool val ?","title":"_is_host_ipv6"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#parameters_8","text":"host: String val part: ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#returns_9","text":"Bool val ?","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#_hex","text":"[Source] Turn 4 bits into a hex value. fun box _hex( value: U8 val) : U8 val ?","title":"_hex"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#parameters_9","text":"value: U8 val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#returns_10","text":"U8 val ?","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#_unhex","text":"[Source] Turn a hex value into 4 bits. fun box _unhex( value: U8 val) : U8 val ?","title":"_unhex"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#parameters_10","text":"value: U8 val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLEncode/#returns_11","text":"U8 val ?","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPart/","text":"URLPart [Source] type URLPart is (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val) Type Alias For ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)","title":"type URLPart"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPart/#urlpart","text":"[Source] type URLPart is (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)","title":"URLPart"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPart/#type-alias-for","text":"( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)","title":"Type Alias For"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartFragment/","text":"URLPartFragment [Source] primitive val URLPartFragment Constructors create [Source] new val create() : URLPartFragment val^ Returns URLPartFragment val^ Public Functions eq [Source] fun box eq( that: URLPartFragment val) : Bool val Parameters that: URLPartFragment val Returns Bool val ne [Source] fun box ne( that: URLPartFragment val) : Bool val Parameters that: URLPartFragment val Returns Bool val","title":"primitive URLPartFragment"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartFragment/#urlpartfragment","text":"[Source] primitive val URLPartFragment","title":"URLPartFragment"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartFragment/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartFragment/#create","text":"[Source] new val create() : URLPartFragment val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartFragment/#returns","text":"URLPartFragment val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartFragment/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartFragment/#eq","text":"[Source] fun box eq( that: URLPartFragment val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartFragment/#parameters","text":"that: URLPartFragment val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartFragment/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartFragment/#ne","text":"[Source] fun box ne( that: URLPartFragment val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartFragment/#parameters_1","text":"that: URLPartFragment val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartFragment/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartHost/","text":"URLPartHost [Source] primitive val URLPartHost Constructors create [Source] new val create() : URLPartHost val^ Returns URLPartHost val^ Public Functions eq [Source] fun box eq( that: URLPartHost val) : Bool val Parameters that: URLPartHost val Returns Bool val ne [Source] fun box ne( that: URLPartHost val) : Bool val Parameters that: URLPartHost val Returns Bool val","title":"primitive URLPartHost"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartHost/#urlparthost","text":"[Source] primitive val URLPartHost","title":"URLPartHost"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartHost/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartHost/#create","text":"[Source] new val create() : URLPartHost val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartHost/#returns","text":"URLPartHost val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartHost/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartHost/#eq","text":"[Source] fun box eq( that: URLPartHost val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartHost/#parameters","text":"that: URLPartHost val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartHost/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartHost/#ne","text":"[Source] fun box ne( that: URLPartHost val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartHost/#parameters_1","text":"that: URLPartHost val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartHost/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPassword/","text":"URLPartPassword [Source] primitive val URLPartPassword Constructors create [Source] new val create() : URLPartPassword val^ Returns URLPartPassword val^ Public Functions eq [Source] fun box eq( that: URLPartPassword val) : Bool val Parameters that: URLPartPassword val Returns Bool val ne [Source] fun box ne( that: URLPartPassword val) : Bool val Parameters that: URLPartPassword val Returns Bool val","title":"primitive URLPartPassword"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPassword/#urlpartpassword","text":"[Source] primitive val URLPartPassword","title":"URLPartPassword"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPassword/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPassword/#create","text":"[Source] new val create() : URLPartPassword val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPassword/#returns","text":"URLPartPassword val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPassword/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPassword/#eq","text":"[Source] fun box eq( that: URLPartPassword val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPassword/#parameters","text":"that: URLPartPassword val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPassword/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPassword/#ne","text":"[Source] fun box ne( that: URLPartPassword val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPassword/#parameters_1","text":"that: URLPartPassword val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPassword/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPath/","text":"URLPartPath [Source] primitive val URLPartPath Constructors create [Source] new val create() : URLPartPath val^ Returns URLPartPath val^ Public Functions eq [Source] fun box eq( that: URLPartPath val) : Bool val Parameters that: URLPartPath val Returns Bool val ne [Source] fun box ne( that: URLPartPath val) : Bool val Parameters that: URLPartPath val Returns Bool val","title":"primitive URLPartPath"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPath/#urlpartpath","text":"[Source] primitive val URLPartPath","title":"URLPartPath"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPath/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPath/#create","text":"[Source] new val create() : URLPartPath val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPath/#returns","text":"URLPartPath val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPath/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPath/#eq","text":"[Source] fun box eq( that: URLPartPath val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPath/#parameters","text":"that: URLPartPath val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPath/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPath/#ne","text":"[Source] fun box ne( that: URLPartPath val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPath/#parameters_1","text":"that: URLPartPath val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartPath/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartQuery/","text":"URLPartQuery [Source] primitive val URLPartQuery Constructors create [Source] new val create() : URLPartQuery val^ Returns URLPartQuery val^ Public Functions eq [Source] fun box eq( that: URLPartQuery val) : Bool val Parameters that: URLPartQuery val Returns Bool val ne [Source] fun box ne( that: URLPartQuery val) : Bool val Parameters that: URLPartQuery val Returns Bool val","title":"primitive URLPartQuery"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartQuery/#urlpartquery","text":"[Source] primitive val URLPartQuery","title":"URLPartQuery"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartQuery/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartQuery/#create","text":"[Source] new val create() : URLPartQuery val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartQuery/#returns","text":"URLPartQuery val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartQuery/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartQuery/#eq","text":"[Source] fun box eq( that: URLPartQuery val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartQuery/#parameters","text":"that: URLPartQuery val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartQuery/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartQuery/#ne","text":"[Source] fun box ne( that: URLPartQuery val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartQuery/#parameters_1","text":"that: URLPartQuery val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartQuery/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartUser/","text":"URLPartUser [Source] primitive val URLPartUser Constructors create [Source] new val create() : URLPartUser val^ Returns URLPartUser val^ Public Functions eq [Source] fun box eq( that: URLPartUser val) : Bool val Parameters that: URLPartUser val Returns Bool val ne [Source] fun box ne( that: URLPartUser val) : Bool val Parameters that: URLPartUser val Returns Bool val","title":"primitive URLPartUser"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartUser/#urlpartuser","text":"[Source] primitive val URLPartUser","title":"URLPartUser"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartUser/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartUser/#create","text":"[Source] new val create() : URLPartUser val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartUser/#returns","text":"URLPartUser val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartUser/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartUser/#eq","text":"[Source] fun box eq( that: URLPartUser val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartUser/#parameters","text":"that: URLPartUser val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartUser/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartUser/#ne","text":"[Source] fun box ne( that: URLPartUser val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartUser/#parameters_1","text":"that: URLPartUser val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-URLPartUser/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/","text":"_ClientConnHandler [Source] This is the network notification handler for the client. It passes received data to the HTTPParser to assemble response Payload objects. class ref _ClientConnHandler is TCPConnectionNotify ref Implements TCPConnectionNotify ref Constructors create [Source] The response builder needs to know which Session to forward parsed information to. new iso create( client: _ClientConnection tag) : _ClientConnHandler iso^ Parameters client: _ClientConnection tag Returns _ClientConnHandler iso^ Public Functions connected [Source] Tell the client we have connected. fun ref connected( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val connect_failed [Source] The connection could not be established. Tell the client not to proceed. fun ref connect_failed( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val auth_failed [Source] SSL authentication failed. Tell the client not to proceed. fun ref auth_failed( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val received [Source] Pass a received chunk of data to the HTTPParser . fun ref received( conn: TCPConnection ref, data: Array[U8 val] iso, times: USize val) : Bool val Parameters conn: TCPConnection ref data: Array [ U8 val] iso times: USize val Returns Bool val closed [Source] The connection has closed, possibly prematurely. fun ref closed( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val throttled [Source] TCP connection wants us to stop sending. We do not do anything with this here; just pass it on to the HTTPSession . fun ref throttled( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val unthrottle [Source] TCP can accept more data now. We just pass this on to the HTTPSession fun ref unthrottle( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val accepted fun ref accepted( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val connecting fun ref connecting( conn: TCPConnection ref, count: U32 val) : None val Parameters conn: TCPConnection ref count: U32 val Returns None val sent fun ref sent( conn: TCPConnection ref, data: (String val | Array[U8 val] val)) : (String val | Array[U8 val] val) Parameters conn: TCPConnection ref data: ( String val | Array [ U8 val] val) Returns ( String val | Array [ U8 val] val) sentv fun ref sentv( conn: TCPConnection ref, data: ByteSeqIter val) : ByteSeqIter val Parameters conn: TCPConnection ref data: ByteSeqIter val Returns ByteSeqIter val expect fun ref expect( conn: TCPConnection ref, qty: USize val) : USize val Parameters conn: TCPConnection ref qty: USize val Returns USize val unthrottled fun ref unthrottled( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val","title":"class _ClientConnHandler"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#_clientconnhandler","text":"[Source] This is the network notification handler for the client. It passes received data to the HTTPParser to assemble response Payload objects. class ref _ClientConnHandler is TCPConnectionNotify ref","title":"_ClientConnHandler"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#implements","text":"TCPConnectionNotify ref","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#create","text":"[Source] The response builder needs to know which Session to forward parsed information to. new iso create( client: _ClientConnection tag) : _ClientConnHandler iso^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#parameters","text":"client: _ClientConnection tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#returns","text":"_ClientConnHandler iso^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#connected","text":"[Source] Tell the client we have connected. fun ref connected( conn: TCPConnection ref) : None val","title":"connected"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#parameters_1","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#returns_1","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#connect_failed","text":"[Source] The connection could not be established. Tell the client not to proceed. fun ref connect_failed( conn: TCPConnection ref) : None val","title":"connect_failed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#parameters_2","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#returns_2","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#auth_failed","text":"[Source] SSL authentication failed. Tell the client not to proceed. fun ref auth_failed( conn: TCPConnection ref) : None val","title":"auth_failed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#parameters_3","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#returns_3","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#received","text":"[Source] Pass a received chunk of data to the HTTPParser . fun ref received( conn: TCPConnection ref, data: Array[U8 val] iso, times: USize val) : Bool val","title":"received"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#parameters_4","text":"conn: TCPConnection ref data: Array [ U8 val] iso times: USize val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#returns_4","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#closed","text":"[Source] The connection has closed, possibly prematurely. fun ref closed( conn: TCPConnection ref) : None val","title":"closed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#parameters_5","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#returns_5","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#throttled","text":"[Source] TCP connection wants us to stop sending. We do not do anything with this here; just pass it on to the HTTPSession . fun ref throttled( conn: TCPConnection ref) : None val","title":"throttled"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#parameters_6","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#returns_6","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#unthrottle","text":"[Source] TCP can accept more data now. We just pass this on to the HTTPSession fun ref unthrottle( conn: TCPConnection ref) : None val","title":"unthrottle"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#parameters_7","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#returns_7","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#accepted","text":"fun ref accepted( conn: TCPConnection ref) : None val","title":"accepted"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#parameters_8","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#returns_8","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#connecting","text":"fun ref connecting( conn: TCPConnection ref, count: U32 val) : None val","title":"connecting"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#parameters_9","text":"conn: TCPConnection ref count: U32 val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#returns_9","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#sent","text":"fun ref sent( conn: TCPConnection ref, data: (String val | Array[U8 val] val)) : (String val | Array[U8 val] val)","title":"sent"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#parameters_10","text":"conn: TCPConnection ref data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#returns_10","text":"( String val | Array [ U8 val] val)","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#sentv","text":"fun ref sentv( conn: TCPConnection ref, data: ByteSeqIter val) : ByteSeqIter val","title":"sentv"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#parameters_11","text":"conn: TCPConnection ref data: ByteSeqIter val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#returns_11","text":"ByteSeqIter val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#expect","text":"fun ref expect( conn: TCPConnection ref, qty: USize val) : USize val","title":"expect"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#parameters_12","text":"conn: TCPConnection ref qty: USize val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#returns_12","text":"USize val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#unthrottled","text":"fun ref unthrottled( conn: TCPConnection ref) : None val","title":"unthrottled"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#parameters_13","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnHandler/#returns_13","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/","text":"_ClientConnection [Source] Manages a persistent and possibly pipelined TCP connection to an HTTP server. This is where pipelining happens, if it has been enabled by the Client . Only \"safe\" requests (GET, HEAD, OPTIONS) are sent to the server if any responses are still pending. The HTTPHandler.send_body notification function will be called if/when the HTTPSession is ready to receive body data for POST operations in transfer modes other than Oneshot . Receiving Responses Reception is handled through an HTTPHandler instance. HTTPHandler.apply signals the arrival of a message with headers. How the body data is obtained depends on the transfer mode. For StreamTranfer and ChunkedTransfer modes, there will be any number of HTTPHandler.chunk notifications, followed by an HTTPHandler.finished notification. For OneShotTransfer mode, the client application just needs to call Payload.body once to get the entire body. The HandlerFactory The Client class will try to re-use sessions. If it needs to create a new session, based on the request URL, it will do that, and then it will need a new instance of the caller's HTTPHandler class. Since the client application code does not know in advance when this will be necessary, it passes in a HandlerFactory that creates the actual HTTPHandler , customized for the client application's needs. actor tag _ClientConnection is HTTPSession tag Implements HTTPSession tag Constructors create [Source] Create a connection for the given host and service. We also create an instance of the client application's HTTPHandler. new tag create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val), host: String val, service: String val, sslctx: (SSLContext val | None val) = seq, pipeline: Bool val = seq, handlermaker: HandlerFactory val) : _ClientConnection tag^ Parameters auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) host: String val service: String val sslctx: ( SSLContext val | None val) = seq pipeline: Bool val = seq handlermaker: HandlerFactory val Returns _ClientConnection tag^ Public Behaviours apply [Source] Schedule a request to be sent by adding it to the unsent queue for this session. be apply( request: Payload val) Parameters request: Payload val cancel [Source] Cancel a request. be cancel( request: Payload val) Parameters request: Payload val write [Source] Write a low-level byte stream. The Payload objects call this to generate their wire representation. be write( data: (String val | Array[U8 val] val)) Parameters data: ( String val | Array [ U8 val] val) finish [Source] We are done sending a request with a long body. be finish() dispose [Source] Cancels all requests and disposes the tcp connection. be dispose() throttled [Source] The connection to the server can not accept data for a while. We set a local flag too so we do not send anything on the queue. be throttled() unthrottled [Source] The connection to the server can now accept more data. be unthrottled() Private Behaviours _deliver [Source] Deal with a new Response coming back from the server. Since the session operates in a FIFO manner, the Request corresponding to this Response is the oldest one on the _sent list. We take it off that list and call its handler. It becomes the 'currently being delivered' response and subsequent body data has to go there as well, if there is any. be _deliver( response: Payload val) Parameters response: Payload val _connected [Source] The connection to the server has been established. Send pending requests. be _connected( conn: TCPConnection tag) Parameters conn: TCPConnection tag _connect_failed [Source] The connection couldn't be established. Cancel all pending requests. be _connect_failed( conn: TCPConnection tag) Parameters conn: TCPConnection tag _auth_failed [Source] The connection couldn't be authenticated. Cancel all pending requests. be _auth_failed( conn: TCPConnection tag) Parameters conn: TCPConnection tag _closed [Source] The connection to the server has closed prematurely. Cancel everything. be _closed( conn: TCPConnection tag) Parameters conn: TCPConnection tag _chunk [Source] Called when inbound body data has arrived for the currently inbound Payload . This should be passed directly to the application's HTTPHandler.chunk method. be _chunk( data: (String val | Array[U8 val] val)) Parameters data: ( String val | Array [ U8 val] val) _finish [Source] Indicates that the last inbound body chunk has been sent to _chunk . This is passed on to the front end. _send_pending is called to detect that _unsent and _sent are emptye and that _conn can be disposed. be _finish() _mute [Source] The application can not handle any more data for a while. be _mute() _unmute [Source] The application can accept more data. be _unmute() Private Functions _send_pending [Source] Send pending requests to the server. If the connection is closed, open it. If we have nothing to send and we aren't waiting on any responses, close the connection. fun ref _send_pending() : None val Returns None val _new_conn [Source] Creates a new connection. ResponseBuilder is the notification class that will send back a _connected call when the connection has been made. fun ref _new_conn() : None val Returns None val _cancel_all [Source] Cancel all pending requests. fun ref _cancel_all() : None val Returns None val","title":"actor _ClientConnection"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#_clientconnection","text":"[Source] Manages a persistent and possibly pipelined TCP connection to an HTTP server. This is where pipelining happens, if it has been enabled by the Client . Only \"safe\" requests (GET, HEAD, OPTIONS) are sent to the server if any responses are still pending. The HTTPHandler.send_body notification function will be called if/when the HTTPSession is ready to receive body data for POST operations in transfer modes other than Oneshot .","title":"_ClientConnection"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#receiving-responses","text":"Reception is handled through an HTTPHandler instance. HTTPHandler.apply signals the arrival of a message with headers. How the body data is obtained depends on the transfer mode. For StreamTranfer and ChunkedTransfer modes, there will be any number of HTTPHandler.chunk notifications, followed by an HTTPHandler.finished notification. For OneShotTransfer mode, the client application just needs to call Payload.body once to get the entire body.","title":"Receiving Responses"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#the-handlerfactory","text":"The Client class will try to re-use sessions. If it needs to create a new session, based on the request URL, it will do that, and then it will need a new instance of the caller's HTTPHandler class. Since the client application code does not know in advance when this will be necessary, it passes in a HandlerFactory that creates the actual HTTPHandler , customized for the client application's needs. actor tag _ClientConnection is HTTPSession tag","title":"The HandlerFactory"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#implements","text":"HTTPSession tag","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#create","text":"[Source] Create a connection for the given host and service. We also create an instance of the client application's HTTPHandler. new tag create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val), host: String val, service: String val, sslctx: (SSLContext val | None val) = seq, pipeline: Bool val = seq, handlermaker: HandlerFactory val) : _ClientConnection tag^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#parameters","text":"auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) host: String val service: String val sslctx: ( SSLContext val | None val) = seq pipeline: Bool val = seq handlermaker: HandlerFactory val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#returns","text":"_ClientConnection tag^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#apply","text":"[Source] Schedule a request to be sent by adding it to the unsent queue for this session. be apply( request: Payload val)","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#parameters_1","text":"request: Payload val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#cancel","text":"[Source] Cancel a request. be cancel( request: Payload val)","title":"cancel"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#parameters_2","text":"request: Payload val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#write","text":"[Source] Write a low-level byte stream. The Payload objects call this to generate their wire representation. be write( data: (String val | Array[U8 val] val))","title":"write"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#parameters_3","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#finish","text":"[Source] We are done sending a request with a long body. be finish()","title":"finish"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#dispose","text":"[Source] Cancels all requests and disposes the tcp connection. be dispose()","title":"dispose"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#throttled","text":"[Source] The connection to the server can not accept data for a while. We set a local flag too so we do not send anything on the queue. be throttled()","title":"throttled"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#unthrottled","text":"[Source] The connection to the server can now accept more data. be unthrottled()","title":"unthrottled"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#_deliver","text":"[Source] Deal with a new Response coming back from the server. Since the session operates in a FIFO manner, the Request corresponding to this Response is the oldest one on the _sent list. We take it off that list and call its handler. It becomes the 'currently being delivered' response and subsequent body data has to go there as well, if there is any. be _deliver( response: Payload val)","title":"_deliver"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#parameters_4","text":"response: Payload val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#_connected","text":"[Source] The connection to the server has been established. Send pending requests. be _connected( conn: TCPConnection tag)","title":"_connected"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#parameters_5","text":"conn: TCPConnection tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#_connect_failed","text":"[Source] The connection couldn't be established. Cancel all pending requests. be _connect_failed( conn: TCPConnection tag)","title":"_connect_failed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#parameters_6","text":"conn: TCPConnection tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#_auth_failed","text":"[Source] The connection couldn't be authenticated. Cancel all pending requests. be _auth_failed( conn: TCPConnection tag)","title":"_auth_failed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#parameters_7","text":"conn: TCPConnection tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#_closed","text":"[Source] The connection to the server has closed prematurely. Cancel everything. be _closed( conn: TCPConnection tag)","title":"_closed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#parameters_8","text":"conn: TCPConnection tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#_chunk","text":"[Source] Called when inbound body data has arrived for the currently inbound Payload . This should be passed directly to the application's HTTPHandler.chunk method. be _chunk( data: (String val | Array[U8 val] val))","title":"_chunk"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#parameters_9","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#_finish","text":"[Source] Indicates that the last inbound body chunk has been sent to _chunk . This is passed on to the front end. _send_pending is called to detect that _unsent and _sent are emptye and that _conn can be disposed. be _finish()","title":"_finish"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#_mute","text":"[Source] The application can not handle any more data for a while. be _mute()","title":"_mute"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#_unmute","text":"[Source] The application can accept more data. be _unmute()","title":"_unmute"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#private-functions","text":"","title":"Private Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#_send_pending","text":"[Source] Send pending requests to the server. If the connection is closed, open it. If we have nothing to send and we aren't waiting on any responses, close the connection. fun ref _send_pending() : None val","title":"_send_pending"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#returns_1","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#_new_conn","text":"[Source] Creates a new connection. ResponseBuilder is the notification class that will send back a _connected call when the connection has been made. fun ref _new_conn() : None val","title":"_new_conn"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#returns_2","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#_cancel_all","text":"[Source] Cancel all pending requests. fun ref _cancel_all() : None val","title":"_cancel_all"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ClientConnection/#returns_3","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ConnConnecting/","text":"_ConnConnecting [Source] primitive val _ConnConnecting Constructors create [Source] new val create() : _ConnConnecting val^ Returns _ConnConnecting val^ Public Functions eq [Source] fun box eq( that: _ConnConnecting val) : Bool val Parameters that: _ConnConnecting val Returns Bool val ne [Source] fun box ne( that: _ConnConnecting val) : Bool val Parameters that: _ConnConnecting val Returns Bool val","title":"primitive _ConnConnecting"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ConnConnecting/#_connconnecting","text":"[Source] primitive val _ConnConnecting","title":"_ConnConnecting"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ConnConnecting/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ConnConnecting/#create","text":"[Source] new val create() : _ConnConnecting val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ConnConnecting/#returns","text":"_ConnConnecting val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ConnConnecting/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ConnConnecting/#eq","text":"[Source] fun box eq( that: _ConnConnecting val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ConnConnecting/#parameters","text":"that: _ConnConnecting val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ConnConnecting/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ConnConnecting/#ne","text":"[Source] fun box ne( that: _ConnConnecting val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ConnConnecting/#parameters_1","text":"that: _ConnConnecting val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ConnConnecting/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectBody/","text":"_ExpectBody [Source] primitive val _ExpectBody Constructors create [Source] new val create() : _ExpectBody val^ Returns _ExpectBody val^ Public Functions eq [Source] fun box eq( that: _ExpectBody val) : Bool val Parameters that: _ExpectBody val Returns Bool val ne [Source] fun box ne( that: _ExpectBody val) : Bool val Parameters that: _ExpectBody val Returns Bool val","title":"primitive _ExpectBody"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectBody/#_expectbody","text":"[Source] primitive val _ExpectBody","title":"_ExpectBody"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectBody/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectBody/#create","text":"[Source] new val create() : _ExpectBody val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectBody/#returns","text":"_ExpectBody val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectBody/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectBody/#eq","text":"[Source] fun box eq( that: _ExpectBody val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectBody/#parameters","text":"that: _ExpectBody val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectBody/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectBody/#ne","text":"[Source] fun box ne( that: _ExpectBody val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectBody/#parameters_1","text":"that: _ExpectBody val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectBody/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunk/","text":"_ExpectChunk [Source] primitive val _ExpectChunk Constructors create [Source] new val create() : _ExpectChunk val^ Returns _ExpectChunk val^ Public Functions eq [Source] fun box eq( that: _ExpectChunk val) : Bool val Parameters that: _ExpectChunk val Returns Bool val ne [Source] fun box ne( that: _ExpectChunk val) : Bool val Parameters that: _ExpectChunk val Returns Bool val","title":"primitive _ExpectChunk"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunk/#_expectchunk","text":"[Source] primitive val _ExpectChunk","title":"_ExpectChunk"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunk/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunk/#create","text":"[Source] new val create() : _ExpectChunk val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunk/#returns","text":"_ExpectChunk val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunk/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunk/#eq","text":"[Source] fun box eq( that: _ExpectChunk val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunk/#parameters","text":"that: _ExpectChunk val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunk/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunk/#ne","text":"[Source] fun box ne( that: _ExpectChunk val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunk/#parameters_1","text":"that: _ExpectChunk val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunk/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkEnd/","text":"_ExpectChunkEnd [Source] primitive val _ExpectChunkEnd Constructors create [Source] new val create() : _ExpectChunkEnd val^ Returns _ExpectChunkEnd val^ Public Functions eq [Source] fun box eq( that: _ExpectChunkEnd val) : Bool val Parameters that: _ExpectChunkEnd val Returns Bool val ne [Source] fun box ne( that: _ExpectChunkEnd val) : Bool val Parameters that: _ExpectChunkEnd val Returns Bool val","title":"primitive _ExpectChunkEnd"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkEnd/#_expectchunkend","text":"[Source] primitive val _ExpectChunkEnd","title":"_ExpectChunkEnd"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkEnd/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkEnd/#create","text":"[Source] new val create() : _ExpectChunkEnd val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkEnd/#returns","text":"_ExpectChunkEnd val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkEnd/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkEnd/#eq","text":"[Source] fun box eq( that: _ExpectChunkEnd val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkEnd/#parameters","text":"that: _ExpectChunkEnd val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkEnd/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkEnd/#ne","text":"[Source] fun box ne( that: _ExpectChunkEnd val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkEnd/#parameters_1","text":"that: _ExpectChunkEnd val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkEnd/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkStart/","text":"_ExpectChunkStart [Source] primitive val _ExpectChunkStart Constructors create [Source] new val create() : _ExpectChunkStart val^ Returns _ExpectChunkStart val^ Public Functions eq [Source] fun box eq( that: _ExpectChunkStart val) : Bool val Parameters that: _ExpectChunkStart val Returns Bool val ne [Source] fun box ne( that: _ExpectChunkStart val) : Bool val Parameters that: _ExpectChunkStart val Returns Bool val","title":"primitive _ExpectChunkStart"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkStart/#_expectchunkstart","text":"[Source] primitive val _ExpectChunkStart","title":"_ExpectChunkStart"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkStart/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkStart/#create","text":"[Source] new val create() : _ExpectChunkStart val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkStart/#returns","text":"_ExpectChunkStart val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkStart/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkStart/#eq","text":"[Source] fun box eq( that: _ExpectChunkStart val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkStart/#parameters","text":"that: _ExpectChunkStart val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkStart/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkStart/#ne","text":"[Source] fun box ne( that: _ExpectChunkStart val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkStart/#parameters_1","text":"that: _ExpectChunkStart val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectChunkStart/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectContentLength/","text":"_ExpectContentLength [Source] primitive val _ExpectContentLength Constructors create [Source] new val create() : _ExpectContentLength val^ Returns _ExpectContentLength val^ Public Functions eq [Source] fun box eq( that: _ExpectContentLength val) : Bool val Parameters that: _ExpectContentLength val Returns Bool val ne [Source] fun box ne( that: _ExpectContentLength val) : Bool val Parameters that: _ExpectContentLength val Returns Bool val","title":"primitive _ExpectContentLength"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectContentLength/#_expectcontentlength","text":"[Source] primitive val _ExpectContentLength","title":"_ExpectContentLength"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectContentLength/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectContentLength/#create","text":"[Source] new val create() : _ExpectContentLength val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectContentLength/#returns","text":"_ExpectContentLength val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectContentLength/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectContentLength/#eq","text":"[Source] fun box eq( that: _ExpectContentLength val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectContentLength/#parameters","text":"that: _ExpectContentLength val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectContentLength/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectContentLength/#ne","text":"[Source] fun box ne( that: _ExpectContentLength val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectContentLength/#parameters_1","text":"that: _ExpectContentLength val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectContentLength/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectError/","text":"_ExpectError [Source] primitive val _ExpectError Constructors create [Source] new val create() : _ExpectError val^ Returns _ExpectError val^ Public Functions eq [Source] fun box eq( that: _ExpectError val) : Bool val Parameters that: _ExpectError val Returns Bool val ne [Source] fun box ne( that: _ExpectError val) : Bool val Parameters that: _ExpectError val Returns Bool val","title":"primitive _ExpectError"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectError/#_expecterror","text":"[Source] primitive val _ExpectError","title":"_ExpectError"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectError/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectError/#create","text":"[Source] new val create() : _ExpectError val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectError/#returns","text":"_ExpectError val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectError/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectError/#eq","text":"[Source] fun box eq( that: _ExpectError val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectError/#parameters","text":"that: _ExpectError val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectError/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectError/#ne","text":"[Source] fun box ne( that: _ExpectError val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectError/#parameters_1","text":"that: _ExpectError val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectError/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectHeaders/","text":"_ExpectHeaders [Source] primitive val _ExpectHeaders Constructors create [Source] new val create() : _ExpectHeaders val^ Returns _ExpectHeaders val^ Public Functions eq [Source] fun box eq( that: _ExpectHeaders val) : Bool val Parameters that: _ExpectHeaders val Returns Bool val ne [Source] fun box ne( that: _ExpectHeaders val) : Bool val Parameters that: _ExpectHeaders val Returns Bool val","title":"primitive _ExpectHeaders"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectHeaders/#_expectheaders","text":"[Source] primitive val _ExpectHeaders","title":"_ExpectHeaders"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectHeaders/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectHeaders/#create","text":"[Source] new val create() : _ExpectHeaders val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectHeaders/#returns","text":"_ExpectHeaders val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectHeaders/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectHeaders/#eq","text":"[Source] fun box eq( that: _ExpectHeaders val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectHeaders/#parameters","text":"that: _ExpectHeaders val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectHeaders/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectHeaders/#ne","text":"[Source] fun box ne( that: _ExpectHeaders val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectHeaders/#parameters_1","text":"that: _ExpectHeaders val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectHeaders/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectReady/","text":"_ExpectReady [Source] primitive val _ExpectReady Constructors create [Source] new val create() : _ExpectReady val^ Returns _ExpectReady val^ Public Functions eq [Source] fun box eq( that: _ExpectReady val) : Bool val Parameters that: _ExpectReady val Returns Bool val ne [Source] fun box ne( that: _ExpectReady val) : Bool val Parameters that: _ExpectReady val Returns Bool val","title":"primitive _ExpectReady"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectReady/#_expectready","text":"[Source] primitive val _ExpectReady","title":"_ExpectReady"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectReady/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectReady/#create","text":"[Source] new val create() : _ExpectReady val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectReady/#returns","text":"_ExpectReady val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectReady/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectReady/#eq","text":"[Source] fun box eq( that: _ExpectReady val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectReady/#parameters","text":"that: _ExpectReady val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectReady/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectReady/#ne","text":"[Source] fun box ne( that: _ExpectReady val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectReady/#parameters_1","text":"that: _ExpectReady val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectReady/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectRequest/","text":"_ExpectRequest [Source] primitive val _ExpectRequest Constructors create [Source] new val create() : _ExpectRequest val^ Returns _ExpectRequest val^ Public Functions eq [Source] fun box eq( that: _ExpectRequest val) : Bool val Parameters that: _ExpectRequest val Returns Bool val ne [Source] fun box ne( that: _ExpectRequest val) : Bool val Parameters that: _ExpectRequest val Returns Bool val","title":"primitive _ExpectRequest"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectRequest/#_expectrequest","text":"[Source] primitive val _ExpectRequest","title":"_ExpectRequest"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectRequest/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectRequest/#create","text":"[Source] new val create() : _ExpectRequest val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectRequest/#returns","text":"_ExpectRequest val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectRequest/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectRequest/#eq","text":"[Source] fun box eq( that: _ExpectRequest val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectRequest/#parameters","text":"that: _ExpectRequest val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectRequest/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectRequest/#ne","text":"[Source] fun box ne( that: _ExpectRequest val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectRequest/#parameters_1","text":"that: _ExpectRequest val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectRequest/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectResponse/","text":"_ExpectResponse [Source] primitive val _ExpectResponse Constructors create [Source] new val create() : _ExpectResponse val^ Returns _ExpectResponse val^ Public Functions eq [Source] fun box eq( that: _ExpectResponse val) : Bool val Parameters that: _ExpectResponse val Returns Bool val ne [Source] fun box ne( that: _ExpectResponse val) : Bool val Parameters that: _ExpectResponse val Returns Bool val","title":"primitive _ExpectResponse"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectResponse/#_expectresponse","text":"[Source] primitive val _ExpectResponse","title":"_ExpectResponse"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectResponse/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectResponse/#create","text":"[Source] new val create() : _ExpectResponse val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectResponse/#returns","text":"_ExpectResponse val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectResponse/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectResponse/#eq","text":"[Source] fun box eq( that: _ExpectResponse val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectResponse/#parameters","text":"that: _ExpectResponse val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectResponse/#returns_1","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectResponse/#ne","text":"[Source] fun box ne( that: _ExpectResponse val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectResponse/#parameters_1","text":"that: _ExpectResponse val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ExpectResponse/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_FixedResponseHTTPServerNotify/","text":"_FixedResponseHTTPServerNotify [Source] Test http server that spits out fixed responses. apply returns a TCPListenNotify object. primitive val _FixedResponseHTTPServerNotify Constructors create [Source] new val create() : _FixedResponseHTTPServerNotify val^ Returns _FixedResponseHTTPServerNotify val^ Public Functions apply [Source] fun box apply( h': TestHelper val, f: {(String val)} iso, r: Array[String val] val) : TCPListenNotify iso^ Parameters h': TestHelper val f: {(String val)} iso r: Array [ String val] val Returns TCPListenNotify iso^ eq [Source] fun box eq( that: _FixedResponseHTTPServerNotify val) : Bool val Parameters that: _FixedResponseHTTPServerNotify val Returns Bool val ne [Source] fun box ne( that: _FixedResponseHTTPServerNotify val) : Bool val Parameters that: _FixedResponseHTTPServerNotify val Returns Bool val","title":"primitive _FixedResponseHTTPServerNotify"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_FixedResponseHTTPServerNotify/#_fixedresponsehttpservernotify","text":"[Source] Test http server that spits out fixed responses. apply returns a TCPListenNotify object. primitive val _FixedResponseHTTPServerNotify","title":"_FixedResponseHTTPServerNotify"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_FixedResponseHTTPServerNotify/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_FixedResponseHTTPServerNotify/#create","text":"[Source] new val create() : _FixedResponseHTTPServerNotify val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_FixedResponseHTTPServerNotify/#returns","text":"_FixedResponseHTTPServerNotify val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_FixedResponseHTTPServerNotify/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_FixedResponseHTTPServerNotify/#apply","text":"[Source] fun box apply( h': TestHelper val, f: {(String val)} iso, r: Array[String val] val) : TCPListenNotify iso^","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_FixedResponseHTTPServerNotify/#parameters","text":"h': TestHelper val f: {(String val)} iso r: Array [ String val] val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_FixedResponseHTTPServerNotify/#returns_1","text":"TCPListenNotify iso^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_FixedResponseHTTPServerNotify/#eq","text":"[Source] fun box eq( that: _FixedResponseHTTPServerNotify val) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_FixedResponseHTTPServerNotify/#parameters_1","text":"that: _FixedResponseHTTPServerNotify val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_FixedResponseHTTPServerNotify/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_FixedResponseHTTPServerNotify/#ne","text":"[Source] fun box ne( that: _FixedResponseHTTPServerNotify val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_FixedResponseHTTPServerNotify/#parameters_2","text":"that: _FixedResponseHTTPServerNotify val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_FixedResponseHTTPServerNotify/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/","text":"_HTTPConnTestHandler [Source] class ref _HTTPConnTestHandler is HTTPHandler ref Implements HTTPHandler ref Constructors create [Source] new ref create( h': TestHelper val) : _HTTPConnTestHandler ref^ Parameters h': TestHelper val Returns _HTTPConnTestHandler ref^ Public fields var n_received: U32 val [Source] let h: TestHelper val [Source] Public Functions apply [Source] fun ref apply( payload: Payload val) : Any tag Parameters payload: Payload val Returns Any tag chunk [Source] fun ref chunk( data: (String val | Array[U8 val] val)) : None val Parameters data: ( String val | Array [ U8 val] val) Returns None val finished [Source] fun ref finished() : None val Returns None val cancelled [Source] fun ref cancelled() : None val Returns None val throttled [Source] fun ref throttled() : None val Returns None val unthrottled [Source] fun ref unthrottled() : None val Returns None val need_body [Source] fun ref need_body() : None val Returns None val","title":"class _HTTPConnTestHandler"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#_httpconntesthandler","text":"[Source] class ref _HTTPConnTestHandler is HTTPHandler ref","title":"_HTTPConnTestHandler"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#implements","text":"HTTPHandler ref","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#create","text":"[Source] new ref create( h': TestHelper val) : _HTTPConnTestHandler ref^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#parameters","text":"h': TestHelper val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#returns","text":"_HTTPConnTestHandler ref^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#public-fields","text":"","title":"Public fields"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#var-n_received-u32-val","text":"[Source]","title":"var n_received: U32 val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#let-h-testhelper-val","text":"[Source]","title":"let h: TestHelper val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#apply","text":"[Source] fun ref apply( payload: Payload val) : Any tag","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#parameters_1","text":"payload: Payload val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#returns_1","text":"Any tag","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#chunk","text":"[Source] fun ref chunk( data: (String val | Array[U8 val] val)) : None val","title":"chunk"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#parameters_2","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#returns_2","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#finished","text":"[Source] fun ref finished() : None val","title":"finished"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#returns_3","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#cancelled","text":"[Source] fun ref cancelled() : None val","title":"cancelled"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#returns_4","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#throttled","text":"[Source] fun ref throttled() : None val","title":"throttled"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#returns_5","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#unthrottled","text":"[Source] fun ref unthrottled() : None val","title":"unthrottled"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#returns_6","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#need_body","text":"[Source] fun ref need_body() : None val","title":"need_body"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandler/#returns_7","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandlerFactory/","text":"_HTTPConnTestHandlerFactory [Source] class val _HTTPConnTestHandlerFactory is HandlerFactory ref Implements HandlerFactory ref Constructors create [Source] new val create( h': TestHelper val) : _HTTPConnTestHandlerFactory val^ Parameters h': TestHelper val Returns _HTTPConnTestHandlerFactory val^ Public fields let h: TestHelper val [Source] Public Functions apply [Source] fun box apply( session: HTTPSession tag) : HTTPHandler ref^ Parameters session: HTTPSession tag Returns HTTPHandler ref^","title":"class _HTTPConnTestHandlerFactory"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandlerFactory/#_httpconntesthandlerfactory","text":"[Source] class val _HTTPConnTestHandlerFactory is HandlerFactory ref","title":"_HTTPConnTestHandlerFactory"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandlerFactory/#implements","text":"HandlerFactory ref","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandlerFactory/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandlerFactory/#create","text":"[Source] new val create( h': TestHelper val) : _HTTPConnTestHandlerFactory val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandlerFactory/#parameters","text":"h': TestHelper val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandlerFactory/#returns","text":"_HTTPConnTestHandlerFactory val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandlerFactory/#public-fields","text":"","title":"Public fields"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandlerFactory/#let-h-testhelper-val","text":"[Source]","title":"let h: TestHelper val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandlerFactory/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandlerFactory/#apply","text":"[Source] fun box apply( session: HTTPSession tag) : HTTPHandler ref^","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandlerFactory/#parameters_1","text":"session: HTTPSession tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HTTPConnTestHandlerFactory/#returns_1","text":"HTTPHandler ref^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/","text":"_HostService [Source] class val _HostService is Hashable ref, Equatable[_HostService val] ref Implements Hashable ref Equatable [ _HostService val] ref Constructors create [Source] new val create( scheme': String val, host': String val, service': String val) : _HostService val^ Parameters scheme': String val host': String val service': String val Returns _HostService val^ Public fields let scheme: String val [Source] let host: String val [Source] let service: String val [Source] Public Functions hash [Source] fun box hash() : USize val Returns USize val eq [Source] fun box eq( that: _HostService box) : Bool val Parameters that: _HostService box Returns Bool val ne fun box ne( that: _HostService val) : Bool val Parameters that: _HostService val Returns Bool val","title":"class _HostService"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/#_hostservice","text":"[Source] class val _HostService is Hashable ref, Equatable[_HostService val] ref","title":"_HostService"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/#implements","text":"Hashable ref Equatable [ _HostService val] ref","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/#create","text":"[Source] new val create( scheme': String val, host': String val, service': String val) : _HostService val^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/#parameters","text":"scheme': String val host': String val service': String val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/#returns","text":"_HostService val^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/#public-fields","text":"","title":"Public fields"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/#let-scheme-string-val","text":"[Source]","title":"let scheme: String val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/#let-host-string-val","text":"[Source]","title":"let host: String val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/#let-service-string-val","text":"[Source]","title":"let service: String val"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/#returns_1","text":"USize val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/#eq","text":"[Source] fun box eq( that: _HostService box) : Bool val","title":"eq"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/#parameters_1","text":"that: _HostService box","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/#ne","text":"fun box ne( that: _HostService val) : Bool val","title":"ne"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/#parameters_2","text":"that: _HostService val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_HostService/#returns_3","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_PayloadState/","text":"_PayloadState [Source] type _PayloadState is (_ExpectRequest val | _ExpectResponse val | _ExpectHeaders val | _ExpectContentLength val | _ExpectChunkStart val | _ExpectChunk val | _ExpectChunkEnd val | _ExpectBody val | _ExpectReady val | _ExpectError val) Type Alias For ( _ExpectRequest val | _ExpectResponse val | _ExpectHeaders val | _ExpectContentLength val | _ExpectChunkStart val | _ExpectChunk val | _ExpectChunkEnd val | _ExpectBody val | _ExpectReady val | _ExpectError val)","title":"type _PayloadState"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_PayloadState/#_payloadstate","text":"[Source] type _PayloadState is (_ExpectRequest val | _ExpectResponse val | _ExpectHeaders val | _ExpectContentLength val | _ExpectChunkStart val | _ExpectChunk val | _ExpectChunkEnd val | _ExpectBody val | _ExpectReady val | _ExpectError val)","title":"_PayloadState"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_PayloadState/#type-alias-for","text":"( _ExpectRequest val | _ExpectResponse val | _ExpectHeaders val | _ExpectContentLength val | _ExpectChunkStart val | _ExpectChunk val | _ExpectChunkEnd val | _ExpectBody val | _ExpectReady val | _ExpectError val)","title":"Type Alias For"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/","text":"_ServerConnHandler [Source] This is the network notification handler for the server. It uses PayloadBuilder to assemble request Payload objects using received chunks of data. Functions in this class execute within the TCPConnection actor. class ref _ServerConnHandler is TCPConnectionNotify ref Implements TCPConnectionNotify ref Constructors create [Source] Initialize the context for parsing incoming HTTP requests. new iso create( handlermaker: HandlerFactory val, logger: Logger val, reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | None val), registry: HTTPServer tag) : _ServerConnHandler iso^ Parameters handlermaker: HandlerFactory val logger: Logger val reversedns: ( AmbientAuth val | NetAuth val | DNSAuth val | None val) registry: HTTPServer tag Returns _ServerConnHandler iso^ Public Functions accepted [Source] Accept the incoming TCP connection and create the actor that will manage further communication, and the message parser that feeds it. fun ref accepted( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val received [Source] Pass chunks of data to the HTTPParser for this session. It will then pass completed information on the the HTTPSession . fun ref received( conn: TCPConnection ref, data: Array[U8 val] iso, times: USize val) : Bool val Parameters conn: TCPConnection ref data: Array [ U8 val] iso times: USize val Returns Bool val throttled [Source] Notification that the TCP connection to the client can not accept data for a while. fun ref throttled( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val unthrottled [Source] Notification that the TCP connection can resume accepting data. fun ref unthrottled( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val closed [Source] The connection has been closed. Abort the session. fun ref closed( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val connect_failed [Source] The connect has failed. TODO: is it a case for server-side? fun ref connect_failed( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val connecting fun ref connecting( conn: TCPConnection ref, count: U32 val) : None val Parameters conn: TCPConnection ref count: U32 val Returns None val connected fun ref connected( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val auth_failed fun ref auth_failed( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val sent fun ref sent( conn: TCPConnection ref, data: (String val | Array[U8 val] val)) : (String val | Array[U8 val] val) Parameters conn: TCPConnection ref data: ( String val | Array [ U8 val] val) Returns ( String val | Array [ U8 val] val) sentv fun ref sentv( conn: TCPConnection ref, data: ByteSeqIter val) : ByteSeqIter val Parameters conn: TCPConnection ref data: ByteSeqIter val Returns ByteSeqIter val expect fun ref expect( conn: TCPConnection ref, qty: USize val) : USize val Parameters conn: TCPConnection ref qty: USize val Returns USize val","title":"class _ServerConnHandler"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#_serverconnhandler","text":"[Source] This is the network notification handler for the server. It uses PayloadBuilder to assemble request Payload objects using received chunks of data. Functions in this class execute within the TCPConnection actor. class ref _ServerConnHandler is TCPConnectionNotify ref","title":"_ServerConnHandler"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#implements","text":"TCPConnectionNotify ref","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#create","text":"[Source] Initialize the context for parsing incoming HTTP requests. new iso create( handlermaker: HandlerFactory val, logger: Logger val, reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | None val), registry: HTTPServer tag) : _ServerConnHandler iso^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#parameters","text":"handlermaker: HandlerFactory val logger: Logger val reversedns: ( AmbientAuth val | NetAuth val | DNSAuth val | None val) registry: HTTPServer tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#returns","text":"_ServerConnHandler iso^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#accepted","text":"[Source] Accept the incoming TCP connection and create the actor that will manage further communication, and the message parser that feeds it. fun ref accepted( conn: TCPConnection ref) : None val","title":"accepted"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#parameters_1","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#returns_1","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#received","text":"[Source] Pass chunks of data to the HTTPParser for this session. It will then pass completed information on the the HTTPSession . fun ref received( conn: TCPConnection ref, data: Array[U8 val] iso, times: USize val) : Bool val","title":"received"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#parameters_2","text":"conn: TCPConnection ref data: Array [ U8 val] iso times: USize val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#returns_2","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#throttled","text":"[Source] Notification that the TCP connection to the client can not accept data for a while. fun ref throttled( conn: TCPConnection ref) : None val","title":"throttled"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#parameters_3","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#returns_3","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#unthrottled","text":"[Source] Notification that the TCP connection can resume accepting data. fun ref unthrottled( conn: TCPConnection ref) : None val","title":"unthrottled"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#parameters_4","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#returns_4","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#closed","text":"[Source] The connection has been closed. Abort the session. fun ref closed( conn: TCPConnection ref) : None val","title":"closed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#parameters_5","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#returns_5","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#connect_failed","text":"[Source] The connect has failed. TODO: is it a case for server-side? fun ref connect_failed( conn: TCPConnection ref) : None val","title":"connect_failed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#parameters_6","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#returns_6","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#connecting","text":"fun ref connecting( conn: TCPConnection ref, count: U32 val) : None val","title":"connecting"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#parameters_7","text":"conn: TCPConnection ref count: U32 val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#returns_7","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#connected","text":"fun ref connected( conn: TCPConnection ref) : None val","title":"connected"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#parameters_8","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#returns_8","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#auth_failed","text":"fun ref auth_failed( conn: TCPConnection ref) : None val","title":"auth_failed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#parameters_9","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#returns_9","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#sent","text":"fun ref sent( conn: TCPConnection ref, data: (String val | Array[U8 val] val)) : (String val | Array[U8 val] val)","title":"sent"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#parameters_10","text":"conn: TCPConnection ref data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#returns_10","text":"( String val | Array [ U8 val] val)","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#sentv","text":"fun ref sentv( conn: TCPConnection ref, data: ByteSeqIter val) : ByteSeqIter val","title":"sentv"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#parameters_11","text":"conn: TCPConnection ref data: ByteSeqIter val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#returns_11","text":"ByteSeqIter val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#expect","text":"fun ref expect( conn: TCPConnection ref, qty: USize val) : USize val","title":"expect"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#parameters_12","text":"conn: TCPConnection ref qty: USize val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnHandler/#returns_12","text":"USize val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/","text":"_ServerConnection [Source] Manages a stream of requests coming into a server from a single client, dispatches those request to a back-end, and returns the responses back to the client. actor tag _ServerConnection is HTTPSession tag Implements HTTPSession tag Constructors create [Source] Create a connection actor to manage communication with to a new client. We also create an instance of the application's back-end handler that will process incoming requests. new tag create( handlermaker: HandlerFactory val, logger: Logger val, conn: TCPConnection tag, client_ip: String val) : _ServerConnection tag^ Parameters handlermaker: HandlerFactory val logger: Logger val conn: TCPConnection tag client_ip: String val Returns _ServerConnection tag^ Public Behaviours dispose [Source] Close the connection from the server end. be dispose() cancel [Source] Cancel the current response. The connection has closed. be cancel( msg: Payload val) Parameters msg: Payload val apply [Source] Initiate transmission of the HTTP Response message for the current Request. be apply( response: Payload val) Parameters response: Payload val write [Source] Write low level outbound raw byte stream. be write( data: (String val | Array[U8 val] val)) Parameters data: ( String val | Array [ U8 val] val) finish [Source] We are done sending a response. We can close the connection if keepalive was not requested. be finish() throttled [Source] TCP connection can not accept data for a while. be throttled() unthrottled [Source] TCP connection can not accept data for a while. be unthrottled() Private Behaviours _deliver [Source] Dispatch requests. At the time this behavior is called for StreamTransfer and ChunkTransfer encodings, only the headers of the request may have been received. Receiving and dealing with the body, which could be quite large in POST methods, is up to the chosen application handler. The client can send several requests without waiting for a response, but they are only passed to the back end one at a time. Only when all of the response to a processed request has been sent is the next request processed. be _deliver( request: Payload val) Parameters request: Payload val _chunk [Source] Receive some request body data, which we pass on to the handler. be _chunk( data: (String val | Array[U8 val] val)) Parameters data: ( String val | Array [ U8 val] val) _finish [Source] Inidcates that the last inbound body chunk has been sent to _chunk . This is passed on to the back end. be _finish() _closed [Source] be _closed() _mute [Source] be _mute() _unmute [Source] be _unmute() Private Functions _dispatch_pending [Source] If we have pending requests, dispatch the next one. fun ref _dispatch_pending() : None val Returns None val _send [Source] Send a single response. fun ref _send( response: Payload val) : None val Parameters response: Payload val Returns None val","title":"actor _ServerConnection"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#_serverconnection","text":"[Source] Manages a stream of requests coming into a server from a single client, dispatches those request to a back-end, and returns the responses back to the client. actor tag _ServerConnection is HTTPSession tag","title":"_ServerConnection"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#implements","text":"HTTPSession tag","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#create","text":"[Source] Create a connection actor to manage communication with to a new client. We also create an instance of the application's back-end handler that will process incoming requests. new tag create( handlermaker: HandlerFactory val, logger: Logger val, conn: TCPConnection tag, client_ip: String val) : _ServerConnection tag^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#parameters","text":"handlermaker: HandlerFactory val logger: Logger val conn: TCPConnection tag client_ip: String val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#returns","text":"_ServerConnection tag^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#dispose","text":"[Source] Close the connection from the server end. be dispose()","title":"dispose"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#cancel","text":"[Source] Cancel the current response. The connection has closed. be cancel( msg: Payload val)","title":"cancel"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#parameters_1","text":"msg: Payload val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#apply","text":"[Source] Initiate transmission of the HTTP Response message for the current Request. be apply( response: Payload val)","title":"apply"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#parameters_2","text":"response: Payload val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#write","text":"[Source] Write low level outbound raw byte stream. be write( data: (String val | Array[U8 val] val))","title":"write"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#parameters_3","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#finish","text":"[Source] We are done sending a response. We can close the connection if keepalive was not requested. be finish()","title":"finish"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#throttled","text":"[Source] TCP connection can not accept data for a while. be throttled()","title":"throttled"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#unthrottled","text":"[Source] TCP connection can not accept data for a while. be unthrottled()","title":"unthrottled"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#_deliver","text":"[Source] Dispatch requests. At the time this behavior is called for StreamTransfer and ChunkTransfer encodings, only the headers of the request may have been received. Receiving and dealing with the body, which could be quite large in POST methods, is up to the chosen application handler. The client can send several requests without waiting for a response, but they are only passed to the back end one at a time. Only when all of the response to a processed request has been sent is the next request processed. be _deliver( request: Payload val)","title":"_deliver"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#parameters_4","text":"request: Payload val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#_chunk","text":"[Source] Receive some request body data, which we pass on to the handler. be _chunk( data: (String val | Array[U8 val] val))","title":"_chunk"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#parameters_5","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#_finish","text":"[Source] Inidcates that the last inbound body chunk has been sent to _chunk . This is passed on to the back end. be _finish()","title":"_finish"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#_closed","text":"[Source] be _closed()","title":"_closed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#_mute","text":"[Source] be _mute()","title":"_mute"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#_unmute","text":"[Source] be _unmute()","title":"_unmute"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#private-functions","text":"","title":"Private Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#_dispatch_pending","text":"[Source] If we have pending requests, dispatch the next one. fun ref _dispatch_pending() : None val","title":"_dispatch_pending"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#returns_1","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#_send","text":"[Source] Send a single response. fun ref _send( response: Payload val) : None val","title":"_send"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#parameters_6","text":"response: Payload val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerConnection/#returns_2","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/","text":"_ServerListener [Source] Manages the listening socket for an HTTP server. Incoming requests are assembled and dispatched. class ref _ServerListener is TCPListenNotify ref Implements TCPListenNotify ref Constructors create [Source] Creates a new listening socket manager. new iso create( server: HTTPServer tag, sslctx: (SSLContext val | None val), handler: HandlerFactory val, logger: Logger val, reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | None val)) : _ServerListener iso^ Parameters server: HTTPServer tag sslctx: ( SSLContext val | None val) handler: HandlerFactory val logger: Logger val reversedns: ( AmbientAuth val | NetAuth val | DNSAuth val | None val) Returns _ServerListener iso^ Public Functions listening [Source] Inform the server of the bound IP address. fun ref listening( listen: TCPListener ref) : None val Parameters listen: TCPListener ref Returns None val not_listening [Source] Inform the server we failed to listen. fun ref not_listening( listen: TCPListener ref) : None val Parameters listen: TCPListener ref Returns None val closed [Source] Inform the server we have stopped listening. fun ref closed( listen: TCPListener ref) : None val Parameters listen: TCPListener ref Returns None val connected [Source] Create a notifier for a specific HTTP socket. A new instance of the back-end Handler is passed along so it can be used on each Payload . fun ref connected( listen: TCPListener ref) : TCPConnectionNotify iso^ Parameters listen: TCPListener ref Returns TCPConnectionNotify iso^","title":"class _ServerListener"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/#_serverlistener","text":"[Source] Manages the listening socket for an HTTP server. Incoming requests are assembled and dispatched. class ref _ServerListener is TCPListenNotify ref","title":"_ServerListener"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/#implements","text":"TCPListenNotify ref","title":"Implements"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/#create","text":"[Source] Creates a new listening socket manager. new iso create( server: HTTPServer tag, sslctx: (SSLContext val | None val), handler: HandlerFactory val, logger: Logger val, reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | None val)) : _ServerListener iso^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/#parameters","text":"server: HTTPServer tag sslctx: ( SSLContext val | None val) handler: HandlerFactory val logger: Logger val reversedns: ( AmbientAuth val | NetAuth val | DNSAuth val | None val)","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/#returns","text":"_ServerListener iso^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/#listening","text":"[Source] Inform the server of the bound IP address. fun ref listening( listen: TCPListener ref) : None val","title":"listening"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/#parameters_1","text":"listen: TCPListener ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/#returns_1","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/#not_listening","text":"[Source] Inform the server we failed to listen. fun ref not_listening( listen: TCPListener ref) : None val","title":"not_listening"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/#parameters_2","text":"listen: TCPListener ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/#returns_2","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/#closed","text":"[Source] Inform the server we have stopped listening. fun ref closed( listen: TCPListener ref) : None val","title":"closed"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/#parameters_3","text":"listen: TCPListener ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/#returns_3","text":"None val","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/#connected","text":"[Source] Create a notifier for a specific HTTP socket. A new instance of the back-end Handler is passed along so it can be used on each Payload . fun ref connected( listen: TCPListener ref) : TCPConnectionNotify iso^","title":"connected"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/#parameters_4","text":"listen: TCPListener ref","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_ServerListener/#returns_4","text":"TCPConnectionNotify iso^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_SessionGuard/","text":"_SessionGuard [Source] Enforces the rule that an 'unsafe' request monopolizes the HTTPSession. A 'safe' request does not modify a resource state on the server, and such a request has no body. class ref _SessionGuard Constructors create [Source] new iso create( session: HTTPSession tag) : _SessionGuard iso^ Parameters session: HTTPSession tag Returns _SessionGuard iso^ Public fields var current: ( Payload val | None val) [Source] Public Functions submit [Source] Accept a request for transmission to the server. This will fail if the request is not \"safe\" and the HTTPSession is busy. Due to the possibly large body size, these requests can not be queued. fun ref submit( request: Payload val) : None val ? Parameters request: Payload val Returns None val ?","title":"class _SessionGuard"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_SessionGuard/#_sessionguard","text":"[Source] Enforces the rule that an 'unsafe' request monopolizes the HTTPSession. A 'safe' request does not modify a resource state on the server, and such a request has no body. class ref _SessionGuard","title":"_SessionGuard"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_SessionGuard/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_SessionGuard/#create","text":"[Source] new iso create( session: HTTPSession tag) : _SessionGuard iso^","title":"create"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_SessionGuard/#parameters","text":"session: HTTPSession tag","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_SessionGuard/#returns","text":"_SessionGuard iso^","title":"Returns"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_SessionGuard/#public-fields","text":"","title":"Public fields"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_SessionGuard/#var-current-payload-val-none-val","text":"[Source]","title":"var current: (Payload val | None val)"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_SessionGuard/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_SessionGuard/#submit","text":"[Source] Accept a request for transmission to the server. This will fail if the request is not \"safe\" and the HTTPSession is busy. Due to the possibly large body size, these requests can not be queued. fun ref submit( request: Payload val) : None val ?","title":"submit"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_SessionGuard/#parameters_1","text":"request: Payload val","title":"Parameters"},{"location":"-tmp-tmp.0vJBxwE5k8-http-0.2.0-http-_SessionGuard/#returns_1","text":"None val ?","title":"Returns"},{"location":"assert--index/","text":"Assert package Contains runtime assertions. If you are looking for assertion that only run when your code was compiled with the debug flag, check out Assert . For assertions that are always enabled, check out Fact . Public Types primitive Assert primitive Fact","title":"Package"},{"location":"assert--index/#assert-package","text":"Contains runtime assertions. If you are looking for assertion that only run when your code was compiled with the debug flag, check out Assert . For assertions that are always enabled, check out Fact .","title":"Assert package"},{"location":"assert--index/#public-types","text":"primitive Assert primitive Fact","title":"Public Types"},{"location":"assert-Assert/","text":"Assert [Source] This is a debug only assertion. If the test is false, it will print any supplied error message to stderr and raise an error. primitive val Assert Constructors create [Source] new val create() : Assert val^ Returns Assert val^ Public Functions apply [Source] fun box apply( test: Bool val, msg: String val = seq) : None val ? Parameters test: Bool val msg: String val = seq Returns None val ? eq [Source] fun box eq( that: Assert val) : Bool val Parameters that: Assert val Returns Bool val ne [Source] fun box ne( that: Assert val) : Bool val Parameters that: Assert val Returns Bool val","title":"primitive Assert"},{"location":"assert-Assert/#assert","text":"[Source] This is a debug only assertion. If the test is false, it will print any supplied error message to stderr and raise an error. primitive val Assert","title":"Assert"},{"location":"assert-Assert/#constructors","text":"","title":"Constructors"},{"location":"assert-Assert/#create","text":"[Source] new val create() : Assert val^","title":"create"},{"location":"assert-Assert/#returns","text":"Assert val^","title":"Returns"},{"location":"assert-Assert/#public-functions","text":"","title":"Public Functions"},{"location":"assert-Assert/#apply","text":"[Source] fun box apply( test: Bool val, msg: String val = seq) : None val ?","title":"apply"},{"location":"assert-Assert/#parameters","text":"test: Bool val msg: String val = seq","title":"Parameters"},{"location":"assert-Assert/#returns_1","text":"None val ?","title":"Returns"},{"location":"assert-Assert/#eq","text":"[Source] fun box eq( that: Assert val) : Bool val","title":"eq"},{"location":"assert-Assert/#parameters_1","text":"that: Assert val","title":"Parameters"},{"location":"assert-Assert/#returns_2","text":"Bool val","title":"Returns"},{"location":"assert-Assert/#ne","text":"[Source] fun box ne( that: Assert val) : Bool val","title":"ne"},{"location":"assert-Assert/#parameters_2","text":"that: Assert val","title":"Parameters"},{"location":"assert-Assert/#returns_3","text":"Bool val","title":"Returns"},{"location":"assert-Fact/","text":"Fact [Source] This is an assertion that is always enabled. If the test is false, it will print any supplied error message to stderr and raise an error. primitive val Fact Constructors create [Source] new val create() : Fact val^ Returns Fact val^ Public Functions apply [Source] fun box apply( test: Bool val, msg: String val = seq) : None val ? Parameters test: Bool val msg: String val = seq Returns None val ? eq [Source] fun box eq( that: Fact val) : Bool val Parameters that: Fact val Returns Bool val ne [Source] fun box ne( that: Fact val) : Bool val Parameters that: Fact val Returns Bool val","title":"primitive Fact"},{"location":"assert-Fact/#fact","text":"[Source] This is an assertion that is always enabled. If the test is false, it will print any supplied error message to stderr and raise an error. primitive val Fact","title":"Fact"},{"location":"assert-Fact/#constructors","text":"","title":"Constructors"},{"location":"assert-Fact/#create","text":"[Source] new val create() : Fact val^","title":"create"},{"location":"assert-Fact/#returns","text":"Fact val^","title":"Returns"},{"location":"assert-Fact/#public-functions","text":"","title":"Public Functions"},{"location":"assert-Fact/#apply","text":"[Source] fun box apply( test: Bool val, msg: String val = seq) : None val ?","title":"apply"},{"location":"assert-Fact/#parameters","text":"test: Bool val msg: String val = seq","title":"Parameters"},{"location":"assert-Fact/#returns_1","text":"None val ?","title":"Returns"},{"location":"assert-Fact/#eq","text":"[Source] fun box eq( that: Fact val) : Bool val","title":"eq"},{"location":"assert-Fact/#parameters_1","text":"that: Fact val","title":"Parameters"},{"location":"assert-Fact/#returns_2","text":"Bool val","title":"Returns"},{"location":"assert-Fact/#ne","text":"[Source] fun box ne( that: Fact val) : Bool val","title":"ne"},{"location":"assert-Fact/#parameters_2","text":"that: Fact val","title":"Parameters"},{"location":"assert-Fact/#returns_3","text":"Bool val","title":"Returns"},{"location":"buffered--index/","text":"Buffered Package The Buffered package provides two classes, Writer and Reader , for writing and reading messages using common encodings. These classes are useful when dealing with things like network data and binary file formats. Example program use buffered actor Main new create(env: Env) = let reader = Reader let writer = Writer writer.u32_be(42) writer.f32_be(3.14) let b = recover iso Array[U8] end for chunk in writer.done().values() do b.append(chunk) end reader.append(consume b) try env.out.print(reader.u32_be()?.string()) // prints 42 env.out.print(reader.f32_be()?.string()) // prints 3.14 end Public Types class Writer class Reader","title":"Package"},{"location":"buffered--index/#buffered-package","text":"The Buffered package provides two classes, Writer and Reader , for writing and reading messages using common encodings. These classes are useful when dealing with things like network data and binary file formats.","title":"Buffered Package"},{"location":"buffered--index/#example-program","text":"use buffered actor Main new create(env: Env) = let reader = Reader let writer = Writer writer.u32_be(42) writer.f32_be(3.14) let b = recover iso Array[U8] end for chunk in writer.done().values() do b.append(chunk) end reader.append(consume b) try env.out.print(reader.u32_be()?.string()) // prints 42 env.out.print(reader.f32_be()?.string()) // prints 3.14 end","title":"Example program"},{"location":"buffered--index/#public-types","text":"class Writer class Reader","title":"Public Types"},{"location":"buffered-Reader/","text":"Reader [Source] Store network data and provide a parsing interface. Reader provides a way to extract typed data from a sequence of bytes. The Reader manages the underlying data structures to provide a read cursor over a contiguous sequence of bytes. It is useful for decoding data that is received over a network or stored in a file. Chunk of bytes are added to the Reader using the append method, and typed data is extracted using the getter methods. For example, suppose we have a UDP-based network data protocol where messages consist of the following: list_size - the number of items in the following list of items as a big-endian 32-bit integer zero or more items of the following data: a big-endian 64-bit floating point number a string that starts with a big-endian 32-bit integer that specifies the length of the string, followed by a number of bytes that represent the string A message would be something like this: [message_length][list_size][float1][string1][float2][string2]... The following program uses a Reader to decode a message of this type and print them: use buffered use collections class Notify is InputNotify let _env: Env new create(env: Env) = _env = env fun ref apply(data: Array[U8] iso) = let rb = Reader rb.append(consume data) try while true do let len = rb.i32_be()? let items = rb.i32_be()?.usize() for range in Range(0, items) do let f = rb.f32_be()? let str_len = rb.i32_be()?.usize() let str = String.from_array(rb.block(str_len)?) _env.out.print( [( + f.string() + ), ( + str + )] ) end end end actor Main new create(env: Env) = env.input(recover Notify(env) end, 1024) class ref Reader Constructors create [Source] new iso create() : Reader iso^ Returns Reader iso^ Public Functions size [Source] Return the number of available bytes. fun box size() : USize val Returns USize val clear [Source] Discard all pending data. fun ref clear() : None val Returns None val append [Source] Add a chunk of data. fun ref append( data: (String val | Array[U8 val] val)) : None val Parameters data: ( String val | Array [ U8 val] val) Returns None val skip [Source] Skip n bytes. fun ref skip( n: USize val) : None val ? Parameters n: USize val Returns None val ? block [Source] Return a block as a contiguous chunk of memory. Will throw an error if you request a block larger than what is currently stored in the Reader . fun ref block( len: USize val) : Array[U8 val] iso^ ? Parameters len: USize val Returns Array [ U8 val] iso^ ? read_until [Source] Find the first occurrence of the separator and return the block of bytes before its position. The separator is not included in the returned array, but it is removed from the buffer. To read a line of text, prefer line() that handles \\n and \\r\\n. fun ref read_until( separator: U8 val) : Array[U8 val] iso^ ? Parameters separator: U8 val Returns Array [ U8 val] iso^ ? line [Source] Return a \\n or \\r\\n terminated line as a string. By default the newline is not included in the returned string, but it is removed from the buffer. Set keep_line_breaks to true to keep the line breaks in the returned line. fun ref line( keep_line_breaks: Bool val = seq) : String iso^ ? Parameters keep_line_breaks: Bool val = seq Returns String iso^ ? u8 [Source] Get a U8. Raise an error if there isn't enough data. fun ref u8() : U8 val ? Returns U8 val ? i8 [Source] Get an I8. fun ref i8() : I8 val ? Returns I8 val ? u16_be [Source] Get a big-endian U16. fun ref u16_be() : U16 val ? Returns U16 val ? u16_le [Source] Get a little-endian U16. fun ref u16_le() : U16 val ? Returns U16 val ? i16_be [Source] Get a big-endian I16. fun ref i16_be() : I16 val ? Returns I16 val ? i16_le [Source] Get a little-endian I16. fun ref i16_le() : I16 val ? Returns I16 val ? u32_be [Source] Get a big-endian U32. fun ref u32_be() : U32 val ? Returns U32 val ? u32_le [Source] Get a little-endian U32. fun ref u32_le() : U32 val ? Returns U32 val ? i32_be [Source] Get a big-endian I32. fun ref i32_be() : I32 val ? Returns I32 val ? i32_le [Source] Get a little-endian I32. fun ref i32_le() : I32 val ? Returns I32 val ? u64_be [Source] Get a big-endian U64. fun ref u64_be() : U64 val ? Returns U64 val ? u64_le [Source] Get a little-endian U64. fun ref u64_le() : U64 val ? Returns U64 val ? i64_be [Source] Get a big-endian I64. fun ref i64_be() : I64 val ? Returns I64 val ? i64_le [Source] Get a little-endian I64. fun ref i64_le() : I64 val ? Returns I64 val ? u128_be [Source] Get a big-endian U128. fun ref u128_be() : U128 val ? Returns U128 val ? u128_le [Source] Get a little-endian U128. fun ref u128_le() : U128 val ? Returns U128 val ? i128_be [Source] Get a big-endian I129. fun ref i128_be() : I128 val ? Returns I128 val ? i128_le [Source] Get a little-endian I128. fun ref i128_le() : I128 val ? Returns I128 val ? f32_be [Source] Get a big-endian F32. fun ref f32_be() : F32 val ? Returns F32 val ? f32_le [Source] Get a little-endian F32. fun ref f32_le() : F32 val ? Returns F32 val ? f64_be [Source] Get a big-endian F64. fun ref f64_be() : F64 val ? Returns F64 val ? f64_le [Source] Get a little-endian F64. fun ref f64_le() : F64 val ? Returns F64 val ? peek_u8 [Source] Peek at a U8 at the given offset. Raise an error if there isn't enough data. fun box peek_u8( offset: USize val = seq) : U8 val ? Parameters offset: USize val = seq Returns U8 val ? peek_i8 [Source] Peek at an I8. fun box peek_i8( offset: USize val = seq) : I8 val ? Parameters offset: USize val = seq Returns I8 val ? peek_u16_be [Source] Peek at a big-endian U16. fun box peek_u16_be( offset: USize val = seq) : U16 val ? Parameters offset: USize val = seq Returns U16 val ? peek_u16_le [Source] Peek at a little-endian U16. fun box peek_u16_le( offset: USize val = seq) : U16 val ? Parameters offset: USize val = seq Returns U16 val ? peek_i16_be [Source] Peek at a big-endian I16. fun box peek_i16_be( offset: USize val = seq) : I16 val ? Parameters offset: USize val = seq Returns I16 val ? peek_i16_le [Source] Peek at a little-endian I16. fun box peek_i16_le( offset: USize val = seq) : I16 val ? Parameters offset: USize val = seq Returns I16 val ? peek_u32_be [Source] Peek at a big-endian U32. fun box peek_u32_be( offset: USize val = seq) : U32 val ? Parameters offset: USize val = seq Returns U32 val ? peek_u32_le [Source] Peek at a little-endian U32. fun box peek_u32_le( offset: USize val = seq) : U32 val ? Parameters offset: USize val = seq Returns U32 val ? peek_i32_be [Source] Peek at a big-endian I32. fun box peek_i32_be( offset: USize val = seq) : I32 val ? Parameters offset: USize val = seq Returns I32 val ? peek_i32_le [Source] Peek at a little-endian I32. fun box peek_i32_le( offset: USize val = seq) : I32 val ? Parameters offset: USize val = seq Returns I32 val ? peek_u64_be [Source] Peek at a big-endian U64. fun box peek_u64_be( offset: USize val = seq) : U64 val ? Parameters offset: USize val = seq Returns U64 val ? peek_u64_le [Source] Peek at a little-endian U64. fun box peek_u64_le( offset: USize val = seq) : U64 val ? Parameters offset: USize val = seq Returns U64 val ? peek_i64_be [Source] Peek at a big-endian I64. fun box peek_i64_be( offset: USize val = seq) : I64 val ? Parameters offset: USize val = seq Returns I64 val ? peek_i64_le [Source] Peek at a little-endian I64. fun box peek_i64_le( offset: USize val = seq) : I64 val ? Parameters offset: USize val = seq Returns I64 val ? peek_u128_be [Source] Peek at a big-endian U128. fun box peek_u128_be( offset: USize val = seq) : U128 val ? Parameters offset: USize val = seq Returns U128 val ? peek_u128_le [Source] Peek at a little-endian U128. fun box peek_u128_le( offset: USize val = seq) : U128 val ? Parameters offset: USize val = seq Returns U128 val ? peek_i128_be [Source] Peek at a big-endian I129. fun box peek_i128_be( offset: USize val = seq) : I128 val ? Parameters offset: USize val = seq Returns I128 val ? peek_i128_le [Source] Peek at a little-endian I128. fun box peek_i128_le( offset: USize val = seq) : I128 val ? Parameters offset: USize val = seq Returns I128 val ? peek_f32_be [Source] Peek at a big-endian F32. fun box peek_f32_be( offset: USize val = seq) : F32 val ? Parameters offset: USize val = seq Returns F32 val ? peek_f32_le [Source] Peek at a little-endian F32. fun box peek_f32_le( offset: USize val = seq) : F32 val ? Parameters offset: USize val = seq Returns F32 val ? peek_f64_be [Source] Peek at a big-endian F64. fun box peek_f64_be( offset: USize val = seq) : F64 val ? Parameters offset: USize val = seq Returns F64 val ? peek_f64_le [Source] Peek at a little-endian F64. fun box peek_f64_le( offset: USize val = seq) : F64 val ? Parameters offset: USize val = seq Returns F64 val ? Private Functions _byte [Source] Get a single byte. fun ref _byte() : U8 val ? Returns U8 val ? _peek_byte [Source] Get the byte at the given offset without moving the cursor forward. Raise an error if the given offset is not yet available. fun box _peek_byte( offset: USize val = seq) : U8 val ? Parameters offset: USize val = seq Returns U8 val ? _distance_of [Source] Get the distance to the first occurrence of the given byte fun ref _distance_of( byte: U8 val) : USize val ? Parameters byte: U8 val Returns USize val ? _search_length [Source] Get the length of a pending line. Raise an error if there is no pending line. fun ref _search_length() : USize val ? Returns USize val ?","title":"class Reader"},{"location":"buffered-Reader/#reader","text":"[Source] Store network data and provide a parsing interface. Reader provides a way to extract typed data from a sequence of bytes. The Reader manages the underlying data structures to provide a read cursor over a contiguous sequence of bytes. It is useful for decoding data that is received over a network or stored in a file. Chunk of bytes are added to the Reader using the append method, and typed data is extracted using the getter methods. For example, suppose we have a UDP-based network data protocol where messages consist of the following: list_size - the number of items in the following list of items as a big-endian 32-bit integer zero or more items of the following data: a big-endian 64-bit floating point number a string that starts with a big-endian 32-bit integer that specifies the length of the string, followed by a number of bytes that represent the string A message would be something like this: [message_length][list_size][float1][string1][float2][string2]... The following program uses a Reader to decode a message of this type and print them: use buffered use collections class Notify is InputNotify let _env: Env new create(env: Env) = _env = env fun ref apply(data: Array[U8] iso) = let rb = Reader rb.append(consume data) try while true do let len = rb.i32_be()? let items = rb.i32_be()?.usize() for range in Range(0, items) do let f = rb.f32_be()? let str_len = rb.i32_be()?.usize() let str = String.from_array(rb.block(str_len)?) _env.out.print( [( + f.string() + ), ( + str + )] ) end end end actor Main new create(env: Env) = env.input(recover Notify(env) end, 1024) class ref Reader","title":"Reader"},{"location":"buffered-Reader/#constructors","text":"","title":"Constructors"},{"location":"buffered-Reader/#create","text":"[Source] new iso create() : Reader iso^","title":"create"},{"location":"buffered-Reader/#returns","text":"Reader iso^","title":"Returns"},{"location":"buffered-Reader/#public-functions","text":"","title":"Public Functions"},{"location":"buffered-Reader/#size","text":"[Source] Return the number of available bytes. fun box size() : USize val","title":"size"},{"location":"buffered-Reader/#returns_1","text":"USize val","title":"Returns"},{"location":"buffered-Reader/#clear","text":"[Source] Discard all pending data. fun ref clear() : None val","title":"clear"},{"location":"buffered-Reader/#returns_2","text":"None val","title":"Returns"},{"location":"buffered-Reader/#append","text":"[Source] Add a chunk of data. fun ref append( data: (String val | Array[U8 val] val)) : None val","title":"append"},{"location":"buffered-Reader/#parameters","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"buffered-Reader/#returns_3","text":"None val","title":"Returns"},{"location":"buffered-Reader/#skip","text":"[Source] Skip n bytes. fun ref skip( n: USize val) : None val ?","title":"skip"},{"location":"buffered-Reader/#parameters_1","text":"n: USize val","title":"Parameters"},{"location":"buffered-Reader/#returns_4","text":"None val ?","title":"Returns"},{"location":"buffered-Reader/#block","text":"[Source] Return a block as a contiguous chunk of memory. Will throw an error if you request a block larger than what is currently stored in the Reader . fun ref block( len: USize val) : Array[U8 val] iso^ ?","title":"block"},{"location":"buffered-Reader/#parameters_2","text":"len: USize val","title":"Parameters"},{"location":"buffered-Reader/#returns_5","text":"Array [ U8 val] iso^ ?","title":"Returns"},{"location":"buffered-Reader/#read_until","text":"[Source] Find the first occurrence of the separator and return the block of bytes before its position. The separator is not included in the returned array, but it is removed from the buffer. To read a line of text, prefer line() that handles \\n and \\r\\n. fun ref read_until( separator: U8 val) : Array[U8 val] iso^ ?","title":"read_until"},{"location":"buffered-Reader/#parameters_3","text":"separator: U8 val","title":"Parameters"},{"location":"buffered-Reader/#returns_6","text":"Array [ U8 val] iso^ ?","title":"Returns"},{"location":"buffered-Reader/#line","text":"[Source] Return a \\n or \\r\\n terminated line as a string. By default the newline is not included in the returned string, but it is removed from the buffer. Set keep_line_breaks to true to keep the line breaks in the returned line. fun ref line( keep_line_breaks: Bool val = seq) : String iso^ ?","title":"line"},{"location":"buffered-Reader/#parameters_4","text":"keep_line_breaks: Bool val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_7","text":"String iso^ ?","title":"Returns"},{"location":"buffered-Reader/#u8","text":"[Source] Get a U8. Raise an error if there isn't enough data. fun ref u8() : U8 val ?","title":"u8"},{"location":"buffered-Reader/#returns_8","text":"U8 val ?","title":"Returns"},{"location":"buffered-Reader/#i8","text":"[Source] Get an I8. fun ref i8() : I8 val ?","title":"i8"},{"location":"buffered-Reader/#returns_9","text":"I8 val ?","title":"Returns"},{"location":"buffered-Reader/#u16_be","text":"[Source] Get a big-endian U16. fun ref u16_be() : U16 val ?","title":"u16_be"},{"location":"buffered-Reader/#returns_10","text":"U16 val ?","title":"Returns"},{"location":"buffered-Reader/#u16_le","text":"[Source] Get a little-endian U16. fun ref u16_le() : U16 val ?","title":"u16_le"},{"location":"buffered-Reader/#returns_11","text":"U16 val ?","title":"Returns"},{"location":"buffered-Reader/#i16_be","text":"[Source] Get a big-endian I16. fun ref i16_be() : I16 val ?","title":"i16_be"},{"location":"buffered-Reader/#returns_12","text":"I16 val ?","title":"Returns"},{"location":"buffered-Reader/#i16_le","text":"[Source] Get a little-endian I16. fun ref i16_le() : I16 val ?","title":"i16_le"},{"location":"buffered-Reader/#returns_13","text":"I16 val ?","title":"Returns"},{"location":"buffered-Reader/#u32_be","text":"[Source] Get a big-endian U32. fun ref u32_be() : U32 val ?","title":"u32_be"},{"location":"buffered-Reader/#returns_14","text":"U32 val ?","title":"Returns"},{"location":"buffered-Reader/#u32_le","text":"[Source] Get a little-endian U32. fun ref u32_le() : U32 val ?","title":"u32_le"},{"location":"buffered-Reader/#returns_15","text":"U32 val ?","title":"Returns"},{"location":"buffered-Reader/#i32_be","text":"[Source] Get a big-endian I32. fun ref i32_be() : I32 val ?","title":"i32_be"},{"location":"buffered-Reader/#returns_16","text":"I32 val ?","title":"Returns"},{"location":"buffered-Reader/#i32_le","text":"[Source] Get a little-endian I32. fun ref i32_le() : I32 val ?","title":"i32_le"},{"location":"buffered-Reader/#returns_17","text":"I32 val ?","title":"Returns"},{"location":"buffered-Reader/#u64_be","text":"[Source] Get a big-endian U64. fun ref u64_be() : U64 val ?","title":"u64_be"},{"location":"buffered-Reader/#returns_18","text":"U64 val ?","title":"Returns"},{"location":"buffered-Reader/#u64_le","text":"[Source] Get a little-endian U64. fun ref u64_le() : U64 val ?","title":"u64_le"},{"location":"buffered-Reader/#returns_19","text":"U64 val ?","title":"Returns"},{"location":"buffered-Reader/#i64_be","text":"[Source] Get a big-endian I64. fun ref i64_be() : I64 val ?","title":"i64_be"},{"location":"buffered-Reader/#returns_20","text":"I64 val ?","title":"Returns"},{"location":"buffered-Reader/#i64_le","text":"[Source] Get a little-endian I64. fun ref i64_le() : I64 val ?","title":"i64_le"},{"location":"buffered-Reader/#returns_21","text":"I64 val ?","title":"Returns"},{"location":"buffered-Reader/#u128_be","text":"[Source] Get a big-endian U128. fun ref u128_be() : U128 val ?","title":"u128_be"},{"location":"buffered-Reader/#returns_22","text":"U128 val ?","title":"Returns"},{"location":"buffered-Reader/#u128_le","text":"[Source] Get a little-endian U128. fun ref u128_le() : U128 val ?","title":"u128_le"},{"location":"buffered-Reader/#returns_23","text":"U128 val ?","title":"Returns"},{"location":"buffered-Reader/#i128_be","text":"[Source] Get a big-endian I129. fun ref i128_be() : I128 val ?","title":"i128_be"},{"location":"buffered-Reader/#returns_24","text":"I128 val ?","title":"Returns"},{"location":"buffered-Reader/#i128_le","text":"[Source] Get a little-endian I128. fun ref i128_le() : I128 val ?","title":"i128_le"},{"location":"buffered-Reader/#returns_25","text":"I128 val ?","title":"Returns"},{"location":"buffered-Reader/#f32_be","text":"[Source] Get a big-endian F32. fun ref f32_be() : F32 val ?","title":"f32_be"},{"location":"buffered-Reader/#returns_26","text":"F32 val ?","title":"Returns"},{"location":"buffered-Reader/#f32_le","text":"[Source] Get a little-endian F32. fun ref f32_le() : F32 val ?","title":"f32_le"},{"location":"buffered-Reader/#returns_27","text":"F32 val ?","title":"Returns"},{"location":"buffered-Reader/#f64_be","text":"[Source] Get a big-endian F64. fun ref f64_be() : F64 val ?","title":"f64_be"},{"location":"buffered-Reader/#returns_28","text":"F64 val ?","title":"Returns"},{"location":"buffered-Reader/#f64_le","text":"[Source] Get a little-endian F64. fun ref f64_le() : F64 val ?","title":"f64_le"},{"location":"buffered-Reader/#returns_29","text":"F64 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u8","text":"[Source] Peek at a U8 at the given offset. Raise an error if there isn't enough data. fun box peek_u8( offset: USize val = seq) : U8 val ?","title":"peek_u8"},{"location":"buffered-Reader/#parameters_5","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_30","text":"U8 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i8","text":"[Source] Peek at an I8. fun box peek_i8( offset: USize val = seq) : I8 val ?","title":"peek_i8"},{"location":"buffered-Reader/#parameters_6","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_31","text":"I8 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u16_be","text":"[Source] Peek at a big-endian U16. fun box peek_u16_be( offset: USize val = seq) : U16 val ?","title":"peek_u16_be"},{"location":"buffered-Reader/#parameters_7","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_32","text":"U16 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u16_le","text":"[Source] Peek at a little-endian U16. fun box peek_u16_le( offset: USize val = seq) : U16 val ?","title":"peek_u16_le"},{"location":"buffered-Reader/#parameters_8","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_33","text":"U16 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i16_be","text":"[Source] Peek at a big-endian I16. fun box peek_i16_be( offset: USize val = seq) : I16 val ?","title":"peek_i16_be"},{"location":"buffered-Reader/#parameters_9","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_34","text":"I16 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i16_le","text":"[Source] Peek at a little-endian I16. fun box peek_i16_le( offset: USize val = seq) : I16 val ?","title":"peek_i16_le"},{"location":"buffered-Reader/#parameters_10","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_35","text":"I16 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u32_be","text":"[Source] Peek at a big-endian U32. fun box peek_u32_be( offset: USize val = seq) : U32 val ?","title":"peek_u32_be"},{"location":"buffered-Reader/#parameters_11","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_36","text":"U32 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u32_le","text":"[Source] Peek at a little-endian U32. fun box peek_u32_le( offset: USize val = seq) : U32 val ?","title":"peek_u32_le"},{"location":"buffered-Reader/#parameters_12","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_37","text":"U32 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i32_be","text":"[Source] Peek at a big-endian I32. fun box peek_i32_be( offset: USize val = seq) : I32 val ?","title":"peek_i32_be"},{"location":"buffered-Reader/#parameters_13","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_38","text":"I32 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i32_le","text":"[Source] Peek at a little-endian I32. fun box peek_i32_le( offset: USize val = seq) : I32 val ?","title":"peek_i32_le"},{"location":"buffered-Reader/#parameters_14","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_39","text":"I32 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u64_be","text":"[Source] Peek at a big-endian U64. fun box peek_u64_be( offset: USize val = seq) : U64 val ?","title":"peek_u64_be"},{"location":"buffered-Reader/#parameters_15","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_40","text":"U64 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u64_le","text":"[Source] Peek at a little-endian U64. fun box peek_u64_le( offset: USize val = seq) : U64 val ?","title":"peek_u64_le"},{"location":"buffered-Reader/#parameters_16","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_41","text":"U64 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i64_be","text":"[Source] Peek at a big-endian I64. fun box peek_i64_be( offset: USize val = seq) : I64 val ?","title":"peek_i64_be"},{"location":"buffered-Reader/#parameters_17","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_42","text":"I64 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i64_le","text":"[Source] Peek at a little-endian I64. fun box peek_i64_le( offset: USize val = seq) : I64 val ?","title":"peek_i64_le"},{"location":"buffered-Reader/#parameters_18","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_43","text":"I64 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u128_be","text":"[Source] Peek at a big-endian U128. fun box peek_u128_be( offset: USize val = seq) : U128 val ?","title":"peek_u128_be"},{"location":"buffered-Reader/#parameters_19","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_44","text":"U128 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u128_le","text":"[Source] Peek at a little-endian U128. fun box peek_u128_le( offset: USize val = seq) : U128 val ?","title":"peek_u128_le"},{"location":"buffered-Reader/#parameters_20","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_45","text":"U128 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i128_be","text":"[Source] Peek at a big-endian I129. fun box peek_i128_be( offset: USize val = seq) : I128 val ?","title":"peek_i128_be"},{"location":"buffered-Reader/#parameters_21","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_46","text":"I128 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i128_le","text":"[Source] Peek at a little-endian I128. fun box peek_i128_le( offset: USize val = seq) : I128 val ?","title":"peek_i128_le"},{"location":"buffered-Reader/#parameters_22","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_47","text":"I128 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_f32_be","text":"[Source] Peek at a big-endian F32. fun box peek_f32_be( offset: USize val = seq) : F32 val ?","title":"peek_f32_be"},{"location":"buffered-Reader/#parameters_23","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_48","text":"F32 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_f32_le","text":"[Source] Peek at a little-endian F32. fun box peek_f32_le( offset: USize val = seq) : F32 val ?","title":"peek_f32_le"},{"location":"buffered-Reader/#parameters_24","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_49","text":"F32 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_f64_be","text":"[Source] Peek at a big-endian F64. fun box peek_f64_be( offset: USize val = seq) : F64 val ?","title":"peek_f64_be"},{"location":"buffered-Reader/#parameters_25","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_50","text":"F64 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_f64_le","text":"[Source] Peek at a little-endian F64. fun box peek_f64_le( offset: USize val = seq) : F64 val ?","title":"peek_f64_le"},{"location":"buffered-Reader/#parameters_26","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_51","text":"F64 val ?","title":"Returns"},{"location":"buffered-Reader/#private-functions","text":"","title":"Private Functions"},{"location":"buffered-Reader/#_byte","text":"[Source] Get a single byte. fun ref _byte() : U8 val ?","title":"_byte"},{"location":"buffered-Reader/#returns_52","text":"U8 val ?","title":"Returns"},{"location":"buffered-Reader/#_peek_byte","text":"[Source] Get the byte at the given offset without moving the cursor forward. Raise an error if the given offset is not yet available. fun box _peek_byte( offset: USize val = seq) : U8 val ?","title":"_peek_byte"},{"location":"buffered-Reader/#parameters_27","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_53","text":"U8 val ?","title":"Returns"},{"location":"buffered-Reader/#_distance_of","text":"[Source] Get the distance to the first occurrence of the given byte fun ref _distance_of( byte: U8 val) : USize val ?","title":"_distance_of"},{"location":"buffered-Reader/#parameters_28","text":"byte: U8 val","title":"Parameters"},{"location":"buffered-Reader/#returns_54","text":"USize val ?","title":"Returns"},{"location":"buffered-Reader/#_search_length","text":"[Source] Get the length of a pending line. Raise an error if there is no pending line. fun ref _search_length() : USize val ?","title":"_search_length"},{"location":"buffered-Reader/#returns_55","text":"USize val ?","title":"Returns"},{"location":"buffered-Writer/","text":"Writer [Source] A buffer for building messages. Writer provides an way to create byte sequences using common data encodings. The Writer manages the underlying arrays and sizes. It is useful for encoding data to send over a network or store in a file. Once a message has been built you can call done() to get the message's ByteSeq s, and you can then reuse the Writer for creating a new message. For example, suppose we have a TCP-based network data protocol where messages consist of the following: message_length - the number of bytes in the message as a big-endian 32-bit integer list_size - the number of items in the following list of items as a big-endian 32-bit integer zero or more items of the following data: a big-endian 64-bit floating point number a string that starts with a big-endian 32-bit integer that specifies the length of the string, followed by a number of bytes that represent the string A message would be something like this: [message_length][list_size][float1][string1][float2][string2]... The following program uses a write buffer to encode an array of tuples as a message of this type: use buffered actor Main new create(env: Env) = let wb = Writer let messages = [[(F32(3597.82), Anderson ); (F32(-7979.3), Graham )] [(F32(3.14159), Hopper ); (F32(-83.83), Jones )]] for items in messages.values() do wb.i32_be((items.size() / 2).i32()) for (f, s) in items.values() do wb.f32_be(f) wb.i32_be(s.size().i32()) wb.write(s.array()) end let wb_msg = Writer wb_msg.i32_be(wb.size().i32()) wb_msg.writev(wb.done()) env.out.writev(wb_msg.done()) end class ref Writer Constructors create [Source] new iso create() : Writer iso^ Returns Writer iso^ Public Functions reserve_chunks [Source] Reserve space for size' chunks. This needs to be recalled after every call to done as done resets the chunks. fun ref reserve_chunks( size': USize val) : None val Parameters size': USize val Returns None val reserve_current [Source] Reserve space for size bytes in _current . fun ref reserve_current( size': USize val) : None val Parameters size': USize val Returns None val size [Source] fun box size() : USize val Returns USize val u8 [Source] Write a byte to the buffer. fun ref u8( data: U8 val) : None val Parameters data: U8 val Returns None val u16_le [Source] Write a U16 to the buffer in little-endian byte order. fun ref u16_le( data: U16 val) : None val Parameters data: U16 val Returns None val u16_be [Source] Write a U16 to the buffer in big-endian byte order. fun ref u16_be( data: U16 val) : None val Parameters data: U16 val Returns None val i16_le [Source] Write an I16 to the buffer in little-endian byte order. fun ref i16_le( data: I16 val) : None val Parameters data: I16 val Returns None val i16_be [Source] Write an I16 to the buffer in big-endian byte order. fun ref i16_be( data: I16 val) : None val Parameters data: I16 val Returns None val u32_le [Source] Write a U32 to the buffer in little-endian byte order. fun ref u32_le( data: U32 val) : None val Parameters data: U32 val Returns None val u32_be [Source] Write a U32 to the buffer in big-endian byte order. fun ref u32_be( data: U32 val) : None val Parameters data: U32 val Returns None val i32_le [Source] Write an I32 to the buffer in little-endian byte order. fun ref i32_le( data: I32 val) : None val Parameters data: I32 val Returns None val i32_be [Source] Write an I32 to the buffer in big-endian byte order. fun ref i32_be( data: I32 val) : None val Parameters data: I32 val Returns None val f32_le [Source] Write an F32 to the buffer in little-endian byte order. fun ref f32_le( data: F32 val) : None val Parameters data: F32 val Returns None val f32_be [Source] Write an F32 to the buffer in big-endian byte order. fun ref f32_be( data: F32 val) : None val Parameters data: F32 val Returns None val u64_le [Source] Write a U64 to the buffer in little-endian byte order. fun ref u64_le( data: U64 val) : None val Parameters data: U64 val Returns None val u64_be [Source] Write a U64 to the buffer in big-endian byte order. fun ref u64_be( data: U64 val) : None val Parameters data: U64 val Returns None val i64_le [Source] Write an I64 to the buffer in little-endian byte order. fun ref i64_le( data: I64 val) : None val Parameters data: I64 val Returns None val i64_be [Source] Write an I64 to the buffer in big-endian byte order. fun ref i64_be( data: I64 val) : None val Parameters data: I64 val Returns None val f64_le [Source] Write an F64 to the buffer in little-endian byte order. fun ref f64_le( data: F64 val) : None val Parameters data: F64 val Returns None val f64_be [Source] Write an F64 to the buffer in big-endian byte order. fun ref f64_be( data: F64 val) : None val Parameters data: F64 val Returns None val u128_le [Source] Write a U128 to the buffer in little-endian byte order. fun ref u128_le( data: U128 val) : None val Parameters data: U128 val Returns None val u128_be [Source] Write a U128 to the buffer in big-endian byte order. fun ref u128_be( data: U128 val) : None val Parameters data: U128 val Returns None val i128_le [Source] Write an I128 to the buffer in little-endian byte order. fun ref i128_le( data: I128 val) : None val Parameters data: I128 val Returns None val i128_be [Source] Write an I128 to the buffer in big-endian byte order. fun ref i128_be( data: I128 val) : None val Parameters data: I128 val Returns None val write [Source] Write a ByteSeq to the buffer. fun ref write( data: (String val | Array[U8 val] val)) : None val Parameters data: ( String val | Array [ U8 val] val) Returns None val writev [Source] Write ByteSeqs to the buffer. fun ref writev( data: ByteSeqIter val) : None val Parameters data: ByteSeqIter val Returns None val done [Source] Return an array of buffered ByteSeqs and reset the Writer's buffer. fun ref done() : Array[(String val | Array[U8 val] val)] iso^ Returns Array [( String val | Array [ U8 val] val)] iso^ Private Functions _append_current [Source] fun ref _append_current() : None val Returns None val","title":"class Writer"},{"location":"buffered-Writer/#writer","text":"[Source] A buffer for building messages. Writer provides an way to create byte sequences using common data encodings. The Writer manages the underlying arrays and sizes. It is useful for encoding data to send over a network or store in a file. Once a message has been built you can call done() to get the message's ByteSeq s, and you can then reuse the Writer for creating a new message. For example, suppose we have a TCP-based network data protocol where messages consist of the following: message_length - the number of bytes in the message as a big-endian 32-bit integer list_size - the number of items in the following list of items as a big-endian 32-bit integer zero or more items of the following data: a big-endian 64-bit floating point number a string that starts with a big-endian 32-bit integer that specifies the length of the string, followed by a number of bytes that represent the string A message would be something like this: [message_length][list_size][float1][string1][float2][string2]... The following program uses a write buffer to encode an array of tuples as a message of this type: use buffered actor Main new create(env: Env) = let wb = Writer let messages = [[(F32(3597.82), Anderson ); (F32(-7979.3), Graham )] [(F32(3.14159), Hopper ); (F32(-83.83), Jones )]] for items in messages.values() do wb.i32_be((items.size() / 2).i32()) for (f, s) in items.values() do wb.f32_be(f) wb.i32_be(s.size().i32()) wb.write(s.array()) end let wb_msg = Writer wb_msg.i32_be(wb.size().i32()) wb_msg.writev(wb.done()) env.out.writev(wb_msg.done()) end class ref Writer","title":"Writer"},{"location":"buffered-Writer/#constructors","text":"","title":"Constructors"},{"location":"buffered-Writer/#create","text":"[Source] new iso create() : Writer iso^","title":"create"},{"location":"buffered-Writer/#returns","text":"Writer iso^","title":"Returns"},{"location":"buffered-Writer/#public-functions","text":"","title":"Public Functions"},{"location":"buffered-Writer/#reserve_chunks","text":"[Source] Reserve space for size' chunks. This needs to be recalled after every call to done as done resets the chunks. fun ref reserve_chunks( size': USize val) : None val","title":"reserve_chunks"},{"location":"buffered-Writer/#parameters","text":"size': USize val","title":"Parameters"},{"location":"buffered-Writer/#returns_1","text":"None val","title":"Returns"},{"location":"buffered-Writer/#reserve_current","text":"[Source] Reserve space for size bytes in _current . fun ref reserve_current( size': USize val) : None val","title":"reserve_current"},{"location":"buffered-Writer/#parameters_1","text":"size': USize val","title":"Parameters"},{"location":"buffered-Writer/#returns_2","text":"None val","title":"Returns"},{"location":"buffered-Writer/#size","text":"[Source] fun box size() : USize val","title":"size"},{"location":"buffered-Writer/#returns_3","text":"USize val","title":"Returns"},{"location":"buffered-Writer/#u8","text":"[Source] Write a byte to the buffer. fun ref u8( data: U8 val) : None val","title":"u8"},{"location":"buffered-Writer/#parameters_2","text":"data: U8 val","title":"Parameters"},{"location":"buffered-Writer/#returns_4","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u16_le","text":"[Source] Write a U16 to the buffer in little-endian byte order. fun ref u16_le( data: U16 val) : None val","title":"u16_le"},{"location":"buffered-Writer/#parameters_3","text":"data: U16 val","title":"Parameters"},{"location":"buffered-Writer/#returns_5","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u16_be","text":"[Source] Write a U16 to the buffer in big-endian byte order. fun ref u16_be( data: U16 val) : None val","title":"u16_be"},{"location":"buffered-Writer/#parameters_4","text":"data: U16 val","title":"Parameters"},{"location":"buffered-Writer/#returns_6","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i16_le","text":"[Source] Write an I16 to the buffer in little-endian byte order. fun ref i16_le( data: I16 val) : None val","title":"i16_le"},{"location":"buffered-Writer/#parameters_5","text":"data: I16 val","title":"Parameters"},{"location":"buffered-Writer/#returns_7","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i16_be","text":"[Source] Write an I16 to the buffer in big-endian byte order. fun ref i16_be( data: I16 val) : None val","title":"i16_be"},{"location":"buffered-Writer/#parameters_6","text":"data: I16 val","title":"Parameters"},{"location":"buffered-Writer/#returns_8","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u32_le","text":"[Source] Write a U32 to the buffer in little-endian byte order. fun ref u32_le( data: U32 val) : None val","title":"u32_le"},{"location":"buffered-Writer/#parameters_7","text":"data: U32 val","title":"Parameters"},{"location":"buffered-Writer/#returns_9","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u32_be","text":"[Source] Write a U32 to the buffer in big-endian byte order. fun ref u32_be( data: U32 val) : None val","title":"u32_be"},{"location":"buffered-Writer/#parameters_8","text":"data: U32 val","title":"Parameters"},{"location":"buffered-Writer/#returns_10","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i32_le","text":"[Source] Write an I32 to the buffer in little-endian byte order. fun ref i32_le( data: I32 val) : None val","title":"i32_le"},{"location":"buffered-Writer/#parameters_9","text":"data: I32 val","title":"Parameters"},{"location":"buffered-Writer/#returns_11","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i32_be","text":"[Source] Write an I32 to the buffer in big-endian byte order. fun ref i32_be( data: I32 val) : None val","title":"i32_be"},{"location":"buffered-Writer/#parameters_10","text":"data: I32 val","title":"Parameters"},{"location":"buffered-Writer/#returns_12","text":"None val","title":"Returns"},{"location":"buffered-Writer/#f32_le","text":"[Source] Write an F32 to the buffer in little-endian byte order. fun ref f32_le( data: F32 val) : None val","title":"f32_le"},{"location":"buffered-Writer/#parameters_11","text":"data: F32 val","title":"Parameters"},{"location":"buffered-Writer/#returns_13","text":"None val","title":"Returns"},{"location":"buffered-Writer/#f32_be","text":"[Source] Write an F32 to the buffer in big-endian byte order. fun ref f32_be( data: F32 val) : None val","title":"f32_be"},{"location":"buffered-Writer/#parameters_12","text":"data: F32 val","title":"Parameters"},{"location":"buffered-Writer/#returns_14","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u64_le","text":"[Source] Write a U64 to the buffer in little-endian byte order. fun ref u64_le( data: U64 val) : None val","title":"u64_le"},{"location":"buffered-Writer/#parameters_13","text":"data: U64 val","title":"Parameters"},{"location":"buffered-Writer/#returns_15","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u64_be","text":"[Source] Write a U64 to the buffer in big-endian byte order. fun ref u64_be( data: U64 val) : None val","title":"u64_be"},{"location":"buffered-Writer/#parameters_14","text":"data: U64 val","title":"Parameters"},{"location":"buffered-Writer/#returns_16","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i64_le","text":"[Source] Write an I64 to the buffer in little-endian byte order. fun ref i64_le( data: I64 val) : None val","title":"i64_le"},{"location":"buffered-Writer/#parameters_15","text":"data: I64 val","title":"Parameters"},{"location":"buffered-Writer/#returns_17","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i64_be","text":"[Source] Write an I64 to the buffer in big-endian byte order. fun ref i64_be( data: I64 val) : None val","title":"i64_be"},{"location":"buffered-Writer/#parameters_16","text":"data: I64 val","title":"Parameters"},{"location":"buffered-Writer/#returns_18","text":"None val","title":"Returns"},{"location":"buffered-Writer/#f64_le","text":"[Source] Write an F64 to the buffer in little-endian byte order. fun ref f64_le( data: F64 val) : None val","title":"f64_le"},{"location":"buffered-Writer/#parameters_17","text":"data: F64 val","title":"Parameters"},{"location":"buffered-Writer/#returns_19","text":"None val","title":"Returns"},{"location":"buffered-Writer/#f64_be","text":"[Source] Write an F64 to the buffer in big-endian byte order. fun ref f64_be( data: F64 val) : None val","title":"f64_be"},{"location":"buffered-Writer/#parameters_18","text":"data: F64 val","title":"Parameters"},{"location":"buffered-Writer/#returns_20","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u128_le","text":"[Source] Write a U128 to the buffer in little-endian byte order. fun ref u128_le( data: U128 val) : None val","title":"u128_le"},{"location":"buffered-Writer/#parameters_19","text":"data: U128 val","title":"Parameters"},{"location":"buffered-Writer/#returns_21","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u128_be","text":"[Source] Write a U128 to the buffer in big-endian byte order. fun ref u128_be( data: U128 val) : None val","title":"u128_be"},{"location":"buffered-Writer/#parameters_20","text":"data: U128 val","title":"Parameters"},{"location":"buffered-Writer/#returns_22","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i128_le","text":"[Source] Write an I128 to the buffer in little-endian byte order. fun ref i128_le( data: I128 val) : None val","title":"i128_le"},{"location":"buffered-Writer/#parameters_21","text":"data: I128 val","title":"Parameters"},{"location":"buffered-Writer/#returns_23","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i128_be","text":"[Source] Write an I128 to the buffer in big-endian byte order. fun ref i128_be( data: I128 val) : None val","title":"i128_be"},{"location":"buffered-Writer/#parameters_22","text":"data: I128 val","title":"Parameters"},{"location":"buffered-Writer/#returns_24","text":"None val","title":"Returns"},{"location":"buffered-Writer/#write","text":"[Source] Write a ByteSeq to the buffer. fun ref write( data: (String val | Array[U8 val] val)) : None val","title":"write"},{"location":"buffered-Writer/#parameters_23","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"buffered-Writer/#returns_25","text":"None val","title":"Returns"},{"location":"buffered-Writer/#writev","text":"[Source] Write ByteSeqs to the buffer. fun ref writev( data: ByteSeqIter val) : None val","title":"writev"},{"location":"buffered-Writer/#parameters_24","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"buffered-Writer/#returns_26","text":"None val","title":"Returns"},{"location":"buffered-Writer/#done","text":"[Source] Return an array of buffered ByteSeqs and reset the Writer's buffer. fun ref done() : Array[(String val | Array[U8 val] val)] iso^","title":"done"},{"location":"buffered-Writer/#returns_27","text":"Array [( String val | Array [ U8 val] val)] iso^","title":"Returns"},{"location":"buffered-Writer/#private-functions","text":"","title":"Private Functions"},{"location":"buffered-Writer/#_append_current","text":"[Source] fun ref _append_current() : None val","title":"_append_current"},{"location":"buffered-Writer/#returns_28","text":"None val","title":"Returns"},{"location":"builtin--index/","text":"Builtin package The builtin package is home to the following standard library members: Types the compiler needs to know exist, such as None. Types with \"magic\" internal workings that must be supplied directly by the compiler, such as U32. Any types needed by others in builtin. The public types that are defined in this package will always be in scope for every Pony source file. For details on specific packages, see their individual entity entries. Public Types primitive U8 primitive U16 primitive U32 primitive U64 primitive ULong primitive USize primitive U128 type Unsigned interface Stringable class String class StringBytes class StringRunes interface InputNotify interface DisposableActor interface InputStream actor Stdin type ByteSeq interface ByteSeqIter interface OutStream actor StdStream interface SourceLoc primitive I8 primitive I16 primitive I32 primitive I64 primitive ILong primitive ISize primitive I128 type Signed interface Seq trait Real trait Integer trait FloatingPoint type Number type Int interface ReadSeq interface ReadElement struct Pointer primitive Platform primitive None struct MaybePointer interface Iterator primitive F32 primitive F64 type Float class Env primitive DoNotOptimise primitive Less primitive Equal primitive Greater type Compare interface HasEq interface Equatable interface Comparable primitive Bool type AsioEventID interface AsioEventNotify primitive AsioEvent class Array class ArrayKeys class ArrayValues class ArrayPairs interface Any primitive AmbientAuth Private Types primitive _UTF32Encoder primitive _SignedCheckedArithmetic trait _ArithmeticConvertible trait _SignedInteger trait _UnsignedInteger primitive _ToString trait _PartialArithmetic primitive _UnsignedPartialArithmetic primitive _SignedPartialArithmetic","title":"Package"},{"location":"builtin--index/#builtin-package","text":"The builtin package is home to the following standard library members: Types the compiler needs to know exist, such as None. Types with \"magic\" internal workings that must be supplied directly by the compiler, such as U32. Any types needed by others in builtin. The public types that are defined in this package will always be in scope for every Pony source file. For details on specific packages, see their individual entity entries.","title":"Builtin package"},{"location":"builtin--index/#public-types","text":"primitive U8 primitive U16 primitive U32 primitive U64 primitive ULong primitive USize primitive U128 type Unsigned interface Stringable class String class StringBytes class StringRunes interface InputNotify interface DisposableActor interface InputStream actor Stdin type ByteSeq interface ByteSeqIter interface OutStream actor StdStream interface SourceLoc primitive I8 primitive I16 primitive I32 primitive I64 primitive ILong primitive ISize primitive I128 type Signed interface Seq trait Real trait Integer trait FloatingPoint type Number type Int interface ReadSeq interface ReadElement struct Pointer primitive Platform primitive None struct MaybePointer interface Iterator primitive F32 primitive F64 type Float class Env primitive DoNotOptimise primitive Less primitive Equal primitive Greater type Compare interface HasEq interface Equatable interface Comparable primitive Bool type AsioEventID interface AsioEventNotify primitive AsioEvent class Array class ArrayKeys class ArrayValues class ArrayPairs interface Any primitive AmbientAuth","title":"Public Types"},{"location":"builtin--index/#private-types","text":"primitive _UTF32Encoder primitive _SignedCheckedArithmetic trait _ArithmeticConvertible trait _SignedInteger trait _UnsignedInteger primitive _ToString trait _PartialArithmetic primitive _UnsignedPartialArithmetic primitive _SignedPartialArithmetic","title":"Private Types"},{"location":"builtin-AmbientAuth/","text":"AmbientAuth [Source] This type represents the root capability. When a Pony program starts, the Env passed to the Main actor contains an instance of the root capability. Ambient access to the root capability is denied outside of the builtin package. Inside the builtin package, only Env creates a Root. The root capability can be used by any package that wants to establish a principle of least authority. A typical usage is to have a parameter on a constructor for some resource that expects a limiting capability specific to the package, but will also accept the root capability as representing unlimited access. primitive val AmbientAuth Constructors _create [Source] new val _create() : AmbientAuth val^ Returns AmbientAuth val^ Public Functions eq [Source] fun box eq( that: AmbientAuth val) : Bool val Parameters that: AmbientAuth val Returns Bool val ne [Source] fun box ne( that: AmbientAuth val) : Bool val Parameters that: AmbientAuth val Returns Bool val","title":"primitive AmbientAuth"},{"location":"builtin-AmbientAuth/#ambientauth","text":"[Source] This type represents the root capability. When a Pony program starts, the Env passed to the Main actor contains an instance of the root capability. Ambient access to the root capability is denied outside of the builtin package. Inside the builtin package, only Env creates a Root. The root capability can be used by any package that wants to establish a principle of least authority. A typical usage is to have a parameter on a constructor for some resource that expects a limiting capability specific to the package, but will also accept the root capability as representing unlimited access. primitive val AmbientAuth","title":"AmbientAuth"},{"location":"builtin-AmbientAuth/#constructors","text":"","title":"Constructors"},{"location":"builtin-AmbientAuth/#_create","text":"[Source] new val _create() : AmbientAuth val^","title":"_create"},{"location":"builtin-AmbientAuth/#returns","text":"AmbientAuth val^","title":"Returns"},{"location":"builtin-AmbientAuth/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-AmbientAuth/#eq","text":"[Source] fun box eq( that: AmbientAuth val) : Bool val","title":"eq"},{"location":"builtin-AmbientAuth/#parameters","text":"that: AmbientAuth val","title":"Parameters"},{"location":"builtin-AmbientAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-AmbientAuth/#ne","text":"[Source] fun box ne( that: AmbientAuth val) : Bool val","title":"ne"},{"location":"builtin-AmbientAuth/#parameters_1","text":"that: AmbientAuth val","title":"Parameters"},{"location":"builtin-AmbientAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Any/","text":"Any [Source] interface tag Any","title":"interface Any"},{"location":"builtin-Any/#any","text":"[Source] interface tag Any","title":"Any"},{"location":"builtin-Array/","text":"Array[A: A] [Source] Contiguous, resizable memory to store elements of type A. Usage Creating an Array of String. let array: Array[String] = [ dog ; cat ; wombat ] // array.size() == 3 // array.space() = 3 Creating an empty Array of String, which may hold at least 10 elements before requesting more space. let array = Array(10) // array.size() == 0 // array.space() = 10 Accessing elements can be done via the apply(i: USize): this- A ? method. The provided index might be out of bounds so apply is partial and has to be called within a try-catch block or inside another partial method. let array: Array[String] = [ dog ; cat ; wombat ] let is_second_element_wobat = try // indexes start from 0, so 1 is the second element array(1)? == wombat else false end Adding and removing elements to and from the end of the Array can be done via push and pop methods. You could treat the array as a FIFO queue using those methods. while (array.size() 0) do let elem = array.pop()? // do something with element end Modifying the Array can be done via update , insert and delete methods which alter the Array at an arbitrary index, moving elements left (when deleting) or right (when inserting) as necessary. Iterating over the elements of an Array can be done using the values method. for element in array.values() do // do something with element end Memory allocation Array allocates contiguous memory. It always allocates at least enough memory space to hold all of its elements. Space is the number of elements the Array can hold without allocating more memory. The space() method returns the number of elements an Array can hold. The size() method returns the number of elements the Array holds. Different data types require different amounts of memory. Array[U64] with size of 6 will take more memory than an Array[U8] of the same size. When creating an Array or adding more elements will calculate the next power of 2 of the requested number of elements and allocate that much space, with a lower bound of space for 8 elements. Here's a few examples of the space allocated when initialising an Array with various number of elements: size space 0 0 1 8 8 8 9 16 16 16 17 32 Call the compact() method to ask the GC to reclaim unused space. There are no guarantees that the GC will actually reclaim any space. class ref Array[A: A] is Seq[A] ref Implements Seq [A] ref Constructors create [Source] Create an array with zero elements, but space for len elements. new ref create( len: USize val = seq) : Array[A] ref^ Parameters len: USize val = seq Returns Array [A] ref^ init [Source] Create an array of len elements, all initialised to the given value. new ref init( from: A^, len: USize val) : Array[A] ref^ Parameters from: A^ len: USize val Returns Array [A] ref^ from_cpointer [Source] Create an array from a C-style pointer and length. The contents are not copied. new ref from_cpointer( ptr: Pointer[A] ref, len: USize val, alloc: USize val = seq) : Array[A] ref^ Parameters ptr: Pointer [A] ref len: USize val alloc: USize val = seq Returns Array [A] ref^ Public Functions cpointer [Source] Return the underlying C-style pointer. fun box cpointer( offset: USize val = seq) : Pointer[A] tag Parameters offset: USize val = seq Returns Pointer [A] tag size [Source] The number of elements in the array. fun box size() : USize val Returns USize val space [Source] The available space in the array. fun box space() : USize val Returns USize val reserve [Source] Reserve space for len elements, including whatever elements are already in the array. Array space grows geometrically. fun ref reserve( len: USize val) : None val Parameters len: USize val Returns None val compact [Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. fun ref compact() : None val Returns None val undefined[optional B: (A Real [B] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] [Source] Resize to len elements, populating previously empty elements with random memory. This is only allowed for an array of numbers. fun ref undefined[optional B: (A Real[B] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]( len: USize val) : None val Parameters len: USize val Returns None val read_u8[optional B: (A Real [B] val U8 val)] [Source] Reads a U8 from offset. This is only allowed for an array of U8s. fun box read_u8[optional B: (A Real[B] val U8 val)]( offset: USize val) : U8 val ? Parameters offset: USize val Returns U8 val ? read_u16[optional B: (A Real [B] val U8 val)] [Source] Reads a U16 from offset. This is only allowed for an array of U8s. fun box read_u16[optional B: (A Real[B] val U8 val)]( offset: USize val) : U16 val ? Parameters offset: USize val Returns U16 val ? read_u32[optional B: (A Real [B] val U8 val)] [Source] Reads a U32 from offset. This is only allowed for an array of U8s. fun box read_u32[optional B: (A Real[B] val U8 val)]( offset: USize val) : U32 val ? Parameters offset: USize val Returns U32 val ? read_u64[optional B: (A Real [B] val U8 val)] [Source] Reads a U64 from offset. This is only allowed for an array of U8s. fun box read_u64[optional B: (A Real[B] val U8 val)]( offset: USize val) : U64 val ? Parameters offset: USize val Returns U64 val ? read_u128[optional B: (A Real [B] val U8 val)] [Source] Reads a U128 from offset. This is only allowed for an array of U8s. fun box read_u128[optional B: (A Real[B] val U8 val)]( offset: USize val) : U128 val ? Parameters offset: USize val Returns U128 val ? apply [Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val) : this- A ? Parameters i: USize val Returns this- A ? update_u8[optional B: (A Real [B] val U8 val)] [Source] Write a U8 at offset. This is only allowed for an array of U8s. fun ref update_u8[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U8 val) : U8 val ? Parameters offset: USize val value: U8 val Returns U8 val ? update_u16[optional B: (A Real [B] val U8 val)] [Source] Write a U16 at offset. This is only allowed for an array of U8s. fun ref update_u16[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U16 val) : U16 val ? Parameters offset: USize val value: U16 val Returns U16 val ? update_u32[optional B: (A Real [B] val U8 val)] [Source] Write a U32 at offset. This is only allowed for an array of U8s. fun ref update_u32[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U32 val) : U32 val ? Parameters offset: USize val value: U32 val Returns U32 val ? update_u64[optional B: (A Real [B] val U8 val)] [Source] Write a U64 at offset. This is only allowed for an array of U8s. fun ref update_u64[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U64 val) : U64 val ? Parameters offset: USize val value: U64 val Returns U64 val ? update_u128[optional B: (A Real [B] val U8 val)] [Source] Write a U128 at offset. This is only allowed for an array of U8s. fun ref update_u128[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U128 val) : U128 val ? Parameters offset: USize val value: U128 val Returns U128 val ? update [Source] Change the i-th element, raising an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ? Parameters i: USize val value: A Returns A^ ? insert [Source] Insert an element into the array. Elements after this are moved up by one index, extending the array. An out of bounds index raises an error. fun ref insert( i: USize val, value: A) : None val ? Parameters i: USize val value: A Returns None val ? delete [Source] Delete an element from the array. Elements after this are moved down by one index, compacting the array. An out of bounds index raises an error. The deleted element is returned. fun ref delete( i: USize val) : A^ ? Parameters i: USize val Returns A^ ? truncate [Source] Truncate an array to the given length, discarding excess elements. If the array is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val Parameters len: USize val Returns None val trim_in_place [Source] Trim the array to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new array nor copy elements. fun ref trim_in_place( from: USize val = seq, to: USize val = seq) : None val Parameters from: USize val = seq to: USize val = seq Returns None val trim [Source] Return a shared portion of this array, covering from until to . Both the original and the new array are immutable, as they share memory. The operation does not allocate a new array pointer nor copy elements. fun val trim( from: USize val = seq, to: USize val = seq) : Array[A] val Parameters from: USize val = seq to: USize val = seq Returns Array [A] val chop [Source] Chops the array in half at the split point requested and returns both the left and right portions. The original array is trimmed in place and returned as the right portion. If the split point is larger than the array, the left portion is the original array and the right portion is a new empty array. Both arrays are isolated and mutable, as they do not share memory. The operation does not allocate a new array pointer nor copy elements. fun iso chop( split_point: USize val) : (Array[A] iso^ , Array[A] iso^) Parameters split_point: USize val Returns ( Array [A] iso^ , Array [A] iso^) copy_from[optional B: (A Real [B] val U8 val)] [Source] Copy len elements from src(src_idx) to this(dst_idx). Only works for Array[U8]. fun ref copy_from[optional B: (A Real[B] val U8 val)]( src: Array[U8 val] box, src_idx: USize val, dst_idx: USize val, len: USize val) : None val Parameters src: Array [ U8 val] box src_idx: USize val dst_idx: USize val len: USize val Returns None val copy_to [Source] Copy len elements from this(src_idx) to dst(dst_idx). fun box copy_to( dst: Array[this- A!] ref, src_idx: USize val, dst_idx: USize val, len: USize val) : None val Parameters dst: Array [this- A!] ref src_idx: USize val dst_idx: USize val len: USize val Returns None val remove [Source] Remove n elements from the array, beginning at index i. fun ref remove( i: USize val, n: USize val) : None val Parameters i: USize val n: USize val Returns None val clear [Source] Remove all elements from the array. fun ref clear() : None val Returns None val push_u8[optional B: (A Real [B] val U8 val)] [Source] Add a U8 to the end of the array. This is only allowed for an array of U8s. fun ref push_u8[optional B: (A Real[B] val U8 val)]( value: U8 val) : None val Parameters value: U8 val Returns None val push_u16[optional B: (A Real [B] val U8 val)] [Source] Add a U16 to the end of the array. This is only allowed for an array of U8s. fun ref push_u16[optional B: (A Real[B] val U8 val)]( value: U16 val) : None val Parameters value: U16 val Returns None val push_u32[optional B: (A Real [B] val U8 val)] [Source] Add a U32 to the end of the array. This is only allowed for an array of U8s. fun ref push_u32[optional B: (A Real[B] val U8 val)]( value: U32 val) : None val Parameters value: U32 val Returns None val push_u64[optional B: (A Real [B] val U8 val)] [Source] Add a U64 to the end of the array. This is only allowed for an array of U8s. fun ref push_u64[optional B: (A Real[B] val U8 val)]( value: U64 val) : None val Parameters value: U64 val Returns None val push_u128[optional B: (A Real [B] val U8 val)] [Source] Add a U128 to the end of the array. This is only allowed for an array of U8s. fun ref push_u128[optional B: (A Real[B] val U8 val)]( value: U128 val) : None val Parameters value: U128 val Returns None val push [Source] Add an element to the end of the array. fun ref push( value: A) : None val Parameters value: A Returns None val pop [Source] Remove an element from the end of the array. The removed element is returned. fun ref pop() : A^ ? Returns A^ ? unshift [Source] Add an element to the beginning of the array. fun ref unshift( value: A) : None val Parameters value: A Returns None val shift [Source] Remove an element from the beginning of the array. The removed element is returned. fun ref shift() : A^ ? Returns A^ ? append [Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box ReadElement[A^] box), offset: USize val = seq, len: USize val = seq) : None val Parameters seq: ( ReadSeq [A] box ReadElement [A^] box) offset: USize val = seq len: USize val = seq Returns None val concat [Source] Add len iterated elements to the end of the array, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = seq, len: USize val = seq) : None val Parameters iter: Iterator [A^] ref offset: USize val = seq len: USize val = seq Returns None val find [Source] Find the nth appearance of value from the beginning of the array, starting at offset and examining higher indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the first element of the array, returns the first instance of value found, and uses object identity for comparison. fun box find( value: A!, offset: USize val = seq, nth: USize val = seq, predicate: {(box- A!, box- A!): Bool}[A] val = seq) : USize val ? Parameters value: A! offset: USize val = seq nth: USize val = seq predicate: {(box- A!, box- A!): Bool}[A] val = seq Returns USize val ? contains [Source] Returns true if the array contains value , false otherwise. The default predicate checks for matches by identity. To search for matches by structural equality, pass an object literal such as {(l, r) = l == r} . fun box contains( value: A!, predicate: {(box- A!, box- A!): Bool}[A] val = seq) : Bool val Parameters value: A! predicate: {(box- A!, box- A!): Bool}[A] val = seq Returns Bool val rfind [Source] Find the nth appearance of value from the end of the array, starting at offset and examining lower indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the last element of the array, returns the first instance of value found, and uses object identity for comparison. fun box rfind( value: A!, offset: USize val = seq, nth: USize val = seq, predicate: {(box- A!, box- A!): Bool}[A] val = seq) : USize val ? Parameters value: A! offset: USize val = seq nth: USize val = seq predicate: {(box- A!, box- A!): Bool}[A] val = seq Returns USize val ? clone [Source] Clone the array. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box clone() : Array[this- A!] ref^ Returns Array [this- A!] ref^ slice [Source] Create a new array that is a clone of a portion of this array. The range is exclusive and saturated. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box slice( from: USize val = seq, to: USize val = seq, step: USize val = seq) : Array[this- A!] ref^ Parameters from: USize val = seq to: USize val = seq step: USize val = seq Returns Array [this- A!] ref^ permute [Source] Create a new array with the elements permuted. Permute to an arbitrary order that may include duplicates. An out of bounds index raises an error. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box permute( indices: Iterator[USize val] ref) : Array[this- A!] ref^ ? Parameters indices: Iterator [ USize val] ref Returns Array [this- A!] ref^ ? reverse [Source] Create a new array with the elements in reverse order. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box reverse() : Array[this- A!] ref^ Returns Array [this- A!] ref^ reverse_in_place [Source] Reverse the array in place. fun ref reverse_in_place() : None val Returns None val swap_elements [Source] Swap the element at index i with the element at index j. If either i or j are out of bounds, an error is raised. fun ref swap_elements( i: USize val, j: USize val) : None val ? Parameters i: USize val j: USize val Returns None val ? keys [Source] Return an iterator over the indices in the array. fun box keys() : ArrayKeys[A, this- Array[A] ref] ref^ Returns ArrayKeys [A, this- Array [A] ref] ref^ values [Source] Return an iterator over the values in the array. fun box values() : ArrayValues[A, this- Array[A] ref] ref^ Returns ArrayValues [A, this- Array [A] ref] ref^ pairs [Source] Return an iterator over the (index, value) pairs in the array. fun box pairs() : ArrayPairs[A, this- Array[A] ref] ref^ Returns ArrayPairs [A, this- Array [A] ref] ref^ Private Functions _copy_to [Source] Copy copy_len elements from this to that at specified offsets. fun box _copy_to( ptr: Pointer[this- A!] ref, copy_len: USize val, from_offset: USize val = seq, to_offset: USize val = seq) : None val Parameters ptr: Pointer [this- A!] ref copy_len: USize val from_offset: USize val = seq to_offset: USize val = seq Returns None val _element_size [Source] Element size in bytes for an element. fun box _element_size() : USize val Returns USize val","title":"class Array"},{"location":"builtin-Array/#array91a-a93","text":"[Source] Contiguous, resizable memory to store elements of type A.","title":"Array[A: A]"},{"location":"builtin-Array/#usage","text":"Creating an Array of String. let array: Array[String] = [ dog ; cat ; wombat ] // array.size() == 3 // array.space() = 3 Creating an empty Array of String, which may hold at least 10 elements before requesting more space. let array = Array(10) // array.size() == 0 // array.space() = 10 Accessing elements can be done via the apply(i: USize): this- A ? method. The provided index might be out of bounds so apply is partial and has to be called within a try-catch block or inside another partial method. let array: Array[String] = [ dog ; cat ; wombat ] let is_second_element_wobat = try // indexes start from 0, so 1 is the second element array(1)? == wombat else false end Adding and removing elements to and from the end of the Array can be done via push and pop methods. You could treat the array as a FIFO queue using those methods. while (array.size() 0) do let elem = array.pop()? // do something with element end Modifying the Array can be done via update , insert and delete methods which alter the Array at an arbitrary index, moving elements left (when deleting) or right (when inserting) as necessary. Iterating over the elements of an Array can be done using the values method. for element in array.values() do // do something with element end","title":"Usage"},{"location":"builtin-Array/#memory-allocation","text":"Array allocates contiguous memory. It always allocates at least enough memory space to hold all of its elements. Space is the number of elements the Array can hold without allocating more memory. The space() method returns the number of elements an Array can hold. The size() method returns the number of elements the Array holds. Different data types require different amounts of memory. Array[U64] with size of 6 will take more memory than an Array[U8] of the same size. When creating an Array or adding more elements will calculate the next power of 2 of the requested number of elements and allocate that much space, with a lower bound of space for 8 elements. Here's a few examples of the space allocated when initialising an Array with various number of elements: size space 0 0 1 8 8 8 9 16 16 16 17 32 Call the compact() method to ask the GC to reclaim unused space. There are no guarantees that the GC will actually reclaim any space. class ref Array[A: A] is Seq[A] ref","title":"Memory allocation"},{"location":"builtin-Array/#implements","text":"Seq [A] ref","title":"Implements"},{"location":"builtin-Array/#constructors","text":"","title":"Constructors"},{"location":"builtin-Array/#create","text":"[Source] Create an array with zero elements, but space for len elements. new ref create( len: USize val = seq) : Array[A] ref^","title":"create"},{"location":"builtin-Array/#parameters","text":"len: USize val = seq","title":"Parameters"},{"location":"builtin-Array/#returns","text":"Array [A] ref^","title":"Returns"},{"location":"builtin-Array/#init","text":"[Source] Create an array of len elements, all initialised to the given value. new ref init( from: A^, len: USize val) : Array[A] ref^","title":"init"},{"location":"builtin-Array/#parameters_1","text":"from: A^ len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_1","text":"Array [A] ref^","title":"Returns"},{"location":"builtin-Array/#from_cpointer","text":"[Source] Create an array from a C-style pointer and length. The contents are not copied. new ref from_cpointer( ptr: Pointer[A] ref, len: USize val, alloc: USize val = seq) : Array[A] ref^","title":"from_cpointer"},{"location":"builtin-Array/#parameters_2","text":"ptr: Pointer [A] ref len: USize val alloc: USize val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_2","text":"Array [A] ref^","title":"Returns"},{"location":"builtin-Array/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Array/#cpointer","text":"[Source] Return the underlying C-style pointer. fun box cpointer( offset: USize val = seq) : Pointer[A] tag","title":"cpointer"},{"location":"builtin-Array/#parameters_3","text":"offset: USize val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_3","text":"Pointer [A] tag","title":"Returns"},{"location":"builtin-Array/#size","text":"[Source] The number of elements in the array. fun box size() : USize val","title":"size"},{"location":"builtin-Array/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-Array/#space","text":"[Source] The available space in the array. fun box space() : USize val","title":"space"},{"location":"builtin-Array/#returns_5","text":"USize val","title":"Returns"},{"location":"builtin-Array/#reserve","text":"[Source] Reserve space for len elements, including whatever elements are already in the array. Array space grows geometrically. fun ref reserve( len: USize val) : None val","title":"reserve"},{"location":"builtin-Array/#parameters_4","text":"len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_6","text":"None val","title":"Returns"},{"location":"builtin-Array/#compact","text":"[Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. fun ref compact() : None val","title":"compact"},{"location":"builtin-Array/#returns_7","text":"None val","title":"Returns"},{"location":"builtin-Array/#undefined91optional-b-a-real91b93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93","text":"[Source] Resize to len elements, populating previously empty elements with random memory. This is only allowed for an array of numbers. fun ref undefined[optional B: (A Real[B] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]( len: USize val) : None val","title":"undefined[optional B: (A &amp; Real[B] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"},{"location":"builtin-Array/#parameters_5","text":"len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_8","text":"None val","title":"Returns"},{"location":"builtin-Array/#read_u891optional-b-a-real91b93-val-u8-val93","text":"[Source] Reads a U8 from offset. This is only allowed for an array of U8s. fun box read_u8[optional B: (A Real[B] val U8 val)]( offset: USize val) : U8 val ?","title":"read_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_6","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_9","text":"U8 val ?","title":"Returns"},{"location":"builtin-Array/#read_u1691optional-b-a-real91b93-val-u8-val93","text":"[Source] Reads a U16 from offset. This is only allowed for an array of U8s. fun box read_u16[optional B: (A Real[B] val U8 val)]( offset: USize val) : U16 val ?","title":"read_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_7","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_10","text":"U16 val ?","title":"Returns"},{"location":"builtin-Array/#read_u3291optional-b-a-real91b93-val-u8-val93","text":"[Source] Reads a U32 from offset. This is only allowed for an array of U8s. fun box read_u32[optional B: (A Real[B] val U8 val)]( offset: USize val) : U32 val ?","title":"read_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_8","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_11","text":"U32 val ?","title":"Returns"},{"location":"builtin-Array/#read_u6491optional-b-a-real91b93-val-u8-val93","text":"[Source] Reads a U64 from offset. This is only allowed for an array of U8s. fun box read_u64[optional B: (A Real[B] val U8 val)]( offset: USize val) : U64 val ?","title":"read_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_9","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_12","text":"U64 val ?","title":"Returns"},{"location":"builtin-Array/#read_u12891optional-b-a-real91b93-val-u8-val93","text":"[Source] Reads a U128 from offset. This is only allowed for an array of U8s. fun box read_u128[optional B: (A Real[B] val U8 val)]( offset: USize val) : U128 val ?","title":"read_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_10","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_13","text":"U128 val ?","title":"Returns"},{"location":"builtin-Array/#apply","text":"[Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val) : this- A ?","title":"apply"},{"location":"builtin-Array/#parameters_11","text":"i: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_14","text":"this- A ?","title":"Returns"},{"location":"builtin-Array/#update_u891optional-b-a-real91b93-val-u8-val93","text":"[Source] Write a U8 at offset. This is only allowed for an array of U8s. fun ref update_u8[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U8 val) : U8 val ?","title":"update_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_12","text":"offset: USize val value: U8 val","title":"Parameters"},{"location":"builtin-Array/#returns_15","text":"U8 val ?","title":"Returns"},{"location":"builtin-Array/#update_u1691optional-b-a-real91b93-val-u8-val93","text":"[Source] Write a U16 at offset. This is only allowed for an array of U8s. fun ref update_u16[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U16 val) : U16 val ?","title":"update_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_13","text":"offset: USize val value: U16 val","title":"Parameters"},{"location":"builtin-Array/#returns_16","text":"U16 val ?","title":"Returns"},{"location":"builtin-Array/#update_u3291optional-b-a-real91b93-val-u8-val93","text":"[Source] Write a U32 at offset. This is only allowed for an array of U8s. fun ref update_u32[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U32 val) : U32 val ?","title":"update_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_14","text":"offset: USize val value: U32 val","title":"Parameters"},{"location":"builtin-Array/#returns_17","text":"U32 val ?","title":"Returns"},{"location":"builtin-Array/#update_u6491optional-b-a-real91b93-val-u8-val93","text":"[Source] Write a U64 at offset. This is only allowed for an array of U8s. fun ref update_u64[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U64 val) : U64 val ?","title":"update_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_15","text":"offset: USize val value: U64 val","title":"Parameters"},{"location":"builtin-Array/#returns_18","text":"U64 val ?","title":"Returns"},{"location":"builtin-Array/#update_u12891optional-b-a-real91b93-val-u8-val93","text":"[Source] Write a U128 at offset. This is only allowed for an array of U8s. fun ref update_u128[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U128 val) : U128 val ?","title":"update_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_16","text":"offset: USize val value: U128 val","title":"Parameters"},{"location":"builtin-Array/#returns_19","text":"U128 val ?","title":"Returns"},{"location":"builtin-Array/#update","text":"[Source] Change the i-th element, raising an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ?","title":"update"},{"location":"builtin-Array/#parameters_17","text":"i: USize val value: A","title":"Parameters"},{"location":"builtin-Array/#returns_20","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#insert","text":"[Source] Insert an element into the array. Elements after this are moved up by one index, extending the array. An out of bounds index raises an error. fun ref insert( i: USize val, value: A) : None val ?","title":"insert"},{"location":"builtin-Array/#parameters_18","text":"i: USize val value: A","title":"Parameters"},{"location":"builtin-Array/#returns_21","text":"None val ?","title":"Returns"},{"location":"builtin-Array/#delete","text":"[Source] Delete an element from the array. Elements after this are moved down by one index, compacting the array. An out of bounds index raises an error. The deleted element is returned. fun ref delete( i: USize val) : A^ ?","title":"delete"},{"location":"builtin-Array/#parameters_19","text":"i: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_22","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#truncate","text":"[Source] Truncate an array to the given length, discarding excess elements. If the array is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val","title":"truncate"},{"location":"builtin-Array/#parameters_20","text":"len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_23","text":"None val","title":"Returns"},{"location":"builtin-Array/#trim_in_place","text":"[Source] Trim the array to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new array nor copy elements. fun ref trim_in_place( from: USize val = seq, to: USize val = seq) : None val","title":"trim_in_place"},{"location":"builtin-Array/#parameters_21","text":"from: USize val = seq to: USize val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_24","text":"None val","title":"Returns"},{"location":"builtin-Array/#trim","text":"[Source] Return a shared portion of this array, covering from until to . Both the original and the new array are immutable, as they share memory. The operation does not allocate a new array pointer nor copy elements. fun val trim( from: USize val = seq, to: USize val = seq) : Array[A] val","title":"trim"},{"location":"builtin-Array/#parameters_22","text":"from: USize val = seq to: USize val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_25","text":"Array [A] val","title":"Returns"},{"location":"builtin-Array/#chop","text":"[Source] Chops the array in half at the split point requested and returns both the left and right portions. The original array is trimmed in place and returned as the right portion. If the split point is larger than the array, the left portion is the original array and the right portion is a new empty array. Both arrays are isolated and mutable, as they do not share memory. The operation does not allocate a new array pointer nor copy elements. fun iso chop( split_point: USize val) : (Array[A] iso^ , Array[A] iso^)","title":"chop"},{"location":"builtin-Array/#parameters_23","text":"split_point: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_26","text":"( Array [A] iso^ , Array [A] iso^)","title":"Returns"},{"location":"builtin-Array/#copy_from91optional-b-a-real91b93-val-u8-val93","text":"[Source] Copy len elements from src(src_idx) to this(dst_idx). Only works for Array[U8]. fun ref copy_from[optional B: (A Real[B] val U8 val)]( src: Array[U8 val] box, src_idx: USize val, dst_idx: USize val, len: USize val) : None val","title":"copy_from[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_24","text":"src: Array [ U8 val] box src_idx: USize val dst_idx: USize val len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_27","text":"None val","title":"Returns"},{"location":"builtin-Array/#copy_to","text":"[Source] Copy len elements from this(src_idx) to dst(dst_idx). fun box copy_to( dst: Array[this- A!] ref, src_idx: USize val, dst_idx: USize val, len: USize val) : None val","title":"copy_to"},{"location":"builtin-Array/#parameters_25","text":"dst: Array [this- A!] ref src_idx: USize val dst_idx: USize val len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_28","text":"None val","title":"Returns"},{"location":"builtin-Array/#remove","text":"[Source] Remove n elements from the array, beginning at index i. fun ref remove( i: USize val, n: USize val) : None val","title":"remove"},{"location":"builtin-Array/#parameters_26","text":"i: USize val n: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_29","text":"None val","title":"Returns"},{"location":"builtin-Array/#clear","text":"[Source] Remove all elements from the array. fun ref clear() : None val","title":"clear"},{"location":"builtin-Array/#returns_30","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u891optional-b-a-real91b93-val-u8-val93","text":"[Source] Add a U8 to the end of the array. This is only allowed for an array of U8s. fun ref push_u8[optional B: (A Real[B] val U8 val)]( value: U8 val) : None val","title":"push_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_27","text":"value: U8 val","title":"Parameters"},{"location":"builtin-Array/#returns_31","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u1691optional-b-a-real91b93-val-u8-val93","text":"[Source] Add a U16 to the end of the array. This is only allowed for an array of U8s. fun ref push_u16[optional B: (A Real[B] val U8 val)]( value: U16 val) : None val","title":"push_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_28","text":"value: U16 val","title":"Parameters"},{"location":"builtin-Array/#returns_32","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u3291optional-b-a-real91b93-val-u8-val93","text":"[Source] Add a U32 to the end of the array. This is only allowed for an array of U8s. fun ref push_u32[optional B: (A Real[B] val U8 val)]( value: U32 val) : None val","title":"push_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_29","text":"value: U32 val","title":"Parameters"},{"location":"builtin-Array/#returns_33","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u6491optional-b-a-real91b93-val-u8-val93","text":"[Source] Add a U64 to the end of the array. This is only allowed for an array of U8s. fun ref push_u64[optional B: (A Real[B] val U8 val)]( value: U64 val) : None val","title":"push_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_30","text":"value: U64 val","title":"Parameters"},{"location":"builtin-Array/#returns_34","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u12891optional-b-a-real91b93-val-u8-val93","text":"[Source] Add a U128 to the end of the array. This is only allowed for an array of U8s. fun ref push_u128[optional B: (A Real[B] val U8 val)]( value: U128 val) : None val","title":"push_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_31","text":"value: U128 val","title":"Parameters"},{"location":"builtin-Array/#returns_35","text":"None val","title":"Returns"},{"location":"builtin-Array/#push","text":"[Source] Add an element to the end of the array. fun ref push( value: A) : None val","title":"push"},{"location":"builtin-Array/#parameters_32","text":"value: A","title":"Parameters"},{"location":"builtin-Array/#returns_36","text":"None val","title":"Returns"},{"location":"builtin-Array/#pop","text":"[Source] Remove an element from the end of the array. The removed element is returned. fun ref pop() : A^ ?","title":"pop"},{"location":"builtin-Array/#returns_37","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#unshift","text":"[Source] Add an element to the beginning of the array. fun ref unshift( value: A) : None val","title":"unshift"},{"location":"builtin-Array/#parameters_33","text":"value: A","title":"Parameters"},{"location":"builtin-Array/#returns_38","text":"None val","title":"Returns"},{"location":"builtin-Array/#shift","text":"[Source] Remove an element from the beginning of the array. The removed element is returned. fun ref shift() : A^ ?","title":"shift"},{"location":"builtin-Array/#returns_39","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#append","text":"[Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box ReadElement[A^] box), offset: USize val = seq, len: USize val = seq) : None val","title":"append"},{"location":"builtin-Array/#parameters_34","text":"seq: ( ReadSeq [A] box ReadElement [A^] box) offset: USize val = seq len: USize val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_40","text":"None val","title":"Returns"},{"location":"builtin-Array/#concat","text":"[Source] Add len iterated elements to the end of the array, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = seq, len: USize val = seq) : None val","title":"concat"},{"location":"builtin-Array/#parameters_35","text":"iter: Iterator [A^] ref offset: USize val = seq len: USize val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_41","text":"None val","title":"Returns"},{"location":"builtin-Array/#find","text":"[Source] Find the nth appearance of value from the beginning of the array, starting at offset and examining higher indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the first element of the array, returns the first instance of value found, and uses object identity for comparison. fun box find( value: A!, offset: USize val = seq, nth: USize val = seq, predicate: {(box- A!, box- A!): Bool}[A] val = seq) : USize val ?","title":"find"},{"location":"builtin-Array/#parameters_36","text":"value: A! offset: USize val = seq nth: USize val = seq predicate: {(box- A!, box- A!): Bool}[A] val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_42","text":"USize val ?","title":"Returns"},{"location":"builtin-Array/#contains","text":"[Source] Returns true if the array contains value , false otherwise. The default predicate checks for matches by identity. To search for matches by structural equality, pass an object literal such as {(l, r) = l == r} . fun box contains( value: A!, predicate: {(box- A!, box- A!): Bool}[A] val = seq) : Bool val","title":"contains"},{"location":"builtin-Array/#parameters_37","text":"value: A! predicate: {(box- A!, box- A!): Bool}[A] val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_43","text":"Bool val","title":"Returns"},{"location":"builtin-Array/#rfind","text":"[Source] Find the nth appearance of value from the end of the array, starting at offset and examining lower indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the last element of the array, returns the first instance of value found, and uses object identity for comparison. fun box rfind( value: A!, offset: USize val = seq, nth: USize val = seq, predicate: {(box- A!, box- A!): Bool}[A] val = seq) : USize val ?","title":"rfind"},{"location":"builtin-Array/#parameters_38","text":"value: A! offset: USize val = seq nth: USize val = seq predicate: {(box- A!, box- A!): Bool}[A] val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_44","text":"USize val ?","title":"Returns"},{"location":"builtin-Array/#clone","text":"[Source] Clone the array. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box clone() : Array[this- A!] ref^","title":"clone"},{"location":"builtin-Array/#returns_45","text":"Array [this- A!] ref^","title":"Returns"},{"location":"builtin-Array/#slice","text":"[Source] Create a new array that is a clone of a portion of this array. The range is exclusive and saturated. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box slice( from: USize val = seq, to: USize val = seq, step: USize val = seq) : Array[this- A!] ref^","title":"slice"},{"location":"builtin-Array/#parameters_39","text":"from: USize val = seq to: USize val = seq step: USize val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_46","text":"Array [this- A!] ref^","title":"Returns"},{"location":"builtin-Array/#permute","text":"[Source] Create a new array with the elements permuted. Permute to an arbitrary order that may include duplicates. An out of bounds index raises an error. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box permute( indices: Iterator[USize val] ref) : Array[this- A!] ref^ ?","title":"permute"},{"location":"builtin-Array/#parameters_40","text":"indices: Iterator [ USize val] ref","title":"Parameters"},{"location":"builtin-Array/#returns_47","text":"Array [this- A!] ref^ ?","title":"Returns"},{"location":"builtin-Array/#reverse","text":"[Source] Create a new array with the elements in reverse order. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box reverse() : Array[this- A!] ref^","title":"reverse"},{"location":"builtin-Array/#returns_48","text":"Array [this- A!] ref^","title":"Returns"},{"location":"builtin-Array/#reverse_in_place","text":"[Source] Reverse the array in place. fun ref reverse_in_place() : None val","title":"reverse_in_place"},{"location":"builtin-Array/#returns_49","text":"None val","title":"Returns"},{"location":"builtin-Array/#swap_elements","text":"[Source] Swap the element at index i with the element at index j. If either i or j are out of bounds, an error is raised. fun ref swap_elements( i: USize val, j: USize val) : None val ?","title":"swap_elements"},{"location":"builtin-Array/#parameters_41","text":"i: USize val j: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_50","text":"None val ?","title":"Returns"},{"location":"builtin-Array/#keys","text":"[Source] Return an iterator over the indices in the array. fun box keys() : ArrayKeys[A, this- Array[A] ref] ref^","title":"keys"},{"location":"builtin-Array/#returns_51","text":"ArrayKeys [A, this- Array [A] ref] ref^","title":"Returns"},{"location":"builtin-Array/#values","text":"[Source] Return an iterator over the values in the array. fun box values() : ArrayValues[A, this- Array[A] ref] ref^","title":"values"},{"location":"builtin-Array/#returns_52","text":"ArrayValues [A, this- Array [A] ref] ref^","title":"Returns"},{"location":"builtin-Array/#pairs","text":"[Source] Return an iterator over the (index, value) pairs in the array. fun box pairs() : ArrayPairs[A, this- Array[A] ref] ref^","title":"pairs"},{"location":"builtin-Array/#returns_53","text":"ArrayPairs [A, this- Array [A] ref] ref^","title":"Returns"},{"location":"builtin-Array/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Array/#_copy_to","text":"[Source] Copy copy_len elements from this to that at specified offsets. fun box _copy_to( ptr: Pointer[this- A!] ref, copy_len: USize val, from_offset: USize val = seq, to_offset: USize val = seq) : None val","title":"_copy_to"},{"location":"builtin-Array/#parameters_42","text":"ptr: Pointer [this- A!] ref copy_len: USize val from_offset: USize val = seq to_offset: USize val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_54","text":"None val","title":"Returns"},{"location":"builtin-Array/#_element_size","text":"[Source] Element size in bytes for an element. fun box _element_size() : USize val","title":"_element_size"},{"location":"builtin-Array/#returns_55","text":"USize val","title":"Returns"},{"location":"builtin-ArrayKeys/","text":"ArrayKeys[A: A, B: Array [A] #read] [Source] class ref ArrayKeys[A: A, B: Array[A] #read] is Iterator[USize val] ref Implements Iterator [ USize val] ref Constructors create [Source] new ref create( array: B) : ArrayKeys[A, B] ref^ Parameters array: B Returns ArrayKeys [A, B] ref^ Public Functions has_next [Source] fun box has_next() : Bool val Returns Bool val next [Source] fun ref next() : USize val Returns USize val","title":"class ArrayKeys"},{"location":"builtin-ArrayKeys/#arraykeys91a-a-b-array91a93-read93","text":"[Source] class ref ArrayKeys[A: A, B: Array[A] #read] is Iterator[USize val] ref","title":"ArrayKeys[A: A, B: Array[A] #read]"},{"location":"builtin-ArrayKeys/#implements","text":"Iterator [ USize val] ref","title":"Implements"},{"location":"builtin-ArrayKeys/#constructors","text":"","title":"Constructors"},{"location":"builtin-ArrayKeys/#create","text":"[Source] new ref create( array: B) : ArrayKeys[A, B] ref^","title":"create"},{"location":"builtin-ArrayKeys/#parameters","text":"array: B","title":"Parameters"},{"location":"builtin-ArrayKeys/#returns","text":"ArrayKeys [A, B] ref^","title":"Returns"},{"location":"builtin-ArrayKeys/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ArrayKeys/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-ArrayKeys/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-ArrayKeys/#next","text":"[Source] fun ref next() : USize val","title":"next"},{"location":"builtin-ArrayKeys/#returns_2","text":"USize val","title":"Returns"},{"location":"builtin-ArrayPairs/","text":"ArrayPairs[A: A, B: Array [A] #read] [Source] class ref ArrayPairs[A: A, B: Array[A] #read] is Iterator[(USize val , B- A)] ref Implements Iterator [( USize val , B- A)] ref Constructors create [Source] new ref create( array: B) : ArrayPairs[A, B] ref^ Parameters array: B Returns ArrayPairs [A, B] ref^ Public Functions has_next [Source] fun box has_next() : Bool val Returns Bool val next [Source] fun ref next() : (USize val , B- A) ? Returns ( USize val , B- A) ?","title":"class ArrayPairs"},{"location":"builtin-ArrayPairs/#arraypairs91a-a-b-array91a93-read93","text":"[Source] class ref ArrayPairs[A: A, B: Array[A] #read] is Iterator[(USize val , B- A)] ref","title":"ArrayPairs[A: A, B: Array[A] #read]"},{"location":"builtin-ArrayPairs/#implements","text":"Iterator [( USize val , B- A)] ref","title":"Implements"},{"location":"builtin-ArrayPairs/#constructors","text":"","title":"Constructors"},{"location":"builtin-ArrayPairs/#create","text":"[Source] new ref create( array: B) : ArrayPairs[A, B] ref^","title":"create"},{"location":"builtin-ArrayPairs/#parameters","text":"array: B","title":"Parameters"},{"location":"builtin-ArrayPairs/#returns","text":"ArrayPairs [A, B] ref^","title":"Returns"},{"location":"builtin-ArrayPairs/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ArrayPairs/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-ArrayPairs/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-ArrayPairs/#next","text":"[Source] fun ref next() : (USize val , B- A) ?","title":"next"},{"location":"builtin-ArrayPairs/#returns_2","text":"( USize val , B- A) ?","title":"Returns"},{"location":"builtin-ArrayValues/","text":"ArrayValues[A: A, B: Array [A] #read] [Source] class ref ArrayValues[A: A, B: Array[A] #read] is Iterator[B- A] ref Implements Iterator [B- A] ref Constructors create [Source] new ref create( array: B) : ArrayValues[A, B] ref^ Parameters array: B Returns ArrayValues [A, B] ref^ Public Functions has_next [Source] fun box has_next() : Bool val Returns Bool val next [Source] fun ref next() : B- A ? Returns B- A ? rewind [Source] fun ref rewind() : ArrayValues[A, B] ref Returns ArrayValues [A, B] ref","title":"class ArrayValues"},{"location":"builtin-ArrayValues/#arrayvalues91a-a-b-array91a93-read93","text":"[Source] class ref ArrayValues[A: A, B: Array[A] #read] is Iterator[B- A] ref","title":"ArrayValues[A: A, B: Array[A] #read]"},{"location":"builtin-ArrayValues/#implements","text":"Iterator [B- A] ref","title":"Implements"},{"location":"builtin-ArrayValues/#constructors","text":"","title":"Constructors"},{"location":"builtin-ArrayValues/#create","text":"[Source] new ref create( array: B) : ArrayValues[A, B] ref^","title":"create"},{"location":"builtin-ArrayValues/#parameters","text":"array: B","title":"Parameters"},{"location":"builtin-ArrayValues/#returns","text":"ArrayValues [A, B] ref^","title":"Returns"},{"location":"builtin-ArrayValues/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ArrayValues/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-ArrayValues/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-ArrayValues/#next","text":"[Source] fun ref next() : B- A ?","title":"next"},{"location":"builtin-ArrayValues/#returns_2","text":"B- A ?","title":"Returns"},{"location":"builtin-ArrayValues/#rewind","text":"[Source] fun ref rewind() : ArrayValues[A, B] ref","title":"rewind"},{"location":"builtin-ArrayValues/#returns_3","text":"ArrayValues [A, B] ref","title":"Returns"},{"location":"builtin-AsioEvent/","text":"AsioEvent [Source] Functions for asynchronous event notification. primitive val AsioEvent Constructors create [Source] new val create() : AsioEvent val^ Returns AsioEvent val^ Public Functions none [Source] An empty event. fun box none() : Pointer[AsioEvent val] tag Returns Pointer [ AsioEvent val] tag readable [Source] Returns true if the flags contain the readable flag. fun box readable( flags: U32 val) : Bool val Parameters flags: U32 val Returns Bool val writeable [Source] Returns true if the flags contain the writeable flag. fun box writeable( flags: U32 val) : Bool val Parameters flags: U32 val Returns Bool val disposable [Source] Returns true if the event should be disposed of. fun box disposable( flags: U32 val) : Bool val Parameters flags: U32 val Returns Bool val dispose [Source] fun box dispose() : U32 val Returns U32 val read [Source] fun box read() : U32 val Returns U32 val write [Source] fun box write() : U32 val Returns U32 val timer [Source] fun box timer() : U32 val Returns U32 val signal [Source] fun box signal() : U32 val Returns U32 val read_write [Source] fun box read_write() : U32 val Returns U32 val oneshot [Source] fun box oneshot() : U32 val Returns U32 val read_write_oneshot [Source] fun box read_write_oneshot() : U32 val Returns U32 val eq [Source] fun box eq( that: AsioEvent val) : Bool val Parameters that: AsioEvent val Returns Bool val ne [Source] fun box ne( that: AsioEvent val) : Bool val Parameters that: AsioEvent val Returns Bool val","title":"primitive AsioEvent"},{"location":"builtin-AsioEvent/#asioevent","text":"[Source] Functions for asynchronous event notification. primitive val AsioEvent","title":"AsioEvent"},{"location":"builtin-AsioEvent/#constructors","text":"","title":"Constructors"},{"location":"builtin-AsioEvent/#create","text":"[Source] new val create() : AsioEvent val^","title":"create"},{"location":"builtin-AsioEvent/#returns","text":"AsioEvent val^","title":"Returns"},{"location":"builtin-AsioEvent/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-AsioEvent/#none","text":"[Source] An empty event. fun box none() : Pointer[AsioEvent val] tag","title":"none"},{"location":"builtin-AsioEvent/#returns_1","text":"Pointer [ AsioEvent val] tag","title":"Returns"},{"location":"builtin-AsioEvent/#readable","text":"[Source] Returns true if the flags contain the readable flag. fun box readable( flags: U32 val) : Bool val","title":"readable"},{"location":"builtin-AsioEvent/#parameters","text":"flags: U32 val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#writeable","text":"[Source] Returns true if the flags contain the writeable flag. fun box writeable( flags: U32 val) : Bool val","title":"writeable"},{"location":"builtin-AsioEvent/#parameters_1","text":"flags: U32 val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#disposable","text":"[Source] Returns true if the event should be disposed of. fun box disposable( flags: U32 val) : Bool val","title":"disposable"},{"location":"builtin-AsioEvent/#parameters_2","text":"flags: U32 val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#dispose","text":"[Source] fun box dispose() : U32 val","title":"dispose"},{"location":"builtin-AsioEvent/#returns_5","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#read","text":"[Source] fun box read() : U32 val","title":"read"},{"location":"builtin-AsioEvent/#returns_6","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#write","text":"[Source] fun box write() : U32 val","title":"write"},{"location":"builtin-AsioEvent/#returns_7","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#timer","text":"[Source] fun box timer() : U32 val","title":"timer"},{"location":"builtin-AsioEvent/#returns_8","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#signal","text":"[Source] fun box signal() : U32 val","title":"signal"},{"location":"builtin-AsioEvent/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#read_write","text":"[Source] fun box read_write() : U32 val","title":"read_write"},{"location":"builtin-AsioEvent/#returns_10","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#oneshot","text":"[Source] fun box oneshot() : U32 val","title":"oneshot"},{"location":"builtin-AsioEvent/#returns_11","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#read_write_oneshot","text":"[Source] fun box read_write_oneshot() : U32 val","title":"read_write_oneshot"},{"location":"builtin-AsioEvent/#returns_12","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#eq","text":"[Source] fun box eq( that: AsioEvent val) : Bool val","title":"eq"},{"location":"builtin-AsioEvent/#parameters_3","text":"that: AsioEvent val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_13","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#ne","text":"[Source] fun box ne( that: AsioEvent val) : Bool val","title":"ne"},{"location":"builtin-AsioEvent/#parameters_4","text":"that: AsioEvent val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_14","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEventID/","text":"AsioEventID [Source] type AsioEventID is Pointer[AsioEvent val] tag Type Alias For Pointer [ AsioEvent val] tag","title":"type AsioEventID"},{"location":"builtin-AsioEventID/#asioeventid","text":"[Source] type AsioEventID is Pointer[AsioEvent val] tag","title":"AsioEventID"},{"location":"builtin-AsioEventID/#type-alias-for","text":"Pointer [ AsioEvent val] tag","title":"Type Alias For"},{"location":"builtin-AsioEventNotify/","text":"AsioEventNotify [Source] interface tag AsioEventNotify Private Behaviours _event_notify [Source] be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"interface AsioEventNotify"},{"location":"builtin-AsioEventNotify/#asioeventnotify","text":"[Source] interface tag AsioEventNotify","title":"AsioEventNotify"},{"location":"builtin-AsioEventNotify/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"builtin-AsioEventNotify/#_event_notify","text":"[Source] be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"builtin-AsioEventNotify/#parameters","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"builtin-Bool/","text":"Bool [Source] primitive val Bool is Stringable box Implements Stringable box Constructors create [Source] new val create( from: Bool val) : Bool val^ Parameters from: Bool val Returns Bool val^ Public Functions eq [Source] fun box eq( y: Bool val) : Bool val Parameters y: Bool val Returns Bool val ne [Source] fun box ne( y: Bool val) : Bool val Parameters y: Bool val Returns Bool val op_and [Source] fun box op_and( y: Bool val) : Bool val Parameters y: Bool val Returns Bool val op_or [Source] fun box op_or( y: Bool val) : Bool val Parameters y: Bool val Returns Bool val op_xor [Source] fun box op_xor( y: Bool val) : Bool val Parameters y: Bool val Returns Bool val op_not [Source] fun box op_not() : Bool val Returns Bool val string [Source] fun box string() : String iso^ Returns String iso^","title":"primitive Bool"},{"location":"builtin-Bool/#bool","text":"[Source] primitive val Bool is Stringable box","title":"Bool"},{"location":"builtin-Bool/#implements","text":"Stringable box","title":"Implements"},{"location":"builtin-Bool/#constructors","text":"","title":"Constructors"},{"location":"builtin-Bool/#create","text":"[Source] new val create( from: Bool val) : Bool val^","title":"create"},{"location":"builtin-Bool/#parameters","text":"from: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns","text":"Bool val^","title":"Returns"},{"location":"builtin-Bool/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Bool/#eq","text":"[Source] fun box eq( y: Bool val) : Bool val","title":"eq"},{"location":"builtin-Bool/#parameters_1","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#ne","text":"[Source] fun box ne( y: Bool val) : Bool val","title":"ne"},{"location":"builtin-Bool/#parameters_2","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_and","text":"[Source] fun box op_and( y: Bool val) : Bool val","title":"op_and"},{"location":"builtin-Bool/#parameters_3","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_or","text":"[Source] fun box op_or( y: Bool val) : Bool val","title":"op_or"},{"location":"builtin-Bool/#parameters_4","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_xor","text":"[Source] fun box op_xor( y: Bool val) : Bool val","title":"op_xor"},{"location":"builtin-Bool/#parameters_5","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_not","text":"[Source] fun box op_not() : Bool val","title":"op_not"},{"location":"builtin-Bool/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Bool/#returns_7","text":"String iso^","title":"Returns"},{"location":"builtin-ByteSeq/","text":"ByteSeq [Source] type ByteSeq is (String val | Array[U8 val] val) Type Alias For ( String val | Array [ U8 val] val)","title":"type ByteSeq"},{"location":"builtin-ByteSeq/#byteseq","text":"[Source] type ByteSeq is (String val | Array[U8 val] val)","title":"ByteSeq"},{"location":"builtin-ByteSeq/#type-alias-for","text":"( String val | Array [ U8 val] val)","title":"Type Alias For"},{"location":"builtin-ByteSeqIter/","text":"ByteSeqIter [Source] Accept an iterable collection of String or Array[U8] val. interface val ByteSeqIter Public Functions values [Source] fun box values() : Iterator[(this- String box | this- Array[U8 val] box)] ref Returns Iterator [(this- String box | this- Array [ U8 val] box)] ref","title":"interface ByteSeqIter"},{"location":"builtin-ByteSeqIter/#byteseqiter","text":"[Source] Accept an iterable collection of String or Array[U8] val. interface val ByteSeqIter","title":"ByteSeqIter"},{"location":"builtin-ByteSeqIter/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ByteSeqIter/#values","text":"[Source] fun box values() : Iterator[(this- String box | this- Array[U8 val] box)] ref","title":"values"},{"location":"builtin-ByteSeqIter/#returns","text":"Iterator [(this- String box | this- Array [ U8 val] box)] ref","title":"Returns"},{"location":"builtin-Comparable/","text":"Comparable[A: Comparable [A] #read] [Source] interface ref Comparable[A: Comparable[A] #read] is Equatable[A] ref Implements Equatable [A] ref Public Functions lt [Source] fun box lt( that: box- A) : Bool val Parameters that: box- A Returns Bool val le [Source] fun box le( that: box- A) : Bool val Parameters that: box- A Returns Bool val ge [Source] fun box ge( that: box- A) : Bool val Parameters that: box- A Returns Bool val gt [Source] fun box gt( that: box- A) : Bool val Parameters that: box- A Returns Bool val compare [Source] fun box compare( that: box- A) : (Less val | Equal val | Greater val) Parameters that: box- A Returns ( Less val | Equal val | Greater val) eq [Source] fun box eq( that: box- A) : Bool val Parameters that: box- A Returns Bool val ne [Source] fun box ne( that: box- A) : Bool val Parameters that: box- A Returns Bool val","title":"interface Comparable"},{"location":"builtin-Comparable/#comparable91a-comparable91a93-read93","text":"[Source] interface ref Comparable[A: Comparable[A] #read] is Equatable[A] ref","title":"Comparable[A: Comparable[A] #read]"},{"location":"builtin-Comparable/#implements","text":"Equatable [A] ref","title":"Implements"},{"location":"builtin-Comparable/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Comparable/#lt","text":"[Source] fun box lt( that: box- A) : Bool val","title":"lt"},{"location":"builtin-Comparable/#parameters","text":"that: box- A","title":"Parameters"},{"location":"builtin-Comparable/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#le","text":"[Source] fun box le( that: box- A) : Bool val","title":"le"},{"location":"builtin-Comparable/#parameters_1","text":"that: box- A","title":"Parameters"},{"location":"builtin-Comparable/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#ge","text":"[Source] fun box ge( that: box- A) : Bool val","title":"ge"},{"location":"builtin-Comparable/#parameters_2","text":"that: box- A","title":"Parameters"},{"location":"builtin-Comparable/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#gt","text":"[Source] fun box gt( that: box- A) : Bool val","title":"gt"},{"location":"builtin-Comparable/#parameters_3","text":"that: box- A","title":"Parameters"},{"location":"builtin-Comparable/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#compare","text":"[Source] fun box compare( that: box- A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-Comparable/#parameters_4","text":"that: box- A","title":"Parameters"},{"location":"builtin-Comparable/#returns_4","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-Comparable/#eq","text":"[Source] fun box eq( that: box- A) : Bool val","title":"eq"},{"location":"builtin-Comparable/#parameters_5","text":"that: box- A","title":"Parameters"},{"location":"builtin-Comparable/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#ne","text":"[Source] fun box ne( that: box- A) : Bool val","title":"ne"},{"location":"builtin-Comparable/#parameters_6","text":"that: box- A","title":"Parameters"},{"location":"builtin-Comparable/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Compare/","text":"Compare [Source] type Compare is (Less val | Equal val | Greater val) Type Alias For ( Less val | Equal val | Greater val)","title":"type Compare"},{"location":"builtin-Compare/#compare","text":"[Source] type Compare is (Less val | Equal val | Greater val)","title":"Compare"},{"location":"builtin-Compare/#type-alias-for","text":"( Less val | Equal val | Greater val)","title":"Type Alias For"},{"location":"builtin-DisposableActor/","text":"DisposableActor [Source] An interface used to asynchronously dispose of an actor. interface tag DisposableActor Public Behaviours dispose [Source] be dispose()","title":"interface DisposableActor"},{"location":"builtin-DisposableActor/#disposableactor","text":"[Source] An interface used to asynchronously dispose of an actor. interface tag DisposableActor","title":"DisposableActor"},{"location":"builtin-DisposableActor/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-DisposableActor/#dispose","text":"[Source] be dispose()","title":"dispose"},{"location":"builtin-DoNotOptimise/","text":"DoNotOptimise [Source] Contains functions preventing some compiler optimisations, namely dead code removal. This is useful for benchmarking purposes. primitive val DoNotOptimise Constructors create [Source] new val create() : DoNotOptimise val^ Returns DoNotOptimise val^ Public Functions apply[A: A] [Source] Prevent the compiler from optimising out obj and any computation it is derived from. This doesn't prevent constant propagation. fun box apply[A: A]( obj: A) : None val Parameters obj: A Returns None val observe [Source] Prevent the compiler from optimising out writes to an object marked by the apply function. fun box observe() : None val Returns None val eq [Source] fun box eq( that: DoNotOptimise val) : Bool val Parameters that: DoNotOptimise val Returns Bool val ne [Source] fun box ne( that: DoNotOptimise val) : Bool val Parameters that: DoNotOptimise val Returns Bool val","title":"primitive DoNotOptimise"},{"location":"builtin-DoNotOptimise/#donotoptimise","text":"[Source] Contains functions preventing some compiler optimisations, namely dead code removal. This is useful for benchmarking purposes. primitive val DoNotOptimise","title":"DoNotOptimise"},{"location":"builtin-DoNotOptimise/#constructors","text":"","title":"Constructors"},{"location":"builtin-DoNotOptimise/#create","text":"[Source] new val create() : DoNotOptimise val^","title":"create"},{"location":"builtin-DoNotOptimise/#returns","text":"DoNotOptimise val^","title":"Returns"},{"location":"builtin-DoNotOptimise/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-DoNotOptimise/#apply91a-a93","text":"[Source] Prevent the compiler from optimising out obj and any computation it is derived from. This doesn't prevent constant propagation. fun box apply[A: A]( obj: A) : None val","title":"apply[A: A]"},{"location":"builtin-DoNotOptimise/#parameters","text":"obj: A","title":"Parameters"},{"location":"builtin-DoNotOptimise/#returns_1","text":"None val","title":"Returns"},{"location":"builtin-DoNotOptimise/#observe","text":"[Source] Prevent the compiler from optimising out writes to an object marked by the apply function. fun box observe() : None val","title":"observe"},{"location":"builtin-DoNotOptimise/#returns_2","text":"None val","title":"Returns"},{"location":"builtin-DoNotOptimise/#eq","text":"[Source] fun box eq( that: DoNotOptimise val) : Bool val","title":"eq"},{"location":"builtin-DoNotOptimise/#parameters_1","text":"that: DoNotOptimise val","title":"Parameters"},{"location":"builtin-DoNotOptimise/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-DoNotOptimise/#ne","text":"[Source] fun box ne( that: DoNotOptimise val) : Bool val","title":"ne"},{"location":"builtin-DoNotOptimise/#parameters_2","text":"that: DoNotOptimise val","title":"Parameters"},{"location":"builtin-DoNotOptimise/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Env/","text":"Env [Source] An environment holds the command line and other values injected into the program by default by the runtime. class val Env Constructors _create [Source] Builds an environment from the command line. This is done before the Main actor is created. new ref _create( argc: U32 val, argv: Pointer[Pointer[U8 val] ref] val, envp: Pointer[Pointer[U8 val] ref] val) : Env ref^ Parameters argc: U32 val argv: Pointer [ Pointer [ U8 val] ref] val envp: Pointer [ Pointer [ U8 val] ref] val Returns Env ref^ create [Source] Build an artificial environment. A root capability may be supplied. new val create( root': (AmbientAuth val | None val), input': InputStream tag, out': OutStream tag, err': OutStream tag, args': Array[String val] val, vars': Array[String val] val, exitcode': {(I32)} val) : Env val^ Parameters root': ( AmbientAuth val | None val) input': InputStream tag out': OutStream tag err': OutStream tag args': Array [ String val] val vars': Array [ String val] val exitcode': {(I32)} val Returns Env val^ Public fields let root: ( AmbientAuth val | None val) [Source] The root capability. Can be None for artificially constructed Env instances. let input: InputStream tag [Source] Stdin represented as an actor. let out: OutStream tag [Source] Stdout let err: OutStream tag [Source] Stderr let args: Array [ String val] val [Source] The command line used to start the program. let vars: Array [ String val] val [Source] The program's environment variables. let exitcode: {(I32)} val [Source] Sets the environment's exit code. The exit code of the root environment will be the exit code of the application, which defaults to 0. Private Functions _count_strings [Source] fun tag _count_strings( data: Pointer[Pointer[U8 val] ref] val) : USize val Parameters data: Pointer [ Pointer [ U8 val] ref] val Returns USize val _strings_from_pointers [Source] fun tag _strings_from_pointers( data: Pointer[Pointer[U8 val] ref] val, len: USize val) : Array[String val] iso^ Parameters data: Pointer [ Pointer [ U8 val] ref] val len: USize val Returns Array [ String val] iso^","title":"class Env"},{"location":"builtin-Env/#env","text":"[Source] An environment holds the command line and other values injected into the program by default by the runtime. class val Env","title":"Env"},{"location":"builtin-Env/#constructors","text":"","title":"Constructors"},{"location":"builtin-Env/#_create","text":"[Source] Builds an environment from the command line. This is done before the Main actor is created. new ref _create( argc: U32 val, argv: Pointer[Pointer[U8 val] ref] val, envp: Pointer[Pointer[U8 val] ref] val) : Env ref^","title":"_create"},{"location":"builtin-Env/#parameters","text":"argc: U32 val argv: Pointer [ Pointer [ U8 val] ref] val envp: Pointer [ Pointer [ U8 val] ref] val","title":"Parameters"},{"location":"builtin-Env/#returns","text":"Env ref^","title":"Returns"},{"location":"builtin-Env/#create","text":"[Source] Build an artificial environment. A root capability may be supplied. new val create( root': (AmbientAuth val | None val), input': InputStream tag, out': OutStream tag, err': OutStream tag, args': Array[String val] val, vars': Array[String val] val, exitcode': {(I32)} val) : Env val^","title":"create"},{"location":"builtin-Env/#parameters_1","text":"root': ( AmbientAuth val | None val) input': InputStream tag out': OutStream tag err': OutStream tag args': Array [ String val] val vars': Array [ String val] val exitcode': {(I32)} val","title":"Parameters"},{"location":"builtin-Env/#returns_1","text":"Env val^","title":"Returns"},{"location":"builtin-Env/#public-fields","text":"","title":"Public fields"},{"location":"builtin-Env/#let-root-ambientauth-val-none-val","text":"[Source] The root capability. Can be None for artificially constructed Env instances.","title":"let root: (AmbientAuth val | None val)"},{"location":"builtin-Env/#let-input-inputstream-tag","text":"[Source] Stdin represented as an actor.","title":"let input: InputStream tag"},{"location":"builtin-Env/#let-out-outstream-tag","text":"[Source] Stdout","title":"let out: OutStream tag"},{"location":"builtin-Env/#let-err-outstream-tag","text":"[Source] Stderr","title":"let err: OutStream tag"},{"location":"builtin-Env/#let-args-array91string-val93-val","text":"[Source] The command line used to start the program.","title":"let args: Array[String val] val"},{"location":"builtin-Env/#let-vars-array91string-val93-val","text":"[Source] The program's environment variables.","title":"let vars: Array[String val] val"},{"location":"builtin-Env/#let-exitcode-i32-val","text":"[Source] Sets the environment's exit code. The exit code of the root environment will be the exit code of the application, which defaults to 0.","title":"let exitcode: {(I32)} val"},{"location":"builtin-Env/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Env/#_count_strings","text":"[Source] fun tag _count_strings( data: Pointer[Pointer[U8 val] ref] val) : USize val","title":"_count_strings"},{"location":"builtin-Env/#parameters_2","text":"data: Pointer [ Pointer [ U8 val] ref] val","title":"Parameters"},{"location":"builtin-Env/#returns_2","text":"USize val","title":"Returns"},{"location":"builtin-Env/#_strings_from_pointers","text":"[Source] fun tag _strings_from_pointers( data: Pointer[Pointer[U8 val] ref] val, len: USize val) : Array[String val] iso^","title":"_strings_from_pointers"},{"location":"builtin-Env/#parameters_3","text":"data: Pointer [ Pointer [ U8 val] ref] val len: USize val","title":"Parameters"},{"location":"builtin-Env/#returns_3","text":"Array [ String val] iso^","title":"Returns"},{"location":"builtin-Equal/","text":"Equal [Source] primitive val Equal is Equatable[(Less val | Equal val | Greater val)] ref Implements Equatable [( Less val | Equal val | Greater val)] ref Constructors create [Source] new val create() : Equal val^ Returns Equal val^ Public Functions string [Source] fun box string() : String iso^ Returns String iso^ eq [Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val Parameters that: ( Less val | Equal val | Greater val) Returns Bool val ne [Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val Parameters that: ( Less val | Equal val | Greater val) Returns Bool val","title":"primitive Equal"},{"location":"builtin-Equal/#equal","text":"[Source] primitive val Equal is Equatable[(Less val | Equal val | Greater val)] ref","title":"Equal"},{"location":"builtin-Equal/#implements","text":"Equatable [( Less val | Equal val | Greater val)] ref","title":"Implements"},{"location":"builtin-Equal/#constructors","text":"","title":"Constructors"},{"location":"builtin-Equal/#create","text":"[Source] new val create() : Equal val^","title":"create"},{"location":"builtin-Equal/#returns","text":"Equal val^","title":"Returns"},{"location":"builtin-Equal/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Equal/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Equal/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-Equal/#eq","text":"[Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val","title":"eq"},{"location":"builtin-Equal/#parameters","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Equal/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Equal/#ne","text":"[Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val","title":"ne"},{"location":"builtin-Equal/#parameters_1","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Equal/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Equatable/","text":"Equatable[A: Equatable [A] #read] [Source] interface ref Equatable[A: Equatable[A] #read] Public Functions eq [Source] fun box eq( that: box- A) : Bool val Parameters that: box- A Returns Bool val ne [Source] fun box ne( that: box- A) : Bool val Parameters that: box- A Returns Bool val","title":"interface Equatable"},{"location":"builtin-Equatable/#equatable91a-equatable91a93-read93","text":"[Source] interface ref Equatable[A: Equatable[A] #read]","title":"Equatable[A: Equatable[A] #read]"},{"location":"builtin-Equatable/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Equatable/#eq","text":"[Source] fun box eq( that: box- A) : Bool val","title":"eq"},{"location":"builtin-Equatable/#parameters","text":"that: box- A","title":"Parameters"},{"location":"builtin-Equatable/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-Equatable/#ne","text":"[Source] fun box ne( that: box- A) : Bool val","title":"ne"},{"location":"builtin-Equatable/#parameters_1","text":"that: box- A","title":"Parameters"},{"location":"builtin-Equatable/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-F32/","text":"F32 [Source] primitive val F32 is FloatingPoint[F32 val] val Implements FloatingPoint [ F32 val] val Constructors create [Source] new val create( value: F32 val = seq) : F32 val^ Parameters value: F32 val = seq Returns F32 val^ pi [Source] new val pi() : F32 val^ Returns F32 val^ e [Source] new val e() : F32 val^ Returns F32 val^ _nan [Source] new val _nan() : F32 val^ Returns F32 val^ _inf [Source] new val _inf( negative: Bool val) : F32 val^ Parameters negative: Bool val Returns F32 val^ from_bits [Source] new val from_bits( i: U32 val) : F32 val^ Parameters i: U32 val Returns F32 val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [B] val)] [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : F32 val^ Parameters a: B Returns F32 val^ min_value [Source] Minimum negative value representable. new val min_value() : F32 val^ Returns F32 val^ max_value [Source] Maximum positive value representable. new val max_value() : F32 val^ Returns F32 val^ min_normalised [Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F32 val^ Returns F32 val^ epsilon [Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F32 val^ Returns F32 val^ Public Functions bits [Source] fun box bits() : U32 val Returns U32 val radix [Source] Exponent radix. fun tag radix() : U8 val Returns U8 val precision2 [Source] Mantissa precision in bits. fun tag precision2() : U8 val Returns U8 val precision10 [Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val Returns U8 val min_exp2 [Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val Returns I16 val min_exp10 [Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val Returns I16 val max_exp2 [Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val Returns I16 val max_exp10 [Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val Returns I16 val abs [Source] fun box abs() : F32 val Returns F32 val ceil [Source] fun box ceil() : F32 val Returns F32 val floor [Source] fun box floor() : F32 val Returns F32 val round [Source] fun box round() : F32 val Returns F32 val trunc [Source] fun box trunc() : F32 val Returns F32 val min [Source] fun box min( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val max [Source] fun box max( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val finite [Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val Returns Bool val infinite [Source] Check whether this number is +/-infinity fun box infinite() : Bool val Returns Bool val nan [Source] Check whether this number is NaN. fun box nan() : Bool val Returns Bool val ldexp [Source] fun box ldexp( x: F32 val, exponent: I32 val) : F32 val Parameters x: F32 val exponent: I32 val Returns F32 val frexp [Source] fun box frexp() : (F32 val , U32 val) Returns ( F32 val , U32 val) log [Source] fun box log() : F32 val Returns F32 val log2 [Source] fun box log2() : F32 val Returns F32 val log10 [Source] fun box log10() : F32 val Returns F32 val logb [Source] fun box logb() : F32 val Returns F32 val pow [Source] fun box pow( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val powi [Source] fun box powi( y: I32 val) : F32 val Parameters y: I32 val Returns F32 val sqrt [Source] fun box sqrt() : F32 val Returns F32 val sqrt_unsafe [Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F32 val Returns F32 val cbrt [Source] fun box cbrt() : F32 val Returns F32 val exp [Source] fun box exp() : F32 val Returns F32 val exp2 [Source] fun box exp2() : F32 val Returns F32 val cos [Source] fun box cos() : F32 val Returns F32 val sin [Source] fun box sin() : F32 val Returns F32 val tan [Source] fun box tan() : F32 val Returns F32 val cosh [Source] fun box cosh() : F32 val Returns F32 val sinh [Source] fun box sinh() : F32 val Returns F32 val tanh [Source] fun box tanh() : F32 val Returns F32 val acos [Source] fun box acos() : F32 val Returns F32 val asin [Source] fun box asin() : F32 val Returns F32 val atan [Source] fun box atan() : F32 val Returns F32 val atan2 [Source] fun box atan2( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val acosh [Source] fun box acosh() : F32 val Returns F32 val asinh [Source] fun box asinh() : F32 val Returns F32 val atanh [Source] fun box atanh() : F32 val Returns F32 val copysign [Source] fun box copysign( sign: F32 val) : F32 val Parameters sign: F32 val Returns F32 val hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val i128 [Source] fun box i128() : I128 val Returns I128 val u128 [Source] fun box u128() : U128 val Returns U128 val i128_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val Returns I128 val u128_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val Returns U128 val add_unsafe [Source] fun box add_unsafe( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val sub_unsafe [Source] fun box sub_unsafe( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val mul_unsafe [Source] fun box mul_unsafe( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val div_unsafe [Source] fun box div_unsafe( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val divrem_unsafe [Source] fun box divrem_unsafe( y: F32 val) : (F32 val , F32 val) Parameters y: F32 val Returns ( F32 val , F32 val) rem_unsafe [Source] fun box rem_unsafe( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val neg_unsafe [Source] fun box neg_unsafe() : F32 val Returns F32 val eq_unsafe [Source] fun box eq_unsafe( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val ne_unsafe [Source] fun box ne_unsafe( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val lt_unsafe [Source] fun box lt_unsafe( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val le_unsafe [Source] fun box le_unsafe( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val ge_unsafe [Source] fun box ge_unsafe( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val gt_unsafe [Source] fun box gt_unsafe( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val string [Source] fun box string() : String iso^ Returns String iso^ add [Source] fun box add( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val sub [Source] fun box sub( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val mul [Source] fun box mul( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val div [Source] fun box div( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val divrem [Source] fun box divrem( y: F32 val) : (F32 val , F32 val) Parameters y: F32 val Returns ( F32 val , F32 val) rem [Source] fun box rem( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val neg [Source] fun box neg() : F32 val Returns F32 val eq [Source] fun box eq( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val ne [Source] fun box ne( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val lt [Source] fun box lt( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val le [Source] fun box le( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val ge [Source] fun box ge( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val gt [Source] fun box gt( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val i8 [Source] fun box i8() : I8 val Returns I8 val i16 [Source] fun box i16() : I16 val Returns I16 val i32 [Source] fun box i32() : I32 val Returns I32 val i64 [Source] fun box i64() : I64 val Returns I64 val ilong [Source] fun box ilong() : ILong val Returns ILong val isize [Source] fun box isize() : ISize val Returns ISize val u8 [Source] fun box u8() : U8 val Returns U8 val u16 [Source] fun box u16() : U16 val Returns U16 val u32 [Source] fun box u32() : U32 val Returns U32 val u64 [Source] fun box u64() : U64 val Returns U64 val ulong [Source] fun box ulong() : ULong val Returns ULong val usize [Source] fun box usize() : USize val Returns USize val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val i8_unsafe [Source] fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe [Source] fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe [Source] fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe [Source] fun box i64_unsafe() : I64 val Returns I64 val ilong_unsafe [Source] fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe [Source] fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe [Source] fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe [Source] fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe [Source] fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe [Source] fun box u64_unsafe() : U64 val Returns U64 val ulong_unsafe [Source] fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe [Source] fun box usize_unsafe() : USize val Returns USize val f32_unsafe [Source] fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: F32 val) : (Less val | Equal val | Greater val) Parameters that: F32 val Returns ( Less val | Equal val | Greater val) Private Functions _value [Source] fun box _value() : F32 val Returns F32 val","title":"primitive F32"},{"location":"builtin-F32/#f32","text":"[Source] primitive val F32 is FloatingPoint[F32 val] val","title":"F32"},{"location":"builtin-F32/#implements","text":"FloatingPoint [ F32 val] val","title":"Implements"},{"location":"builtin-F32/#constructors","text":"","title":"Constructors"},{"location":"builtin-F32/#create","text":"[Source] new val create( value: F32 val = seq) : F32 val^","title":"create"},{"location":"builtin-F32/#parameters","text":"value: F32 val = seq","title":"Parameters"},{"location":"builtin-F32/#returns","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#pi","text":"[Source] new val pi() : F32 val^","title":"pi"},{"location":"builtin-F32/#returns_1","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#e","text":"[Source] new val e() : F32 val^","title":"e"},{"location":"builtin-F32/#returns_2","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#_nan","text":"[Source] new val _nan() : F32 val^","title":"_nan"},{"location":"builtin-F32/#returns_3","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#_inf","text":"[Source] new val _inf( negative: Bool val) : F32 val^","title":"_inf"},{"location":"builtin-F32/#parameters_1","text":"negative: Bool val","title":"Parameters"},{"location":"builtin-F32/#returns_4","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#from_bits","text":"[Source] new val from_bits( i: U32 val) : F32 val^","title":"from_bits"},{"location":"builtin-F32/#parameters_2","text":"i: U32 val","title":"Parameters"},{"location":"builtin-F32/#returns_5","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : F32 val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-F32/#parameters_3","text":"a: B","title":"Parameters"},{"location":"builtin-F32/#returns_6","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#min_value","text":"[Source] Minimum negative value representable. new val min_value() : F32 val^","title":"min_value"},{"location":"builtin-F32/#returns_7","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#max_value","text":"[Source] Maximum positive value representable. new val max_value() : F32 val^","title":"max_value"},{"location":"builtin-F32/#returns_8","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#min_normalised","text":"[Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F32 val^","title":"min_normalised"},{"location":"builtin-F32/#returns_9","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#epsilon","text":"[Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F32 val^","title":"epsilon"},{"location":"builtin-F32/#returns_10","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-F32/#bits","text":"[Source] fun box bits() : U32 val","title":"bits"},{"location":"builtin-F32/#returns_11","text":"U32 val","title":"Returns"},{"location":"builtin-F32/#radix","text":"[Source] Exponent radix. fun tag radix() : U8 val","title":"radix"},{"location":"builtin-F32/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#precision2","text":"[Source] Mantissa precision in bits. fun tag precision2() : U8 val","title":"precision2"},{"location":"builtin-F32/#returns_13","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#precision10","text":"[Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val","title":"precision10"},{"location":"builtin-F32/#returns_14","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#min_exp2","text":"[Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val","title":"min_exp2"},{"location":"builtin-F32/#returns_15","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#min_exp10","text":"[Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val","title":"min_exp10"},{"location":"builtin-F32/#returns_16","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#max_exp2","text":"[Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val","title":"max_exp2"},{"location":"builtin-F32/#returns_17","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#max_exp10","text":"[Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val","title":"max_exp10"},{"location":"builtin-F32/#returns_18","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#abs","text":"[Source] fun box abs() : F32 val","title":"abs"},{"location":"builtin-F32/#returns_19","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#ceil","text":"[Source] fun box ceil() : F32 val","title":"ceil"},{"location":"builtin-F32/#returns_20","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#floor","text":"[Source] fun box floor() : F32 val","title":"floor"},{"location":"builtin-F32/#returns_21","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#round","text":"[Source] fun box round() : F32 val","title":"round"},{"location":"builtin-F32/#returns_22","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#trunc","text":"[Source] fun box trunc() : F32 val","title":"trunc"},{"location":"builtin-F32/#returns_23","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#min","text":"[Source] fun box min( y: F32 val) : F32 val","title":"min"},{"location":"builtin-F32/#parameters_4","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_24","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#max","text":"[Source] fun box max( y: F32 val) : F32 val","title":"max"},{"location":"builtin-F32/#parameters_5","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_25","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#finite","text":"[Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val","title":"finite"},{"location":"builtin-F32/#returns_26","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#infinite","text":"[Source] Check whether this number is +/-infinity fun box infinite() : Bool val","title":"infinite"},{"location":"builtin-F32/#returns_27","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#nan","text":"[Source] Check whether this number is NaN. fun box nan() : Bool val","title":"nan"},{"location":"builtin-F32/#returns_28","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ldexp","text":"[Source] fun box ldexp( x: F32 val, exponent: I32 val) : F32 val","title":"ldexp"},{"location":"builtin-F32/#parameters_6","text":"x: F32 val exponent: I32 val","title":"Parameters"},{"location":"builtin-F32/#returns_29","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#frexp","text":"[Source] fun box frexp() : (F32 val , U32 val)","title":"frexp"},{"location":"builtin-F32/#returns_30","text":"( F32 val , U32 val)","title":"Returns"},{"location":"builtin-F32/#log","text":"[Source] fun box log() : F32 val","title":"log"},{"location":"builtin-F32/#returns_31","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#log2","text":"[Source] fun box log2() : F32 val","title":"log2"},{"location":"builtin-F32/#returns_32","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#log10","text":"[Source] fun box log10() : F32 val","title":"log10"},{"location":"builtin-F32/#returns_33","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#logb","text":"[Source] fun box logb() : F32 val","title":"logb"},{"location":"builtin-F32/#returns_34","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#pow","text":"[Source] fun box pow( y: F32 val) : F32 val","title":"pow"},{"location":"builtin-F32/#parameters_7","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_35","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#powi","text":"[Source] fun box powi( y: I32 val) : F32 val","title":"powi"},{"location":"builtin-F32/#parameters_8","text":"y: I32 val","title":"Parameters"},{"location":"builtin-F32/#returns_36","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sqrt","text":"[Source] fun box sqrt() : F32 val","title":"sqrt"},{"location":"builtin-F32/#returns_37","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sqrt_unsafe","text":"[Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F32 val","title":"sqrt_unsafe"},{"location":"builtin-F32/#returns_38","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#cbrt","text":"[Source] fun box cbrt() : F32 val","title":"cbrt"},{"location":"builtin-F32/#returns_39","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#exp","text":"[Source] fun box exp() : F32 val","title":"exp"},{"location":"builtin-F32/#returns_40","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#exp2","text":"[Source] fun box exp2() : F32 val","title":"exp2"},{"location":"builtin-F32/#returns_41","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#cos","text":"[Source] fun box cos() : F32 val","title":"cos"},{"location":"builtin-F32/#returns_42","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sin","text":"[Source] fun box sin() : F32 val","title":"sin"},{"location":"builtin-F32/#returns_43","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#tan","text":"[Source] fun box tan() : F32 val","title":"tan"},{"location":"builtin-F32/#returns_44","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#cosh","text":"[Source] fun box cosh() : F32 val","title":"cosh"},{"location":"builtin-F32/#returns_45","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sinh","text":"[Source] fun box sinh() : F32 val","title":"sinh"},{"location":"builtin-F32/#returns_46","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#tanh","text":"[Source] fun box tanh() : F32 val","title":"tanh"},{"location":"builtin-F32/#returns_47","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#acos","text":"[Source] fun box acos() : F32 val","title":"acos"},{"location":"builtin-F32/#returns_48","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#asin","text":"[Source] fun box asin() : F32 val","title":"asin"},{"location":"builtin-F32/#returns_49","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#atan","text":"[Source] fun box atan() : F32 val","title":"atan"},{"location":"builtin-F32/#returns_50","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#atan2","text":"[Source] fun box atan2( y: F32 val) : F32 val","title":"atan2"},{"location":"builtin-F32/#parameters_9","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_51","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#acosh","text":"[Source] fun box acosh() : F32 val","title":"acosh"},{"location":"builtin-F32/#returns_52","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#asinh","text":"[Source] fun box asinh() : F32 val","title":"asinh"},{"location":"builtin-F32/#returns_53","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#atanh","text":"[Source] fun box atanh() : F32 val","title":"atanh"},{"location":"builtin-F32/#returns_54","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#copysign","text":"[Source] fun box copysign( sign: F32 val) : F32 val","title":"copysign"},{"location":"builtin-F32/#parameters_10","text":"sign: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_55","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-F32/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-F32/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-F32/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-F32/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-F32/#returns_58","text":"I128 val","title":"Returns"},{"location":"builtin-F32/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-F32/#returns_59","text":"U128 val","title":"Returns"},{"location":"builtin-F32/#i128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-F32/#returns_60","text":"I128 val","title":"Returns"},{"location":"builtin-F32/#u128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-F32/#returns_61","text":"U128 val","title":"Returns"},{"location":"builtin-F32/#add_unsafe","text":"[Source] fun box add_unsafe( y: F32 val) : F32 val","title":"add_unsafe"},{"location":"builtin-F32/#parameters_11","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_62","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: F32 val) : F32 val","title":"sub_unsafe"},{"location":"builtin-F32/#parameters_12","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_63","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: F32 val) : F32 val","title":"mul_unsafe"},{"location":"builtin-F32/#parameters_13","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_64","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#div_unsafe","text":"[Source] fun box div_unsafe( y: F32 val) : F32 val","title":"div_unsafe"},{"location":"builtin-F32/#parameters_14","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_65","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: F32 val) : (F32 val , F32 val)","title":"divrem_unsafe"},{"location":"builtin-F32/#parameters_15","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_66","text":"( F32 val , F32 val)","title":"Returns"},{"location":"builtin-F32/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: F32 val) : F32 val","title":"rem_unsafe"},{"location":"builtin-F32/#parameters_16","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_67","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#neg_unsafe","text":"[Source] fun box neg_unsafe() : F32 val","title":"neg_unsafe"},{"location":"builtin-F32/#returns_68","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#eq_unsafe","text":"[Source] fun box eq_unsafe( y: F32 val) : Bool val","title":"eq_unsafe"},{"location":"builtin-F32/#parameters_17","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_69","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ne_unsafe","text":"[Source] fun box ne_unsafe( y: F32 val) : Bool val","title":"ne_unsafe"},{"location":"builtin-F32/#parameters_18","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_70","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#lt_unsafe","text":"[Source] fun box lt_unsafe( y: F32 val) : Bool val","title":"lt_unsafe"},{"location":"builtin-F32/#parameters_19","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_71","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#le_unsafe","text":"[Source] fun box le_unsafe( y: F32 val) : Bool val","title":"le_unsafe"},{"location":"builtin-F32/#parameters_20","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_72","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ge_unsafe","text":"[Source] fun box ge_unsafe( y: F32 val) : Bool val","title":"ge_unsafe"},{"location":"builtin-F32/#parameters_21","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_73","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#gt_unsafe","text":"[Source] fun box gt_unsafe( y: F32 val) : Bool val","title":"gt_unsafe"},{"location":"builtin-F32/#parameters_22","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_74","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-F32/#returns_75","text":"String iso^","title":"Returns"},{"location":"builtin-F32/#add","text":"[Source] fun box add( y: F32 val) : F32 val","title":"add"},{"location":"builtin-F32/#parameters_23","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_76","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sub","text":"[Source] fun box sub( y: F32 val) : F32 val","title":"sub"},{"location":"builtin-F32/#parameters_24","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_77","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#mul","text":"[Source] fun box mul( y: F32 val) : F32 val","title":"mul"},{"location":"builtin-F32/#parameters_25","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_78","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#div","text":"[Source] fun box div( y: F32 val) : F32 val","title":"div"},{"location":"builtin-F32/#parameters_26","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_79","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#divrem","text":"[Source] fun box divrem( y: F32 val) : (F32 val , F32 val)","title":"divrem"},{"location":"builtin-F32/#parameters_27","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_80","text":"( F32 val , F32 val)","title":"Returns"},{"location":"builtin-F32/#rem","text":"[Source] fun box rem( y: F32 val) : F32 val","title":"rem"},{"location":"builtin-F32/#parameters_28","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_81","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#neg","text":"[Source] fun box neg() : F32 val","title":"neg"},{"location":"builtin-F32/#returns_82","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#eq","text":"[Source] fun box eq( y: F32 val) : Bool val","title":"eq"},{"location":"builtin-F32/#parameters_29","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_83","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ne","text":"[Source] fun box ne( y: F32 val) : Bool val","title":"ne"},{"location":"builtin-F32/#parameters_30","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_84","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#lt","text":"[Source] fun box lt( y: F32 val) : Bool val","title":"lt"},{"location":"builtin-F32/#parameters_31","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_85","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#le","text":"[Source] fun box le( y: F32 val) : Bool val","title":"le"},{"location":"builtin-F32/#parameters_32","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_86","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ge","text":"[Source] fun box ge( y: F32 val) : Bool val","title":"ge"},{"location":"builtin-F32/#parameters_33","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_87","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#gt","text":"[Source] fun box gt( y: F32 val) : Bool val","title":"gt"},{"location":"builtin-F32/#parameters_34","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_88","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-F32/#returns_89","text":"I8 val","title":"Returns"},{"location":"builtin-F32/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-F32/#returns_90","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-F32/#returns_91","text":"I32 val","title":"Returns"},{"location":"builtin-F32/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-F32/#returns_92","text":"I64 val","title":"Returns"},{"location":"builtin-F32/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-F32/#returns_93","text":"ILong val","title":"Returns"},{"location":"builtin-F32/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-F32/#returns_94","text":"ISize val","title":"Returns"},{"location":"builtin-F32/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-F32/#returns_95","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-F32/#returns_96","text":"U16 val","title":"Returns"},{"location":"builtin-F32/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-F32/#returns_97","text":"U32 val","title":"Returns"},{"location":"builtin-F32/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-F32/#returns_98","text":"U64 val","title":"Returns"},{"location":"builtin-F32/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-F32/#returns_99","text":"ULong val","title":"Returns"},{"location":"builtin-F32/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-F32/#returns_100","text":"USize val","title":"Returns"},{"location":"builtin-F32/#f32_1","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-F32/#returns_101","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-F32/#returns_102","text":"F64 val","title":"Returns"},{"location":"builtin-F32/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-F32/#returns_103","text":"I8 val","title":"Returns"},{"location":"builtin-F32/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-F32/#returns_104","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-F32/#returns_105","text":"I32 val","title":"Returns"},{"location":"builtin-F32/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-F32/#returns_106","text":"I64 val","title":"Returns"},{"location":"builtin-F32/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-F32/#returns_107","text":"ILong val","title":"Returns"},{"location":"builtin-F32/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-F32/#returns_108","text":"ISize val","title":"Returns"},{"location":"builtin-F32/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-F32/#returns_109","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-F32/#returns_110","text":"U16 val","title":"Returns"},{"location":"builtin-F32/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-F32/#returns_111","text":"U32 val","title":"Returns"},{"location":"builtin-F32/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-F32/#returns_112","text":"U64 val","title":"Returns"},{"location":"builtin-F32/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-F32/#returns_113","text":"ULong val","title":"Returns"},{"location":"builtin-F32/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-F32/#returns_114","text":"USize val","title":"Returns"},{"location":"builtin-F32/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-F32/#returns_115","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-F32/#returns_116","text":"F64 val","title":"Returns"},{"location":"builtin-F32/#compare","text":"fun box compare( that: F32 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-F32/#parameters_35","text":"that: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_117","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-F32/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-F32/#_value","text":"[Source] fun box _value() : F32 val","title":"_value"},{"location":"builtin-F32/#returns_118","text":"F32 val","title":"Returns"},{"location":"builtin-F64/","text":"F64 [Source] primitive val F64 is FloatingPoint[F64 val] val Implements FloatingPoint [ F64 val] val Constructors create [Source] new val create( value: F64 val = seq) : F64 val^ Parameters value: F64 val = seq Returns F64 val^ pi [Source] new val pi() : F64 val^ Returns F64 val^ e [Source] new val e() : F64 val^ Returns F64 val^ _nan [Source] new val _nan() : F64 val^ Returns F64 val^ _inf [Source] new val _inf( negative: Bool val) : F64 val^ Parameters negative: Bool val Returns F64 val^ from_bits [Source] new val from_bits( i: U64 val) : F64 val^ Parameters i: U64 val Returns F64 val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [B] val)] [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : F64 val^ Parameters a: B Returns F64 val^ min_value [Source] Minimum negative value representable. new val min_value() : F64 val^ Returns F64 val^ max_value [Source] Maximum positive value representable. new val max_value() : F64 val^ Returns F64 val^ min_normalised [Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F64 val^ Returns F64 val^ epsilon [Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F64 val^ Returns F64 val^ Public Functions bits [Source] fun box bits() : U64 val Returns U64 val radix [Source] Exponent radix. fun tag radix() : U8 val Returns U8 val precision2 [Source] Mantissa precision in bits. fun tag precision2() : U8 val Returns U8 val precision10 [Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val Returns U8 val min_exp2 [Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val Returns I16 val min_exp10 [Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val Returns I16 val max_exp2 [Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val Returns I16 val max_exp10 [Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val Returns I16 val abs [Source] fun box abs() : F64 val Returns F64 val ceil [Source] fun box ceil() : F64 val Returns F64 val floor [Source] fun box floor() : F64 val Returns F64 val round [Source] fun box round() : F64 val Returns F64 val trunc [Source] fun box trunc() : F64 val Returns F64 val min [Source] fun box min( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val max [Source] fun box max( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val finite [Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val Returns Bool val infinite [Source] Check whether this number is +/-infinity fun box infinite() : Bool val Returns Bool val nan [Source] Check whether this number is NaN. fun box nan() : Bool val Returns Bool val ldexp [Source] fun box ldexp( x: F64 val, exponent: I32 val) : F64 val Parameters x: F64 val exponent: I32 val Returns F64 val frexp [Source] fun box frexp() : (F64 val , U32 val) Returns ( F64 val , U32 val) log [Source] fun box log() : F64 val Returns F64 val log2 [Source] fun box log2() : F64 val Returns F64 val log10 [Source] fun box log10() : F64 val Returns F64 val logb [Source] fun box logb() : F64 val Returns F64 val pow [Source] fun box pow( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val powi [Source] fun box powi( y: I32 val) : F64 val Parameters y: I32 val Returns F64 val sqrt [Source] fun box sqrt() : F64 val Returns F64 val sqrt_unsafe [Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F64 val Returns F64 val cbrt [Source] fun box cbrt() : F64 val Returns F64 val exp [Source] fun box exp() : F64 val Returns F64 val exp2 [Source] fun box exp2() : F64 val Returns F64 val cos [Source] fun box cos() : F64 val Returns F64 val sin [Source] fun box sin() : F64 val Returns F64 val tan [Source] fun box tan() : F64 val Returns F64 val cosh [Source] fun box cosh() : F64 val Returns F64 val sinh [Source] fun box sinh() : F64 val Returns F64 val tanh [Source] fun box tanh() : F64 val Returns F64 val acos [Source] fun box acos() : F64 val Returns F64 val asin [Source] fun box asin() : F64 val Returns F64 val atan [Source] fun box atan() : F64 val Returns F64 val atan2 [Source] fun box atan2( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val acosh [Source] fun box acosh() : F64 val Returns F64 val asinh [Source] fun box asinh() : F64 val Returns F64 val atanh [Source] fun box atanh() : F64 val Returns F64 val copysign [Source] fun box copysign( sign: F64 val) : F64 val Parameters sign: F64 val Returns F64 val hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val i128 [Source] fun box i128() : I128 val Returns I128 val u128 [Source] fun box u128() : U128 val Returns U128 val i128_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val Returns I128 val u128_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val Returns U128 val add_unsafe [Source] fun box add_unsafe( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val sub_unsafe [Source] fun box sub_unsafe( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val mul_unsafe [Source] fun box mul_unsafe( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val div_unsafe [Source] fun box div_unsafe( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val divrem_unsafe [Source] fun box divrem_unsafe( y: F64 val) : (F64 val , F64 val) Parameters y: F64 val Returns ( F64 val , F64 val) rem_unsafe [Source] fun box rem_unsafe( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val neg_unsafe [Source] fun box neg_unsafe() : F64 val Returns F64 val eq_unsafe [Source] fun box eq_unsafe( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val ne_unsafe [Source] fun box ne_unsafe( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val lt_unsafe [Source] fun box lt_unsafe( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val le_unsafe [Source] fun box le_unsafe( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val ge_unsafe [Source] fun box ge_unsafe( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val gt_unsafe [Source] fun box gt_unsafe( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val string [Source] fun box string() : String iso^ Returns String iso^ add [Source] fun box add( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val sub [Source] fun box sub( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val mul [Source] fun box mul( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val div [Source] fun box div( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val divrem [Source] fun box divrem( y: F64 val) : (F64 val , F64 val) Parameters y: F64 val Returns ( F64 val , F64 val) rem [Source] fun box rem( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val neg [Source] fun box neg() : F64 val Returns F64 val eq [Source] fun box eq( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val ne [Source] fun box ne( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val lt [Source] fun box lt( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val le [Source] fun box le( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val ge [Source] fun box ge( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val gt [Source] fun box gt( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val i8 [Source] fun box i8() : I8 val Returns I8 val i16 [Source] fun box i16() : I16 val Returns I16 val i32 [Source] fun box i32() : I32 val Returns I32 val i64 [Source] fun box i64() : I64 val Returns I64 val ilong [Source] fun box ilong() : ILong val Returns ILong val isize [Source] fun box isize() : ISize val Returns ISize val u8 [Source] fun box u8() : U8 val Returns U8 val u16 [Source] fun box u16() : U16 val Returns U16 val u32 [Source] fun box u32() : U32 val Returns U32 val u64 [Source] fun box u64() : U64 val Returns U64 val ulong [Source] fun box ulong() : ULong val Returns ULong val usize [Source] fun box usize() : USize val Returns USize val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val i8_unsafe [Source] fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe [Source] fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe [Source] fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe [Source] fun box i64_unsafe() : I64 val Returns I64 val ilong_unsafe [Source] fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe [Source] fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe [Source] fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe [Source] fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe [Source] fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe [Source] fun box u64_unsafe() : U64 val Returns U64 val ulong_unsafe [Source] fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe [Source] fun box usize_unsafe() : USize val Returns USize val f32_unsafe [Source] fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: F64 val) : (Less val | Equal val | Greater val) Parameters that: F64 val Returns ( Less val | Equal val | Greater val) Private Functions _value [Source] fun box _value() : F64 val Returns F64 val","title":"primitive F64"},{"location":"builtin-F64/#f64","text":"[Source] primitive val F64 is FloatingPoint[F64 val] val","title":"F64"},{"location":"builtin-F64/#implements","text":"FloatingPoint [ F64 val] val","title":"Implements"},{"location":"builtin-F64/#constructors","text":"","title":"Constructors"},{"location":"builtin-F64/#create","text":"[Source] new val create( value: F64 val = seq) : F64 val^","title":"create"},{"location":"builtin-F64/#parameters","text":"value: F64 val = seq","title":"Parameters"},{"location":"builtin-F64/#returns","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#pi","text":"[Source] new val pi() : F64 val^","title":"pi"},{"location":"builtin-F64/#returns_1","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#e","text":"[Source] new val e() : F64 val^","title":"e"},{"location":"builtin-F64/#returns_2","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#_nan","text":"[Source] new val _nan() : F64 val^","title":"_nan"},{"location":"builtin-F64/#returns_3","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#_inf","text":"[Source] new val _inf( negative: Bool val) : F64 val^","title":"_inf"},{"location":"builtin-F64/#parameters_1","text":"negative: Bool val","title":"Parameters"},{"location":"builtin-F64/#returns_4","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#from_bits","text":"[Source] new val from_bits( i: U64 val) : F64 val^","title":"from_bits"},{"location":"builtin-F64/#parameters_2","text":"i: U64 val","title":"Parameters"},{"location":"builtin-F64/#returns_5","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : F64 val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-F64/#parameters_3","text":"a: B","title":"Parameters"},{"location":"builtin-F64/#returns_6","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#min_value","text":"[Source] Minimum negative value representable. new val min_value() : F64 val^","title":"min_value"},{"location":"builtin-F64/#returns_7","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#max_value","text":"[Source] Maximum positive value representable. new val max_value() : F64 val^","title":"max_value"},{"location":"builtin-F64/#returns_8","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#min_normalised","text":"[Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F64 val^","title":"min_normalised"},{"location":"builtin-F64/#returns_9","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#epsilon","text":"[Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F64 val^","title":"epsilon"},{"location":"builtin-F64/#returns_10","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-F64/#bits","text":"[Source] fun box bits() : U64 val","title":"bits"},{"location":"builtin-F64/#returns_11","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#radix","text":"[Source] Exponent radix. fun tag radix() : U8 val","title":"radix"},{"location":"builtin-F64/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#precision2","text":"[Source] Mantissa precision in bits. fun tag precision2() : U8 val","title":"precision2"},{"location":"builtin-F64/#returns_13","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#precision10","text":"[Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val","title":"precision10"},{"location":"builtin-F64/#returns_14","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#min_exp2","text":"[Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val","title":"min_exp2"},{"location":"builtin-F64/#returns_15","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#min_exp10","text":"[Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val","title":"min_exp10"},{"location":"builtin-F64/#returns_16","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#max_exp2","text":"[Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val","title":"max_exp2"},{"location":"builtin-F64/#returns_17","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#max_exp10","text":"[Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val","title":"max_exp10"},{"location":"builtin-F64/#returns_18","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#abs","text":"[Source] fun box abs() : F64 val","title":"abs"},{"location":"builtin-F64/#returns_19","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#ceil","text":"[Source] fun box ceil() : F64 val","title":"ceil"},{"location":"builtin-F64/#returns_20","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#floor","text":"[Source] fun box floor() : F64 val","title":"floor"},{"location":"builtin-F64/#returns_21","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#round","text":"[Source] fun box round() : F64 val","title":"round"},{"location":"builtin-F64/#returns_22","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#trunc","text":"[Source] fun box trunc() : F64 val","title":"trunc"},{"location":"builtin-F64/#returns_23","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#min","text":"[Source] fun box min( y: F64 val) : F64 val","title":"min"},{"location":"builtin-F64/#parameters_4","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_24","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#max","text":"[Source] fun box max( y: F64 val) : F64 val","title":"max"},{"location":"builtin-F64/#parameters_5","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_25","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#finite","text":"[Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val","title":"finite"},{"location":"builtin-F64/#returns_26","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#infinite","text":"[Source] Check whether this number is +/-infinity fun box infinite() : Bool val","title":"infinite"},{"location":"builtin-F64/#returns_27","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#nan","text":"[Source] Check whether this number is NaN. fun box nan() : Bool val","title":"nan"},{"location":"builtin-F64/#returns_28","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ldexp","text":"[Source] fun box ldexp( x: F64 val, exponent: I32 val) : F64 val","title":"ldexp"},{"location":"builtin-F64/#parameters_6","text":"x: F64 val exponent: I32 val","title":"Parameters"},{"location":"builtin-F64/#returns_29","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#frexp","text":"[Source] fun box frexp() : (F64 val , U32 val)","title":"frexp"},{"location":"builtin-F64/#returns_30","text":"( F64 val , U32 val)","title":"Returns"},{"location":"builtin-F64/#log","text":"[Source] fun box log() : F64 val","title":"log"},{"location":"builtin-F64/#returns_31","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#log2","text":"[Source] fun box log2() : F64 val","title":"log2"},{"location":"builtin-F64/#returns_32","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#log10","text":"[Source] fun box log10() : F64 val","title":"log10"},{"location":"builtin-F64/#returns_33","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#logb","text":"[Source] fun box logb() : F64 val","title":"logb"},{"location":"builtin-F64/#returns_34","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#pow","text":"[Source] fun box pow( y: F64 val) : F64 val","title":"pow"},{"location":"builtin-F64/#parameters_7","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_35","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#powi","text":"[Source] fun box powi( y: I32 val) : F64 val","title":"powi"},{"location":"builtin-F64/#parameters_8","text":"y: I32 val","title":"Parameters"},{"location":"builtin-F64/#returns_36","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sqrt","text":"[Source] fun box sqrt() : F64 val","title":"sqrt"},{"location":"builtin-F64/#returns_37","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sqrt_unsafe","text":"[Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F64 val","title":"sqrt_unsafe"},{"location":"builtin-F64/#returns_38","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#cbrt","text":"[Source] fun box cbrt() : F64 val","title":"cbrt"},{"location":"builtin-F64/#returns_39","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#exp","text":"[Source] fun box exp() : F64 val","title":"exp"},{"location":"builtin-F64/#returns_40","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#exp2","text":"[Source] fun box exp2() : F64 val","title":"exp2"},{"location":"builtin-F64/#returns_41","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#cos","text":"[Source] fun box cos() : F64 val","title":"cos"},{"location":"builtin-F64/#returns_42","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sin","text":"[Source] fun box sin() : F64 val","title":"sin"},{"location":"builtin-F64/#returns_43","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#tan","text":"[Source] fun box tan() : F64 val","title":"tan"},{"location":"builtin-F64/#returns_44","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#cosh","text":"[Source] fun box cosh() : F64 val","title":"cosh"},{"location":"builtin-F64/#returns_45","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sinh","text":"[Source] fun box sinh() : F64 val","title":"sinh"},{"location":"builtin-F64/#returns_46","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#tanh","text":"[Source] fun box tanh() : F64 val","title":"tanh"},{"location":"builtin-F64/#returns_47","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#acos","text":"[Source] fun box acos() : F64 val","title":"acos"},{"location":"builtin-F64/#returns_48","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#asin","text":"[Source] fun box asin() : F64 val","title":"asin"},{"location":"builtin-F64/#returns_49","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#atan","text":"[Source] fun box atan() : F64 val","title":"atan"},{"location":"builtin-F64/#returns_50","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#atan2","text":"[Source] fun box atan2( y: F64 val) : F64 val","title":"atan2"},{"location":"builtin-F64/#parameters_9","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_51","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#acosh","text":"[Source] fun box acosh() : F64 val","title":"acosh"},{"location":"builtin-F64/#returns_52","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#asinh","text":"[Source] fun box asinh() : F64 val","title":"asinh"},{"location":"builtin-F64/#returns_53","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#atanh","text":"[Source] fun box atanh() : F64 val","title":"atanh"},{"location":"builtin-F64/#returns_54","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#copysign","text":"[Source] fun box copysign( sign: F64 val) : F64 val","title":"copysign"},{"location":"builtin-F64/#parameters_10","text":"sign: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_55","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-F64/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-F64/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-F64/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-F64/#returns_58","text":"I128 val","title":"Returns"},{"location":"builtin-F64/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-F64/#returns_59","text":"U128 val","title":"Returns"},{"location":"builtin-F64/#i128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-F64/#returns_60","text":"I128 val","title":"Returns"},{"location":"builtin-F64/#u128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-F64/#returns_61","text":"U128 val","title":"Returns"},{"location":"builtin-F64/#add_unsafe","text":"[Source] fun box add_unsafe( y: F64 val) : F64 val","title":"add_unsafe"},{"location":"builtin-F64/#parameters_11","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_62","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: F64 val) : F64 val","title":"sub_unsafe"},{"location":"builtin-F64/#parameters_12","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_63","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: F64 val) : F64 val","title":"mul_unsafe"},{"location":"builtin-F64/#parameters_13","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_64","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#div_unsafe","text":"[Source] fun box div_unsafe( y: F64 val) : F64 val","title":"div_unsafe"},{"location":"builtin-F64/#parameters_14","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_65","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: F64 val) : (F64 val , F64 val)","title":"divrem_unsafe"},{"location":"builtin-F64/#parameters_15","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_66","text":"( F64 val , F64 val)","title":"Returns"},{"location":"builtin-F64/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: F64 val) : F64 val","title":"rem_unsafe"},{"location":"builtin-F64/#parameters_16","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_67","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#neg_unsafe","text":"[Source] fun box neg_unsafe() : F64 val","title":"neg_unsafe"},{"location":"builtin-F64/#returns_68","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#eq_unsafe","text":"[Source] fun box eq_unsafe( y: F64 val) : Bool val","title":"eq_unsafe"},{"location":"builtin-F64/#parameters_17","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_69","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ne_unsafe","text":"[Source] fun box ne_unsafe( y: F64 val) : Bool val","title":"ne_unsafe"},{"location":"builtin-F64/#parameters_18","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_70","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#lt_unsafe","text":"[Source] fun box lt_unsafe( y: F64 val) : Bool val","title":"lt_unsafe"},{"location":"builtin-F64/#parameters_19","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_71","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#le_unsafe","text":"[Source] fun box le_unsafe( y: F64 val) : Bool val","title":"le_unsafe"},{"location":"builtin-F64/#parameters_20","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_72","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ge_unsafe","text":"[Source] fun box ge_unsafe( y: F64 val) : Bool val","title":"ge_unsafe"},{"location":"builtin-F64/#parameters_21","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_73","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#gt_unsafe","text":"[Source] fun box gt_unsafe( y: F64 val) : Bool val","title":"gt_unsafe"},{"location":"builtin-F64/#parameters_22","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_74","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-F64/#returns_75","text":"String iso^","title":"Returns"},{"location":"builtin-F64/#add","text":"[Source] fun box add( y: F64 val) : F64 val","title":"add"},{"location":"builtin-F64/#parameters_23","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_76","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sub","text":"[Source] fun box sub( y: F64 val) : F64 val","title":"sub"},{"location":"builtin-F64/#parameters_24","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_77","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#mul","text":"[Source] fun box mul( y: F64 val) : F64 val","title":"mul"},{"location":"builtin-F64/#parameters_25","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_78","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#div","text":"[Source] fun box div( y: F64 val) : F64 val","title":"div"},{"location":"builtin-F64/#parameters_26","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_79","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#divrem","text":"[Source] fun box divrem( y: F64 val) : (F64 val , F64 val)","title":"divrem"},{"location":"builtin-F64/#parameters_27","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_80","text":"( F64 val , F64 val)","title":"Returns"},{"location":"builtin-F64/#rem","text":"[Source] fun box rem( y: F64 val) : F64 val","title":"rem"},{"location":"builtin-F64/#parameters_28","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#neg","text":"[Source] fun box neg() : F64 val","title":"neg"},{"location":"builtin-F64/#returns_82","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#eq","text":"[Source] fun box eq( y: F64 val) : Bool val","title":"eq"},{"location":"builtin-F64/#parameters_29","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_83","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ne","text":"[Source] fun box ne( y: F64 val) : Bool val","title":"ne"},{"location":"builtin-F64/#parameters_30","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_84","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#lt","text":"[Source] fun box lt( y: F64 val) : Bool val","title":"lt"},{"location":"builtin-F64/#parameters_31","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_85","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#le","text":"[Source] fun box le( y: F64 val) : Bool val","title":"le"},{"location":"builtin-F64/#parameters_32","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_86","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ge","text":"[Source] fun box ge( y: F64 val) : Bool val","title":"ge"},{"location":"builtin-F64/#parameters_33","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_87","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#gt","text":"[Source] fun box gt( y: F64 val) : Bool val","title":"gt"},{"location":"builtin-F64/#parameters_34","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_88","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-F64/#returns_89","text":"I8 val","title":"Returns"},{"location":"builtin-F64/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-F64/#returns_90","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-F64/#returns_91","text":"I32 val","title":"Returns"},{"location":"builtin-F64/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-F64/#returns_92","text":"I64 val","title":"Returns"},{"location":"builtin-F64/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-F64/#returns_93","text":"ILong val","title":"Returns"},{"location":"builtin-F64/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-F64/#returns_94","text":"ISize val","title":"Returns"},{"location":"builtin-F64/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-F64/#returns_95","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-F64/#returns_96","text":"U16 val","title":"Returns"},{"location":"builtin-F64/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-F64/#returns_97","text":"U32 val","title":"Returns"},{"location":"builtin-F64/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-F64/#returns_98","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-F64/#returns_99","text":"ULong val","title":"Returns"},{"location":"builtin-F64/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-F64/#returns_100","text":"USize val","title":"Returns"},{"location":"builtin-F64/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-F64/#returns_101","text":"F32 val","title":"Returns"},{"location":"builtin-F64/#f64_1","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-F64/#returns_102","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-F64/#returns_103","text":"I8 val","title":"Returns"},{"location":"builtin-F64/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-F64/#returns_104","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-F64/#returns_105","text":"I32 val","title":"Returns"},{"location":"builtin-F64/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-F64/#returns_106","text":"I64 val","title":"Returns"},{"location":"builtin-F64/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-F64/#returns_107","text":"ILong val","title":"Returns"},{"location":"builtin-F64/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-F64/#returns_108","text":"ISize val","title":"Returns"},{"location":"builtin-F64/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-F64/#returns_109","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-F64/#returns_110","text":"U16 val","title":"Returns"},{"location":"builtin-F64/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-F64/#returns_111","text":"U32 val","title":"Returns"},{"location":"builtin-F64/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-F64/#returns_112","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-F64/#returns_113","text":"ULong val","title":"Returns"},{"location":"builtin-F64/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-F64/#returns_114","text":"USize val","title":"Returns"},{"location":"builtin-F64/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-F64/#returns_115","text":"F32 val","title":"Returns"},{"location":"builtin-F64/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-F64/#returns_116","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#compare","text":"fun box compare( that: F64 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-F64/#parameters_35","text":"that: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_117","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-F64/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-F64/#_value","text":"[Source] fun box _value() : F64 val","title":"_value"},{"location":"builtin-F64/#returns_118","text":"F64 val","title":"Returns"},{"location":"builtin-Float/","text":"Float [Source] type Float is (F32 val | F64 val) Type Alias For ( F32 val | F64 val)","title":"type Float"},{"location":"builtin-Float/#float","text":"[Source] type Float is (F32 val | F64 val)","title":"Float"},{"location":"builtin-Float/#type-alias-for","text":"( F32 val | F64 val)","title":"Type Alias For"},{"location":"builtin-FloatingPoint/","text":"FloatingPoint[A: FloatingPoint [A] val] [Source] trait val FloatingPoint[A: FloatingPoint[A] val] is Real[A] val Implements Real [A] val Constructors min_normalised [Source] new val min_normalised() : FloatingPoint[A] val^ Returns FloatingPoint [A] val^ epsilon [Source] new val epsilon() : FloatingPoint[A] val^ Returns FloatingPoint [A] val^ create [Source] new val create( value: A) : Real[A] val^ Parameters value: A Returns Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [B] val)] [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^ Parameters a: B Returns Real [A] val^ min_value [Source] new val min_value() : Real[A] val^ Returns Real [A] val^ max_value [Source] new val max_value() : Real[A] val^ Returns Real [A] val^ Public Functions radix [Source] fun tag radix() : U8 val Returns U8 val precision2 [Source] fun tag precision2() : U8 val Returns U8 val precision10 [Source] fun tag precision10() : U8 val Returns U8 val min_exp2 [Source] fun tag min_exp2() : I16 val Returns I16 val min_exp10 [Source] fun tag min_exp10() : I16 val Returns I16 val max_exp2 [Source] fun tag max_exp2() : I16 val Returns I16 val max_exp10 [Source] fun tag max_exp10() : I16 val Returns I16 val add_unsafe [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box add_unsafe( y: A) : A Parameters y: A Returns A sub_unsafe [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box sub_unsafe( y: A) : A Parameters y: A Returns A mul_unsafe [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box mul_unsafe( y: A) : A Parameters y: A Returns A div_unsafe [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box div_unsafe( y: A) : A Parameters y: A Returns A divrem_unsafe [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box divrem_unsafe( y: A) : (A , A) Parameters y: A Returns (A , A) rem_unsafe [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box rem_unsafe( y: A) : A Parameters y: A Returns A neg_unsafe [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box neg_unsafe() : A Returns A eq_unsafe [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box eq_unsafe( y: box- A) : Bool val Parameters y: box- A Returns Bool val ne_unsafe [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ne_unsafe( y: box- A) : Bool val Parameters y: box- A Returns Bool val lt_unsafe [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box lt_unsafe( y: box- A) : Bool val Parameters y: box- A Returns Bool val le_unsafe [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box le_unsafe( y: box- A) : Bool val Parameters y: box- A Returns Bool val ge_unsafe [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ge_unsafe( y: box- A) : Bool val Parameters y: box- A Returns Bool val gt_unsafe [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box gt_unsafe( y: box- A) : Bool val Parameters y: box- A Returns Bool val abs [Source] fun box abs() : A Returns A ceil [Source] fun box ceil() : A Returns A floor [Source] fun box floor() : A Returns A round [Source] fun box round() : A Returns A trunc [Source] fun box trunc() : A Returns A finite [Source] fun box finite() : Bool val Returns Bool val infinite [Source] fun box infinite() : Bool val Returns Bool val nan [Source] fun box nan() : Bool val Returns Bool val ldexp [Source] fun box ldexp( x: A, exponent: I32 val) : A Parameters x: A exponent: I32 val Returns A frexp [Source] fun box frexp() : (A , U32 val) Returns (A , U32 val) log [Source] fun box log() : A Returns A log2 [Source] fun box log2() : A Returns A log10 [Source] fun box log10() : A Returns A logb [Source] fun box logb() : A Returns A pow [Source] fun box pow( y: A) : A Parameters y: A Returns A powi [Source] fun box powi( y: I32 val) : A Parameters y: I32 val Returns A sqrt [Source] fun box sqrt() : A Returns A sqrt_unsafe [Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : A Returns A cbrt [Source] fun box cbrt() : A Returns A exp [Source] fun box exp() : A Returns A exp2 [Source] fun box exp2() : A Returns A cos [Source] fun box cos() : A Returns A sin [Source] fun box sin() : A Returns A tan [Source] fun box tan() : A Returns A cosh [Source] fun box cosh() : A Returns A sinh [Source] fun box sinh() : A Returns A tanh [Source] fun box tanh() : A Returns A acos [Source] fun box acos() : A Returns A asin [Source] fun box asin() : A Returns A atan [Source] fun box atan() : A Returns A atan2 [Source] fun box atan2( y: A) : A Parameters y: A Returns A acosh [Source] fun box acosh() : A Returns A asinh [Source] fun box asinh() : A Returns A atanh [Source] fun box atanh() : A Returns A copysign [Source] fun box copysign( sign: A) : A Parameters sign: A Returns A string [Source] fun box string() : String iso^ Returns String iso^ add [Source] fun box add( y: A) : A Parameters y: A Returns A sub [Source] fun box sub( y: A) : A Parameters y: A Returns A mul [Source] fun box mul( y: A) : A Parameters y: A Returns A div [Source] fun box div( y: A) : A Parameters y: A Returns A divrem [Source] fun box divrem( y: A) : (A , A) Parameters y: A Returns (A , A) rem [Source] fun box rem( y: A) : A Parameters y: A Returns A neg [Source] fun box neg() : A Returns A eq [Source] fun box eq( y: box- A) : Bool val Parameters y: box- A Returns Bool val ne [Source] fun box ne( y: box- A) : Bool val Parameters y: box- A Returns Bool val lt [Source] fun box lt( y: box- A) : Bool val Parameters y: box- A Returns Bool val le [Source] fun box le( y: box- A) : Bool val Parameters y: box- A Returns Bool val ge [Source] fun box ge( y: box- A) : Bool val Parameters y: box- A Returns Bool val gt [Source] fun box gt( y: box- A) : Bool val Parameters y: box- A Returns Bool val min [Source] fun box min( y: A) : A Parameters y: A Returns A max [Source] fun box max( y: A) : A Parameters y: A Returns A hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val i8 [Source] fun box i8() : I8 val Returns I8 val i16 [Source] fun box i16() : I16 val Returns I16 val i32 [Source] fun box i32() : I32 val Returns I32 val i64 [Source] fun box i64() : I64 val Returns I64 val i128 [Source] fun box i128() : I128 val Returns I128 val ilong [Source] fun box ilong() : ILong val Returns ILong val isize [Source] fun box isize() : ISize val Returns ISize val u8 [Source] fun box u8() : U8 val Returns U8 val u16 [Source] fun box u16() : U16 val Returns U16 val u32 [Source] fun box u32() : U32 val Returns U32 val u64 [Source] fun box u64() : U64 val Returns U64 val u128 [Source] fun box u128() : U128 val Returns U128 val ulong [Source] fun box ulong() : ULong val Returns ULong val usize [Source] fun box usize() : USize val Returns USize val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val i8_unsafe [Source] fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe [Source] fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe [Source] fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe [Source] fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe [Source] fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe [Source] fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe [Source] fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe [Source] fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe [Source] fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe [Source] fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe [Source] fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe [Source] fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe [Source] fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe [Source] fun box usize_unsafe() : USize val Returns USize val f32_unsafe [Source] fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: box- A) : (Less val | Equal val | Greater val) Parameters that: box- A Returns ( Less val | Equal val | Greater val) Private Functions _value [Source] fun box _value() : A Returns A","title":"trait FloatingPoint"},{"location":"builtin-FloatingPoint/#floatingpoint91a-floatingpoint91a93-val93","text":"[Source] trait val FloatingPoint[A: FloatingPoint[A] val] is Real[A] val","title":"FloatingPoint[A: FloatingPoint[A] val]"},{"location":"builtin-FloatingPoint/#implements","text":"Real [A] val","title":"Implements"},{"location":"builtin-FloatingPoint/#constructors","text":"","title":"Constructors"},{"location":"builtin-FloatingPoint/#min_normalised","text":"[Source] new val min_normalised() : FloatingPoint[A] val^","title":"min_normalised"},{"location":"builtin-FloatingPoint/#returns","text":"FloatingPoint [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#epsilon","text":"[Source] new val epsilon() : FloatingPoint[A] val^","title":"epsilon"},{"location":"builtin-FloatingPoint/#returns_1","text":"FloatingPoint [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-FloatingPoint/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-FloatingPoint/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-FloatingPoint/#returns_4","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-FloatingPoint/#returns_5","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-FloatingPoint/#radix","text":"[Source] fun tag radix() : U8 val","title":"radix"},{"location":"builtin-FloatingPoint/#returns_6","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#precision2","text":"[Source] fun tag precision2() : U8 val","title":"precision2"},{"location":"builtin-FloatingPoint/#returns_7","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#precision10","text":"[Source] fun tag precision10() : U8 val","title":"precision10"},{"location":"builtin-FloatingPoint/#returns_8","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#min_exp2","text":"[Source] fun tag min_exp2() : I16 val","title":"min_exp2"},{"location":"builtin-FloatingPoint/#returns_9","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#min_exp10","text":"[Source] fun tag min_exp10() : I16 val","title":"min_exp10"},{"location":"builtin-FloatingPoint/#returns_10","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#max_exp2","text":"[Source] fun tag max_exp2() : I16 val","title":"max_exp2"},{"location":"builtin-FloatingPoint/#returns_11","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#max_exp10","text":"[Source] fun tag max_exp10() : I16 val","title":"max_exp10"},{"location":"builtin-FloatingPoint/#returns_12","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#add_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-FloatingPoint/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_13","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sub_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-FloatingPoint/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_14","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#mul_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-FloatingPoint/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_15","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#div_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-FloatingPoint/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_16","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#divrem_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-FloatingPoint/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_17","text":"(A , A)","title":"Returns"},{"location":"builtin-FloatingPoint/#rem_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-FloatingPoint/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_18","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#neg_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-FloatingPoint/#returns_19","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#eq_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box eq_unsafe( y: box- A) : Bool val","title":"eq_unsafe"},{"location":"builtin-FloatingPoint/#parameters_8","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_20","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ne_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ne_unsafe( y: box- A) : Bool val","title":"ne_unsafe"},{"location":"builtin-FloatingPoint/#parameters_9","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_21","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#lt_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box lt_unsafe( y: box- A) : Bool val","title":"lt_unsafe"},{"location":"builtin-FloatingPoint/#parameters_10","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_22","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#le_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box le_unsafe( y: box- A) : Bool val","title":"le_unsafe"},{"location":"builtin-FloatingPoint/#parameters_11","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_23","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ge_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ge_unsafe( y: box- A) : Bool val","title":"ge_unsafe"},{"location":"builtin-FloatingPoint/#parameters_12","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_24","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#gt_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box gt_unsafe( y: box- A) : Bool val","title":"gt_unsafe"},{"location":"builtin-FloatingPoint/#parameters_13","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_25","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#abs","text":"[Source] fun box abs() : A","title":"abs"},{"location":"builtin-FloatingPoint/#returns_26","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#ceil","text":"[Source] fun box ceil() : A","title":"ceil"},{"location":"builtin-FloatingPoint/#returns_27","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#floor","text":"[Source] fun box floor() : A","title":"floor"},{"location":"builtin-FloatingPoint/#returns_28","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#round","text":"[Source] fun box round() : A","title":"round"},{"location":"builtin-FloatingPoint/#returns_29","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#trunc","text":"[Source] fun box trunc() : A","title":"trunc"},{"location":"builtin-FloatingPoint/#returns_30","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#finite","text":"[Source] fun box finite() : Bool val","title":"finite"},{"location":"builtin-FloatingPoint/#returns_31","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#infinite","text":"[Source] fun box infinite() : Bool val","title":"infinite"},{"location":"builtin-FloatingPoint/#returns_32","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#nan","text":"[Source] fun box nan() : Bool val","title":"nan"},{"location":"builtin-FloatingPoint/#returns_33","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ldexp","text":"[Source] fun box ldexp( x: A, exponent: I32 val) : A","title":"ldexp"},{"location":"builtin-FloatingPoint/#parameters_14","text":"x: A exponent: I32 val","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_34","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#frexp","text":"[Source] fun box frexp() : (A , U32 val)","title":"frexp"},{"location":"builtin-FloatingPoint/#returns_35","text":"(A , U32 val)","title":"Returns"},{"location":"builtin-FloatingPoint/#log","text":"[Source] fun box log() : A","title":"log"},{"location":"builtin-FloatingPoint/#returns_36","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#log2","text":"[Source] fun box log2() : A","title":"log2"},{"location":"builtin-FloatingPoint/#returns_37","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#log10","text":"[Source] fun box log10() : A","title":"log10"},{"location":"builtin-FloatingPoint/#returns_38","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#logb","text":"[Source] fun box logb() : A","title":"logb"},{"location":"builtin-FloatingPoint/#returns_39","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#pow","text":"[Source] fun box pow( y: A) : A","title":"pow"},{"location":"builtin-FloatingPoint/#parameters_15","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_40","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#powi","text":"[Source] fun box powi( y: I32 val) : A","title":"powi"},{"location":"builtin-FloatingPoint/#parameters_16","text":"y: I32 val","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_41","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sqrt","text":"[Source] fun box sqrt() : A","title":"sqrt"},{"location":"builtin-FloatingPoint/#returns_42","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sqrt_unsafe","text":"[Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : A","title":"sqrt_unsafe"},{"location":"builtin-FloatingPoint/#returns_43","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#cbrt","text":"[Source] fun box cbrt() : A","title":"cbrt"},{"location":"builtin-FloatingPoint/#returns_44","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#exp","text":"[Source] fun box exp() : A","title":"exp"},{"location":"builtin-FloatingPoint/#returns_45","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#exp2","text":"[Source] fun box exp2() : A","title":"exp2"},{"location":"builtin-FloatingPoint/#returns_46","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#cos","text":"[Source] fun box cos() : A","title":"cos"},{"location":"builtin-FloatingPoint/#returns_47","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sin","text":"[Source] fun box sin() : A","title":"sin"},{"location":"builtin-FloatingPoint/#returns_48","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#tan","text":"[Source] fun box tan() : A","title":"tan"},{"location":"builtin-FloatingPoint/#returns_49","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#cosh","text":"[Source] fun box cosh() : A","title":"cosh"},{"location":"builtin-FloatingPoint/#returns_50","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sinh","text":"[Source] fun box sinh() : A","title":"sinh"},{"location":"builtin-FloatingPoint/#returns_51","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#tanh","text":"[Source] fun box tanh() : A","title":"tanh"},{"location":"builtin-FloatingPoint/#returns_52","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#acos","text":"[Source] fun box acos() : A","title":"acos"},{"location":"builtin-FloatingPoint/#returns_53","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#asin","text":"[Source] fun box asin() : A","title":"asin"},{"location":"builtin-FloatingPoint/#returns_54","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#atan","text":"[Source] fun box atan() : A","title":"atan"},{"location":"builtin-FloatingPoint/#returns_55","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#atan2","text":"[Source] fun box atan2( y: A) : A","title":"atan2"},{"location":"builtin-FloatingPoint/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_56","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#acosh","text":"[Source] fun box acosh() : A","title":"acosh"},{"location":"builtin-FloatingPoint/#returns_57","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#asinh","text":"[Source] fun box asinh() : A","title":"asinh"},{"location":"builtin-FloatingPoint/#returns_58","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#atanh","text":"[Source] fun box atanh() : A","title":"atanh"},{"location":"builtin-FloatingPoint/#returns_59","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#copysign","text":"[Source] fun box copysign( sign: A) : A","title":"copysign"},{"location":"builtin-FloatingPoint/#parameters_18","text":"sign: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_60","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-FloatingPoint/#returns_61","text":"String iso^","title":"Returns"},{"location":"builtin-FloatingPoint/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-FloatingPoint/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_62","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-FloatingPoint/#parameters_20","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_63","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-FloatingPoint/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_64","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-FloatingPoint/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_65","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-FloatingPoint/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_66","text":"(A , A)","title":"Returns"},{"location":"builtin-FloatingPoint/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-FloatingPoint/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_67","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-FloatingPoint/#returns_68","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#eq","text":"[Source] fun box eq( y: box- A) : Bool val","title":"eq"},{"location":"builtin-FloatingPoint/#parameters_25","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_69","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ne","text":"[Source] fun box ne( y: box- A) : Bool val","title":"ne"},{"location":"builtin-FloatingPoint/#parameters_26","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_70","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#lt","text":"[Source] fun box lt( y: box- A) : Bool val","title":"lt"},{"location":"builtin-FloatingPoint/#parameters_27","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_71","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#le","text":"[Source] fun box le( y: box- A) : Bool val","title":"le"},{"location":"builtin-FloatingPoint/#parameters_28","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_72","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ge","text":"[Source] fun box ge( y: box- A) : Bool val","title":"ge"},{"location":"builtin-FloatingPoint/#parameters_29","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_73","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#gt","text":"[Source] fun box gt( y: box- A) : Bool val","title":"gt"},{"location":"builtin-FloatingPoint/#parameters_30","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_74","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-FloatingPoint/#parameters_31","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_75","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-FloatingPoint/#parameters_32","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_76","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-FloatingPoint/#returns_77","text":"USize val","title":"Returns"},{"location":"builtin-FloatingPoint/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-FloatingPoint/#returns_78","text":"U64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-FloatingPoint/#returns_79","text":"I8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-FloatingPoint/#returns_80","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-FloatingPoint/#returns_81","text":"I32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-FloatingPoint/#returns_82","text":"I64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-FloatingPoint/#returns_83","text":"I128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-FloatingPoint/#returns_84","text":"ILong val","title":"Returns"},{"location":"builtin-FloatingPoint/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-FloatingPoint/#returns_85","text":"ISize val","title":"Returns"},{"location":"builtin-FloatingPoint/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-FloatingPoint/#returns_86","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-FloatingPoint/#returns_87","text":"U16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-FloatingPoint/#returns_88","text":"U32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-FloatingPoint/#returns_89","text":"U64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-FloatingPoint/#returns_90","text":"U128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-FloatingPoint/#returns_91","text":"ULong val","title":"Returns"},{"location":"builtin-FloatingPoint/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-FloatingPoint/#returns_92","text":"USize val","title":"Returns"},{"location":"builtin-FloatingPoint/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-FloatingPoint/#returns_93","text":"F32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-FloatingPoint/#returns_94","text":"F64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-FloatingPoint/#returns_95","text":"I8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-FloatingPoint/#returns_96","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-FloatingPoint/#returns_97","text":"I32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-FloatingPoint/#returns_98","text":"I64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-FloatingPoint/#returns_99","text":"I128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-FloatingPoint/#returns_100","text":"ILong val","title":"Returns"},{"location":"builtin-FloatingPoint/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-FloatingPoint/#returns_101","text":"ISize val","title":"Returns"},{"location":"builtin-FloatingPoint/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-FloatingPoint/#returns_102","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-FloatingPoint/#returns_103","text":"U16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-FloatingPoint/#returns_104","text":"U32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-FloatingPoint/#returns_105","text":"U64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-FloatingPoint/#returns_106","text":"U128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-FloatingPoint/#returns_107","text":"ULong val","title":"Returns"},{"location":"builtin-FloatingPoint/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-FloatingPoint/#returns_108","text":"USize val","title":"Returns"},{"location":"builtin-FloatingPoint/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-FloatingPoint/#returns_109","text":"F32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-FloatingPoint/#returns_110","text":"F64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#compare","text":"fun box compare( that: box- A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-FloatingPoint/#parameters_33","text":"that: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_111","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-FloatingPoint/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-FloatingPoint/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-FloatingPoint/#returns_112","text":"A","title":"Returns"},{"location":"builtin-Greater/","text":"Greater [Source] primitive val Greater is Equatable[(Less val | Equal val | Greater val)] ref Implements Equatable [( Less val | Equal val | Greater val)] ref Constructors create [Source] new val create() : Greater val^ Returns Greater val^ Public Functions string [Source] fun box string() : String iso^ Returns String iso^ eq [Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val Parameters that: ( Less val | Equal val | Greater val) Returns Bool val ne [Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val Parameters that: ( Less val | Equal val | Greater val) Returns Bool val","title":"primitive Greater"},{"location":"builtin-Greater/#greater","text":"[Source] primitive val Greater is Equatable[(Less val | Equal val | Greater val)] ref","title":"Greater"},{"location":"builtin-Greater/#implements","text":"Equatable [( Less val | Equal val | Greater val)] ref","title":"Implements"},{"location":"builtin-Greater/#constructors","text":"","title":"Constructors"},{"location":"builtin-Greater/#create","text":"[Source] new val create() : Greater val^","title":"create"},{"location":"builtin-Greater/#returns","text":"Greater val^","title":"Returns"},{"location":"builtin-Greater/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Greater/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Greater/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-Greater/#eq","text":"[Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val","title":"eq"},{"location":"builtin-Greater/#parameters","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Greater/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Greater/#ne","text":"[Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val","title":"ne"},{"location":"builtin-Greater/#parameters_1","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Greater/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-HasEq/","text":"HasEq[A: A] [Source] interface ref HasEq[A: A] Public Functions eq [Source] fun box eq( that: box- A) : Bool val Parameters that: box- A Returns Bool val","title":"interface HasEq"},{"location":"builtin-HasEq/#haseq91a-a93","text":"[Source] interface ref HasEq[A: A]","title":"HasEq[A: A]"},{"location":"builtin-HasEq/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-HasEq/#eq","text":"[Source] fun box eq( that: box- A) : Bool val","title":"eq"},{"location":"builtin-HasEq/#parameters","text":"that: box- A","title":"Parameters"},{"location":"builtin-HasEq/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-I128/","text":"I128 [Source] primitive val I128 is _SignedInteger[I128 val, U128 val] val Implements _SignedInteger [ I128 val, U128 val] val Constructors create [Source] new val create( value: I128 val) : I128 val^ Parameters value: I128 val Returns I128 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I128 val^ Parameters a: A Returns I128 val^ min_value [Source] new val min_value() : I128 val^ Returns I128 val^ max_value [Source] new val max_value() : I128 val^ Returns I128 val^ Public Functions abs [Source] fun box abs() : U128 val Returns U128 val bit_reverse [Source] fun box bit_reverse() : I128 val Returns I128 val bswap [Source] fun box bswap() : I128 val Returns I128 val popcount [Source] fun box popcount() : U128 val Returns U128 val clz [Source] fun box clz() : U128 val Returns U128 val ctz [Source] fun box ctz() : U128 val Returns U128 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val Returns U128 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val Returns U128 val bitwidth [Source] fun box bitwidth() : U128 val Returns U128 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val max [Source] fun box max( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val string [Source] fun box string() : String iso^ Returns String iso^ mul [Source] fun box mul( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val divrem [Source] fun box divrem( y: I128 val) : (I128 val , I128 val) Parameters y: I128 val Returns ( I128 val , I128 val) div [Source] fun box div( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val rem [Source] fun box rem( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val mul_unsafe [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val divrem_unsafe [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: I128 val) : (I128 val , I128 val) Parameters y: I128 val Returns ( I128 val , I128 val) div_unsafe [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val rem_unsafe [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val f32_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val Returns F64 val addc [Source] fun box addc( y: I128 val) : (I128 val , Bool val) Parameters y: I128 val Returns ( I128 val , Bool val) subc [Source] fun box subc( y: I128 val) : (I128 val , Bool val) Parameters y: I128 val Returns ( I128 val , Bool val) mulc [Source] fun box mulc( y: I128 val) : (I128 val , Bool val) Parameters y: I128 val Returns ( I128 val , Bool val) divc [Source] fun box divc( y: I128 val) : (I128 val , Bool val) Parameters y: I128 val Returns ( I128 val , Bool val) remc [Source] fun box remc( y: I128 val) : (I128 val , Bool val) Parameters y: I128 val Returns ( I128 val , Bool val) add_partial [Source] fun box add_partial( y: I128 val) : I128 val ? Parameters y: I128 val Returns I128 val ? sub_partial [Source] fun box sub_partial( y: I128 val) : I128 val ? Parameters y: I128 val Returns I128 val ? mul_partial [Source] fun box mul_partial( y: I128 val) : I128 val ? Parameters y: I128 val Returns I128 val ? div_partial [Source] fun box div_partial( y: I128 val) : I128 val ? Parameters y: I128 val Returns I128 val ? rem_partial [Source] fun box rem_partial( y: I128 val) : I128 val ? Parameters y: I128 val Returns I128 val ? divrem_partial [Source] fun box divrem_partial( y: I128 val) : (I128 val , I128 val) ? Parameters y: I128 val Returns ( I128 val , I128 val) ? shl fun box shl( y: U128 val) : I128 val Parameters y: U128 val Returns I128 val shr fun box shr( y: U128 val) : I128 val Parameters y: U128 val Returns I128 val shl_unsafe fun box shl_unsafe( y: U128 val) : I128 val Parameters y: U128 val Returns I128 val shr_unsafe fun box shr_unsafe( y: U128 val) : I128 val Parameters y: U128 val Returns I128 val add_unsafe fun box add_unsafe( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val sub_unsafe fun box sub_unsafe( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val neg_unsafe fun box neg_unsafe() : I128 val Returns I128 val op_and fun box op_and( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val op_or fun box op_or( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val op_xor fun box op_xor( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val op_not fun box op_not() : I128 val Returns I128 val add fun box add( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val sub fun box sub( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val neg fun box neg() : I128 val Returns I128 val eq fun box eq( y: I128 val) : Bool val Parameters y: I128 val Returns Bool val ne fun box ne( y: I128 val) : Bool val Parameters y: I128 val Returns Bool val lt fun box lt( y: I128 val) : Bool val Parameters y: I128 val Returns Bool val le fun box le( y: I128 val) : Bool val Parameters y: I128 val Returns Bool val ge fun box ge( y: I128 val) : Bool val Parameters y: I128 val Returns Bool val gt fun box gt( y: I128 val) : Bool val Parameters y: I128 val Returns Bool val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val compare fun box compare( that: I128 val) : (Less val | Equal val | Greater val) Parameters that: I128 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : I128 val Returns I128 val","title":"primitive I128"},{"location":"builtin-I128/#i128","text":"[Source] primitive val I128 is _SignedInteger[I128 val, U128 val] val","title":"I128"},{"location":"builtin-I128/#implements","text":"_SignedInteger [ I128 val, U128 val] val","title":"Implements"},{"location":"builtin-I128/#constructors","text":"","title":"Constructors"},{"location":"builtin-I128/#create","text":"[Source] new val create( value: I128 val) : I128 val^","title":"create"},{"location":"builtin-I128/#parameters","text":"value: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I128 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I128/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I128/#returns_1","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#min_value","text":"[Source] new val min_value() : I128 val^","title":"min_value"},{"location":"builtin-I128/#returns_2","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#max_value","text":"[Source] new val max_value() : I128 val^","title":"max_value"},{"location":"builtin-I128/#returns_3","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I128/#abs","text":"[Source] fun box abs() : U128 val","title":"abs"},{"location":"builtin-I128/#returns_4","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#bit_reverse","text":"[Source] fun box bit_reverse() : I128 val","title":"bit_reverse"},{"location":"builtin-I128/#returns_5","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#bswap","text":"[Source] fun box bswap() : I128 val","title":"bswap"},{"location":"builtin-I128/#returns_6","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#popcount","text":"[Source] fun box popcount() : U128 val","title":"popcount"},{"location":"builtin-I128/#returns_7","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#clz","text":"[Source] fun box clz() : U128 val","title":"clz"},{"location":"builtin-I128/#returns_8","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ctz","text":"[Source] fun box ctz() : U128 val","title":"ctz"},{"location":"builtin-I128/#returns_9","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val","title":"clz_unsafe"},{"location":"builtin-I128/#returns_10","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val","title":"ctz_unsafe"},{"location":"builtin-I128/#returns_11","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#bitwidth","text":"[Source] fun box bitwidth() : U128 val","title":"bitwidth"},{"location":"builtin-I128/#returns_12","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I128/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I128/#min","text":"[Source] fun box min( y: I128 val) : I128 val","title":"min"},{"location":"builtin-I128/#parameters_2","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_14","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#max","text":"[Source] fun box max( y: I128 val) : I128 val","title":"max"},{"location":"builtin-I128/#parameters_3","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_15","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-I128/#returns_16","text":"USize val","title":"Returns"},{"location":"builtin-I128/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I128/#returns_17","text":"U64 val","title":"Returns"},{"location":"builtin-I128/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-I128/#returns_18","text":"String iso^","title":"Returns"},{"location":"builtin-I128/#mul","text":"[Source] fun box mul( y: I128 val) : I128 val","title":"mul"},{"location":"builtin-I128/#parameters_4","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_19","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#divrem","text":"[Source] fun box divrem( y: I128 val) : (I128 val , I128 val)","title":"divrem"},{"location":"builtin-I128/#parameters_5","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_20","text":"( I128 val , I128 val)","title":"Returns"},{"location":"builtin-I128/#div","text":"[Source] fun box div( y: I128 val) : I128 val","title":"div"},{"location":"builtin-I128/#parameters_6","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_21","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#rem","text":"[Source] fun box rem( y: I128 val) : I128 val","title":"rem"},{"location":"builtin-I128/#parameters_7","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_22","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#mul_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: I128 val) : I128 val","title":"mul_unsafe"},{"location":"builtin-I128/#parameters_8","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_23","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#divrem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: I128 val) : (I128 val , I128 val)","title":"divrem_unsafe"},{"location":"builtin-I128/#parameters_9","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_24","text":"( I128 val , I128 val)","title":"Returns"},{"location":"builtin-I128/#div_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: I128 val) : I128 val","title":"div_unsafe"},{"location":"builtin-I128/#parameters_10","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_25","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#rem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: I128 val) : I128 val","title":"rem_unsafe"},{"location":"builtin-I128/#parameters_11","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_26","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-I128/#returns_27","text":"F32 val","title":"Returns"},{"location":"builtin-I128/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-I128/#returns_28","text":"F64 val","title":"Returns"},{"location":"builtin-I128/#f32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I128/#returns_29","text":"F32 val","title":"Returns"},{"location":"builtin-I128/#f64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I128/#returns_30","text":"F64 val","title":"Returns"},{"location":"builtin-I128/#addc","text":"[Source] fun box addc( y: I128 val) : (I128 val , Bool val)","title":"addc"},{"location":"builtin-I128/#parameters_12","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_31","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#subc","text":"[Source] fun box subc( y: I128 val) : (I128 val , Bool val)","title":"subc"},{"location":"builtin-I128/#parameters_13","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_32","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#mulc","text":"[Source] fun box mulc( y: I128 val) : (I128 val , Bool val)","title":"mulc"},{"location":"builtin-I128/#parameters_14","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_33","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#divc","text":"[Source] fun box divc( y: I128 val) : (I128 val , Bool val)","title":"divc"},{"location":"builtin-I128/#parameters_15","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_34","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#remc","text":"[Source] fun box remc( y: I128 val) : (I128 val , Bool val)","title":"remc"},{"location":"builtin-I128/#parameters_16","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_35","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#add_partial","text":"[Source] fun box add_partial( y: I128 val) : I128 val ?","title":"add_partial"},{"location":"builtin-I128/#parameters_17","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_36","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#sub_partial","text":"[Source] fun box sub_partial( y: I128 val) : I128 val ?","title":"sub_partial"},{"location":"builtin-I128/#parameters_18","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_37","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#mul_partial","text":"[Source] fun box mul_partial( y: I128 val) : I128 val ?","title":"mul_partial"},{"location":"builtin-I128/#parameters_19","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_38","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#div_partial","text":"[Source] fun box div_partial( y: I128 val) : I128 val ?","title":"div_partial"},{"location":"builtin-I128/#parameters_20","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_39","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#rem_partial","text":"[Source] fun box rem_partial( y: I128 val) : I128 val ?","title":"rem_partial"},{"location":"builtin-I128/#parameters_21","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_40","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#divrem_partial","text":"[Source] fun box divrem_partial( y: I128 val) : (I128 val , I128 val) ?","title":"divrem_partial"},{"location":"builtin-I128/#parameters_22","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_41","text":"( I128 val , I128 val) ?","title":"Returns"},{"location":"builtin-I128/#shl","text":"fun box shl( y: U128 val) : I128 val","title":"shl"},{"location":"builtin-I128/#parameters_23","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_42","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#shr","text":"fun box shr( y: U128 val) : I128 val","title":"shr"},{"location":"builtin-I128/#parameters_24","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_43","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#shl_unsafe","text":"fun box shl_unsafe( y: U128 val) : I128 val","title":"shl_unsafe"},{"location":"builtin-I128/#parameters_25","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_44","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#shr_unsafe","text":"fun box shr_unsafe( y: U128 val) : I128 val","title":"shr_unsafe"},{"location":"builtin-I128/#parameters_26","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_45","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#add_unsafe","text":"fun box add_unsafe( y: I128 val) : I128 val","title":"add_unsafe"},{"location":"builtin-I128/#parameters_27","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_46","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#sub_unsafe","text":"fun box sub_unsafe( y: I128 val) : I128 val","title":"sub_unsafe"},{"location":"builtin-I128/#parameters_28","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_47","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#neg_unsafe","text":"fun box neg_unsafe() : I128 val","title":"neg_unsafe"},{"location":"builtin-I128/#returns_48","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_and","text":"fun box op_and( y: I128 val) : I128 val","title":"op_and"},{"location":"builtin-I128/#parameters_29","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_49","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_or","text":"fun box op_or( y: I128 val) : I128 val","title":"op_or"},{"location":"builtin-I128/#parameters_30","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_50","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_xor","text":"fun box op_xor( y: I128 val) : I128 val","title":"op_xor"},{"location":"builtin-I128/#parameters_31","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_51","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_not","text":"fun box op_not() : I128 val","title":"op_not"},{"location":"builtin-I128/#returns_52","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#add","text":"fun box add( y: I128 val) : I128 val","title":"add"},{"location":"builtin-I128/#parameters_32","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_53","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#sub","text":"fun box sub( y: I128 val) : I128 val","title":"sub"},{"location":"builtin-I128/#parameters_33","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_54","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#neg","text":"fun box neg() : I128 val","title":"neg"},{"location":"builtin-I128/#returns_55","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#eq","text":"fun box eq( y: I128 val) : Bool val","title":"eq"},{"location":"builtin-I128/#parameters_34","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#ne","text":"fun box ne( y: I128 val) : Bool val","title":"ne"},{"location":"builtin-I128/#parameters_35","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_57","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#lt","text":"fun box lt( y: I128 val) : Bool val","title":"lt"},{"location":"builtin-I128/#parameters_36","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#le","text":"fun box le( y: I128 val) : Bool val","title":"le"},{"location":"builtin-I128/#parameters_37","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#ge","text":"fun box ge( y: I128 val) : Bool val","title":"ge"},{"location":"builtin-I128/#parameters_38","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#gt","text":"fun box gt( y: I128 val) : Bool val","title":"gt"},{"location":"builtin-I128/#parameters_39","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I128/#returns_62","text":"I8 val","title":"Returns"},{"location":"builtin-I128/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I128/#returns_63","text":"I16 val","title":"Returns"},{"location":"builtin-I128/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I128/#returns_64","text":"I32 val","title":"Returns"},{"location":"builtin-I128/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I128/#returns_65","text":"I64 val","title":"Returns"},{"location":"builtin-I128/#i128_1","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I128/#returns_66","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I128/#returns_67","text":"ILong val","title":"Returns"},{"location":"builtin-I128/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I128/#returns_68","text":"ISize val","title":"Returns"},{"location":"builtin-I128/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I128/#returns_69","text":"U8 val","title":"Returns"},{"location":"builtin-I128/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I128/#returns_70","text":"U16 val","title":"Returns"},{"location":"builtin-I128/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I128/#returns_71","text":"U32 val","title":"Returns"},{"location":"builtin-I128/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I128/#returns_72","text":"U64 val","title":"Returns"},{"location":"builtin-I128/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I128/#returns_73","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I128/#returns_74","text":"ULong val","title":"Returns"},{"location":"builtin-I128/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I128/#returns_75","text":"USize val","title":"Returns"},{"location":"builtin-I128/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I128/#returns_76","text":"I8 val","title":"Returns"},{"location":"builtin-I128/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I128/#returns_77","text":"I16 val","title":"Returns"},{"location":"builtin-I128/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I128/#returns_78","text":"I32 val","title":"Returns"},{"location":"builtin-I128/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I128/#returns_79","text":"I64 val","title":"Returns"},{"location":"builtin-I128/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I128/#returns_80","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I128/#returns_81","text":"ILong val","title":"Returns"},{"location":"builtin-I128/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I128/#returns_82","text":"ISize val","title":"Returns"},{"location":"builtin-I128/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I128/#returns_83","text":"U8 val","title":"Returns"},{"location":"builtin-I128/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I128/#returns_84","text":"U16 val","title":"Returns"},{"location":"builtin-I128/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I128/#returns_85","text":"U32 val","title":"Returns"},{"location":"builtin-I128/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I128/#returns_86","text":"U64 val","title":"Returns"},{"location":"builtin-I128/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I128/#returns_87","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I128/#returns_88","text":"ULong val","title":"Returns"},{"location":"builtin-I128/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I128/#returns_89","text":"USize val","title":"Returns"},{"location":"builtin-I128/#compare","text":"fun box compare( that: I128 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I128/#parameters_40","text":"that: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_90","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I128/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I128/#_value","text":"fun box _value() : I128 val","title":"_value"},{"location":"builtin-I128/#returns_91","text":"I128 val","title":"Returns"},{"location":"builtin-I16/","text":"I16 [Source] primitive val I16 is _SignedInteger[I16 val, U16 val] val Implements _SignedInteger [ I16 val, U16 val] val Constructors create [Source] new val create( value: I16 val) : I16 val^ Parameters value: I16 val Returns I16 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I16 val^ Parameters a: A Returns I16 val^ min_value [Source] new val min_value() : I16 val^ Returns I16 val^ max_value [Source] new val max_value() : I16 val^ Returns I16 val^ Public Functions abs [Source] fun box abs() : U16 val Returns U16 val bit_reverse [Source] fun box bit_reverse() : I16 val Returns I16 val bswap [Source] fun box bswap() : I16 val Returns I16 val popcount [Source] fun box popcount() : U16 val Returns U16 val clz [Source] fun box clz() : U16 val Returns U16 val ctz [Source] fun box ctz() : U16 val Returns U16 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val Returns U16 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val Returns U16 val bitwidth [Source] fun box bitwidth() : U16 val Returns U16 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val max [Source] fun box max( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val addc [Source] fun box addc( y: I16 val) : (I16 val , Bool val) Parameters y: I16 val Returns ( I16 val , Bool val) subc [Source] fun box subc( y: I16 val) : (I16 val , Bool val) Parameters y: I16 val Returns ( I16 val , Bool val) mulc [Source] fun box mulc( y: I16 val) : (I16 val , Bool val) Parameters y: I16 val Returns ( I16 val , Bool val) divc [Source] fun box divc( y: I16 val) : (I16 val , Bool val) Parameters y: I16 val Returns ( I16 val , Bool val) remc [Source] fun box remc( y: I16 val) : (I16 val , Bool val) Parameters y: I16 val Returns ( I16 val , Bool val) add_partial [Source] fun box add_partial( y: I16 val) : I16 val ? Parameters y: I16 val Returns I16 val ? sub_partial [Source] fun box sub_partial( y: I16 val) : I16 val ? Parameters y: I16 val Returns I16 val ? mul_partial [Source] fun box mul_partial( y: I16 val) : I16 val ? Parameters y: I16 val Returns I16 val ? div_partial [Source] fun box div_partial( y: I16 val) : I16 val ? Parameters y: I16 val Returns I16 val ? rem_partial [Source] fun box rem_partial( y: I16 val) : I16 val ? Parameters y: I16 val Returns I16 val ? divrem_partial [Source] fun box divrem_partial( y: I16 val) : (I16 val , I16 val) ? Parameters y: I16 val Returns ( I16 val , I16 val) ? shl fun box shl( y: U16 val) : I16 val Parameters y: U16 val Returns I16 val shr fun box shr( y: U16 val) : I16 val Parameters y: U16 val Returns I16 val shl_unsafe fun box shl_unsafe( y: U16 val) : I16 val Parameters y: U16 val Returns I16 val shr_unsafe fun box shr_unsafe( y: U16 val) : I16 val Parameters y: U16 val Returns I16 val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val sub_unsafe fun box sub_unsafe( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val mul_unsafe fun box mul_unsafe( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val div_unsafe fun box div_unsafe( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val divrem_unsafe fun box divrem_unsafe( y: I16 val) : (I16 val , I16 val) Parameters y: I16 val Returns ( I16 val , I16 val) rem_unsafe fun box rem_unsafe( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val neg_unsafe fun box neg_unsafe() : I16 val Returns I16 val op_and fun box op_and( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val op_or fun box op_or( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val op_xor fun box op_xor( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val op_not fun box op_not() : I16 val Returns I16 val add fun box add( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val sub fun box sub( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val mul fun box mul( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val div fun box div( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val divrem fun box divrem( y: I16 val) : (I16 val , I16 val) Parameters y: I16 val Returns ( I16 val , I16 val) rem fun box rem( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val neg fun box neg() : I16 val Returns I16 val eq fun box eq( y: I16 val) : Bool val Parameters y: I16 val Returns Bool val ne fun box ne( y: I16 val) : Bool val Parameters y: I16 val Returns Bool val lt fun box lt( y: I16 val) : Bool val Parameters y: I16 val Returns Bool val le fun box le( y: I16 val) : Bool val Parameters y: I16 val Returns Bool val ge fun box ge( y: I16 val) : Bool val Parameters y: I16 val Returns Bool val gt fun box gt( y: I16 val) : Bool val Parameters y: I16 val Returns Bool val hash fun box hash() : USize val Returns USize val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: I16 val) : (Less val | Equal val | Greater val) Parameters that: I16 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : I16 val Returns I16 val","title":"primitive I16"},{"location":"builtin-I16/#i16","text":"[Source] primitive val I16 is _SignedInteger[I16 val, U16 val] val","title":"I16"},{"location":"builtin-I16/#implements","text":"_SignedInteger [ I16 val, U16 val] val","title":"Implements"},{"location":"builtin-I16/#constructors","text":"","title":"Constructors"},{"location":"builtin-I16/#create","text":"[Source] new val create( value: I16 val) : I16 val^","title":"create"},{"location":"builtin-I16/#parameters","text":"value: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I16 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I16/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I16/#returns_1","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#min_value","text":"[Source] new val min_value() : I16 val^","title":"min_value"},{"location":"builtin-I16/#returns_2","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#max_value","text":"[Source] new val max_value() : I16 val^","title":"max_value"},{"location":"builtin-I16/#returns_3","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I16/#abs","text":"[Source] fun box abs() : U16 val","title":"abs"},{"location":"builtin-I16/#returns_4","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#bit_reverse","text":"[Source] fun box bit_reverse() : I16 val","title":"bit_reverse"},{"location":"builtin-I16/#returns_5","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#bswap","text":"[Source] fun box bswap() : I16 val","title":"bswap"},{"location":"builtin-I16/#returns_6","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#popcount","text":"[Source] fun box popcount() : U16 val","title":"popcount"},{"location":"builtin-I16/#returns_7","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#clz","text":"[Source] fun box clz() : U16 val","title":"clz"},{"location":"builtin-I16/#returns_8","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#ctz","text":"[Source] fun box ctz() : U16 val","title":"ctz"},{"location":"builtin-I16/#returns_9","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val","title":"clz_unsafe"},{"location":"builtin-I16/#returns_10","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val","title":"ctz_unsafe"},{"location":"builtin-I16/#returns_11","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#bitwidth","text":"[Source] fun box bitwidth() : U16 val","title":"bitwidth"},{"location":"builtin-I16/#returns_12","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I16/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I16/#min","text":"[Source] fun box min( y: I16 val) : I16 val","title":"min"},{"location":"builtin-I16/#parameters_2","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_14","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#max","text":"[Source] fun box max( y: I16 val) : I16 val","title":"max"},{"location":"builtin-I16/#parameters_3","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_15","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#addc","text":"[Source] fun box addc( y: I16 val) : (I16 val , Bool val)","title":"addc"},{"location":"builtin-I16/#parameters_4","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_16","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#subc","text":"[Source] fun box subc( y: I16 val) : (I16 val , Bool val)","title":"subc"},{"location":"builtin-I16/#parameters_5","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_17","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#mulc","text":"[Source] fun box mulc( y: I16 val) : (I16 val , Bool val)","title":"mulc"},{"location":"builtin-I16/#parameters_6","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_18","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#divc","text":"[Source] fun box divc( y: I16 val) : (I16 val , Bool val)","title":"divc"},{"location":"builtin-I16/#parameters_7","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_19","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#remc","text":"[Source] fun box remc( y: I16 val) : (I16 val , Bool val)","title":"remc"},{"location":"builtin-I16/#parameters_8","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_20","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#add_partial","text":"[Source] fun box add_partial( y: I16 val) : I16 val ?","title":"add_partial"},{"location":"builtin-I16/#parameters_9","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_21","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#sub_partial","text":"[Source] fun box sub_partial( y: I16 val) : I16 val ?","title":"sub_partial"},{"location":"builtin-I16/#parameters_10","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_22","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#mul_partial","text":"[Source] fun box mul_partial( y: I16 val) : I16 val ?","title":"mul_partial"},{"location":"builtin-I16/#parameters_11","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_23","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#div_partial","text":"[Source] fun box div_partial( y: I16 val) : I16 val ?","title":"div_partial"},{"location":"builtin-I16/#parameters_12","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_24","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#rem_partial","text":"[Source] fun box rem_partial( y: I16 val) : I16 val ?","title":"rem_partial"},{"location":"builtin-I16/#parameters_13","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_25","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#divrem_partial","text":"[Source] fun box divrem_partial( y: I16 val) : (I16 val , I16 val) ?","title":"divrem_partial"},{"location":"builtin-I16/#parameters_14","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_26","text":"( I16 val , I16 val) ?","title":"Returns"},{"location":"builtin-I16/#shl","text":"fun box shl( y: U16 val) : I16 val","title":"shl"},{"location":"builtin-I16/#parameters_15","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_27","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#shr","text":"fun box shr( y: U16 val) : I16 val","title":"shr"},{"location":"builtin-I16/#parameters_16","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_28","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#shl_unsafe","text":"fun box shl_unsafe( y: U16 val) : I16 val","title":"shl_unsafe"},{"location":"builtin-I16/#parameters_17","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_29","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#shr_unsafe","text":"fun box shr_unsafe( y: U16 val) : I16 val","title":"shr_unsafe"},{"location":"builtin-I16/#parameters_18","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_30","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I16/#returns_31","text":"String iso^","title":"Returns"},{"location":"builtin-I16/#add_unsafe","text":"fun box add_unsafe( y: I16 val) : I16 val","title":"add_unsafe"},{"location":"builtin-I16/#parameters_19","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_32","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#sub_unsafe","text":"fun box sub_unsafe( y: I16 val) : I16 val","title":"sub_unsafe"},{"location":"builtin-I16/#parameters_20","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_33","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#mul_unsafe","text":"fun box mul_unsafe( y: I16 val) : I16 val","title":"mul_unsafe"},{"location":"builtin-I16/#parameters_21","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_34","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#div_unsafe","text":"fun box div_unsafe( y: I16 val) : I16 val","title":"div_unsafe"},{"location":"builtin-I16/#parameters_22","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_35","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#divrem_unsafe","text":"fun box divrem_unsafe( y: I16 val) : (I16 val , I16 val)","title":"divrem_unsafe"},{"location":"builtin-I16/#parameters_23","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_36","text":"( I16 val , I16 val)","title":"Returns"},{"location":"builtin-I16/#rem_unsafe","text":"fun box rem_unsafe( y: I16 val) : I16 val","title":"rem_unsafe"},{"location":"builtin-I16/#parameters_24","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_37","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#neg_unsafe","text":"fun box neg_unsafe() : I16 val","title":"neg_unsafe"},{"location":"builtin-I16/#returns_38","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_and","text":"fun box op_and( y: I16 val) : I16 val","title":"op_and"},{"location":"builtin-I16/#parameters_25","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_39","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_or","text":"fun box op_or( y: I16 val) : I16 val","title":"op_or"},{"location":"builtin-I16/#parameters_26","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_40","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_xor","text":"fun box op_xor( y: I16 val) : I16 val","title":"op_xor"},{"location":"builtin-I16/#parameters_27","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_41","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_not","text":"fun box op_not() : I16 val","title":"op_not"},{"location":"builtin-I16/#returns_42","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#add","text":"fun box add( y: I16 val) : I16 val","title":"add"},{"location":"builtin-I16/#parameters_28","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_43","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#sub","text":"fun box sub( y: I16 val) : I16 val","title":"sub"},{"location":"builtin-I16/#parameters_29","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_44","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#mul","text":"fun box mul( y: I16 val) : I16 val","title":"mul"},{"location":"builtin-I16/#parameters_30","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_45","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#div","text":"fun box div( y: I16 val) : I16 val","title":"div"},{"location":"builtin-I16/#parameters_31","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_46","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#divrem","text":"fun box divrem( y: I16 val) : (I16 val , I16 val)","title":"divrem"},{"location":"builtin-I16/#parameters_32","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_47","text":"( I16 val , I16 val)","title":"Returns"},{"location":"builtin-I16/#rem","text":"fun box rem( y: I16 val) : I16 val","title":"rem"},{"location":"builtin-I16/#parameters_33","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_48","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#neg","text":"fun box neg() : I16 val","title":"neg"},{"location":"builtin-I16/#returns_49","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#eq","text":"fun box eq( y: I16 val) : Bool val","title":"eq"},{"location":"builtin-I16/#parameters_34","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_50","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#ne","text":"fun box ne( y: I16 val) : Bool val","title":"ne"},{"location":"builtin-I16/#parameters_35","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_51","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#lt","text":"fun box lt( y: I16 val) : Bool val","title":"lt"},{"location":"builtin-I16/#parameters_36","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_52","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#le","text":"fun box le( y: I16 val) : Bool val","title":"le"},{"location":"builtin-I16/#parameters_37","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#ge","text":"fun box ge( y: I16 val) : Bool val","title":"ge"},{"location":"builtin-I16/#parameters_38","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#gt","text":"fun box gt( y: I16 val) : Bool val","title":"gt"},{"location":"builtin-I16/#parameters_39","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-I16/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-I16/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I16/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-I16/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I16/#returns_58","text":"I8 val","title":"Returns"},{"location":"builtin-I16/#i16_1","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I16/#returns_59","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I16/#returns_60","text":"I32 val","title":"Returns"},{"location":"builtin-I16/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I16/#returns_61","text":"I64 val","title":"Returns"},{"location":"builtin-I16/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I16/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-I16/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I16/#returns_63","text":"ILong val","title":"Returns"},{"location":"builtin-I16/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I16/#returns_64","text":"ISize val","title":"Returns"},{"location":"builtin-I16/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I16/#returns_65","text":"U8 val","title":"Returns"},{"location":"builtin-I16/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I16/#returns_66","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I16/#returns_67","text":"U32 val","title":"Returns"},{"location":"builtin-I16/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I16/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-I16/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I16/#returns_69","text":"U128 val","title":"Returns"},{"location":"builtin-I16/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I16/#returns_70","text":"ULong val","title":"Returns"},{"location":"builtin-I16/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I16/#returns_71","text":"USize val","title":"Returns"},{"location":"builtin-I16/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I16/#returns_72","text":"F32 val","title":"Returns"},{"location":"builtin-I16/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I16/#returns_73","text":"F64 val","title":"Returns"},{"location":"builtin-I16/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I16/#returns_74","text":"I8 val","title":"Returns"},{"location":"builtin-I16/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I16/#returns_75","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I16/#returns_76","text":"I32 val","title":"Returns"},{"location":"builtin-I16/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I16/#returns_77","text":"I64 val","title":"Returns"},{"location":"builtin-I16/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I16/#returns_78","text":"I128 val","title":"Returns"},{"location":"builtin-I16/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I16/#returns_79","text":"ILong val","title":"Returns"},{"location":"builtin-I16/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I16/#returns_80","text":"ISize val","title":"Returns"},{"location":"builtin-I16/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I16/#returns_81","text":"U8 val","title":"Returns"},{"location":"builtin-I16/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I16/#returns_82","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I16/#returns_83","text":"U32 val","title":"Returns"},{"location":"builtin-I16/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I16/#returns_84","text":"U64 val","title":"Returns"},{"location":"builtin-I16/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I16/#returns_85","text":"U128 val","title":"Returns"},{"location":"builtin-I16/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I16/#returns_86","text":"ULong val","title":"Returns"},{"location":"builtin-I16/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I16/#returns_87","text":"USize val","title":"Returns"},{"location":"builtin-I16/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I16/#returns_88","text":"F32 val","title":"Returns"},{"location":"builtin-I16/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I16/#returns_89","text":"F64 val","title":"Returns"},{"location":"builtin-I16/#compare","text":"fun box compare( that: I16 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I16/#parameters_40","text":"that: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_90","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I16/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I16/#_value","text":"fun box _value() : I16 val","title":"_value"},{"location":"builtin-I16/#returns_91","text":"I16 val","title":"Returns"},{"location":"builtin-I32/","text":"I32 [Source] primitive val I32 is _SignedInteger[I32 val, U32 val] val Implements _SignedInteger [ I32 val, U32 val] val Constructors create [Source] new val create( value: I32 val) : I32 val^ Parameters value: I32 val Returns I32 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I32 val^ Parameters a: A Returns I32 val^ min_value [Source] new val min_value() : I32 val^ Returns I32 val^ max_value [Source] new val max_value() : I32 val^ Returns I32 val^ Public Functions abs [Source] fun box abs() : U32 val Returns U32 val bit_reverse [Source] fun box bit_reverse() : I32 val Returns I32 val bswap [Source] fun box bswap() : I32 val Returns I32 val popcount [Source] fun box popcount() : U32 val Returns U32 val clz [Source] fun box clz() : U32 val Returns U32 val ctz [Source] fun box ctz() : U32 val Returns U32 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val Returns U32 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val Returns U32 val bitwidth [Source] fun box bitwidth() : U32 val Returns U32 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val max [Source] fun box max( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val addc [Source] fun box addc( y: I32 val) : (I32 val , Bool val) Parameters y: I32 val Returns ( I32 val , Bool val) subc [Source] fun box subc( y: I32 val) : (I32 val , Bool val) Parameters y: I32 val Returns ( I32 val , Bool val) mulc [Source] fun box mulc( y: I32 val) : (I32 val , Bool val) Parameters y: I32 val Returns ( I32 val , Bool val) divc [Source] fun box divc( y: I32 val) : (I32 val , Bool val) Parameters y: I32 val Returns ( I32 val , Bool val) remc [Source] fun box remc( y: I32 val) : (I32 val , Bool val) Parameters y: I32 val Returns ( I32 val , Bool val) add_partial [Source] fun box add_partial( y: I32 val) : I32 val ? Parameters y: I32 val Returns I32 val ? sub_partial [Source] fun box sub_partial( y: I32 val) : I32 val ? Parameters y: I32 val Returns I32 val ? mul_partial [Source] fun box mul_partial( y: I32 val) : I32 val ? Parameters y: I32 val Returns I32 val ? div_partial [Source] fun box div_partial( y: I32 val) : I32 val ? Parameters y: I32 val Returns I32 val ? rem_partial [Source] fun box rem_partial( y: I32 val) : I32 val ? Parameters y: I32 val Returns I32 val ? divrem_partial [Source] fun box divrem_partial( y: I32 val) : (I32 val , I32 val) ? Parameters y: I32 val Returns ( I32 val , I32 val) ? shl fun box shl( y: U32 val) : I32 val Parameters y: U32 val Returns I32 val shr fun box shr( y: U32 val) : I32 val Parameters y: U32 val Returns I32 val shl_unsafe fun box shl_unsafe( y: U32 val) : I32 val Parameters y: U32 val Returns I32 val shr_unsafe fun box shr_unsafe( y: U32 val) : I32 val Parameters y: U32 val Returns I32 val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val sub_unsafe fun box sub_unsafe( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val mul_unsafe fun box mul_unsafe( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val div_unsafe fun box div_unsafe( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val divrem_unsafe fun box divrem_unsafe( y: I32 val) : (I32 val , I32 val) Parameters y: I32 val Returns ( I32 val , I32 val) rem_unsafe fun box rem_unsafe( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val neg_unsafe fun box neg_unsafe() : I32 val Returns I32 val op_and fun box op_and( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val op_or fun box op_or( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val op_xor fun box op_xor( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val op_not fun box op_not() : I32 val Returns I32 val add fun box add( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val sub fun box sub( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val mul fun box mul( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val div fun box div( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val divrem fun box divrem( y: I32 val) : (I32 val , I32 val) Parameters y: I32 val Returns ( I32 val , I32 val) rem fun box rem( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val neg fun box neg() : I32 val Returns I32 val eq fun box eq( y: I32 val) : Bool val Parameters y: I32 val Returns Bool val ne fun box ne( y: I32 val) : Bool val Parameters y: I32 val Returns Bool val lt fun box lt( y: I32 val) : Bool val Parameters y: I32 val Returns Bool val le fun box le( y: I32 val) : Bool val Parameters y: I32 val Returns Bool val ge fun box ge( y: I32 val) : Bool val Parameters y: I32 val Returns Bool val gt fun box gt( y: I32 val) : Bool val Parameters y: I32 val Returns Bool val hash fun box hash() : USize val Returns USize val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: I32 val) : (Less val | Equal val | Greater val) Parameters that: I32 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : I32 val Returns I32 val","title":"primitive I32"},{"location":"builtin-I32/#i32","text":"[Source] primitive val I32 is _SignedInteger[I32 val, U32 val] val","title":"I32"},{"location":"builtin-I32/#implements","text":"_SignedInteger [ I32 val, U32 val] val","title":"Implements"},{"location":"builtin-I32/#constructors","text":"","title":"Constructors"},{"location":"builtin-I32/#create","text":"[Source] new val create( value: I32 val) : I32 val^","title":"create"},{"location":"builtin-I32/#parameters","text":"value: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I32 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I32/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I32/#returns_1","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#min_value","text":"[Source] new val min_value() : I32 val^","title":"min_value"},{"location":"builtin-I32/#returns_2","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#max_value","text":"[Source] new val max_value() : I32 val^","title":"max_value"},{"location":"builtin-I32/#returns_3","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I32/#abs","text":"[Source] fun box abs() : U32 val","title":"abs"},{"location":"builtin-I32/#returns_4","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#bit_reverse","text":"[Source] fun box bit_reverse() : I32 val","title":"bit_reverse"},{"location":"builtin-I32/#returns_5","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#bswap","text":"[Source] fun box bswap() : I32 val","title":"bswap"},{"location":"builtin-I32/#returns_6","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#popcount","text":"[Source] fun box popcount() : U32 val","title":"popcount"},{"location":"builtin-I32/#returns_7","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#clz","text":"[Source] fun box clz() : U32 val","title":"clz"},{"location":"builtin-I32/#returns_8","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#ctz","text":"[Source] fun box ctz() : U32 val","title":"ctz"},{"location":"builtin-I32/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val","title":"clz_unsafe"},{"location":"builtin-I32/#returns_10","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val","title":"ctz_unsafe"},{"location":"builtin-I32/#returns_11","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#bitwidth","text":"[Source] fun box bitwidth() : U32 val","title":"bitwidth"},{"location":"builtin-I32/#returns_12","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I32/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I32/#min","text":"[Source] fun box min( y: I32 val) : I32 val","title":"min"},{"location":"builtin-I32/#parameters_2","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_14","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#max","text":"[Source] fun box max( y: I32 val) : I32 val","title":"max"},{"location":"builtin-I32/#parameters_3","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_15","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#addc","text":"[Source] fun box addc( y: I32 val) : (I32 val , Bool val)","title":"addc"},{"location":"builtin-I32/#parameters_4","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_16","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#subc","text":"[Source] fun box subc( y: I32 val) : (I32 val , Bool val)","title":"subc"},{"location":"builtin-I32/#parameters_5","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_17","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#mulc","text":"[Source] fun box mulc( y: I32 val) : (I32 val , Bool val)","title":"mulc"},{"location":"builtin-I32/#parameters_6","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_18","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#divc","text":"[Source] fun box divc( y: I32 val) : (I32 val , Bool val)","title":"divc"},{"location":"builtin-I32/#parameters_7","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_19","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#remc","text":"[Source] fun box remc( y: I32 val) : (I32 val , Bool val)","title":"remc"},{"location":"builtin-I32/#parameters_8","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_20","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#add_partial","text":"[Source] fun box add_partial( y: I32 val) : I32 val ?","title":"add_partial"},{"location":"builtin-I32/#parameters_9","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_21","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#sub_partial","text":"[Source] fun box sub_partial( y: I32 val) : I32 val ?","title":"sub_partial"},{"location":"builtin-I32/#parameters_10","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_22","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#mul_partial","text":"[Source] fun box mul_partial( y: I32 val) : I32 val ?","title":"mul_partial"},{"location":"builtin-I32/#parameters_11","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_23","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#div_partial","text":"[Source] fun box div_partial( y: I32 val) : I32 val ?","title":"div_partial"},{"location":"builtin-I32/#parameters_12","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_24","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#rem_partial","text":"[Source] fun box rem_partial( y: I32 val) : I32 val ?","title":"rem_partial"},{"location":"builtin-I32/#parameters_13","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_25","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#divrem_partial","text":"[Source] fun box divrem_partial( y: I32 val) : (I32 val , I32 val) ?","title":"divrem_partial"},{"location":"builtin-I32/#parameters_14","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_26","text":"( I32 val , I32 val) ?","title":"Returns"},{"location":"builtin-I32/#shl","text":"fun box shl( y: U32 val) : I32 val","title":"shl"},{"location":"builtin-I32/#parameters_15","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_27","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#shr","text":"fun box shr( y: U32 val) : I32 val","title":"shr"},{"location":"builtin-I32/#parameters_16","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_28","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#shl_unsafe","text":"fun box shl_unsafe( y: U32 val) : I32 val","title":"shl_unsafe"},{"location":"builtin-I32/#parameters_17","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_29","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#shr_unsafe","text":"fun box shr_unsafe( y: U32 val) : I32 val","title":"shr_unsafe"},{"location":"builtin-I32/#parameters_18","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_30","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I32/#returns_31","text":"String iso^","title":"Returns"},{"location":"builtin-I32/#add_unsafe","text":"fun box add_unsafe( y: I32 val) : I32 val","title":"add_unsafe"},{"location":"builtin-I32/#parameters_19","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_32","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#sub_unsafe","text":"fun box sub_unsafe( y: I32 val) : I32 val","title":"sub_unsafe"},{"location":"builtin-I32/#parameters_20","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_33","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#mul_unsafe","text":"fun box mul_unsafe( y: I32 val) : I32 val","title":"mul_unsafe"},{"location":"builtin-I32/#parameters_21","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_34","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#div_unsafe","text":"fun box div_unsafe( y: I32 val) : I32 val","title":"div_unsafe"},{"location":"builtin-I32/#parameters_22","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_35","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#divrem_unsafe","text":"fun box divrem_unsafe( y: I32 val) : (I32 val , I32 val)","title":"divrem_unsafe"},{"location":"builtin-I32/#parameters_23","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_36","text":"( I32 val , I32 val)","title":"Returns"},{"location":"builtin-I32/#rem_unsafe","text":"fun box rem_unsafe( y: I32 val) : I32 val","title":"rem_unsafe"},{"location":"builtin-I32/#parameters_24","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_37","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#neg_unsafe","text":"fun box neg_unsafe() : I32 val","title":"neg_unsafe"},{"location":"builtin-I32/#returns_38","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_and","text":"fun box op_and( y: I32 val) : I32 val","title":"op_and"},{"location":"builtin-I32/#parameters_25","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_39","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_or","text":"fun box op_or( y: I32 val) : I32 val","title":"op_or"},{"location":"builtin-I32/#parameters_26","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_40","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_xor","text":"fun box op_xor( y: I32 val) : I32 val","title":"op_xor"},{"location":"builtin-I32/#parameters_27","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_41","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_not","text":"fun box op_not() : I32 val","title":"op_not"},{"location":"builtin-I32/#returns_42","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#add","text":"fun box add( y: I32 val) : I32 val","title":"add"},{"location":"builtin-I32/#parameters_28","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_43","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#sub","text":"fun box sub( y: I32 val) : I32 val","title":"sub"},{"location":"builtin-I32/#parameters_29","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_44","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#mul","text":"fun box mul( y: I32 val) : I32 val","title":"mul"},{"location":"builtin-I32/#parameters_30","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_45","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#div","text":"fun box div( y: I32 val) : I32 val","title":"div"},{"location":"builtin-I32/#parameters_31","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_46","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#divrem","text":"fun box divrem( y: I32 val) : (I32 val , I32 val)","title":"divrem"},{"location":"builtin-I32/#parameters_32","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_47","text":"( I32 val , I32 val)","title":"Returns"},{"location":"builtin-I32/#rem","text":"fun box rem( y: I32 val) : I32 val","title":"rem"},{"location":"builtin-I32/#parameters_33","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_48","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#neg","text":"fun box neg() : I32 val","title":"neg"},{"location":"builtin-I32/#returns_49","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#eq","text":"fun box eq( y: I32 val) : Bool val","title":"eq"},{"location":"builtin-I32/#parameters_34","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_50","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#ne","text":"fun box ne( y: I32 val) : Bool val","title":"ne"},{"location":"builtin-I32/#parameters_35","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_51","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#lt","text":"fun box lt( y: I32 val) : Bool val","title":"lt"},{"location":"builtin-I32/#parameters_36","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_52","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#le","text":"fun box le( y: I32 val) : Bool val","title":"le"},{"location":"builtin-I32/#parameters_37","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#ge","text":"fun box ge( y: I32 val) : Bool val","title":"ge"},{"location":"builtin-I32/#parameters_38","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#gt","text":"fun box gt( y: I32 val) : Bool val","title":"gt"},{"location":"builtin-I32/#parameters_39","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-I32/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-I32/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I32/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-I32/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I32/#returns_58","text":"I8 val","title":"Returns"},{"location":"builtin-I32/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I32/#returns_59","text":"I16 val","title":"Returns"},{"location":"builtin-I32/#i32_1","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I32/#returns_60","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I32/#returns_61","text":"I64 val","title":"Returns"},{"location":"builtin-I32/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I32/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-I32/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I32/#returns_63","text":"ILong val","title":"Returns"},{"location":"builtin-I32/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I32/#returns_64","text":"ISize val","title":"Returns"},{"location":"builtin-I32/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I32/#returns_65","text":"U8 val","title":"Returns"},{"location":"builtin-I32/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I32/#returns_66","text":"U16 val","title":"Returns"},{"location":"builtin-I32/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I32/#returns_67","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I32/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-I32/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I32/#returns_69","text":"U128 val","title":"Returns"},{"location":"builtin-I32/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I32/#returns_70","text":"ULong val","title":"Returns"},{"location":"builtin-I32/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I32/#returns_71","text":"USize val","title":"Returns"},{"location":"builtin-I32/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I32/#returns_72","text":"F32 val","title":"Returns"},{"location":"builtin-I32/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I32/#returns_73","text":"F64 val","title":"Returns"},{"location":"builtin-I32/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I32/#returns_74","text":"I8 val","title":"Returns"},{"location":"builtin-I32/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I32/#returns_75","text":"I16 val","title":"Returns"},{"location":"builtin-I32/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I32/#returns_76","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I32/#returns_77","text":"I64 val","title":"Returns"},{"location":"builtin-I32/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I32/#returns_78","text":"I128 val","title":"Returns"},{"location":"builtin-I32/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I32/#returns_79","text":"ILong val","title":"Returns"},{"location":"builtin-I32/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I32/#returns_80","text":"ISize val","title":"Returns"},{"location":"builtin-I32/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I32/#returns_81","text":"U8 val","title":"Returns"},{"location":"builtin-I32/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I32/#returns_82","text":"U16 val","title":"Returns"},{"location":"builtin-I32/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I32/#returns_83","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I32/#returns_84","text":"U64 val","title":"Returns"},{"location":"builtin-I32/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I32/#returns_85","text":"U128 val","title":"Returns"},{"location":"builtin-I32/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I32/#returns_86","text":"ULong val","title":"Returns"},{"location":"builtin-I32/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I32/#returns_87","text":"USize val","title":"Returns"},{"location":"builtin-I32/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I32/#returns_88","text":"F32 val","title":"Returns"},{"location":"builtin-I32/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I32/#returns_89","text":"F64 val","title":"Returns"},{"location":"builtin-I32/#compare","text":"fun box compare( that: I32 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I32/#parameters_40","text":"that: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_90","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I32/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I32/#_value","text":"fun box _value() : I32 val","title":"_value"},{"location":"builtin-I32/#returns_91","text":"I32 val","title":"Returns"},{"location":"builtin-I64/","text":"I64 [Source] primitive val I64 is _SignedInteger[I64 val, U64 val] val Implements _SignedInteger [ I64 val, U64 val] val Constructors create [Source] new val create( value: I64 val) : I64 val^ Parameters value: I64 val Returns I64 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I64 val^ Parameters a: A Returns I64 val^ min_value [Source] new val min_value() : I64 val^ Returns I64 val^ max_value [Source] new val max_value() : I64 val^ Returns I64 val^ Public Functions abs [Source] fun box abs() : U64 val Returns U64 val bit_reverse [Source] fun box bit_reverse() : I64 val Returns I64 val bswap [Source] fun box bswap() : I64 val Returns I64 val popcount [Source] fun box popcount() : U64 val Returns U64 val clz [Source] fun box clz() : U64 val Returns U64 val ctz [Source] fun box ctz() : U64 val Returns U64 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val Returns U64 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val Returns U64 val bitwidth [Source] fun box bitwidth() : U64 val Returns U64 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val max [Source] fun box max( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val hash [Source] fun box hash() : USize val Returns USize val addc [Source] fun box addc( y: I64 val) : (I64 val , Bool val) Parameters y: I64 val Returns ( I64 val , Bool val) subc [Source] fun box subc( y: I64 val) : (I64 val , Bool val) Parameters y: I64 val Returns ( I64 val , Bool val) mulc [Source] fun box mulc( y: I64 val) : (I64 val , Bool val) Parameters y: I64 val Returns ( I64 val , Bool val) divc [Source] fun box divc( y: I64 val) : (I64 val , Bool val) Parameters y: I64 val Returns ( I64 val , Bool val) remc [Source] fun box remc( y: I64 val) : (I64 val , Bool val) Parameters y: I64 val Returns ( I64 val , Bool val) add_partial [Source] fun box add_partial( y: I64 val) : I64 val ? Parameters y: I64 val Returns I64 val ? sub_partial [Source] fun box sub_partial( y: I64 val) : I64 val ? Parameters y: I64 val Returns I64 val ? mul_partial [Source] fun box mul_partial( y: I64 val) : I64 val ? Parameters y: I64 val Returns I64 val ? div_partial [Source] fun box div_partial( y: I64 val) : I64 val ? Parameters y: I64 val Returns I64 val ? rem_partial [Source] fun box rem_partial( y: I64 val) : I64 val ? Parameters y: I64 val Returns I64 val ? divrem_partial [Source] fun box divrem_partial( y: I64 val) : (I64 val , I64 val) ? Parameters y: I64 val Returns ( I64 val , I64 val) ? shl fun box shl( y: U64 val) : I64 val Parameters y: U64 val Returns I64 val shr fun box shr( y: U64 val) : I64 val Parameters y: U64 val Returns I64 val shl_unsafe fun box shl_unsafe( y: U64 val) : I64 val Parameters y: U64 val Returns I64 val shr_unsafe fun box shr_unsafe( y: U64 val) : I64 val Parameters y: U64 val Returns I64 val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val sub_unsafe fun box sub_unsafe( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val mul_unsafe fun box mul_unsafe( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val div_unsafe fun box div_unsafe( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val divrem_unsafe fun box divrem_unsafe( y: I64 val) : (I64 val , I64 val) Parameters y: I64 val Returns ( I64 val , I64 val) rem_unsafe fun box rem_unsafe( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val neg_unsafe fun box neg_unsafe() : I64 val Returns I64 val op_and fun box op_and( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val op_or fun box op_or( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val op_xor fun box op_xor( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val op_not fun box op_not() : I64 val Returns I64 val add fun box add( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val sub fun box sub( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val mul fun box mul( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val div fun box div( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val divrem fun box divrem( y: I64 val) : (I64 val , I64 val) Parameters y: I64 val Returns ( I64 val , I64 val) rem fun box rem( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val neg fun box neg() : I64 val Returns I64 val eq fun box eq( y: I64 val) : Bool val Parameters y: I64 val Returns Bool val ne fun box ne( y: I64 val) : Bool val Parameters y: I64 val Returns Bool val lt fun box lt( y: I64 val) : Bool val Parameters y: I64 val Returns Bool val le fun box le( y: I64 val) : Bool val Parameters y: I64 val Returns Bool val ge fun box ge( y: I64 val) : Bool val Parameters y: I64 val Returns Bool val gt fun box gt( y: I64 val) : Bool val Parameters y: I64 val Returns Bool val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: I64 val) : (Less val | Equal val | Greater val) Parameters that: I64 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : I64 val Returns I64 val","title":"primitive I64"},{"location":"builtin-I64/#i64","text":"[Source] primitive val I64 is _SignedInteger[I64 val, U64 val] val","title":"I64"},{"location":"builtin-I64/#implements","text":"_SignedInteger [ I64 val, U64 val] val","title":"Implements"},{"location":"builtin-I64/#constructors","text":"","title":"Constructors"},{"location":"builtin-I64/#create","text":"[Source] new val create( value: I64 val) : I64 val^","title":"create"},{"location":"builtin-I64/#parameters","text":"value: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I64 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I64/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I64/#returns_1","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#min_value","text":"[Source] new val min_value() : I64 val^","title":"min_value"},{"location":"builtin-I64/#returns_2","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#max_value","text":"[Source] new val max_value() : I64 val^","title":"max_value"},{"location":"builtin-I64/#returns_3","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I64/#abs","text":"[Source] fun box abs() : U64 val","title":"abs"},{"location":"builtin-I64/#returns_4","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#bit_reverse","text":"[Source] fun box bit_reverse() : I64 val","title":"bit_reverse"},{"location":"builtin-I64/#returns_5","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#bswap","text":"[Source] fun box bswap() : I64 val","title":"bswap"},{"location":"builtin-I64/#returns_6","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#popcount","text":"[Source] fun box popcount() : U64 val","title":"popcount"},{"location":"builtin-I64/#returns_7","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#clz","text":"[Source] fun box clz() : U64 val","title":"clz"},{"location":"builtin-I64/#returns_8","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#ctz","text":"[Source] fun box ctz() : U64 val","title":"ctz"},{"location":"builtin-I64/#returns_9","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val","title":"clz_unsafe"},{"location":"builtin-I64/#returns_10","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val","title":"ctz_unsafe"},{"location":"builtin-I64/#returns_11","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#bitwidth","text":"[Source] fun box bitwidth() : U64 val","title":"bitwidth"},{"location":"builtin-I64/#returns_12","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I64/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I64/#min","text":"[Source] fun box min( y: I64 val) : I64 val","title":"min"},{"location":"builtin-I64/#parameters_2","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_14","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#max","text":"[Source] fun box max( y: I64 val) : I64 val","title":"max"},{"location":"builtin-I64/#parameters_3","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_15","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-I64/#returns_16","text":"USize val","title":"Returns"},{"location":"builtin-I64/#addc","text":"[Source] fun box addc( y: I64 val) : (I64 val , Bool val)","title":"addc"},{"location":"builtin-I64/#parameters_4","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_17","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#subc","text":"[Source] fun box subc( y: I64 val) : (I64 val , Bool val)","title":"subc"},{"location":"builtin-I64/#parameters_5","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_18","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#mulc","text":"[Source] fun box mulc( y: I64 val) : (I64 val , Bool val)","title":"mulc"},{"location":"builtin-I64/#parameters_6","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_19","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#divc","text":"[Source] fun box divc( y: I64 val) : (I64 val , Bool val)","title":"divc"},{"location":"builtin-I64/#parameters_7","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_20","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#remc","text":"[Source] fun box remc( y: I64 val) : (I64 val , Bool val)","title":"remc"},{"location":"builtin-I64/#parameters_8","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_21","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#add_partial","text":"[Source] fun box add_partial( y: I64 val) : I64 val ?","title":"add_partial"},{"location":"builtin-I64/#parameters_9","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_22","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#sub_partial","text":"[Source] fun box sub_partial( y: I64 val) : I64 val ?","title":"sub_partial"},{"location":"builtin-I64/#parameters_10","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_23","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#mul_partial","text":"[Source] fun box mul_partial( y: I64 val) : I64 val ?","title":"mul_partial"},{"location":"builtin-I64/#parameters_11","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_24","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#div_partial","text":"[Source] fun box div_partial( y: I64 val) : I64 val ?","title":"div_partial"},{"location":"builtin-I64/#parameters_12","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_25","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#rem_partial","text":"[Source] fun box rem_partial( y: I64 val) : I64 val ?","title":"rem_partial"},{"location":"builtin-I64/#parameters_13","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_26","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#divrem_partial","text":"[Source] fun box divrem_partial( y: I64 val) : (I64 val , I64 val) ?","title":"divrem_partial"},{"location":"builtin-I64/#parameters_14","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_27","text":"( I64 val , I64 val) ?","title":"Returns"},{"location":"builtin-I64/#shl","text":"fun box shl( y: U64 val) : I64 val","title":"shl"},{"location":"builtin-I64/#parameters_15","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_28","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#shr","text":"fun box shr( y: U64 val) : I64 val","title":"shr"},{"location":"builtin-I64/#parameters_16","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_29","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#shl_unsafe","text":"fun box shl_unsafe( y: U64 val) : I64 val","title":"shl_unsafe"},{"location":"builtin-I64/#parameters_17","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_30","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#shr_unsafe","text":"fun box shr_unsafe( y: U64 val) : I64 val","title":"shr_unsafe"},{"location":"builtin-I64/#parameters_18","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_31","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I64/#returns_32","text":"String iso^","title":"Returns"},{"location":"builtin-I64/#add_unsafe","text":"fun box add_unsafe( y: I64 val) : I64 val","title":"add_unsafe"},{"location":"builtin-I64/#parameters_19","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_33","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#sub_unsafe","text":"fun box sub_unsafe( y: I64 val) : I64 val","title":"sub_unsafe"},{"location":"builtin-I64/#parameters_20","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_34","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#mul_unsafe","text":"fun box mul_unsafe( y: I64 val) : I64 val","title":"mul_unsafe"},{"location":"builtin-I64/#parameters_21","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_35","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#div_unsafe","text":"fun box div_unsafe( y: I64 val) : I64 val","title":"div_unsafe"},{"location":"builtin-I64/#parameters_22","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_36","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#divrem_unsafe","text":"fun box divrem_unsafe( y: I64 val) : (I64 val , I64 val)","title":"divrem_unsafe"},{"location":"builtin-I64/#parameters_23","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_37","text":"( I64 val , I64 val)","title":"Returns"},{"location":"builtin-I64/#rem_unsafe","text":"fun box rem_unsafe( y: I64 val) : I64 val","title":"rem_unsafe"},{"location":"builtin-I64/#parameters_24","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_38","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#neg_unsafe","text":"fun box neg_unsafe() : I64 val","title":"neg_unsafe"},{"location":"builtin-I64/#returns_39","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_and","text":"fun box op_and( y: I64 val) : I64 val","title":"op_and"},{"location":"builtin-I64/#parameters_25","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_40","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_or","text":"fun box op_or( y: I64 val) : I64 val","title":"op_or"},{"location":"builtin-I64/#parameters_26","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_41","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_xor","text":"fun box op_xor( y: I64 val) : I64 val","title":"op_xor"},{"location":"builtin-I64/#parameters_27","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_42","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_not","text":"fun box op_not() : I64 val","title":"op_not"},{"location":"builtin-I64/#returns_43","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#add","text":"fun box add( y: I64 val) : I64 val","title":"add"},{"location":"builtin-I64/#parameters_28","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_44","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#sub","text":"fun box sub( y: I64 val) : I64 val","title":"sub"},{"location":"builtin-I64/#parameters_29","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_45","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#mul","text":"fun box mul( y: I64 val) : I64 val","title":"mul"},{"location":"builtin-I64/#parameters_30","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_46","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#div","text":"fun box div( y: I64 val) : I64 val","title":"div"},{"location":"builtin-I64/#parameters_31","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_47","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#divrem","text":"fun box divrem( y: I64 val) : (I64 val , I64 val)","title":"divrem"},{"location":"builtin-I64/#parameters_32","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_48","text":"( I64 val , I64 val)","title":"Returns"},{"location":"builtin-I64/#rem","text":"fun box rem( y: I64 val) : I64 val","title":"rem"},{"location":"builtin-I64/#parameters_33","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_49","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#neg","text":"fun box neg() : I64 val","title":"neg"},{"location":"builtin-I64/#returns_50","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#eq","text":"fun box eq( y: I64 val) : Bool val","title":"eq"},{"location":"builtin-I64/#parameters_34","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_51","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#ne","text":"fun box ne( y: I64 val) : Bool val","title":"ne"},{"location":"builtin-I64/#parameters_35","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_52","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#lt","text":"fun box lt( y: I64 val) : Bool val","title":"lt"},{"location":"builtin-I64/#parameters_36","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#le","text":"fun box le( y: I64 val) : Bool val","title":"le"},{"location":"builtin-I64/#parameters_37","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#ge","text":"fun box ge( y: I64 val) : Bool val","title":"ge"},{"location":"builtin-I64/#parameters_38","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#gt","text":"fun box gt( y: I64 val) : Bool val","title":"gt"},{"location":"builtin-I64/#parameters_39","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I64/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I64/#returns_58","text":"I8 val","title":"Returns"},{"location":"builtin-I64/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I64/#returns_59","text":"I16 val","title":"Returns"},{"location":"builtin-I64/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I64/#returns_60","text":"I32 val","title":"Returns"},{"location":"builtin-I64/#i64_1","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I64/#returns_61","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I64/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-I64/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I64/#returns_63","text":"ILong val","title":"Returns"},{"location":"builtin-I64/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I64/#returns_64","text":"ISize val","title":"Returns"},{"location":"builtin-I64/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I64/#returns_65","text":"U8 val","title":"Returns"},{"location":"builtin-I64/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I64/#returns_66","text":"U16 val","title":"Returns"},{"location":"builtin-I64/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I64/#returns_67","text":"U32 val","title":"Returns"},{"location":"builtin-I64/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I64/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I64/#returns_69","text":"U128 val","title":"Returns"},{"location":"builtin-I64/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I64/#returns_70","text":"ULong val","title":"Returns"},{"location":"builtin-I64/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I64/#returns_71","text":"USize val","title":"Returns"},{"location":"builtin-I64/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I64/#returns_72","text":"F32 val","title":"Returns"},{"location":"builtin-I64/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I64/#returns_73","text":"F64 val","title":"Returns"},{"location":"builtin-I64/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I64/#returns_74","text":"I8 val","title":"Returns"},{"location":"builtin-I64/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I64/#returns_75","text":"I16 val","title":"Returns"},{"location":"builtin-I64/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I64/#returns_76","text":"I32 val","title":"Returns"},{"location":"builtin-I64/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I64/#returns_77","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I64/#returns_78","text":"I128 val","title":"Returns"},{"location":"builtin-I64/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I64/#returns_79","text":"ILong val","title":"Returns"},{"location":"builtin-I64/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I64/#returns_80","text":"ISize val","title":"Returns"},{"location":"builtin-I64/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I64/#returns_81","text":"U8 val","title":"Returns"},{"location":"builtin-I64/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I64/#returns_82","text":"U16 val","title":"Returns"},{"location":"builtin-I64/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I64/#returns_83","text":"U32 val","title":"Returns"},{"location":"builtin-I64/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I64/#returns_84","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I64/#returns_85","text":"U128 val","title":"Returns"},{"location":"builtin-I64/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I64/#returns_86","text":"ULong val","title":"Returns"},{"location":"builtin-I64/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I64/#returns_87","text":"USize val","title":"Returns"},{"location":"builtin-I64/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I64/#returns_88","text":"F32 val","title":"Returns"},{"location":"builtin-I64/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I64/#returns_89","text":"F64 val","title":"Returns"},{"location":"builtin-I64/#compare","text":"fun box compare( that: I64 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I64/#parameters_40","text":"that: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_90","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I64/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I64/#_value","text":"fun box _value() : I64 val","title":"_value"},{"location":"builtin-I64/#returns_91","text":"I64 val","title":"Returns"},{"location":"builtin-I8/","text":"I8 [Source] primitive val I8 is _SignedInteger[I8 val, U8 val] val Implements _SignedInteger [ I8 val, U8 val] val Constructors create [Source] new val create( value: I8 val) : I8 val^ Parameters value: I8 val Returns I8 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I8 val^ Parameters a: A Returns I8 val^ min_value [Source] new val min_value() : I8 val^ Returns I8 val^ max_value [Source] new val max_value() : I8 val^ Returns I8 val^ Public Functions abs [Source] fun box abs() : U8 val Returns U8 val bit_reverse [Source] fun box bit_reverse() : I8 val Returns I8 val bswap [Source] fun box bswap() : I8 val Returns I8 val popcount [Source] fun box popcount() : U8 val Returns U8 val clz [Source] fun box clz() : U8 val Returns U8 val ctz [Source] fun box ctz() : U8 val Returns U8 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val Returns U8 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val Returns U8 val bitwidth [Source] fun box bitwidth() : U8 val Returns U8 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val max [Source] fun box max( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val addc [Source] fun box addc( y: I8 val) : (I8 val , Bool val) Parameters y: I8 val Returns ( I8 val , Bool val) subc [Source] fun box subc( y: I8 val) : (I8 val , Bool val) Parameters y: I8 val Returns ( I8 val , Bool val) mulc [Source] fun box mulc( y: I8 val) : (I8 val , Bool val) Parameters y: I8 val Returns ( I8 val , Bool val) divc [Source] fun box divc( y: I8 val) : (I8 val , Bool val) Parameters y: I8 val Returns ( I8 val , Bool val) remc [Source] fun box remc( y: I8 val) : (I8 val , Bool val) Parameters y: I8 val Returns ( I8 val , Bool val) add_partial [Source] fun box add_partial( y: I8 val) : I8 val ? Parameters y: I8 val Returns I8 val ? sub_partial [Source] fun box sub_partial( y: I8 val) : I8 val ? Parameters y: I8 val Returns I8 val ? mul_partial [Source] fun box mul_partial( y: I8 val) : I8 val ? Parameters y: I8 val Returns I8 val ? div_partial [Source] fun box div_partial( y: I8 val) : I8 val ? Parameters y: I8 val Returns I8 val ? rem_partial [Source] fun box rem_partial( y: I8 val) : I8 val ? Parameters y: I8 val Returns I8 val ? divrem_partial [Source] fun box divrem_partial( y: I8 val) : (I8 val , I8 val) ? Parameters y: I8 val Returns ( I8 val , I8 val) ? shl fun box shl( y: U8 val) : I8 val Parameters y: U8 val Returns I8 val shr fun box shr( y: U8 val) : I8 val Parameters y: U8 val Returns I8 val shl_unsafe fun box shl_unsafe( y: U8 val) : I8 val Parameters y: U8 val Returns I8 val shr_unsafe fun box shr_unsafe( y: U8 val) : I8 val Parameters y: U8 val Returns I8 val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val sub_unsafe fun box sub_unsafe( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val mul_unsafe fun box mul_unsafe( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val div_unsafe fun box div_unsafe( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val divrem_unsafe fun box divrem_unsafe( y: I8 val) : (I8 val , I8 val) Parameters y: I8 val Returns ( I8 val , I8 val) rem_unsafe fun box rem_unsafe( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val neg_unsafe fun box neg_unsafe() : I8 val Returns I8 val op_and fun box op_and( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val op_or fun box op_or( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val op_xor fun box op_xor( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val op_not fun box op_not() : I8 val Returns I8 val add fun box add( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val sub fun box sub( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val mul fun box mul( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val div fun box div( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val divrem fun box divrem( y: I8 val) : (I8 val , I8 val) Parameters y: I8 val Returns ( I8 val , I8 val) rem fun box rem( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val neg fun box neg() : I8 val Returns I8 val eq fun box eq( y: I8 val) : Bool val Parameters y: I8 val Returns Bool val ne fun box ne( y: I8 val) : Bool val Parameters y: I8 val Returns Bool val lt fun box lt( y: I8 val) : Bool val Parameters y: I8 val Returns Bool val le fun box le( y: I8 val) : Bool val Parameters y: I8 val Returns Bool val ge fun box ge( y: I8 val) : Bool val Parameters y: I8 val Returns Bool val gt fun box gt( y: I8 val) : Bool val Parameters y: I8 val Returns Bool val hash fun box hash() : USize val Returns USize val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: I8 val) : (Less val | Equal val | Greater val) Parameters that: I8 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : I8 val Returns I8 val","title":"primitive I8"},{"location":"builtin-I8/#i8","text":"[Source] primitive val I8 is _SignedInteger[I8 val, U8 val] val","title":"I8"},{"location":"builtin-I8/#implements","text":"_SignedInteger [ I8 val, U8 val] val","title":"Implements"},{"location":"builtin-I8/#constructors","text":"","title":"Constructors"},{"location":"builtin-I8/#create","text":"[Source] new val create( value: I8 val) : I8 val^","title":"create"},{"location":"builtin-I8/#parameters","text":"value: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I8 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I8/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I8/#returns_1","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#min_value","text":"[Source] new val min_value() : I8 val^","title":"min_value"},{"location":"builtin-I8/#returns_2","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#max_value","text":"[Source] new val max_value() : I8 val^","title":"max_value"},{"location":"builtin-I8/#returns_3","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I8/#abs","text":"[Source] fun box abs() : U8 val","title":"abs"},{"location":"builtin-I8/#returns_4","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#bit_reverse","text":"[Source] fun box bit_reverse() : I8 val","title":"bit_reverse"},{"location":"builtin-I8/#returns_5","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#bswap","text":"[Source] fun box bswap() : I8 val","title":"bswap"},{"location":"builtin-I8/#returns_6","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#popcount","text":"[Source] fun box popcount() : U8 val","title":"popcount"},{"location":"builtin-I8/#returns_7","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#clz","text":"[Source] fun box clz() : U8 val","title":"clz"},{"location":"builtin-I8/#returns_8","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#ctz","text":"[Source] fun box ctz() : U8 val","title":"ctz"},{"location":"builtin-I8/#returns_9","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val","title":"clz_unsafe"},{"location":"builtin-I8/#returns_10","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val","title":"ctz_unsafe"},{"location":"builtin-I8/#returns_11","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#bitwidth","text":"[Source] fun box bitwidth() : U8 val","title":"bitwidth"},{"location":"builtin-I8/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I8/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I8/#min","text":"[Source] fun box min( y: I8 val) : I8 val","title":"min"},{"location":"builtin-I8/#parameters_2","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_14","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#max","text":"[Source] fun box max( y: I8 val) : I8 val","title":"max"},{"location":"builtin-I8/#parameters_3","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_15","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#addc","text":"[Source] fun box addc( y: I8 val) : (I8 val , Bool val)","title":"addc"},{"location":"builtin-I8/#parameters_4","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_16","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#subc","text":"[Source] fun box subc( y: I8 val) : (I8 val , Bool val)","title":"subc"},{"location":"builtin-I8/#parameters_5","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_17","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#mulc","text":"[Source] fun box mulc( y: I8 val) : (I8 val , Bool val)","title":"mulc"},{"location":"builtin-I8/#parameters_6","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_18","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#divc","text":"[Source] fun box divc( y: I8 val) : (I8 val , Bool val)","title":"divc"},{"location":"builtin-I8/#parameters_7","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_19","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#remc","text":"[Source] fun box remc( y: I8 val) : (I8 val , Bool val)","title":"remc"},{"location":"builtin-I8/#parameters_8","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_20","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#add_partial","text":"[Source] fun box add_partial( y: I8 val) : I8 val ?","title":"add_partial"},{"location":"builtin-I8/#parameters_9","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_21","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#sub_partial","text":"[Source] fun box sub_partial( y: I8 val) : I8 val ?","title":"sub_partial"},{"location":"builtin-I8/#parameters_10","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_22","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#mul_partial","text":"[Source] fun box mul_partial( y: I8 val) : I8 val ?","title":"mul_partial"},{"location":"builtin-I8/#parameters_11","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_23","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#div_partial","text":"[Source] fun box div_partial( y: I8 val) : I8 val ?","title":"div_partial"},{"location":"builtin-I8/#parameters_12","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_24","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#rem_partial","text":"[Source] fun box rem_partial( y: I8 val) : I8 val ?","title":"rem_partial"},{"location":"builtin-I8/#parameters_13","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_25","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#divrem_partial","text":"[Source] fun box divrem_partial( y: I8 val) : (I8 val , I8 val) ?","title":"divrem_partial"},{"location":"builtin-I8/#parameters_14","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_26","text":"( I8 val , I8 val) ?","title":"Returns"},{"location":"builtin-I8/#shl","text":"fun box shl( y: U8 val) : I8 val","title":"shl"},{"location":"builtin-I8/#parameters_15","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_27","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#shr","text":"fun box shr( y: U8 val) : I8 val","title":"shr"},{"location":"builtin-I8/#parameters_16","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_28","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#shl_unsafe","text":"fun box shl_unsafe( y: U8 val) : I8 val","title":"shl_unsafe"},{"location":"builtin-I8/#parameters_17","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_29","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#shr_unsafe","text":"fun box shr_unsafe( y: U8 val) : I8 val","title":"shr_unsafe"},{"location":"builtin-I8/#parameters_18","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_30","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I8/#returns_31","text":"String iso^","title":"Returns"},{"location":"builtin-I8/#add_unsafe","text":"fun box add_unsafe( y: I8 val) : I8 val","title":"add_unsafe"},{"location":"builtin-I8/#parameters_19","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_32","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#sub_unsafe","text":"fun box sub_unsafe( y: I8 val) : I8 val","title":"sub_unsafe"},{"location":"builtin-I8/#parameters_20","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_33","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#mul_unsafe","text":"fun box mul_unsafe( y: I8 val) : I8 val","title":"mul_unsafe"},{"location":"builtin-I8/#parameters_21","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_34","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#div_unsafe","text":"fun box div_unsafe( y: I8 val) : I8 val","title":"div_unsafe"},{"location":"builtin-I8/#parameters_22","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_35","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#divrem_unsafe","text":"fun box divrem_unsafe( y: I8 val) : (I8 val , I8 val)","title":"divrem_unsafe"},{"location":"builtin-I8/#parameters_23","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_36","text":"( I8 val , I8 val)","title":"Returns"},{"location":"builtin-I8/#rem_unsafe","text":"fun box rem_unsafe( y: I8 val) : I8 val","title":"rem_unsafe"},{"location":"builtin-I8/#parameters_24","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_37","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#neg_unsafe","text":"fun box neg_unsafe() : I8 val","title":"neg_unsafe"},{"location":"builtin-I8/#returns_38","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_and","text":"fun box op_and( y: I8 val) : I8 val","title":"op_and"},{"location":"builtin-I8/#parameters_25","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_39","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_or","text":"fun box op_or( y: I8 val) : I8 val","title":"op_or"},{"location":"builtin-I8/#parameters_26","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_40","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_xor","text":"fun box op_xor( y: I8 val) : I8 val","title":"op_xor"},{"location":"builtin-I8/#parameters_27","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_41","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_not","text":"fun box op_not() : I8 val","title":"op_not"},{"location":"builtin-I8/#returns_42","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#add","text":"fun box add( y: I8 val) : I8 val","title":"add"},{"location":"builtin-I8/#parameters_28","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_43","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#sub","text":"fun box sub( y: I8 val) : I8 val","title":"sub"},{"location":"builtin-I8/#parameters_29","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_44","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#mul","text":"fun box mul( y: I8 val) : I8 val","title":"mul"},{"location":"builtin-I8/#parameters_30","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_45","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#div","text":"fun box div( y: I8 val) : I8 val","title":"div"},{"location":"builtin-I8/#parameters_31","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_46","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#divrem","text":"fun box divrem( y: I8 val) : (I8 val , I8 val)","title":"divrem"},{"location":"builtin-I8/#parameters_32","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_47","text":"( I8 val , I8 val)","title":"Returns"},{"location":"builtin-I8/#rem","text":"fun box rem( y: I8 val) : I8 val","title":"rem"},{"location":"builtin-I8/#parameters_33","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_48","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#neg","text":"fun box neg() : I8 val","title":"neg"},{"location":"builtin-I8/#returns_49","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#eq","text":"fun box eq( y: I8 val) : Bool val","title":"eq"},{"location":"builtin-I8/#parameters_34","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_50","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#ne","text":"fun box ne( y: I8 val) : Bool val","title":"ne"},{"location":"builtin-I8/#parameters_35","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_51","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#lt","text":"fun box lt( y: I8 val) : Bool val","title":"lt"},{"location":"builtin-I8/#parameters_36","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_52","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#le","text":"fun box le( y: I8 val) : Bool val","title":"le"},{"location":"builtin-I8/#parameters_37","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#ge","text":"fun box ge( y: I8 val) : Bool val","title":"ge"},{"location":"builtin-I8/#parameters_38","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#gt","text":"fun box gt( y: I8 val) : Bool val","title":"gt"},{"location":"builtin-I8/#parameters_39","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-I8/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-I8/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I8/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-I8/#i8_1","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I8/#returns_58","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I8/#returns_59","text":"I16 val","title":"Returns"},{"location":"builtin-I8/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I8/#returns_60","text":"I32 val","title":"Returns"},{"location":"builtin-I8/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I8/#returns_61","text":"I64 val","title":"Returns"},{"location":"builtin-I8/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I8/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-I8/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I8/#returns_63","text":"ILong val","title":"Returns"},{"location":"builtin-I8/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I8/#returns_64","text":"ISize val","title":"Returns"},{"location":"builtin-I8/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I8/#returns_65","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I8/#returns_66","text":"U16 val","title":"Returns"},{"location":"builtin-I8/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I8/#returns_67","text":"U32 val","title":"Returns"},{"location":"builtin-I8/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I8/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-I8/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I8/#returns_69","text":"U128 val","title":"Returns"},{"location":"builtin-I8/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I8/#returns_70","text":"ULong val","title":"Returns"},{"location":"builtin-I8/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I8/#returns_71","text":"USize val","title":"Returns"},{"location":"builtin-I8/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I8/#returns_72","text":"F32 val","title":"Returns"},{"location":"builtin-I8/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I8/#returns_73","text":"F64 val","title":"Returns"},{"location":"builtin-I8/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I8/#returns_74","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I8/#returns_75","text":"I16 val","title":"Returns"},{"location":"builtin-I8/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I8/#returns_76","text":"I32 val","title":"Returns"},{"location":"builtin-I8/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I8/#returns_77","text":"I64 val","title":"Returns"},{"location":"builtin-I8/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I8/#returns_78","text":"I128 val","title":"Returns"},{"location":"builtin-I8/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I8/#returns_79","text":"ILong val","title":"Returns"},{"location":"builtin-I8/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I8/#returns_80","text":"ISize val","title":"Returns"},{"location":"builtin-I8/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I8/#returns_81","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I8/#returns_82","text":"U16 val","title":"Returns"},{"location":"builtin-I8/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I8/#returns_83","text":"U32 val","title":"Returns"},{"location":"builtin-I8/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I8/#returns_84","text":"U64 val","title":"Returns"},{"location":"builtin-I8/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I8/#returns_85","text":"U128 val","title":"Returns"},{"location":"builtin-I8/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I8/#returns_86","text":"ULong val","title":"Returns"},{"location":"builtin-I8/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I8/#returns_87","text":"USize val","title":"Returns"},{"location":"builtin-I8/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I8/#returns_88","text":"F32 val","title":"Returns"},{"location":"builtin-I8/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I8/#returns_89","text":"F64 val","title":"Returns"},{"location":"builtin-I8/#compare","text":"fun box compare( that: I8 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I8/#parameters_40","text":"that: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_90","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I8/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I8/#_value","text":"fun box _value() : I8 val","title":"_value"},{"location":"builtin-I8/#returns_91","text":"I8 val","title":"Returns"},{"location":"builtin-ILong/","text":"ILong [Source] primitive val ILong is _SignedInteger[ILong val, ULong val] val Implements _SignedInteger [ ILong val, ULong val] val Constructors create [Source] new val create( value: ILong val) : ILong val^ Parameters value: ILong val Returns ILong val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : ILong val^ Parameters a: A Returns ILong val^ min_value [Source] new val min_value() : ILong val^ Returns ILong val^ max_value [Source] new val max_value() : ILong val^ Returns ILong val^ Public Functions abs [Source] fun box abs() : ULong val Returns ULong val bit_reverse [Source] fun box bit_reverse() : ILong val Returns ILong val bswap [Source] fun box bswap() : ILong val Returns ILong val popcount [Source] fun box popcount() : ULong val Returns ULong val clz [Source] fun box clz() : ULong val Returns ULong val ctz [Source] fun box ctz() : ULong val Returns ULong val clz_unsafe [Source] fun box clz_unsafe() : ULong val Returns ULong val ctz_unsafe [Source] fun box ctz_unsafe() : ULong val Returns ULong val bitwidth [Source] fun box bitwidth() : ULong val Returns ULong val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val max [Source] fun box max( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val hash [Source] fun box hash() : USize val Returns USize val addc [Source] fun box addc( y: ILong val) : (ILong val , Bool val) Parameters y: ILong val Returns ( ILong val , Bool val) subc [Source] fun box subc( y: ILong val) : (ILong val , Bool val) Parameters y: ILong val Returns ( ILong val , Bool val) mulc [Source] fun box mulc( y: ILong val) : (ILong val , Bool val) Parameters y: ILong val Returns ( ILong val , Bool val) divc [Source] fun box divc( y: ILong val) : (ILong val , Bool val) Parameters y: ILong val Returns ( ILong val , Bool val) remc [Source] fun box remc( y: ILong val) : (ILong val , Bool val) Parameters y: ILong val Returns ( ILong val , Bool val) add_partial [Source] fun box add_partial( y: ILong val) : ILong val ? Parameters y: ILong val Returns ILong val ? sub_partial [Source] fun box sub_partial( y: ILong val) : ILong val ? Parameters y: ILong val Returns ILong val ? mul_partial [Source] fun box mul_partial( y: ILong val) : ILong val ? Parameters y: ILong val Returns ILong val ? div_partial [Source] fun box div_partial( y: ILong val) : ILong val ? Parameters y: ILong val Returns ILong val ? rem_partial [Source] fun box rem_partial( y: ILong val) : ILong val ? Parameters y: ILong val Returns ILong val ? divrem_partial [Source] fun box divrem_partial( y: ILong val) : (ILong val , ILong val) ? Parameters y: ILong val Returns ( ILong val , ILong val) ? shl fun box shl( y: ULong val) : ILong val Parameters y: ULong val Returns ILong val shr fun box shr( y: ULong val) : ILong val Parameters y: ULong val Returns ILong val shl_unsafe fun box shl_unsafe( y: ULong val) : ILong val Parameters y: ULong val Returns ILong val shr_unsafe fun box shr_unsafe( y: ULong val) : ILong val Parameters y: ULong val Returns ILong val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val sub_unsafe fun box sub_unsafe( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val mul_unsafe fun box mul_unsafe( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val div_unsafe fun box div_unsafe( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val divrem_unsafe fun box divrem_unsafe( y: ILong val) : (ILong val , ILong val) Parameters y: ILong val Returns ( ILong val , ILong val) rem_unsafe fun box rem_unsafe( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val neg_unsafe fun box neg_unsafe() : ILong val Returns ILong val op_and fun box op_and( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val op_or fun box op_or( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val op_xor fun box op_xor( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val op_not fun box op_not() : ILong val Returns ILong val add fun box add( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val sub fun box sub( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val mul fun box mul( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val div fun box div( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val divrem fun box divrem( y: ILong val) : (ILong val , ILong val) Parameters y: ILong val Returns ( ILong val , ILong val) rem fun box rem( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val neg fun box neg() : ILong val Returns ILong val eq fun box eq( y: ILong val) : Bool val Parameters y: ILong val Returns Bool val ne fun box ne( y: ILong val) : Bool val Parameters y: ILong val Returns Bool val lt fun box lt( y: ILong val) : Bool val Parameters y: ILong val Returns Bool val le fun box le( y: ILong val) : Bool val Parameters y: ILong val Returns Bool val ge fun box ge( y: ILong val) : Bool val Parameters y: ILong val Returns Bool val gt fun box gt( y: ILong val) : Bool val Parameters y: ILong val Returns Bool val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: ILong val) : (Less val | Equal val | Greater val) Parameters that: ILong val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : ILong val Returns ILong val","title":"primitive ILong"},{"location":"builtin-ILong/#ilong","text":"[Source] primitive val ILong is _SignedInteger[ILong val, ULong val] val","title":"ILong"},{"location":"builtin-ILong/#implements","text":"_SignedInteger [ ILong val, ULong val] val","title":"Implements"},{"location":"builtin-ILong/#constructors","text":"","title":"Constructors"},{"location":"builtin-ILong/#create","text":"[Source] new val create( value: ILong val) : ILong val^","title":"create"},{"location":"builtin-ILong/#parameters","text":"value: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : ILong val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-ILong/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-ILong/#returns_1","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#min_value","text":"[Source] new val min_value() : ILong val^","title":"min_value"},{"location":"builtin-ILong/#returns_2","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#max_value","text":"[Source] new val max_value() : ILong val^","title":"max_value"},{"location":"builtin-ILong/#returns_3","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ILong/#abs","text":"[Source] fun box abs() : ULong val","title":"abs"},{"location":"builtin-ILong/#returns_4","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#bit_reverse","text":"[Source] fun box bit_reverse() : ILong val","title":"bit_reverse"},{"location":"builtin-ILong/#returns_5","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#bswap","text":"[Source] fun box bswap() : ILong val","title":"bswap"},{"location":"builtin-ILong/#returns_6","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#popcount","text":"[Source] fun box popcount() : ULong val","title":"popcount"},{"location":"builtin-ILong/#returns_7","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#clz","text":"[Source] fun box clz() : ULong val","title":"clz"},{"location":"builtin-ILong/#returns_8","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#ctz","text":"[Source] fun box ctz() : ULong val","title":"ctz"},{"location":"builtin-ILong/#returns_9","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#clz_unsafe","text":"[Source] fun box clz_unsafe() : ULong val","title":"clz_unsafe"},{"location":"builtin-ILong/#returns_10","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#ctz_unsafe","text":"[Source] fun box ctz_unsafe() : ULong val","title":"ctz_unsafe"},{"location":"builtin-ILong/#returns_11","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#bitwidth","text":"[Source] fun box bitwidth() : ULong val","title":"bitwidth"},{"location":"builtin-ILong/#returns_12","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-ILong/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#min","text":"[Source] fun box min( y: ILong val) : ILong val","title":"min"},{"location":"builtin-ILong/#parameters_2","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_14","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#max","text":"[Source] fun box max( y: ILong val) : ILong val","title":"max"},{"location":"builtin-ILong/#parameters_3","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_15","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-ILong/#returns_16","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#addc","text":"[Source] fun box addc( y: ILong val) : (ILong val , Bool val)","title":"addc"},{"location":"builtin-ILong/#parameters_4","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_17","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#subc","text":"[Source] fun box subc( y: ILong val) : (ILong val , Bool val)","title":"subc"},{"location":"builtin-ILong/#parameters_5","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_18","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#mulc","text":"[Source] fun box mulc( y: ILong val) : (ILong val , Bool val)","title":"mulc"},{"location":"builtin-ILong/#parameters_6","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_19","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#divc","text":"[Source] fun box divc( y: ILong val) : (ILong val , Bool val)","title":"divc"},{"location":"builtin-ILong/#parameters_7","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_20","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#remc","text":"[Source] fun box remc( y: ILong val) : (ILong val , Bool val)","title":"remc"},{"location":"builtin-ILong/#parameters_8","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_21","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#add_partial","text":"[Source] fun box add_partial( y: ILong val) : ILong val ?","title":"add_partial"},{"location":"builtin-ILong/#parameters_9","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_22","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#sub_partial","text":"[Source] fun box sub_partial( y: ILong val) : ILong val ?","title":"sub_partial"},{"location":"builtin-ILong/#parameters_10","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_23","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#mul_partial","text":"[Source] fun box mul_partial( y: ILong val) : ILong val ?","title":"mul_partial"},{"location":"builtin-ILong/#parameters_11","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_24","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#div_partial","text":"[Source] fun box div_partial( y: ILong val) : ILong val ?","title":"div_partial"},{"location":"builtin-ILong/#parameters_12","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_25","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#rem_partial","text":"[Source] fun box rem_partial( y: ILong val) : ILong val ?","title":"rem_partial"},{"location":"builtin-ILong/#parameters_13","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_26","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#divrem_partial","text":"[Source] fun box divrem_partial( y: ILong val) : (ILong val , ILong val) ?","title":"divrem_partial"},{"location":"builtin-ILong/#parameters_14","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_27","text":"( ILong val , ILong val) ?","title":"Returns"},{"location":"builtin-ILong/#shl","text":"fun box shl( y: ULong val) : ILong val","title":"shl"},{"location":"builtin-ILong/#parameters_15","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_28","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#shr","text":"fun box shr( y: ULong val) : ILong val","title":"shr"},{"location":"builtin-ILong/#parameters_16","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_29","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#shl_unsafe","text":"fun box shl_unsafe( y: ULong val) : ILong val","title":"shl_unsafe"},{"location":"builtin-ILong/#parameters_17","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_30","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#shr_unsafe","text":"fun box shr_unsafe( y: ULong val) : ILong val","title":"shr_unsafe"},{"location":"builtin-ILong/#parameters_18","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_31","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-ILong/#returns_32","text":"String iso^","title":"Returns"},{"location":"builtin-ILong/#add_unsafe","text":"fun box add_unsafe( y: ILong val) : ILong val","title":"add_unsafe"},{"location":"builtin-ILong/#parameters_19","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_33","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#sub_unsafe","text":"fun box sub_unsafe( y: ILong val) : ILong val","title":"sub_unsafe"},{"location":"builtin-ILong/#parameters_20","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_34","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#mul_unsafe","text":"fun box mul_unsafe( y: ILong val) : ILong val","title":"mul_unsafe"},{"location":"builtin-ILong/#parameters_21","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_35","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#div_unsafe","text":"fun box div_unsafe( y: ILong val) : ILong val","title":"div_unsafe"},{"location":"builtin-ILong/#parameters_22","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_36","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#divrem_unsafe","text":"fun box divrem_unsafe( y: ILong val) : (ILong val , ILong val)","title":"divrem_unsafe"},{"location":"builtin-ILong/#parameters_23","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_37","text":"( ILong val , ILong val)","title":"Returns"},{"location":"builtin-ILong/#rem_unsafe","text":"fun box rem_unsafe( y: ILong val) : ILong val","title":"rem_unsafe"},{"location":"builtin-ILong/#parameters_24","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_38","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#neg_unsafe","text":"fun box neg_unsafe() : ILong val","title":"neg_unsafe"},{"location":"builtin-ILong/#returns_39","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_and","text":"fun box op_and( y: ILong val) : ILong val","title":"op_and"},{"location":"builtin-ILong/#parameters_25","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_40","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_or","text":"fun box op_or( y: ILong val) : ILong val","title":"op_or"},{"location":"builtin-ILong/#parameters_26","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_41","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_xor","text":"fun box op_xor( y: ILong val) : ILong val","title":"op_xor"},{"location":"builtin-ILong/#parameters_27","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_42","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_not","text":"fun box op_not() : ILong val","title":"op_not"},{"location":"builtin-ILong/#returns_43","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#add","text":"fun box add( y: ILong val) : ILong val","title":"add"},{"location":"builtin-ILong/#parameters_28","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_44","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#sub","text":"fun box sub( y: ILong val) : ILong val","title":"sub"},{"location":"builtin-ILong/#parameters_29","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_45","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#mul","text":"fun box mul( y: ILong val) : ILong val","title":"mul"},{"location":"builtin-ILong/#parameters_30","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_46","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#div","text":"fun box div( y: ILong val) : ILong val","title":"div"},{"location":"builtin-ILong/#parameters_31","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_47","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#divrem","text":"fun box divrem( y: ILong val) : (ILong val , ILong val)","title":"divrem"},{"location":"builtin-ILong/#parameters_32","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_48","text":"( ILong val , ILong val)","title":"Returns"},{"location":"builtin-ILong/#rem","text":"fun box rem( y: ILong val) : ILong val","title":"rem"},{"location":"builtin-ILong/#parameters_33","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_49","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#neg","text":"fun box neg() : ILong val","title":"neg"},{"location":"builtin-ILong/#returns_50","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#eq","text":"fun box eq( y: ILong val) : Bool val","title":"eq"},{"location":"builtin-ILong/#parameters_34","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_51","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#ne","text":"fun box ne( y: ILong val) : Bool val","title":"ne"},{"location":"builtin-ILong/#parameters_35","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_52","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#lt","text":"fun box lt( y: ILong val) : Bool val","title":"lt"},{"location":"builtin-ILong/#parameters_36","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#le","text":"fun box le( y: ILong val) : Bool val","title":"le"},{"location":"builtin-ILong/#parameters_37","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#ge","text":"fun box ge( y: ILong val) : Bool val","title":"ge"},{"location":"builtin-ILong/#parameters_38","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#gt","text":"fun box gt( y: ILong val) : Bool val","title":"gt"},{"location":"builtin-ILong/#parameters_39","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-ILong/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-ILong/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-ILong/#returns_58","text":"I8 val","title":"Returns"},{"location":"builtin-ILong/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-ILong/#returns_59","text":"I16 val","title":"Returns"},{"location":"builtin-ILong/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-ILong/#returns_60","text":"I32 val","title":"Returns"},{"location":"builtin-ILong/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-ILong/#returns_61","text":"I64 val","title":"Returns"},{"location":"builtin-ILong/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-ILong/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-ILong/#ilong_1","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-ILong/#returns_63","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-ILong/#returns_64","text":"ISize val","title":"Returns"},{"location":"builtin-ILong/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-ILong/#returns_65","text":"U8 val","title":"Returns"},{"location":"builtin-ILong/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-ILong/#returns_66","text":"U16 val","title":"Returns"},{"location":"builtin-ILong/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-ILong/#returns_67","text":"U32 val","title":"Returns"},{"location":"builtin-ILong/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-ILong/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-ILong/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-ILong/#returns_69","text":"U128 val","title":"Returns"},{"location":"builtin-ILong/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-ILong/#returns_70","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-ILong/#returns_71","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-ILong/#returns_72","text":"F32 val","title":"Returns"},{"location":"builtin-ILong/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-ILong/#returns_73","text":"F64 val","title":"Returns"},{"location":"builtin-ILong/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-ILong/#returns_74","text":"I8 val","title":"Returns"},{"location":"builtin-ILong/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-ILong/#returns_75","text":"I16 val","title":"Returns"},{"location":"builtin-ILong/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-ILong/#returns_76","text":"I32 val","title":"Returns"},{"location":"builtin-ILong/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-ILong/#returns_77","text":"I64 val","title":"Returns"},{"location":"builtin-ILong/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-ILong/#returns_78","text":"I128 val","title":"Returns"},{"location":"builtin-ILong/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-ILong/#returns_79","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-ILong/#returns_80","text":"ISize val","title":"Returns"},{"location":"builtin-ILong/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-ILong/#returns_81","text":"U8 val","title":"Returns"},{"location":"builtin-ILong/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-ILong/#returns_82","text":"U16 val","title":"Returns"},{"location":"builtin-ILong/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-ILong/#returns_83","text":"U32 val","title":"Returns"},{"location":"builtin-ILong/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-ILong/#returns_84","text":"U64 val","title":"Returns"},{"location":"builtin-ILong/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-ILong/#returns_85","text":"U128 val","title":"Returns"},{"location":"builtin-ILong/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-ILong/#returns_86","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-ILong/#returns_87","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-ILong/#returns_88","text":"F32 val","title":"Returns"},{"location":"builtin-ILong/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-ILong/#returns_89","text":"F64 val","title":"Returns"},{"location":"builtin-ILong/#compare","text":"fun box compare( that: ILong val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-ILong/#parameters_40","text":"that: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_90","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-ILong/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-ILong/#_value","text":"fun box _value() : ILong val","title":"_value"},{"location":"builtin-ILong/#returns_91","text":"ILong val","title":"Returns"},{"location":"builtin-ISize/","text":"ISize [Source] primitive val ISize is _SignedInteger[ISize val, USize val] val Implements _SignedInteger [ ISize val, USize val] val Constructors create [Source] new val create( value: ISize val) : ISize val^ Parameters value: ISize val Returns ISize val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : ISize val^ Parameters a: A Returns ISize val^ min_value [Source] new val min_value() : ISize val^ Returns ISize val^ max_value [Source] new val max_value() : ISize val^ Returns ISize val^ Public Functions abs [Source] fun box abs() : USize val Returns USize val bit_reverse [Source] fun box bit_reverse() : ISize val Returns ISize val bswap [Source] fun box bswap() : ISize val Returns ISize val popcount [Source] fun box popcount() : USize val Returns USize val clz [Source] fun box clz() : USize val Returns USize val ctz [Source] fun box ctz() : USize val Returns USize val clz_unsafe [Source] fun box clz_unsafe() : USize val Returns USize val ctz_unsafe [Source] fun box ctz_unsafe() : USize val Returns USize val bitwidth [Source] fun box bitwidth() : USize val Returns USize val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val max [Source] fun box max( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val addc [Source] fun box addc( y: ISize val) : (ISize val , Bool val) Parameters y: ISize val Returns ( ISize val , Bool val) subc [Source] fun box subc( y: ISize val) : (ISize val , Bool val) Parameters y: ISize val Returns ( ISize val , Bool val) mulc [Source] fun box mulc( y: ISize val) : (ISize val , Bool val) Parameters y: ISize val Returns ( ISize val , Bool val) divc [Source] fun box divc( y: ISize val) : (ISize val , Bool val) Parameters y: ISize val Returns ( ISize val , Bool val) remc [Source] fun box remc( y: ISize val) : (ISize val , Bool val) Parameters y: ISize val Returns ( ISize val , Bool val) add_partial [Source] fun box add_partial( y: ISize val) : ISize val ? Parameters y: ISize val Returns ISize val ? sub_partial [Source] fun box sub_partial( y: ISize val) : ISize val ? Parameters y: ISize val Returns ISize val ? mul_partial [Source] fun box mul_partial( y: ISize val) : ISize val ? Parameters y: ISize val Returns ISize val ? div_partial [Source] fun box div_partial( y: ISize val) : ISize val ? Parameters y: ISize val Returns ISize val ? rem_partial [Source] fun box rem_partial( y: ISize val) : ISize val ? Parameters y: ISize val Returns ISize val ? divrem_partial [Source] fun box divrem_partial( y: ISize val) : (ISize val , ISize val) ? Parameters y: ISize val Returns ( ISize val , ISize val) ? shl fun box shl( y: USize val) : ISize val Parameters y: USize val Returns ISize val shr fun box shr( y: USize val) : ISize val Parameters y: USize val Returns ISize val shl_unsafe fun box shl_unsafe( y: USize val) : ISize val Parameters y: USize val Returns ISize val shr_unsafe fun box shr_unsafe( y: USize val) : ISize val Parameters y: USize val Returns ISize val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val sub_unsafe fun box sub_unsafe( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val mul_unsafe fun box mul_unsafe( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val div_unsafe fun box div_unsafe( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val divrem_unsafe fun box divrem_unsafe( y: ISize val) : (ISize val , ISize val) Parameters y: ISize val Returns ( ISize val , ISize val) rem_unsafe fun box rem_unsafe( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val neg_unsafe fun box neg_unsafe() : ISize val Returns ISize val op_and fun box op_and( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val op_or fun box op_or( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val op_xor fun box op_xor( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val op_not fun box op_not() : ISize val Returns ISize val add fun box add( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val sub fun box sub( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val mul fun box mul( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val div fun box div( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val divrem fun box divrem( y: ISize val) : (ISize val , ISize val) Parameters y: ISize val Returns ( ISize val , ISize val) rem fun box rem( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val neg fun box neg() : ISize val Returns ISize val eq fun box eq( y: ISize val) : Bool val Parameters y: ISize val Returns Bool val ne fun box ne( y: ISize val) : Bool val Parameters y: ISize val Returns Bool val lt fun box lt( y: ISize val) : Bool val Parameters y: ISize val Returns Bool val le fun box le( y: ISize val) : Bool val Parameters y: ISize val Returns Bool val ge fun box ge( y: ISize val) : Bool val Parameters y: ISize val Returns Bool val gt fun box gt( y: ISize val) : Bool val Parameters y: ISize val Returns Bool val hash fun box hash() : USize val Returns USize val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: ISize val) : (Less val | Equal val | Greater val) Parameters that: ISize val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : ISize val Returns ISize val","title":"primitive ISize"},{"location":"builtin-ISize/#isize","text":"[Source] primitive val ISize is _SignedInteger[ISize val, USize val] val","title":"ISize"},{"location":"builtin-ISize/#implements","text":"_SignedInteger [ ISize val, USize val] val","title":"Implements"},{"location":"builtin-ISize/#constructors","text":"","title":"Constructors"},{"location":"builtin-ISize/#create","text":"[Source] new val create( value: ISize val) : ISize val^","title":"create"},{"location":"builtin-ISize/#parameters","text":"value: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : ISize val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-ISize/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-ISize/#returns_1","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#min_value","text":"[Source] new val min_value() : ISize val^","title":"min_value"},{"location":"builtin-ISize/#returns_2","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#max_value","text":"[Source] new val max_value() : ISize val^","title":"max_value"},{"location":"builtin-ISize/#returns_3","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ISize/#abs","text":"[Source] fun box abs() : USize val","title":"abs"},{"location":"builtin-ISize/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#bit_reverse","text":"[Source] fun box bit_reverse() : ISize val","title":"bit_reverse"},{"location":"builtin-ISize/#returns_5","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#bswap","text":"[Source] fun box bswap() : ISize val","title":"bswap"},{"location":"builtin-ISize/#returns_6","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#popcount","text":"[Source] fun box popcount() : USize val","title":"popcount"},{"location":"builtin-ISize/#returns_7","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#clz","text":"[Source] fun box clz() : USize val","title":"clz"},{"location":"builtin-ISize/#returns_8","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#ctz","text":"[Source] fun box ctz() : USize val","title":"ctz"},{"location":"builtin-ISize/#returns_9","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#clz_unsafe","text":"[Source] fun box clz_unsafe() : USize val","title":"clz_unsafe"},{"location":"builtin-ISize/#returns_10","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#ctz_unsafe","text":"[Source] fun box ctz_unsafe() : USize val","title":"ctz_unsafe"},{"location":"builtin-ISize/#returns_11","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#bitwidth","text":"[Source] fun box bitwidth() : USize val","title":"bitwidth"},{"location":"builtin-ISize/#returns_12","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-ISize/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#min","text":"[Source] fun box min( y: ISize val) : ISize val","title":"min"},{"location":"builtin-ISize/#parameters_2","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_14","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#max","text":"[Source] fun box max( y: ISize val) : ISize val","title":"max"},{"location":"builtin-ISize/#parameters_3","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_15","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#addc","text":"[Source] fun box addc( y: ISize val) : (ISize val , Bool val)","title":"addc"},{"location":"builtin-ISize/#parameters_4","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_16","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#subc","text":"[Source] fun box subc( y: ISize val) : (ISize val , Bool val)","title":"subc"},{"location":"builtin-ISize/#parameters_5","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_17","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#mulc","text":"[Source] fun box mulc( y: ISize val) : (ISize val , Bool val)","title":"mulc"},{"location":"builtin-ISize/#parameters_6","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_18","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#divc","text":"[Source] fun box divc( y: ISize val) : (ISize val , Bool val)","title":"divc"},{"location":"builtin-ISize/#parameters_7","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_19","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#remc","text":"[Source] fun box remc( y: ISize val) : (ISize val , Bool val)","title":"remc"},{"location":"builtin-ISize/#parameters_8","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_20","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#add_partial","text":"[Source] fun box add_partial( y: ISize val) : ISize val ?","title":"add_partial"},{"location":"builtin-ISize/#parameters_9","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_21","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#sub_partial","text":"[Source] fun box sub_partial( y: ISize val) : ISize val ?","title":"sub_partial"},{"location":"builtin-ISize/#parameters_10","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_22","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#mul_partial","text":"[Source] fun box mul_partial( y: ISize val) : ISize val ?","title":"mul_partial"},{"location":"builtin-ISize/#parameters_11","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_23","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#div_partial","text":"[Source] fun box div_partial( y: ISize val) : ISize val ?","title":"div_partial"},{"location":"builtin-ISize/#parameters_12","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_24","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#rem_partial","text":"[Source] fun box rem_partial( y: ISize val) : ISize val ?","title":"rem_partial"},{"location":"builtin-ISize/#parameters_13","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_25","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#divrem_partial","text":"[Source] fun box divrem_partial( y: ISize val) : (ISize val , ISize val) ?","title":"divrem_partial"},{"location":"builtin-ISize/#parameters_14","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_26","text":"( ISize val , ISize val) ?","title":"Returns"},{"location":"builtin-ISize/#shl","text":"fun box shl( y: USize val) : ISize val","title":"shl"},{"location":"builtin-ISize/#parameters_15","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_27","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#shr","text":"fun box shr( y: USize val) : ISize val","title":"shr"},{"location":"builtin-ISize/#parameters_16","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_28","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#shl_unsafe","text":"fun box shl_unsafe( y: USize val) : ISize val","title":"shl_unsafe"},{"location":"builtin-ISize/#parameters_17","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_29","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#shr_unsafe","text":"fun box shr_unsafe( y: USize val) : ISize val","title":"shr_unsafe"},{"location":"builtin-ISize/#parameters_18","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_30","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-ISize/#returns_31","text":"String iso^","title":"Returns"},{"location":"builtin-ISize/#add_unsafe","text":"fun box add_unsafe( y: ISize val) : ISize val","title":"add_unsafe"},{"location":"builtin-ISize/#parameters_19","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_32","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#sub_unsafe","text":"fun box sub_unsafe( y: ISize val) : ISize val","title":"sub_unsafe"},{"location":"builtin-ISize/#parameters_20","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_33","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#mul_unsafe","text":"fun box mul_unsafe( y: ISize val) : ISize val","title":"mul_unsafe"},{"location":"builtin-ISize/#parameters_21","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_34","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#div_unsafe","text":"fun box div_unsafe( y: ISize val) : ISize val","title":"div_unsafe"},{"location":"builtin-ISize/#parameters_22","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_35","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#divrem_unsafe","text":"fun box divrem_unsafe( y: ISize val) : (ISize val , ISize val)","title":"divrem_unsafe"},{"location":"builtin-ISize/#parameters_23","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_36","text":"( ISize val , ISize val)","title":"Returns"},{"location":"builtin-ISize/#rem_unsafe","text":"fun box rem_unsafe( y: ISize val) : ISize val","title":"rem_unsafe"},{"location":"builtin-ISize/#parameters_24","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_37","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#neg_unsafe","text":"fun box neg_unsafe() : ISize val","title":"neg_unsafe"},{"location":"builtin-ISize/#returns_38","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_and","text":"fun box op_and( y: ISize val) : ISize val","title":"op_and"},{"location":"builtin-ISize/#parameters_25","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_39","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_or","text":"fun box op_or( y: ISize val) : ISize val","title":"op_or"},{"location":"builtin-ISize/#parameters_26","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_40","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_xor","text":"fun box op_xor( y: ISize val) : ISize val","title":"op_xor"},{"location":"builtin-ISize/#parameters_27","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_41","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_not","text":"fun box op_not() : ISize val","title":"op_not"},{"location":"builtin-ISize/#returns_42","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#add","text":"fun box add( y: ISize val) : ISize val","title":"add"},{"location":"builtin-ISize/#parameters_28","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_43","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#sub","text":"fun box sub( y: ISize val) : ISize val","title":"sub"},{"location":"builtin-ISize/#parameters_29","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_44","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#mul","text":"fun box mul( y: ISize val) : ISize val","title":"mul"},{"location":"builtin-ISize/#parameters_30","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_45","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#div","text":"fun box div( y: ISize val) : ISize val","title":"div"},{"location":"builtin-ISize/#parameters_31","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_46","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#divrem","text":"fun box divrem( y: ISize val) : (ISize val , ISize val)","title":"divrem"},{"location":"builtin-ISize/#parameters_32","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_47","text":"( ISize val , ISize val)","title":"Returns"},{"location":"builtin-ISize/#rem","text":"fun box rem( y: ISize val) : ISize val","title":"rem"},{"location":"builtin-ISize/#parameters_33","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_48","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#neg","text":"fun box neg() : ISize val","title":"neg"},{"location":"builtin-ISize/#returns_49","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#eq","text":"fun box eq( y: ISize val) : Bool val","title":"eq"},{"location":"builtin-ISize/#parameters_34","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_50","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#ne","text":"fun box ne( y: ISize val) : Bool val","title":"ne"},{"location":"builtin-ISize/#parameters_35","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_51","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#lt","text":"fun box lt( y: ISize val) : Bool val","title":"lt"},{"location":"builtin-ISize/#parameters_36","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_52","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#le","text":"fun box le( y: ISize val) : Bool val","title":"le"},{"location":"builtin-ISize/#parameters_37","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#ge","text":"fun box ge( y: ISize val) : Bool val","title":"ge"},{"location":"builtin-ISize/#parameters_38","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#gt","text":"fun box gt( y: ISize val) : Bool val","title":"gt"},{"location":"builtin-ISize/#parameters_39","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-ISize/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-ISize/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-ISize/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-ISize/#returns_58","text":"I8 val","title":"Returns"},{"location":"builtin-ISize/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-ISize/#returns_59","text":"I16 val","title":"Returns"},{"location":"builtin-ISize/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-ISize/#returns_60","text":"I32 val","title":"Returns"},{"location":"builtin-ISize/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-ISize/#returns_61","text":"I64 val","title":"Returns"},{"location":"builtin-ISize/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-ISize/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-ISize/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-ISize/#returns_63","text":"ILong val","title":"Returns"},{"location":"builtin-ISize/#isize_1","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-ISize/#returns_64","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-ISize/#returns_65","text":"U8 val","title":"Returns"},{"location":"builtin-ISize/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-ISize/#returns_66","text":"U16 val","title":"Returns"},{"location":"builtin-ISize/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-ISize/#returns_67","text":"U32 val","title":"Returns"},{"location":"builtin-ISize/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-ISize/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-ISize/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-ISize/#returns_69","text":"U128 val","title":"Returns"},{"location":"builtin-ISize/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-ISize/#returns_70","text":"ULong val","title":"Returns"},{"location":"builtin-ISize/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-ISize/#returns_71","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-ISize/#returns_72","text":"F32 val","title":"Returns"},{"location":"builtin-ISize/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-ISize/#returns_73","text":"F64 val","title":"Returns"},{"location":"builtin-ISize/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-ISize/#returns_74","text":"I8 val","title":"Returns"},{"location":"builtin-ISize/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-ISize/#returns_75","text":"I16 val","title":"Returns"},{"location":"builtin-ISize/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-ISize/#returns_76","text":"I32 val","title":"Returns"},{"location":"builtin-ISize/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-ISize/#returns_77","text":"I64 val","title":"Returns"},{"location":"builtin-ISize/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-ISize/#returns_78","text":"I128 val","title":"Returns"},{"location":"builtin-ISize/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-ISize/#returns_79","text":"ILong val","title":"Returns"},{"location":"builtin-ISize/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-ISize/#returns_80","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-ISize/#returns_81","text":"U8 val","title":"Returns"},{"location":"builtin-ISize/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-ISize/#returns_82","text":"U16 val","title":"Returns"},{"location":"builtin-ISize/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-ISize/#returns_83","text":"U32 val","title":"Returns"},{"location":"builtin-ISize/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-ISize/#returns_84","text":"U64 val","title":"Returns"},{"location":"builtin-ISize/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-ISize/#returns_85","text":"U128 val","title":"Returns"},{"location":"builtin-ISize/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-ISize/#returns_86","text":"ULong val","title":"Returns"},{"location":"builtin-ISize/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-ISize/#returns_87","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-ISize/#returns_88","text":"F32 val","title":"Returns"},{"location":"builtin-ISize/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-ISize/#returns_89","text":"F64 val","title":"Returns"},{"location":"builtin-ISize/#compare","text":"fun box compare( that: ISize val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-ISize/#parameters_40","text":"that: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_90","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-ISize/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-ISize/#_value","text":"fun box _value() : ISize val","title":"_value"},{"location":"builtin-ISize/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-InputNotify/","text":"InputNotify [Source] Notification for data arriving via an input stream. interface ref InputNotify Public Functions apply [Source] Called when data is available on the stream. fun ref apply( data: Array[U8 val] iso) : None val Parameters data: Array [ U8 val] iso Returns None val dispose [Source] Called when no more data will arrive on the stream. fun ref dispose() : None val Returns None val","title":"interface InputNotify"},{"location":"builtin-InputNotify/#inputnotify","text":"[Source] Notification for data arriving via an input stream. interface ref InputNotify","title":"InputNotify"},{"location":"builtin-InputNotify/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-InputNotify/#apply","text":"[Source] Called when data is available on the stream. fun ref apply( data: Array[U8 val] iso) : None val","title":"apply"},{"location":"builtin-InputNotify/#parameters","text":"data: Array [ U8 val] iso","title":"Parameters"},{"location":"builtin-InputNotify/#returns","text":"None val","title":"Returns"},{"location":"builtin-InputNotify/#dispose","text":"[Source] Called when no more data will arrive on the stream. fun ref dispose() : None val","title":"dispose"},{"location":"builtin-InputNotify/#returns_1","text":"None val","title":"Returns"},{"location":"builtin-InputStream/","text":"InputStream [Source] Asynchronous access to some input stream. interface tag InputStream Public Behaviours apply [Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = seq) Parameters notify: ( InputNotify iso | None val) chunk_size: USize val = seq dispose [Source] Clear the notifier in order to shut down input. be dispose()","title":"interface InputStream"},{"location":"builtin-InputStream/#inputstream","text":"[Source] Asynchronous access to some input stream. interface tag InputStream","title":"InputStream"},{"location":"builtin-InputStream/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-InputStream/#apply","text":"[Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = seq)","title":"apply"},{"location":"builtin-InputStream/#parameters","text":"notify: ( InputNotify iso | None val) chunk_size: USize val = seq","title":"Parameters"},{"location":"builtin-InputStream/#dispose","text":"[Source] Clear the notifier in order to shut down input. be dispose()","title":"dispose"},{"location":"builtin-Int/","text":"Int [Source] type Int is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Type Alias For ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"type Int"},{"location":"builtin-Int/#int","text":"[Source] type Int is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Int"},{"location":"builtin-Int/#type-alias-for","text":"( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Type Alias For"},{"location":"builtin-Integer/","text":"Integer[A: Integer [A] val] [Source] trait val Integer[A: Integer[A] val] is Real[A] val Implements Real [A] val Constructors create [Source] new val create( value: A) : Real[A] val^ Parameters value: A Returns Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [B] val)] [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^ Parameters a: B Returns Real [A] val^ min_value [Source] new val min_value() : Real[A] val^ Returns Real [A] val^ max_value [Source] new val max_value() : Real[A] val^ Returns Real [A] val^ Public Functions add_unsafe [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box add_unsafe( y: A) : A Parameters y: A Returns A sub_unsafe [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box sub_unsafe( y: A) : A Parameters y: A Returns A mul_unsafe [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: A) : A Parameters y: A Returns A div_unsafe [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: A) : A Parameters y: A Returns A divrem_unsafe [Source] Calculates the quotient of this number and y and the remainder. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: A) : (A , A) Parameters y: A Returns (A , A) rem_unsafe [Source] Calculates the remainder of this number divided by y . Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: A) : A Parameters y: A Returns A add_partial [Source] Add y to this number. If the operation overflows this function errors. fun box add_partial( y: A) : A ? Parameters y: A Returns A ? sub_partial [Source] Subtract y from this number. If the operation overflows/underflows this function errors. fun box sub_partial( y: A) : A ? Parameters y: A Returns A ? mul_partial [Source] Multiply y with this number. If the operation overflows this function errors. fun box mul_partial( y: A) : A ? Parameters y: A Returns A ? div_partial [Source] Divides this number by y. If y is 0 this function errors. fun box div_partial( y: A) : A ? Parameters y: A Returns A ? rem_partial [Source] Calculates the remainder of this number divided by y. If y is 0 this function errors. fun box rem_partial( y: A) : A ? Parameters y: A Returns A ? divrem_partial [Source] Divides this number by y and calculates the remainder of the operation. If y is 0 this function errors. fun box divrem_partial( y: A) : (A , A) ? Parameters y: A Returns (A , A) ? neg_unsafe [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box neg_unsafe() : A Returns A addc [Source] Add y to this integer and return the result and a flag indicating overflow. fun box addc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) subc [Source] Subtract y from this integer and return the result and a flag indicating overflow. fun box subc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) mulc [Source] Multiply y with this integer and return the result and a flag indicating overflow. fun box mulc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) divc [Source] Divide this integer by y and return the result and a flag indicating overflow or division by zero. fun box divc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) remc [Source] Calculated the ramainder of this number dividec by y and return the result and a flag indicating division by zero or overflow. fun box remc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) op_and [Source] fun box op_and( y: A) : A Parameters y: A Returns A op_or [Source] fun box op_or( y: A) : A Parameters y: A Returns A op_xor [Source] fun box op_xor( y: A) : A Parameters y: A Returns A op_not [Source] fun box op_not() : A Returns A bit_reverse [Source] Reverse the order of the bits within the integer. For example, 0b11101101 (237) would return 0b10110111 (183). fun box bit_reverse() : A Returns A bswap [Source] fun box bswap() : A Returns A add [Source] fun box add( y: A) : A Parameters y: A Returns A sub [Source] fun box sub( y: A) : A Parameters y: A Returns A mul [Source] fun box mul( y: A) : A Parameters y: A Returns A div [Source] fun box div( y: A) : A Parameters y: A Returns A divrem [Source] fun box divrem( y: A) : (A , A) Parameters y: A Returns (A , A) rem [Source] fun box rem( y: A) : A Parameters y: A Returns A neg [Source] fun box neg() : A Returns A eq [Source] fun box eq( y: box- A) : Bool val Parameters y: box- A Returns Bool val ne [Source] fun box ne( y: box- A) : Bool val Parameters y: box- A Returns Bool val lt [Source] fun box lt( y: box- A) : Bool val Parameters y: box- A Returns Bool val le [Source] fun box le( y: box- A) : Bool val Parameters y: box- A Returns Bool val ge [Source] fun box ge( y: box- A) : Bool val Parameters y: box- A Returns Bool val gt [Source] fun box gt( y: box- A) : Bool val Parameters y: box- A Returns Bool val min [Source] fun box min( y: A) : A Parameters y: A Returns A max [Source] fun box max( y: A) : A Parameters y: A Returns A hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val string [Source] fun box string() : String iso^ Returns String iso^ i8 [Source] fun box i8() : I8 val Returns I8 val i16 [Source] fun box i16() : I16 val Returns I16 val i32 [Source] fun box i32() : I32 val Returns I32 val i64 [Source] fun box i64() : I64 val Returns I64 val i128 [Source] fun box i128() : I128 val Returns I128 val ilong [Source] fun box ilong() : ILong val Returns ILong val isize [Source] fun box isize() : ISize val Returns ISize val u8 [Source] fun box u8() : U8 val Returns U8 val u16 [Source] fun box u16() : U16 val Returns U16 val u32 [Source] fun box u32() : U32 val Returns U32 val u64 [Source] fun box u64() : U64 val Returns U64 val u128 [Source] fun box u128() : U128 val Returns U128 val ulong [Source] fun box ulong() : ULong val Returns ULong val usize [Source] fun box usize() : USize val Returns USize val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val i8_unsafe [Source] fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe [Source] fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe [Source] fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe [Source] fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe [Source] fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe [Source] fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe [Source] fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe [Source] fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe [Source] fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe [Source] fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe [Source] fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe [Source] fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe [Source] fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe [Source] fun box usize_unsafe() : USize val Returns USize val f32_unsafe [Source] fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: box- A) : (Less val | Equal val | Greater val) Parameters that: box- A Returns ( Less val | Equal val | Greater val) Private Functions _value [Source] fun box _value() : A Returns A","title":"trait Integer"},{"location":"builtin-Integer/#integer91a-integer91a93-val93","text":"[Source] trait val Integer[A: Integer[A] val] is Real[A] val","title":"Integer[A: Integer[A] val]"},{"location":"builtin-Integer/#implements","text":"Real [A] val","title":"Implements"},{"location":"builtin-Integer/#constructors","text":"","title":"Constructors"},{"location":"builtin-Integer/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-Integer/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-Integer/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-Integer/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-Integer/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-Integer/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-Integer/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Integer/#add_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-Integer/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_4","text":"A","title":"Returns"},{"location":"builtin-Integer/#sub_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-Integer/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_5","text":"A","title":"Returns"},{"location":"builtin-Integer/#mul_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-Integer/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_6","text":"A","title":"Returns"},{"location":"builtin-Integer/#div_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-Integer/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_7","text":"A","title":"Returns"},{"location":"builtin-Integer/#divrem_unsafe","text":"[Source] Calculates the quotient of this number and y and the remainder. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-Integer/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_8","text":"(A , A)","title":"Returns"},{"location":"builtin-Integer/#rem_unsafe","text":"[Source] Calculates the remainder of this number divided by y . Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-Integer/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_9","text":"A","title":"Returns"},{"location":"builtin-Integer/#add_partial","text":"[Source] Add y to this number. If the operation overflows this function errors. fun box add_partial( y: A) : A ?","title":"add_partial"},{"location":"builtin-Integer/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_10","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#sub_partial","text":"[Source] Subtract y from this number. If the operation overflows/underflows this function errors. fun box sub_partial( y: A) : A ?","title":"sub_partial"},{"location":"builtin-Integer/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_11","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#mul_partial","text":"[Source] Multiply y with this number. If the operation overflows this function errors. fun box mul_partial( y: A) : A ?","title":"mul_partial"},{"location":"builtin-Integer/#parameters_10","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_12","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#div_partial","text":"[Source] Divides this number by y. If y is 0 this function errors. fun box div_partial( y: A) : A ?","title":"div_partial"},{"location":"builtin-Integer/#parameters_11","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_13","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#rem_partial","text":"[Source] Calculates the remainder of this number divided by y. If y is 0 this function errors. fun box rem_partial( y: A) : A ?","title":"rem_partial"},{"location":"builtin-Integer/#parameters_12","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_14","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#divrem_partial","text":"[Source] Divides this number by y and calculates the remainder of the operation. If y is 0 this function errors. fun box divrem_partial( y: A) : (A , A) ?","title":"divrem_partial"},{"location":"builtin-Integer/#parameters_13","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_15","text":"(A , A) ?","title":"Returns"},{"location":"builtin-Integer/#neg_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-Integer/#returns_16","text":"A","title":"Returns"},{"location":"builtin-Integer/#addc","text":"[Source] Add y to this integer and return the result and a flag indicating overflow. fun box addc( y: A) : (A , Bool val)","title":"addc"},{"location":"builtin-Integer/#parameters_14","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_17","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#subc","text":"[Source] Subtract y from this integer and return the result and a flag indicating overflow. fun box subc( y: A) : (A , Bool val)","title":"subc"},{"location":"builtin-Integer/#parameters_15","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_18","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#mulc","text":"[Source] Multiply y with this integer and return the result and a flag indicating overflow. fun box mulc( y: A) : (A , Bool val)","title":"mulc"},{"location":"builtin-Integer/#parameters_16","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_19","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#divc","text":"[Source] Divide this integer by y and return the result and a flag indicating overflow or division by zero. fun box divc( y: A) : (A , Bool val)","title":"divc"},{"location":"builtin-Integer/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_20","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#remc","text":"[Source] Calculated the ramainder of this number dividec by y and return the result and a flag indicating division by zero or overflow. fun box remc( y: A) : (A , Bool val)","title":"remc"},{"location":"builtin-Integer/#parameters_18","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_21","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#op_and","text":"[Source] fun box op_and( y: A) : A","title":"op_and"},{"location":"builtin-Integer/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_22","text":"A","title":"Returns"},{"location":"builtin-Integer/#op_or","text":"[Source] fun box op_or( y: A) : A","title":"op_or"},{"location":"builtin-Integer/#parameters_20","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_23","text":"A","title":"Returns"},{"location":"builtin-Integer/#op_xor","text":"[Source] fun box op_xor( y: A) : A","title":"op_xor"},{"location":"builtin-Integer/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_24","text":"A","title":"Returns"},{"location":"builtin-Integer/#op_not","text":"[Source] fun box op_not() : A","title":"op_not"},{"location":"builtin-Integer/#returns_25","text":"A","title":"Returns"},{"location":"builtin-Integer/#bit_reverse","text":"[Source] Reverse the order of the bits within the integer. For example, 0b11101101 (237) would return 0b10110111 (183). fun box bit_reverse() : A","title":"bit_reverse"},{"location":"builtin-Integer/#returns_26","text":"A","title":"Returns"},{"location":"builtin-Integer/#bswap","text":"[Source] fun box bswap() : A","title":"bswap"},{"location":"builtin-Integer/#returns_27","text":"A","title":"Returns"},{"location":"builtin-Integer/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-Integer/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_28","text":"A","title":"Returns"},{"location":"builtin-Integer/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-Integer/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_29","text":"A","title":"Returns"},{"location":"builtin-Integer/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-Integer/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_30","text":"A","title":"Returns"},{"location":"builtin-Integer/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-Integer/#parameters_25","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_31","text":"A","title":"Returns"},{"location":"builtin-Integer/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-Integer/#parameters_26","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_32","text":"(A , A)","title":"Returns"},{"location":"builtin-Integer/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-Integer/#parameters_27","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_33","text":"A","title":"Returns"},{"location":"builtin-Integer/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-Integer/#returns_34","text":"A","title":"Returns"},{"location":"builtin-Integer/#eq","text":"[Source] fun box eq( y: box- A) : Bool val","title":"eq"},{"location":"builtin-Integer/#parameters_28","text":"y: box- A","title":"Parameters"},{"location":"builtin-Integer/#returns_35","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#ne","text":"[Source] fun box ne( y: box- A) : Bool val","title":"ne"},{"location":"builtin-Integer/#parameters_29","text":"y: box- A","title":"Parameters"},{"location":"builtin-Integer/#returns_36","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#lt","text":"[Source] fun box lt( y: box- A) : Bool val","title":"lt"},{"location":"builtin-Integer/#parameters_30","text":"y: box- A","title":"Parameters"},{"location":"builtin-Integer/#returns_37","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#le","text":"[Source] fun box le( y: box- A) : Bool val","title":"le"},{"location":"builtin-Integer/#parameters_31","text":"y: box- A","title":"Parameters"},{"location":"builtin-Integer/#returns_38","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#ge","text":"[Source] fun box ge( y: box- A) : Bool val","title":"ge"},{"location":"builtin-Integer/#parameters_32","text":"y: box- A","title":"Parameters"},{"location":"builtin-Integer/#returns_39","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#gt","text":"[Source] fun box gt( y: box- A) : Bool val","title":"gt"},{"location":"builtin-Integer/#parameters_33","text":"y: box- A","title":"Parameters"},{"location":"builtin-Integer/#returns_40","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-Integer/#parameters_34","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_41","text":"A","title":"Returns"},{"location":"builtin-Integer/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-Integer/#parameters_35","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_42","text":"A","title":"Returns"},{"location":"builtin-Integer/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-Integer/#returns_43","text":"USize val","title":"Returns"},{"location":"builtin-Integer/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-Integer/#returns_44","text":"U64 val","title":"Returns"},{"location":"builtin-Integer/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Integer/#returns_45","text":"String iso^","title":"Returns"},{"location":"builtin-Integer/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-Integer/#returns_46","text":"I8 val","title":"Returns"},{"location":"builtin-Integer/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-Integer/#returns_47","text":"I16 val","title":"Returns"},{"location":"builtin-Integer/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-Integer/#returns_48","text":"I32 val","title":"Returns"},{"location":"builtin-Integer/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-Integer/#returns_49","text":"I64 val","title":"Returns"},{"location":"builtin-Integer/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-Integer/#returns_50","text":"I128 val","title":"Returns"},{"location":"builtin-Integer/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-Integer/#returns_51","text":"ILong val","title":"Returns"},{"location":"builtin-Integer/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-Integer/#returns_52","text":"ISize val","title":"Returns"},{"location":"builtin-Integer/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-Integer/#returns_53","text":"U8 val","title":"Returns"},{"location":"builtin-Integer/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-Integer/#returns_54","text":"U16 val","title":"Returns"},{"location":"builtin-Integer/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-Integer/#returns_55","text":"U32 val","title":"Returns"},{"location":"builtin-Integer/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-Integer/#returns_56","text":"U64 val","title":"Returns"},{"location":"builtin-Integer/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-Integer/#returns_57","text":"U128 val","title":"Returns"},{"location":"builtin-Integer/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-Integer/#returns_58","text":"ULong val","title":"Returns"},{"location":"builtin-Integer/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-Integer/#returns_59","text":"USize val","title":"Returns"},{"location":"builtin-Integer/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-Integer/#returns_60","text":"F32 val","title":"Returns"},{"location":"builtin-Integer/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-Integer/#returns_61","text":"F64 val","title":"Returns"},{"location":"builtin-Integer/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-Integer/#returns_62","text":"I8 val","title":"Returns"},{"location":"builtin-Integer/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-Integer/#returns_63","text":"I16 val","title":"Returns"},{"location":"builtin-Integer/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-Integer/#returns_64","text":"I32 val","title":"Returns"},{"location":"builtin-Integer/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-Integer/#returns_65","text":"I64 val","title":"Returns"},{"location":"builtin-Integer/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-Integer/#returns_66","text":"I128 val","title":"Returns"},{"location":"builtin-Integer/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-Integer/#returns_67","text":"ILong val","title":"Returns"},{"location":"builtin-Integer/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-Integer/#returns_68","text":"ISize val","title":"Returns"},{"location":"builtin-Integer/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-Integer/#returns_69","text":"U8 val","title":"Returns"},{"location":"builtin-Integer/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-Integer/#returns_70","text":"U16 val","title":"Returns"},{"location":"builtin-Integer/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-Integer/#returns_71","text":"U32 val","title":"Returns"},{"location":"builtin-Integer/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-Integer/#returns_72","text":"U64 val","title":"Returns"},{"location":"builtin-Integer/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-Integer/#returns_73","text":"U128 val","title":"Returns"},{"location":"builtin-Integer/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-Integer/#returns_74","text":"ULong val","title":"Returns"},{"location":"builtin-Integer/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-Integer/#returns_75","text":"USize val","title":"Returns"},{"location":"builtin-Integer/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-Integer/#returns_76","text":"F32 val","title":"Returns"},{"location":"builtin-Integer/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-Integer/#returns_77","text":"F64 val","title":"Returns"},{"location":"builtin-Integer/#compare","text":"fun box compare( that: box- A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-Integer/#parameters_36","text":"that: box- A","title":"Parameters"},{"location":"builtin-Integer/#returns_78","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-Integer/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Integer/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-Integer/#returns_79","text":"A","title":"Returns"},{"location":"builtin-Iterator/","text":"Iterator[A: A] [Source] Iterators generate a series of values, one value at a time on each call to next() . An Iterator is considered exhausted, once its has_next() method returns false . Thus every call to next() should be preceeded with a call to has_next() to check for exhaustiveness. Usage Given the rules for using Iterators mentioned above, basic usage of an iterator looks like this: while iterator.has_next() do let elem = iterator.next()? // do something with elem end The For -loop provides a more concise way of iteration: for elem in iterator do // do something with elem end Iteration using While is more flexible as it allows to continue iterating if a call to next() errors. The For -loop does not allow this. Implementing Iterators Iterator implementations need to adhere to the following rules to be considered well-behaved: If the Iterator is exhausted, has_next() needs to return false . Once has_next() returned false it is not allowed to switch back to true (Unless the Iterator supports rewinding) has_next() does not change its returned value if next() has not been called. That means, that between two calls to next() any number of calls to has_next() need to return the same value. (Unless the Iterator supports rewinding) A call to next() erroring does not necessarily denote exhaustiveness. Example // Generates values from `from` to 0 class ref Countdown is Iterator[USize] var _cur: USize var _has_next: Bool = true new ref create(from: USize) = _cur = from fun ref has_next(): Bool = _has_next fun ref next(): USize = let elem = _cur = _cur - 1 if elem == 0 then _has_next = false end elem interface ref Iterator[A: A] Public Functions has_next [Source] Returns true if this Iterator is not yet exhausted. That means that a value returned from a subsequent call to next() is a valid part of this iterator. Returns false if this Iterator is exhausted. The behavior of next() after this function returned false is undefined, it might throw an error or return values which are not part of this Iterator. fun ref has_next() : Bool val Returns Bool val next [Source] Generate the next value. This might error, which does not necessarily mean that the Iterator is exhausted. fun ref next() : A ? Returns A ?","title":"interface Iterator"},{"location":"builtin-Iterator/#iterator91a-a93","text":"[Source] Iterators generate a series of values, one value at a time on each call to next() . An Iterator is considered exhausted, once its has_next() method returns false . Thus every call to next() should be preceeded with a call to has_next() to check for exhaustiveness.","title":"Iterator[A: A]"},{"location":"builtin-Iterator/#usage","text":"Given the rules for using Iterators mentioned above, basic usage of an iterator looks like this: while iterator.has_next() do let elem = iterator.next()? // do something with elem end The For -loop provides a more concise way of iteration: for elem in iterator do // do something with elem end Iteration using While is more flexible as it allows to continue iterating if a call to next() errors. The For -loop does not allow this.","title":"Usage"},{"location":"builtin-Iterator/#implementing-iterators","text":"Iterator implementations need to adhere to the following rules to be considered well-behaved: If the Iterator is exhausted, has_next() needs to return false . Once has_next() returned false it is not allowed to switch back to true (Unless the Iterator supports rewinding) has_next() does not change its returned value if next() has not been called. That means, that between two calls to next() any number of calls to has_next() need to return the same value. (Unless the Iterator supports rewinding) A call to next() erroring does not necessarily denote exhaustiveness.","title":"Implementing Iterators"},{"location":"builtin-Iterator/#example","text":"// Generates values from `from` to 0 class ref Countdown is Iterator[USize] var _cur: USize var _has_next: Bool = true new ref create(from: USize) = _cur = from fun ref has_next(): Bool = _has_next fun ref next(): USize = let elem = _cur = _cur - 1 if elem == 0 then _has_next = false end elem interface ref Iterator[A: A]","title":"Example"},{"location":"builtin-Iterator/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Iterator/#has_next","text":"[Source] Returns true if this Iterator is not yet exhausted. That means that a value returned from a subsequent call to next() is a valid part of this iterator. Returns false if this Iterator is exhausted. The behavior of next() after this function returned false is undefined, it might throw an error or return values which are not part of this Iterator. fun ref has_next() : Bool val","title":"has_next"},{"location":"builtin-Iterator/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-Iterator/#next","text":"[Source] Generate the next value. This might error, which does not necessarily mean that the Iterator is exhausted. fun ref next() : A ?","title":"next"},{"location":"builtin-Iterator/#returns_1","text":"A ?","title":"Returns"},{"location":"builtin-Less/","text":"Less [Source] primitive val Less is Equatable[(Less val | Equal val | Greater val)] ref Implements Equatable [( Less val | Equal val | Greater val)] ref Constructors create [Source] new val create() : Less val^ Returns Less val^ Public Functions string [Source] fun box string() : String iso^ Returns String iso^ eq [Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val Parameters that: ( Less val | Equal val | Greater val) Returns Bool val ne [Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val Parameters that: ( Less val | Equal val | Greater val) Returns Bool val","title":"primitive Less"},{"location":"builtin-Less/#less","text":"[Source] primitive val Less is Equatable[(Less val | Equal val | Greater val)] ref","title":"Less"},{"location":"builtin-Less/#implements","text":"Equatable [( Less val | Equal val | Greater val)] ref","title":"Implements"},{"location":"builtin-Less/#constructors","text":"","title":"Constructors"},{"location":"builtin-Less/#create","text":"[Source] new val create() : Less val^","title":"create"},{"location":"builtin-Less/#returns","text":"Less val^","title":"Returns"},{"location":"builtin-Less/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Less/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Less/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-Less/#eq","text":"[Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val","title":"eq"},{"location":"builtin-Less/#parameters","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Less/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Less/#ne","text":"[Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val","title":"ne"},{"location":"builtin-Less/#parameters_1","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Less/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-MaybePointer/","text":"MaybePointer[A: A] [Source] A MaybePointer[A] is used to encode a possibly-null type. It should only be used for structs that need to be passed to and from the C FFI. An optional type for anything that isn't a struct should be encoded as a union type, for example (A | None). struct ref MaybePointer[A: A] Constructors create [Source] This re-encodes the type of that from A to MaybePointer[A], allowing that to be assigned to a field or variable of type MaybePointer[A]. It doesn't allocate a wrapper object: there is no containing object for that . new ref create( that: A) : MaybePointer[A] ref^ Parameters that: A Returns MaybePointer [A] ref^ none [Source] This returns a null pointer typed as a MaybePointer[A]. new ref none() : MaybePointer[A] ref^ Returns MaybePointer [A] ref^ Public Functions apply [Source] This re-encodes the type of this from MaybePointer[A] to A, allowing this to be assigned to a field of variable of type A. If this is a null pointer, an error is raised. fun box apply() : this- A ? Returns this- A ? is_none [Source] Returns true if this is null (ie apply would raise an error). fun box is_none() : Bool val Returns Bool val","title":"struct MaybePointer"},{"location":"builtin-MaybePointer/#maybepointer91a-a93","text":"[Source] A MaybePointer[A] is used to encode a possibly-null type. It should only be used for structs that need to be passed to and from the C FFI. An optional type for anything that isn't a struct should be encoded as a union type, for example (A | None). struct ref MaybePointer[A: A]","title":"MaybePointer[A: A]"},{"location":"builtin-MaybePointer/#constructors","text":"","title":"Constructors"},{"location":"builtin-MaybePointer/#create","text":"[Source] This re-encodes the type of that from A to MaybePointer[A], allowing that to be assigned to a field or variable of type MaybePointer[A]. It doesn't allocate a wrapper object: there is no containing object for that . new ref create( that: A) : MaybePointer[A] ref^","title":"create"},{"location":"builtin-MaybePointer/#parameters","text":"that: A","title":"Parameters"},{"location":"builtin-MaybePointer/#returns","text":"MaybePointer [A] ref^","title":"Returns"},{"location":"builtin-MaybePointer/#none","text":"[Source] This returns a null pointer typed as a MaybePointer[A]. new ref none() : MaybePointer[A] ref^","title":"none"},{"location":"builtin-MaybePointer/#returns_1","text":"MaybePointer [A] ref^","title":"Returns"},{"location":"builtin-MaybePointer/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-MaybePointer/#apply","text":"[Source] This re-encodes the type of this from MaybePointer[A] to A, allowing this to be assigned to a field of variable of type A. If this is a null pointer, an error is raised. fun box apply() : this- A ?","title":"apply"},{"location":"builtin-MaybePointer/#returns_2","text":"this- A ?","title":"Returns"},{"location":"builtin-MaybePointer/#is_none","text":"[Source] Returns true if this is null (ie apply would raise an error). fun box is_none() : Bool val","title":"is_none"},{"location":"builtin-MaybePointer/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-None/","text":"None [Source] primitive val None is Stringable box Implements Stringable box Constructors create [Source] new val create() : None val^ Returns None val^ Public Functions string [Source] fun box string() : String iso^ Returns String iso^ eq [Source] fun box eq( that: None val) : Bool val Parameters that: None val Returns Bool val ne [Source] fun box ne( that: None val) : Bool val Parameters that: None val Returns Bool val","title":"primitive None"},{"location":"builtin-None/#none","text":"[Source] primitive val None is Stringable box","title":"None"},{"location":"builtin-None/#implements","text":"Stringable box","title":"Implements"},{"location":"builtin-None/#constructors","text":"","title":"Constructors"},{"location":"builtin-None/#create","text":"[Source] new val create() : None val^","title":"create"},{"location":"builtin-None/#returns","text":"None val^","title":"Returns"},{"location":"builtin-None/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-None/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-None/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-None/#eq","text":"[Source] fun box eq( that: None val) : Bool val","title":"eq"},{"location":"builtin-None/#parameters","text":"that: None val","title":"Parameters"},{"location":"builtin-None/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-None/#ne","text":"[Source] fun box ne( that: None val) : Bool val","title":"ne"},{"location":"builtin-None/#parameters_1","text":"that: None val","title":"Parameters"},{"location":"builtin-None/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Number/","text":"Number [Source] type Number is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Type Alias For ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)","title":"type Number"},{"location":"builtin-Number/#number","text":"[Source] type Number is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)","title":"Number"},{"location":"builtin-Number/#type-alias-for","text":"( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)","title":"Type Alias For"},{"location":"builtin-OutStream/","text":"OutStream [Source] Asnychronous access to some output stream. interface tag OutStream Public Behaviours print [Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val)) Parameters data: ( String val | Array [ U8 val] val) write [Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val)) Parameters data: ( String val | Array [ U8 val] val) printv [Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val) Parameters data: ByteSeqIter val writev [Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val) Parameters data: ByteSeqIter val","title":"interface OutStream"},{"location":"builtin-OutStream/#outstream","text":"[Source] Asnychronous access to some output stream. interface tag OutStream","title":"OutStream"},{"location":"builtin-OutStream/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-OutStream/#print","text":"[Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val))","title":"print"},{"location":"builtin-OutStream/#parameters","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-OutStream/#write","text":"[Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val))","title":"write"},{"location":"builtin-OutStream/#parameters_1","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-OutStream/#printv","text":"[Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val)","title":"printv"},{"location":"builtin-OutStream/#parameters_2","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-OutStream/#writev","text":"[Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val)","title":"writev"},{"location":"builtin-OutStream/#parameters_3","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-Platform/","text":"Platform [Source] primitive val Platform Constructors create [Source] new val create() : Platform val^ Returns Platform val^ Public Functions bsd [Source] fun box bsd() : Bool val Returns Bool val freebsd [Source] fun box freebsd() : Bool val Returns Bool val dragonfly [Source] fun box dragonfly() : Bool val Returns Bool val openbsd [Source] fun box openbsd() : Bool val Returns Bool val linux [Source] fun box linux() : Bool val Returns Bool val osx [Source] fun box osx() : Bool val Returns Bool val posix [Source] fun box posix() : Bool val Returns Bool val windows [Source] fun box windows() : Bool val Returns Bool val x86 [Source] fun box x86() : Bool val Returns Bool val arm [Source] fun box arm() : Bool val Returns Bool val lp64 [Source] fun box lp64() : Bool val Returns Bool val llp64 [Source] fun box llp64() : Bool val Returns Bool val ilp32 [Source] fun box ilp32() : Bool val Returns Bool val bigendian [Source] fun box bigendian() : Bool val Returns Bool val littleendian [Source] fun box littleendian() : Bool val Returns Bool val native128 [Source] fun box native128() : Bool val Returns Bool val debug [Source] fun box debug() : Bool val Returns Bool val eq [Source] fun box eq( that: Platform val) : Bool val Parameters that: Platform val Returns Bool val ne [Source] fun box ne( that: Platform val) : Bool val Parameters that: Platform val Returns Bool val","title":"primitive Platform"},{"location":"builtin-Platform/#platform","text":"[Source] primitive val Platform","title":"Platform"},{"location":"builtin-Platform/#constructors","text":"","title":"Constructors"},{"location":"builtin-Platform/#create","text":"[Source] new val create() : Platform val^","title":"create"},{"location":"builtin-Platform/#returns","text":"Platform val^","title":"Returns"},{"location":"builtin-Platform/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Platform/#bsd","text":"[Source] fun box bsd() : Bool val","title":"bsd"},{"location":"builtin-Platform/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#freebsd","text":"[Source] fun box freebsd() : Bool val","title":"freebsd"},{"location":"builtin-Platform/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#dragonfly","text":"[Source] fun box dragonfly() : Bool val","title":"dragonfly"},{"location":"builtin-Platform/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#openbsd","text":"[Source] fun box openbsd() : Bool val","title":"openbsd"},{"location":"builtin-Platform/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#linux","text":"[Source] fun box linux() : Bool val","title":"linux"},{"location":"builtin-Platform/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#osx","text":"[Source] fun box osx() : Bool val","title":"osx"},{"location":"builtin-Platform/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#posix","text":"[Source] fun box posix() : Bool val","title":"posix"},{"location":"builtin-Platform/#returns_7","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#windows","text":"[Source] fun box windows() : Bool val","title":"windows"},{"location":"builtin-Platform/#returns_8","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#x86","text":"[Source] fun box x86() : Bool val","title":"x86"},{"location":"builtin-Platform/#returns_9","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#arm","text":"[Source] fun box arm() : Bool val","title":"arm"},{"location":"builtin-Platform/#returns_10","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#lp64","text":"[Source] fun box lp64() : Bool val","title":"lp64"},{"location":"builtin-Platform/#returns_11","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#llp64","text":"[Source] fun box llp64() : Bool val","title":"llp64"},{"location":"builtin-Platform/#returns_12","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#ilp32","text":"[Source] fun box ilp32() : Bool val","title":"ilp32"},{"location":"builtin-Platform/#returns_13","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#bigendian","text":"[Source] fun box bigendian() : Bool val","title":"bigendian"},{"location":"builtin-Platform/#returns_14","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#littleendian","text":"[Source] fun box littleendian() : Bool val","title":"littleendian"},{"location":"builtin-Platform/#returns_15","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#native128","text":"[Source] fun box native128() : Bool val","title":"native128"},{"location":"builtin-Platform/#returns_16","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#debug","text":"[Source] fun box debug() : Bool val","title":"debug"},{"location":"builtin-Platform/#returns_17","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#eq","text":"[Source] fun box eq( that: Platform val) : Bool val","title":"eq"},{"location":"builtin-Platform/#parameters","text":"that: Platform val","title":"Parameters"},{"location":"builtin-Platform/#returns_18","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#ne","text":"[Source] fun box ne( that: Platform val) : Bool val","title":"ne"},{"location":"builtin-Platform/#parameters_1","text":"that: Platform val","title":"Parameters"},{"location":"builtin-Platform/#returns_19","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/","text":"Pointer[A: A] [Source] A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be included in a union or intersection, or be a subtype of any interface. Most functions on a Pointer[A] are private to maintain memory safety. struct ref Pointer[A: A] Constructors create [Source] A null pointer. new ref create() : Pointer[A] ref^ Returns Pointer [A] ref^ _alloc [Source] Space for len instances of A. new ref _alloc( len: USize val) : Pointer[A] ref^ Parameters len: USize val Returns Pointer [A] ref^ Public Functions usize [Source] Convert the pointer into an integer. fun tag usize() : USize val Returns USize val is_null [Source] Return true for a null pointer, false for anything else. fun tag is_null() : Bool val Returns Bool val eq [Source] Return true if this address is that address. fun tag eq( that: Pointer[A] tag) : Bool val Parameters that: Pointer [A] tag Returns Bool val lt [Source] Return true if this address is less than that address. fun tag lt( that: Pointer[A] tag) : Bool val Parameters that: Pointer [A] tag Returns Bool val ne [Source] fun tag ne( that: Pointer[A] tag) : Bool val Parameters that: Pointer [A] tag Returns Bool val le [Source] fun tag le( that: Pointer[A] tag) : Bool val Parameters that: Pointer [A] tag Returns Bool val ge [Source] fun tag ge( that: Pointer[A] tag) : Bool val Parameters that: Pointer [A] tag Returns Bool val gt [Source] fun tag gt( that: Pointer[A] tag) : Bool val Parameters that: Pointer [A] tag Returns Bool val hash [Source] Returns a hash of the address. fun tag hash() : USize val Returns USize val hash64 [Source] Returns a 64-bit hash of the address. fun tag hash64() : U64 val Returns U64 val Private Functions _realloc [Source] Keep the contents, but reserve space for len instances of A. fun ref _realloc( len: USize val) : Pointer[A] ref Parameters len: USize val Returns Pointer [A] ref _unsafe [Source] Unsafe change in reference capability. fun tag _unsafe() : Pointer[A] ref Returns Pointer [A] ref _convert[B: B] [Source] Convert from Pointer[A] to Pointer[B]. fun box _convert[B: B]() : this- Pointer[B] ref Returns this- Pointer [B] ref _apply [Source] Retrieve index i. fun box _apply( i: USize val) : this- A Parameters i: USize val Returns this- A _update [Source] Set index i and return the previous value. fun ref _update( i: USize val, value: A!) : A^ Parameters i: USize val value: A! Returns A^ _offset [Source] Return a pointer to the n-th element. fun box _offset( n: USize val) : this- Pointer[A] ref Parameters n: USize val Returns this- Pointer [A] ref _element_size [Source] Return the size of a single element in an array of type A. fun tag _element_size() : USize val Returns USize val _insert [Source] Creates space for n new elements at the head, moving following elements. The array length before this should be len, and the available space should be at least n + len. fun ref _insert( n: USize val, len: USize val) : Pointer[A] ref Parameters n: USize val len: USize val Returns Pointer [A] ref _delete [Source] Delete n elements from the head of pointer, compact remaining elements of the underlying array. The array length before this should be n + len. Returns the first deleted element. fun ref _delete( n: USize val, len: USize val) : A^ Parameters n: USize val len: USize val Returns A^ _copy_to [Source] Copy n elements from this to that. fun box _copy_to( that: Pointer[this- A!] ref, n: USize val) : this- Pointer[A] ref Parameters that: Pointer [this- A!] ref n: USize val Returns this- Pointer [A] ref","title":"struct Pointer"},{"location":"builtin-Pointer/#pointer91a-a93","text":"[Source] A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be included in a union or intersection, or be a subtype of any interface. Most functions on a Pointer[A] are private to maintain memory safety. struct ref Pointer[A: A]","title":"Pointer[A: A]"},{"location":"builtin-Pointer/#constructors","text":"","title":"Constructors"},{"location":"builtin-Pointer/#create","text":"[Source] A null pointer. new ref create() : Pointer[A] ref^","title":"create"},{"location":"builtin-Pointer/#returns","text":"Pointer [A] ref^","title":"Returns"},{"location":"builtin-Pointer/#_alloc","text":"[Source] Space for len instances of A. new ref _alloc( len: USize val) : Pointer[A] ref^","title":"_alloc"},{"location":"builtin-Pointer/#parameters","text":"len: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_1","text":"Pointer [A] ref^","title":"Returns"},{"location":"builtin-Pointer/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Pointer/#usize","text":"[Source] Convert the pointer into an integer. fun tag usize() : USize val","title":"usize"},{"location":"builtin-Pointer/#returns_2","text":"USize val","title":"Returns"},{"location":"builtin-Pointer/#is_null","text":"[Source] Return true for a null pointer, false for anything else. fun tag is_null() : Bool val","title":"is_null"},{"location":"builtin-Pointer/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#eq","text":"[Source] Return true if this address is that address. fun tag eq( that: Pointer[A] tag) : Bool val","title":"eq"},{"location":"builtin-Pointer/#parameters_1","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#lt","text":"[Source] Return true if this address is less than that address. fun tag lt( that: Pointer[A] tag) : Bool val","title":"lt"},{"location":"builtin-Pointer/#parameters_2","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#ne","text":"[Source] fun tag ne( that: Pointer[A] tag) : Bool val","title":"ne"},{"location":"builtin-Pointer/#parameters_3","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#le","text":"[Source] fun tag le( that: Pointer[A] tag) : Bool val","title":"le"},{"location":"builtin-Pointer/#parameters_4","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_7","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#ge","text":"[Source] fun tag ge( that: Pointer[A] tag) : Bool val","title":"ge"},{"location":"builtin-Pointer/#parameters_5","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_8","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#gt","text":"[Source] fun tag gt( that: Pointer[A] tag) : Bool val","title":"gt"},{"location":"builtin-Pointer/#parameters_6","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_9","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#hash","text":"[Source] Returns a hash of the address. fun tag hash() : USize val","title":"hash"},{"location":"builtin-Pointer/#returns_10","text":"USize val","title":"Returns"},{"location":"builtin-Pointer/#hash64","text":"[Source] Returns a 64-bit hash of the address. fun tag hash64() : U64 val","title":"hash64"},{"location":"builtin-Pointer/#returns_11","text":"U64 val","title":"Returns"},{"location":"builtin-Pointer/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Pointer/#_realloc","text":"[Source] Keep the contents, but reserve space for len instances of A. fun ref _realloc( len: USize val) : Pointer[A] ref","title":"_realloc"},{"location":"builtin-Pointer/#parameters_7","text":"len: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_12","text":"Pointer [A] ref","title":"Returns"},{"location":"builtin-Pointer/#_unsafe","text":"[Source] Unsafe change in reference capability. fun tag _unsafe() : Pointer[A] ref","title":"_unsafe"},{"location":"builtin-Pointer/#returns_13","text":"Pointer [A] ref","title":"Returns"},{"location":"builtin-Pointer/#_convert91b-b93","text":"[Source] Convert from Pointer[A] to Pointer[B]. fun box _convert[B: B]() : this- Pointer[B] ref","title":"_convert[B: B]"},{"location":"builtin-Pointer/#returns_14","text":"this- Pointer [B] ref","title":"Returns"},{"location":"builtin-Pointer/#_apply","text":"[Source] Retrieve index i. fun box _apply( i: USize val) : this- A","title":"_apply"},{"location":"builtin-Pointer/#parameters_8","text":"i: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_15","text":"this- A","title":"Returns"},{"location":"builtin-Pointer/#_update","text":"[Source] Set index i and return the previous value. fun ref _update( i: USize val, value: A!) : A^","title":"_update"},{"location":"builtin-Pointer/#parameters_9","text":"i: USize val value: A!","title":"Parameters"},{"location":"builtin-Pointer/#returns_16","text":"A^","title":"Returns"},{"location":"builtin-Pointer/#_offset","text":"[Source] Return a pointer to the n-th element. fun box _offset( n: USize val) : this- Pointer[A] ref","title":"_offset"},{"location":"builtin-Pointer/#parameters_10","text":"n: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_17","text":"this- Pointer [A] ref","title":"Returns"},{"location":"builtin-Pointer/#_element_size","text":"[Source] Return the size of a single element in an array of type A. fun tag _element_size() : USize val","title":"_element_size"},{"location":"builtin-Pointer/#returns_18","text":"USize val","title":"Returns"},{"location":"builtin-Pointer/#_insert","text":"[Source] Creates space for n new elements at the head, moving following elements. The array length before this should be len, and the available space should be at least n + len. fun ref _insert( n: USize val, len: USize val) : Pointer[A] ref","title":"_insert"},{"location":"builtin-Pointer/#parameters_11","text":"n: USize val len: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_19","text":"Pointer [A] ref","title":"Returns"},{"location":"builtin-Pointer/#_delete","text":"[Source] Delete n elements from the head of pointer, compact remaining elements of the underlying array. The array length before this should be n + len. Returns the first deleted element. fun ref _delete( n: USize val, len: USize val) : A^","title":"_delete"},{"location":"builtin-Pointer/#parameters_12","text":"n: USize val len: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_20","text":"A^","title":"Returns"},{"location":"builtin-Pointer/#_copy_to","text":"[Source] Copy n elements from this to that. fun box _copy_to( that: Pointer[this- A!] ref, n: USize val) : this- Pointer[A] ref","title":"_copy_to"},{"location":"builtin-Pointer/#parameters_13","text":"that: Pointer [this- A!] ref n: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_21","text":"this- Pointer [A] ref","title":"Returns"},{"location":"builtin-ReadElement/","text":"ReadElement[A: A] [Source] Used to show that a ReadSeq can return an element of a specific unmodified type. interface box ReadElement[A: A] Public Functions apply [Source] fun box apply( i: USize val) : A ? Parameters i: USize val Returns A ?","title":"interface ReadElement"},{"location":"builtin-ReadElement/#readelement91a-a93","text":"[Source] Used to show that a ReadSeq can return an element of a specific unmodified type. interface box ReadElement[A: A]","title":"ReadElement[A: A]"},{"location":"builtin-ReadElement/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ReadElement/#apply","text":"[Source] fun box apply( i: USize val) : A ?","title":"apply"},{"location":"builtin-ReadElement/#parameters","text":"i: USize val","title":"Parameters"},{"location":"builtin-ReadElement/#returns","text":"A ?","title":"Returns"},{"location":"builtin-ReadSeq/","text":"ReadSeq[A: A] [Source] The readable interface of a sequence. interface box ReadSeq[A: A] Public Functions size [Source] Returns the number of elements in the sequence. fun box size() : USize val Returns USize val apply [Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. Note that this returns this- A, not A. fun box apply( i: USize val) : this- A ? Parameters i: USize val Returns this- A ? values [Source] Returns an iterator over the elements of the sequence. Note that this iterates over this- A, not A. fun box values() : Iterator[this- A] ref^ Returns Iterator [this- A] ref^","title":"interface ReadSeq"},{"location":"builtin-ReadSeq/#readseq91a-a93","text":"[Source] The readable interface of a sequence. interface box ReadSeq[A: A]","title":"ReadSeq[A: A]"},{"location":"builtin-ReadSeq/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ReadSeq/#size","text":"[Source] Returns the number of elements in the sequence. fun box size() : USize val","title":"size"},{"location":"builtin-ReadSeq/#returns","text":"USize val","title":"Returns"},{"location":"builtin-ReadSeq/#apply","text":"[Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. Note that this returns this- A, not A. fun box apply( i: USize val) : this- A ?","title":"apply"},{"location":"builtin-ReadSeq/#parameters","text":"i: USize val","title":"Parameters"},{"location":"builtin-ReadSeq/#returns_1","text":"this- A ?","title":"Returns"},{"location":"builtin-ReadSeq/#values","text":"[Source] Returns an iterator over the elements of the sequence. Note that this iterates over this- A, not A. fun box values() : Iterator[this- A] ref^","title":"values"},{"location":"builtin-ReadSeq/#returns_2","text":"Iterator [this- A] ref^","title":"Returns"},{"location":"builtin-Real/","text":"Real[A: Real [A] val] [Source] trait val Real[A: Real[A] val] is Stringable box, _ArithmeticConvertible val, Comparable[A] ref Implements Stringable box _ArithmeticConvertible val Comparable [A] ref Constructors create [Source] new val create( value: A) : Real[A] val^ Parameters value: A Returns Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [B] val)] [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^ Parameters a: B Returns Real [A] val^ min_value [Source] new val min_value() : Real[A] val^ Returns Real [A] val^ max_value [Source] new val max_value() : Real[A] val^ Returns Real [A] val^ Public Functions add [Source] fun box add( y: A) : A Parameters y: A Returns A sub [Source] fun box sub( y: A) : A Parameters y: A Returns A mul [Source] fun box mul( y: A) : A Parameters y: A Returns A div [Source] fun box div( y: A) : A Parameters y: A Returns A divrem [Source] fun box divrem( y: A) : (A , A) Parameters y: A Returns (A , A) rem [Source] fun box rem( y: A) : A Parameters y: A Returns A neg [Source] fun box neg() : A Returns A eq [Source] fun box eq( y: box- A) : Bool val Parameters y: box- A Returns Bool val ne [Source] fun box ne( y: box- A) : Bool val Parameters y: box- A Returns Bool val lt [Source] fun box lt( y: box- A) : Bool val Parameters y: box- A Returns Bool val le [Source] fun box le( y: box- A) : Bool val Parameters y: box- A Returns Bool val ge [Source] fun box ge( y: box- A) : Bool val Parameters y: box- A Returns Bool val gt [Source] fun box gt( y: box- A) : Bool val Parameters y: box- A Returns Bool val min [Source] fun box min( y: A) : A Parameters y: A Returns A max [Source] fun box max( y: A) : A Parameters y: A Returns A hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val string [Source] fun box string() : String iso^ Returns String iso^ i8 [Source] fun box i8() : I8 val Returns I8 val i16 [Source] fun box i16() : I16 val Returns I16 val i32 [Source] fun box i32() : I32 val Returns I32 val i64 [Source] fun box i64() : I64 val Returns I64 val i128 [Source] fun box i128() : I128 val Returns I128 val ilong [Source] fun box ilong() : ILong val Returns ILong val isize [Source] fun box isize() : ISize val Returns ISize val u8 [Source] fun box u8() : U8 val Returns U8 val u16 [Source] fun box u16() : U16 val Returns U16 val u32 [Source] fun box u32() : U32 val Returns U32 val u64 [Source] fun box u64() : U64 val Returns U64 val u128 [Source] fun box u128() : U128 val Returns U128 val ulong [Source] fun box ulong() : ULong val Returns ULong val usize [Source] fun box usize() : USize val Returns USize val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val i8_unsafe [Source] fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe [Source] fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe [Source] fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe [Source] fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe [Source] fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe [Source] fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe [Source] fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe [Source] fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe [Source] fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe [Source] fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe [Source] fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe [Source] fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe [Source] fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe [Source] fun box usize_unsafe() : USize val Returns USize val f32_unsafe [Source] fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: box- A) : (Less val | Equal val | Greater val) Parameters that: box- A Returns ( Less val | Equal val | Greater val) Private Functions _value [Source] fun box _value() : A Returns A","title":"trait Real"},{"location":"builtin-Real/#real91a-real91a93-val93","text":"[Source] trait val Real[A: Real[A] val] is Stringable box, _ArithmeticConvertible val, Comparable[A] ref","title":"Real[A: Real[A] val]"},{"location":"builtin-Real/#implements","text":"Stringable box _ArithmeticConvertible val Comparable [A] ref","title":"Implements"},{"location":"builtin-Real/#constructors","text":"","title":"Constructors"},{"location":"builtin-Real/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-Real/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-Real/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-Real/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-Real/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-Real/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-Real/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Real/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-Real/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_4","text":"A","title":"Returns"},{"location":"builtin-Real/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-Real/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_5","text":"A","title":"Returns"},{"location":"builtin-Real/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-Real/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_6","text":"A","title":"Returns"},{"location":"builtin-Real/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-Real/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_7","text":"A","title":"Returns"},{"location":"builtin-Real/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-Real/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_8","text":"(A , A)","title":"Returns"},{"location":"builtin-Real/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-Real/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_9","text":"A","title":"Returns"},{"location":"builtin-Real/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-Real/#returns_10","text":"A","title":"Returns"},{"location":"builtin-Real/#eq","text":"[Source] fun box eq( y: box- A) : Bool val","title":"eq"},{"location":"builtin-Real/#parameters_8","text":"y: box- A","title":"Parameters"},{"location":"builtin-Real/#returns_11","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#ne","text":"[Source] fun box ne( y: box- A) : Bool val","title":"ne"},{"location":"builtin-Real/#parameters_9","text":"y: box- A","title":"Parameters"},{"location":"builtin-Real/#returns_12","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#lt","text":"[Source] fun box lt( y: box- A) : Bool val","title":"lt"},{"location":"builtin-Real/#parameters_10","text":"y: box- A","title":"Parameters"},{"location":"builtin-Real/#returns_13","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#le","text":"[Source] fun box le( y: box- A) : Bool val","title":"le"},{"location":"builtin-Real/#parameters_11","text":"y: box- A","title":"Parameters"},{"location":"builtin-Real/#returns_14","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#ge","text":"[Source] fun box ge( y: box- A) : Bool val","title":"ge"},{"location":"builtin-Real/#parameters_12","text":"y: box- A","title":"Parameters"},{"location":"builtin-Real/#returns_15","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#gt","text":"[Source] fun box gt( y: box- A) : Bool val","title":"gt"},{"location":"builtin-Real/#parameters_13","text":"y: box- A","title":"Parameters"},{"location":"builtin-Real/#returns_16","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-Real/#parameters_14","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_17","text":"A","title":"Returns"},{"location":"builtin-Real/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-Real/#parameters_15","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_18","text":"A","title":"Returns"},{"location":"builtin-Real/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-Real/#returns_19","text":"USize val","title":"Returns"},{"location":"builtin-Real/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-Real/#returns_20","text":"U64 val","title":"Returns"},{"location":"builtin-Real/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Real/#returns_21","text":"String iso^","title":"Returns"},{"location":"builtin-Real/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-Real/#returns_22","text":"I8 val","title":"Returns"},{"location":"builtin-Real/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-Real/#returns_23","text":"I16 val","title":"Returns"},{"location":"builtin-Real/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-Real/#returns_24","text":"I32 val","title":"Returns"},{"location":"builtin-Real/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-Real/#returns_25","text":"I64 val","title":"Returns"},{"location":"builtin-Real/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-Real/#returns_26","text":"I128 val","title":"Returns"},{"location":"builtin-Real/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-Real/#returns_27","text":"ILong val","title":"Returns"},{"location":"builtin-Real/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-Real/#returns_28","text":"ISize val","title":"Returns"},{"location":"builtin-Real/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-Real/#returns_29","text":"U8 val","title":"Returns"},{"location":"builtin-Real/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-Real/#returns_30","text":"U16 val","title":"Returns"},{"location":"builtin-Real/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-Real/#returns_31","text":"U32 val","title":"Returns"},{"location":"builtin-Real/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-Real/#returns_32","text":"U64 val","title":"Returns"},{"location":"builtin-Real/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-Real/#returns_33","text":"U128 val","title":"Returns"},{"location":"builtin-Real/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-Real/#returns_34","text":"ULong val","title":"Returns"},{"location":"builtin-Real/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-Real/#returns_35","text":"USize val","title":"Returns"},{"location":"builtin-Real/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-Real/#returns_36","text":"F32 val","title":"Returns"},{"location":"builtin-Real/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-Real/#returns_37","text":"F64 val","title":"Returns"},{"location":"builtin-Real/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-Real/#returns_38","text":"I8 val","title":"Returns"},{"location":"builtin-Real/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-Real/#returns_39","text":"I16 val","title":"Returns"},{"location":"builtin-Real/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-Real/#returns_40","text":"I32 val","title":"Returns"},{"location":"builtin-Real/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-Real/#returns_41","text":"I64 val","title":"Returns"},{"location":"builtin-Real/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-Real/#returns_42","text":"I128 val","title":"Returns"},{"location":"builtin-Real/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-Real/#returns_43","text":"ILong val","title":"Returns"},{"location":"builtin-Real/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-Real/#returns_44","text":"ISize val","title":"Returns"},{"location":"builtin-Real/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-Real/#returns_45","text":"U8 val","title":"Returns"},{"location":"builtin-Real/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-Real/#returns_46","text":"U16 val","title":"Returns"},{"location":"builtin-Real/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-Real/#returns_47","text":"U32 val","title":"Returns"},{"location":"builtin-Real/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-Real/#returns_48","text":"U64 val","title":"Returns"},{"location":"builtin-Real/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-Real/#returns_49","text":"U128 val","title":"Returns"},{"location":"builtin-Real/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-Real/#returns_50","text":"ULong val","title":"Returns"},{"location":"builtin-Real/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-Real/#returns_51","text":"USize val","title":"Returns"},{"location":"builtin-Real/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-Real/#returns_52","text":"F32 val","title":"Returns"},{"location":"builtin-Real/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-Real/#returns_53","text":"F64 val","title":"Returns"},{"location":"builtin-Real/#compare","text":"fun box compare( that: box- A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-Real/#parameters_16","text":"that: box- A","title":"Parameters"},{"location":"builtin-Real/#returns_54","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-Real/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Real/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-Real/#returns_55","text":"A","title":"Returns"},{"location":"builtin-Seq/","text":"Seq[A: A] [Source] A sequence of elements. interface ref Seq[A: A] Constructors create [Source] Create a sequence, reserving space for len elements. new ref create( len: USize val = seq) : Seq[A] ref^ Parameters len: USize val = seq Returns Seq [A] ref^ Public Functions reserve [Source] Reserve space for len elements. fun ref reserve( len: USize val) : None val Parameters len: USize val Returns None val size [Source] Returns the number of elements in the sequence. fun box size() : USize val Returns USize val apply [Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. fun box apply( i: USize val) : this- A ? Parameters i: USize val Returns this- A ? update [Source] Replaces the i-th element of the sequence. Returns the previous value. Raises an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ? Parameters i: USize val value: A Returns A^ ? clear [Source] Removes all elements from the sequence. fun ref clear() : None val Returns None val push [Source] Adds an element to the end of the sequence. fun ref push( value: A) : None val Parameters value: A Returns None val pop [Source] Removes an element from the end of the sequence. fun ref pop() : A^ ? Returns A^ ? unshift [Source] Adds an element to the beginning of the sequence. fun ref unshift( value: A) : None val Parameters value: A Returns None val shift [Source] Removes an element from the beginning of the sequence. fun ref shift() : A^ ? Returns A^ ? append [Source] Add len elements to the end of the list, starting from the given offset. fun ref append( seq: (ReadSeq[A] box ReadElement[A^] box), offset: USize val = seq, len: USize val = seq) : None val Parameters seq: ( ReadSeq [A] box ReadElement [A^] box) offset: USize val = seq len: USize val = seq Returns None val concat [Source] Add len iterated elements to the end of the list, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = seq, len: USize val = seq) : None val Parameters iter: Iterator [A^] ref offset: USize val = seq len: USize val = seq Returns None val truncate [Source] Truncate the sequence to the given length, discarding excess elements. If the sequence is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val Parameters len: USize val Returns None val values [Source] Returns an iterator over the elements of the sequence. fun box values() : Iterator[this- A] ref^ Returns Iterator [this- A] ref^","title":"interface Seq"},{"location":"builtin-Seq/#seq91a-a93","text":"[Source] A sequence of elements. interface ref Seq[A: A]","title":"Seq[A: A]"},{"location":"builtin-Seq/#constructors","text":"","title":"Constructors"},{"location":"builtin-Seq/#create","text":"[Source] Create a sequence, reserving space for len elements. new ref create( len: USize val = seq) : Seq[A] ref^","title":"create"},{"location":"builtin-Seq/#parameters","text":"len: USize val = seq","title":"Parameters"},{"location":"builtin-Seq/#returns","text":"Seq [A] ref^","title":"Returns"},{"location":"builtin-Seq/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Seq/#reserve","text":"[Source] Reserve space for len elements. fun ref reserve( len: USize val) : None val","title":"reserve"},{"location":"builtin-Seq/#parameters_1","text":"len: USize val","title":"Parameters"},{"location":"builtin-Seq/#returns_1","text":"None val","title":"Returns"},{"location":"builtin-Seq/#size","text":"[Source] Returns the number of elements in the sequence. fun box size() : USize val","title":"size"},{"location":"builtin-Seq/#returns_2","text":"USize val","title":"Returns"},{"location":"builtin-Seq/#apply","text":"[Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. fun box apply( i: USize val) : this- A ?","title":"apply"},{"location":"builtin-Seq/#parameters_2","text":"i: USize val","title":"Parameters"},{"location":"builtin-Seq/#returns_3","text":"this- A ?","title":"Returns"},{"location":"builtin-Seq/#update","text":"[Source] Replaces the i-th element of the sequence. Returns the previous value. Raises an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ?","title":"update"},{"location":"builtin-Seq/#parameters_3","text":"i: USize val value: A","title":"Parameters"},{"location":"builtin-Seq/#returns_4","text":"A^ ?","title":"Returns"},{"location":"builtin-Seq/#clear","text":"[Source] Removes all elements from the sequence. fun ref clear() : None val","title":"clear"},{"location":"builtin-Seq/#returns_5","text":"None val","title":"Returns"},{"location":"builtin-Seq/#push","text":"[Source] Adds an element to the end of the sequence. fun ref push( value: A) : None val","title":"push"},{"location":"builtin-Seq/#parameters_4","text":"value: A","title":"Parameters"},{"location":"builtin-Seq/#returns_6","text":"None val","title":"Returns"},{"location":"builtin-Seq/#pop","text":"[Source] Removes an element from the end of the sequence. fun ref pop() : A^ ?","title":"pop"},{"location":"builtin-Seq/#returns_7","text":"A^ ?","title":"Returns"},{"location":"builtin-Seq/#unshift","text":"[Source] Adds an element to the beginning of the sequence. fun ref unshift( value: A) : None val","title":"unshift"},{"location":"builtin-Seq/#parameters_5","text":"value: A","title":"Parameters"},{"location":"builtin-Seq/#returns_8","text":"None val","title":"Returns"},{"location":"builtin-Seq/#shift","text":"[Source] Removes an element from the beginning of the sequence. fun ref shift() : A^ ?","title":"shift"},{"location":"builtin-Seq/#returns_9","text":"A^ ?","title":"Returns"},{"location":"builtin-Seq/#append","text":"[Source] Add len elements to the end of the list, starting from the given offset. fun ref append( seq: (ReadSeq[A] box ReadElement[A^] box), offset: USize val = seq, len: USize val = seq) : None val","title":"append"},{"location":"builtin-Seq/#parameters_6","text":"seq: ( ReadSeq [A] box ReadElement [A^] box) offset: USize val = seq len: USize val = seq","title":"Parameters"},{"location":"builtin-Seq/#returns_10","text":"None val","title":"Returns"},{"location":"builtin-Seq/#concat","text":"[Source] Add len iterated elements to the end of the list, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = seq, len: USize val = seq) : None val","title":"concat"},{"location":"builtin-Seq/#parameters_7","text":"iter: Iterator [A^] ref offset: USize val = seq len: USize val = seq","title":"Parameters"},{"location":"builtin-Seq/#returns_11","text":"None val","title":"Returns"},{"location":"builtin-Seq/#truncate","text":"[Source] Truncate the sequence to the given length, discarding excess elements. If the sequence is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val","title":"truncate"},{"location":"builtin-Seq/#parameters_8","text":"len: USize val","title":"Parameters"},{"location":"builtin-Seq/#returns_12","text":"None val","title":"Returns"},{"location":"builtin-Seq/#values","text":"[Source] Returns an iterator over the elements of the sequence. fun box values() : Iterator[this- A] ref^","title":"values"},{"location":"builtin-Seq/#returns_13","text":"Iterator [this- A] ref^","title":"Returns"},{"location":"builtin-Signed/","text":"Signed [Source] type Signed is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) Type Alias For ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)","title":"type Signed"},{"location":"builtin-Signed/#signed","text":"[Source] type Signed is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)","title":"Signed"},{"location":"builtin-Signed/#type-alias-for","text":"( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)","title":"Type Alias For"},{"location":"builtin-SourceLoc/","text":"SourceLoc [Source] Represents a location in a Pony source file, as reported by __loc . interface val SourceLoc Public Functions file [Source] Name and path of source file. fun box file() : String val Returns String val type_name [Source] Name of nearest class, actor, primitive, struct, interface, or trait. fun box type_name() : String val Returns String val method_name [Source] Name of containing method. fun box method_name() : String val Returns String val line [Source] Line number within file. Line numbers start at 1. fun box line() : USize val Returns USize val pos [Source] Character position on line. Character positions start at 1. fun box pos() : USize val Returns USize val","title":"interface SourceLoc"},{"location":"builtin-SourceLoc/#sourceloc","text":"[Source] Represents a location in a Pony source file, as reported by __loc . interface val SourceLoc","title":"SourceLoc"},{"location":"builtin-SourceLoc/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-SourceLoc/#file","text":"[Source] Name and path of source file. fun box file() : String val","title":"file"},{"location":"builtin-SourceLoc/#returns","text":"String val","title":"Returns"},{"location":"builtin-SourceLoc/#type_name","text":"[Source] Name of nearest class, actor, primitive, struct, interface, or trait. fun box type_name() : String val","title":"type_name"},{"location":"builtin-SourceLoc/#returns_1","text":"String val","title":"Returns"},{"location":"builtin-SourceLoc/#method_name","text":"[Source] Name of containing method. fun box method_name() : String val","title":"method_name"},{"location":"builtin-SourceLoc/#returns_2","text":"String val","title":"Returns"},{"location":"builtin-SourceLoc/#line","text":"[Source] Line number within file. Line numbers start at 1. fun box line() : USize val","title":"line"},{"location":"builtin-SourceLoc/#returns_3","text":"USize val","title":"Returns"},{"location":"builtin-SourceLoc/#pos","text":"[Source] Character position on line. Character positions start at 1. fun box pos() : USize val","title":"pos"},{"location":"builtin-SourceLoc/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-StdStream/","text":"StdStream [Source] Asynchronous access to stdout and stderr. The constructors are private to ensure that access is provided only via an environment. actor tag StdStream Constructors _out [Source] Create an async stream for stdout. new tag _out() : StdStream tag^ Returns StdStream tag^ _err [Source] Create an async stream for stderr. new tag _err() : StdStream tag^ Returns StdStream tag^ Public Behaviours print [Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val)) Parameters data: ( String val | Array [ U8 val] val) write [Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val)) Parameters data: ( String val | Array [ U8 val] val) printv [Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val) Parameters data: ByteSeqIter val writev [Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val) Parameters data: ByteSeqIter val Private Functions _write [Source] Write the bytes without explicitly flushing. fun ref _write( data: (String val | Array[U8 val] val)) : None val Parameters data: ( String val | Array [ U8 val] val) Returns None val _print [Source] Write the bytes and a newline without explicitly flushing. fun ref _print( data: (String val | Array[U8 val] val)) : None val Parameters data: ( String val | Array [ U8 val] val) Returns None val","title":"actor StdStream"},{"location":"builtin-StdStream/#stdstream","text":"[Source] Asynchronous access to stdout and stderr. The constructors are private to ensure that access is provided only via an environment. actor tag StdStream","title":"StdStream"},{"location":"builtin-StdStream/#constructors","text":"","title":"Constructors"},{"location":"builtin-StdStream/#_out","text":"[Source] Create an async stream for stdout. new tag _out() : StdStream tag^","title":"_out"},{"location":"builtin-StdStream/#returns","text":"StdStream tag^","title":"Returns"},{"location":"builtin-StdStream/#_err","text":"[Source] Create an async stream for stderr. new tag _err() : StdStream tag^","title":"_err"},{"location":"builtin-StdStream/#returns_1","text":"StdStream tag^","title":"Returns"},{"location":"builtin-StdStream/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-StdStream/#print","text":"[Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val))","title":"print"},{"location":"builtin-StdStream/#parameters","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-StdStream/#write","text":"[Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val))","title":"write"},{"location":"builtin-StdStream/#parameters_1","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-StdStream/#printv","text":"[Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val)","title":"printv"},{"location":"builtin-StdStream/#parameters_2","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-StdStream/#writev","text":"[Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val)","title":"writev"},{"location":"builtin-StdStream/#parameters_3","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-StdStream/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-StdStream/#_write","text":"[Source] Write the bytes without explicitly flushing. fun ref _write( data: (String val | Array[U8 val] val)) : None val","title":"_write"},{"location":"builtin-StdStream/#parameters_4","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-StdStream/#returns_2","text":"None val","title":"Returns"},{"location":"builtin-StdStream/#_print","text":"[Source] Write the bytes and a newline without explicitly flushing. fun ref _print( data: (String val | Array[U8 val] val)) : None val","title":"_print"},{"location":"builtin-StdStream/#parameters_5","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-StdStream/#returns_3","text":"None val","title":"Returns"},{"location":"builtin-Stdin/","text":"Stdin [Source] Asynchronous access to stdin. The constructor is private to ensure that access is provided only via an environment. Reading from stdin is done by registering an InputNotify : actor Main new create(env: Env) = // do not forget to call `env.input.dispose` at some point env.input( object iso is InputNotify fun ref apply(data: Array[U8] iso) = env.out.write(String.from_iso_array(consume data)) fun ref dispose() = env.out.print( Done. ) end, 512) Note: For reading user input from a terminal, use the term package. actor tag Stdin Constructors _create [Source] Create an asynchronous stdin provider. new tag _create( use_event: Bool val) : Stdin tag^ Parameters use_event: Bool val Returns Stdin tag^ Public Behaviours apply [Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = seq) Parameters notify: ( InputNotify iso | None val) chunk_size: USize val = seq dispose [Source] Clear the notifier in order to shut down input. be dispose() Private Behaviours _loop_read [Source] If we are able to read from stdin, schedule another read. be _loop_read() _event_notify [Source] When the event fires, read from stdin. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val _read_again [Source] Resume reading. be _read_again() Private Functions _set_notify [Source] Set the notifier. fun ref _set_notify( notify: (InputNotify iso | None val)) : None val Parameters notify: ( InputNotify iso | None val) Returns None val _read [Source] Read a chunk of data from stdin. Read a maximum of _chunk_size bytes, send ourself a resume message and stop reading to avoid starving other actors. fun ref _read() : Bool val Returns Bool val _close_event [Source] Close the event. fun ref _close_event() : None val Returns None val","title":"actor Stdin"},{"location":"builtin-Stdin/#stdin","text":"[Source] Asynchronous access to stdin. The constructor is private to ensure that access is provided only via an environment. Reading from stdin is done by registering an InputNotify : actor Main new create(env: Env) = // do not forget to call `env.input.dispose` at some point env.input( object iso is InputNotify fun ref apply(data: Array[U8] iso) = env.out.write(String.from_iso_array(consume data)) fun ref dispose() = env.out.print( Done. ) end, 512) Note: For reading user input from a terminal, use the term package. actor tag Stdin","title":"Stdin"},{"location":"builtin-Stdin/#constructors","text":"","title":"Constructors"},{"location":"builtin-Stdin/#_create","text":"[Source] Create an asynchronous stdin provider. new tag _create( use_event: Bool val) : Stdin tag^","title":"_create"},{"location":"builtin-Stdin/#parameters","text":"use_event: Bool val","title":"Parameters"},{"location":"builtin-Stdin/#returns","text":"Stdin tag^","title":"Returns"},{"location":"builtin-Stdin/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-Stdin/#apply","text":"[Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = seq)","title":"apply"},{"location":"builtin-Stdin/#parameters_1","text":"notify: ( InputNotify iso | None val) chunk_size: USize val = seq","title":"Parameters"},{"location":"builtin-Stdin/#dispose","text":"[Source] Clear the notifier in order to shut down input. be dispose()","title":"dispose"},{"location":"builtin-Stdin/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"builtin-Stdin/#_loop_read","text":"[Source] If we are able to read from stdin, schedule another read. be _loop_read()","title":"_loop_read"},{"location":"builtin-Stdin/#_event_notify","text":"[Source] When the event fires, read from stdin. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"builtin-Stdin/#parameters_2","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"builtin-Stdin/#_read_again","text":"[Source] Resume reading. be _read_again()","title":"_read_again"},{"location":"builtin-Stdin/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Stdin/#_set_notify","text":"[Source] Set the notifier. fun ref _set_notify( notify: (InputNotify iso | None val)) : None val","title":"_set_notify"},{"location":"builtin-Stdin/#parameters_3","text":"notify: ( InputNotify iso | None val)","title":"Parameters"},{"location":"builtin-Stdin/#returns_1","text":"None val","title":"Returns"},{"location":"builtin-Stdin/#_read","text":"[Source] Read a chunk of data from stdin. Read a maximum of _chunk_size bytes, send ourself a resume message and stop reading to avoid starving other actors. fun ref _read() : Bool val","title":"_read"},{"location":"builtin-Stdin/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Stdin/#_close_event","text":"[Source] Close the event. fun ref _close_event() : None val","title":"_close_event"},{"location":"builtin-Stdin/#returns_3","text":"None val","title":"Returns"},{"location":"builtin-String/","text":"String [Source] A String is an ordered collection of characters. Strings don't specify an encoding. Example usage of some common String methods: actor Main new create(env: Env) = try // construct a new string let str = Hello // make an uppercased version let str_upper = str.upper() // make a reversed version let str_reversed = str.reverse() // add world to the end of our original string let str_new = str.add( world ) // count occurrences of letter l let count = str_new.count( l ) // find first occurrence of letter w let first_w = str_new.find( w ) // find first occurrence of letter d let first_d = str_new.find( d ) // get substring capturing world let substr = str_new.substring(first_w, first_d+1) // clone substring let substr_clone = substr.clone() // print our substr env.out.print(consume substr) end class val String is Seq[U8 val] ref, Comparable[String box] ref, Stringable box Implements Seq [ U8 val] ref Comparable [ String box] ref Stringable box Constructors create [Source] An empty string. Enough space for len bytes is reserved. new ref create( len: USize val = seq) : String ref^ Parameters len: USize val = seq Returns String ref^ from_array [Source] Create a string from an array, reusing the underlying data pointer. new val from_array( data: Array[U8 val] val) : String val^ Parameters data: Array [ U8 val] val Returns String val^ from_iso_array [Source] Create a string from an array, reusing the underlying data pointer new iso from_iso_array( data: Array[U8 val] iso) : String iso^ Parameters data: Array [ U8 val] iso Returns String iso^ from_cpointer [Source] Return a string from binary pointer data without making a copy. This must be done only with C-FFI functions that return pony_alloc'd character arrays. If a null pointer is given then an empty string is returned. new ref from_cpointer( str: Pointer[U8 val] ref, len: USize val, alloc: USize val = seq) : String ref^ Parameters str: Pointer [ U8 val] ref len: USize val alloc: USize val = seq Returns String ref^ from_cstring [Source] Return a string from a pointer to a null-terminated cstring without making a copy. The data is not copied. This must be done only with C-FFI functions that return pony_alloc'd character arrays. The pointer is scanned for the first null byte, which will be interpreted as the null terminator. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref from_cstring( str: Pointer[U8 val] ref) : String ref^ Parameters str: Pointer [ U8 val] ref Returns String ref^ copy_cpointer [Source] Create a string by copying a fixed number of bytes from a pointer. new ref copy_cpointer( str: Pointer[U8 val] box, len: USize val) : String ref^ Parameters str: Pointer [ U8 val] box len: USize val Returns String ref^ copy_cstring [Source] Create a string by copying a null-terminated C string. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref copy_cstring( str: Pointer[U8 val] box) : String ref^ Parameters str: Pointer [ U8 val] box Returns String ref^ from_utf32 [Source] Create a UTF-8 string from a single UTF-32 code point. new ref from_utf32( value: U32 val) : String ref^ Parameters value: U32 val Returns String ref^ Public Functions push_utf32 [Source] Push a UTF-32 code point. fun ref push_utf32( value: U32 val) : None val Parameters value: U32 val Returns None val cpointer [Source] Returns a C compatible pointer to the underlying string allocation. fun box cpointer( offset: USize val = seq) : Pointer[U8 val] tag Parameters offset: USize val = seq Returns Pointer [ U8 val] tag cstring [Source] Returns a C compatible pointer to a null-terminated version of the string, safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. If the underlying string is already null terminated, this is returned; otherwise the string is copied into a new, null-terminated allocation. fun box cstring() : Pointer[U8 val] tag Returns Pointer [ U8 val] tag array [Source] Returns an Array[U8] that reuses the underlying data pointer. fun val array() : Array[U8 val] val Returns Array [ U8 val] val iso_array [Source] Returns an Array[U8] iso that reuses the underlying data pointer. fun iso iso_array() : Array[U8 val] iso^ Returns Array [ U8 val] iso^ size [Source] Returns the length of the string data in bytes. fun box size() : USize val Returns USize val codepoints [Source] Returns the number of unicode code points in the string between the two offsets. Index range [ from .. to ) is half-open. fun box codepoints( from: ISize val = seq, to: ISize val = seq) : USize val Parameters from: ISize val = seq to: ISize val = seq Returns USize val space [Source] Returns the space available for data, not including the null terminator. fun box space() : USize val Returns USize val reserve [Source] Reserve space for len bytes. An additional byte will be reserved for the null terminator. fun ref reserve( len: USize val) : None val Parameters len: USize val Returns None val compact [Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. The string is returned to allow call chaining. fun ref compact() : None val Returns None val recalc [Source] Recalculates the string length. This is only needed if the string is changed via an FFI call. If a null terminator byte is not found within the allocated length, the size will not be changed. fun ref recalc() : None val Returns None val truncate [Source] Truncates the string at the minimum of len and space. Ensures there is a null terminator. Does not check for null terminators inside the string. Note that memory is not freed by this operation. fun ref truncate( len: USize val) : None val Parameters len: USize val Returns None val trim_in_place [Source] Trim the string to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new string nor copy elements. fun ref trim_in_place( from: USize val = seq, to: USize val = seq) : None val Parameters from: USize val = seq to: USize val = seq Returns None val trim [Source] Return a shared portion of this string, covering from until to . Both the original and the new string are immutable, as they share memory. The operation does not allocate a new string pointer nor copy elements. fun val trim( from: USize val = seq, to: USize val = seq) : String val Parameters from: USize val = seq to: USize val = seq Returns String val chop [Source] Chops the string in half at the split point requested and returns both the left and right portions. The original string is trimmed in place and returned as the right portion. If the split point is larger than the string, the left portion is the original string and the right portion is a new empty string. Both strings are isolated and mutable, as they do not share memory. The operation does not allocate a new string pointer nor copy elements. fun iso chop( split_point: USize val) : (String iso^ , String iso^) Parameters split_point: USize val Returns ( String iso^ , String iso^) is_null_terminated [Source] Return true if the string is null-terminated and safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. This method checks that there is a null byte just after the final position of populated bytes in the string, but does not check for other null bytes which may be present earlier in the content of the string. If you need a null-terminated copy of this string, use the clone method. fun box is_null_terminated() : Bool val Returns Bool val utf32 [Source] Return a UTF32 representation of the character at the given offset and the number of bytes needed to encode that character. If the offset does not point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode replacement character) and a length of one. Raise an error if the offset is out of bounds. fun box utf32( offset: ISize val) : (U32 val , U8 val) ? Parameters offset: ISize val Returns ( U32 val , U8 val) ? apply [Source] Returns the i-th byte. Raise an error if the index is out of bounds. fun box apply( i: USize val) : U8 val ? Parameters i: USize val Returns U8 val ? update [Source] Change the i-th byte. Raise an error if the index is out of bounds. fun ref update( i: USize val, value: U8 val) : U8 val ? Parameters i: USize val value: U8 val Returns U8 val ? at_offset [Source] Returns the byte at the given offset. Raise an error if the offset is out of bounds. fun box at_offset( offset: ISize val) : U8 val ? Parameters offset: ISize val Returns U8 val ? update_offset [Source] Changes a byte in the string, returning the previous byte at that offset. Raise an error if the offset is out of bounds. fun ref update_offset( offset: ISize val, value: U8 val) : U8 val ? Parameters offset: ISize val value: U8 val Returns U8 val ? clone [Source] Returns a copy of the string. The resulting string is null-terminated even if the original is not. fun box clone() : String iso^ Returns String iso^ find [Source] Return the index of the n-th instance of s in the string starting from the beginning. Raise an error if there is no n-th occurrence of s or s is empty. fun box find( s: String box, offset: ISize val = seq, nth: USize val = seq) : ISize val ? Parameters s: String box offset: ISize val = seq nth: USize val = seq Returns ISize val ? rfind [Source] Return the index of n-th instance of s in the string starting from the end. The offset represents the highest index to included in the search. Raise an error if there is no n-th occurrence of s or s is empty. fun box rfind( s: String box, offset: ISize val = seq, nth: USize val = seq) : ISize val ? Parameters s: String box offset: ISize val = seq nth: USize val = seq Returns ISize val ? contains [Source] Returns true if contains s as a substring, false otherwise. fun box contains( s: String box, offset: ISize val = seq, nth: USize val = seq) : Bool val Parameters s: String box offset: ISize val = seq nth: USize val = seq Returns Bool val count [Source] Counts the non-overlapping occurrences of s in the string. fun box count( s: String box, offset: ISize val = seq) : USize val Parameters s: String box offset: ISize val = seq Returns USize val at [Source] Returns true if the substring s is present at the given offset. fun box at( s: String box, offset: ISize val = seq) : Bool val Parameters s: String box offset: ISize val = seq Returns Bool val delete [Source] Delete len bytes at the supplied offset, compacting the string in place. fun ref delete( offset: ISize val, len: USize val = seq) : None val Parameters offset: ISize val len: USize val = seq Returns None val substring [Source] Returns a substring. Index range [ from .. to ) is half-open. Returns an empty string if nothing is in the range. Note that this operation allocates a new string to be returned. For similar operations that don't allocate a new string, see trim and trim_in_place . fun box substring( from: ISize val, to: ISize val = seq) : String iso^ Parameters from: ISize val to: ISize val = seq Returns String iso^ lower [Source] Returns a lower case version of the string. fun box lower() : String iso^ Returns String iso^ lower_in_place [Source] Transforms the string to lower case. Currently only knows ASCII case. fun ref lower_in_place() : None val Returns None val upper [Source] Returns an upper case version of the string. Currently only knows ASCII case. fun box upper() : String iso^ Returns String iso^ upper_in_place [Source] Transforms the string to upper case. fun ref upper_in_place() : None val Returns None val reverse [Source] Returns a reversed version of the string. fun box reverse() : String iso^ Returns String iso^ reverse_in_place [Source] Reverses the byte order in the string. This needs to be changed to handle UTF-8 correctly. fun ref reverse_in_place() : None val Returns None val push [Source] Add a byte to the end of the string. fun ref push( value: U8 val) : None val Parameters value: U8 val Returns None val pop [Source] Remove a byte from the end of the string. fun ref pop() : U8 val ? Returns U8 val ? unshift [Source] Adds a byte to the beginning of the string. fun ref unshift( value: U8 val) : None val Parameters value: U8 val Returns None val shift [Source] Removes a byte from the beginning of the string. fun ref shift() : U8 val ? Returns U8 val ? append [Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: ReadSeq[U8 val] box, offset: USize val = seq, len: USize val = seq) : None val Parameters seq: ReadSeq [ U8 val] box offset: USize val = seq len: USize val = seq Returns None val concat [Source] Add len iterated bytes to the end of the string, starting from the given offset. fun ref concat( iter: Iterator[U8 val] ref, offset: USize val = seq, len: USize val = seq) : None val Parameters iter: Iterator [ U8 val] ref offset: USize val = seq len: USize val = seq Returns None val clear [Source] Truncate the string to zero length. fun ref clear() : None val Returns None val insert [Source] Returns a version of the string with the given string inserted at the given offset. fun box insert( offset: ISize val, that: String val) : String iso^ Parameters offset: ISize val that: String val Returns String iso^ insert_in_place [Source] Inserts the given string at the given offset. Appends the string if the offset is out of bounds. fun ref insert_in_place( offset: ISize val, that: String box) : None val Parameters offset: ISize val that: String box Returns None val insert_byte [Source] Inserts a byte at the given offset. Appends if the offset is out of bounds. fun ref insert_byte( offset: ISize val, value: U8 val) : None val Parameters offset: ISize val value: U8 val Returns None val cut [Source] Returns a version of the string with the given range deleted. Index range [ from .. to ) is half-open. fun box cut( from: ISize val, to: ISize val = seq) : String iso^ Parameters from: ISize val to: ISize val = seq Returns String iso^ cut_in_place [Source] Cuts the given range out of the string. Index range [ from .. to ) is half-open. fun ref cut_in_place( from: ISize val, to: ISize val = seq) : None val Parameters from: ISize val to: ISize val = seq Returns None val remove [Source] Remove all instances of s from the string. Returns the count of removed instances. fun ref remove( s: String box) : USize val Parameters s: String box Returns USize val replace [Source] Replace up to n occurrences of from in this with to . If n is 0, all occurrences will be replaced. Returns the count of replaced occurrences. fun ref replace( from: String box, to: String box, n: USize val = seq) : USize val Parameters from: String box to: String box n: USize val = seq Returns USize val split_by [Source] Split the string into an array of strings that are delimited by delim in the original string. If n 0 , then the split count is limited to n. Adjacent delimiters result in a zero length entry in the array. For example, \"1,,2\".split(\",\") = [\"1\", \"\", \"2\"] . An empty delimiter results in an array that contains a single element equal to the whole string. fun box split_by( delim: String val, n: USize val = seq) : Array[String val] iso^ Parameters delim: String val n: USize val = seq Returns Array [ String val] iso^ split [Source] Split the string into an array of strings. Any character in the delimiter string is accepted as a delimiter. If n 0 , then the split count is limited to n. Adjacent delimiters result in a zero length entry in the array. For example, \"1,,2\".split(\",\") = [\"1\", \"\", \"2\"] . fun box split( delim: String val = seq, n: USize val = seq) : Array[String val] iso^ Parameters delim: String val = seq n: USize val = seq Returns Array [ String val] iso^ strip [Source] Remove all leading and trailing characters from the string that are in s. fun ref strip( s: String box = seq) : None val Parameters s: String box = seq Returns None val rstrip [Source] Remove all trailing characters within the string that are in s. By default, trailing whitespace is removed. fun ref rstrip( s: String box = seq) : None val Parameters s: String box = seq Returns None val lstrip [Source] Remove all leading characters within the string that are in s. By default, leading whitespace is removed. fun ref lstrip( s: String box = seq) : None val Parameters s: String box = seq Returns None val add [Source] Return a string that is a concatenation of this and that. fun box add( that: String box) : String val Parameters that: String box Returns String val join [Source] Return a string that is a concatenation of the strings in data, using this as a separator. fun box join( data: Iterator[Stringable box] ref) : String iso^ Parameters data: Iterator [ Stringable box] ref Returns String iso^ compare [Source] Lexically compare two strings. fun box compare( that: String box) : (Less val | Equal val | Greater val) Parameters that: String box Returns ( Less val | Equal val | Greater val) compare_sub [Source] Lexically compare at most n bytes of the substring of this starting at offset with the substring of that starting at that_offset . The comparison is case sensitive unless ignore_case is true . If the substring of this is a proper prefix of the substring of that , then this is Less than that . Likewise, if that is a proper prefix of this , then this is Greater than that . Both offset and that_offset can be negative, in which case the offsets are computed from the end of the string. If n + offset is greater than the length of this , or n + that_offset is greater than the length of that , then the number of positions compared will be reduced to the length of the longest substring. Needs to be made UTF-8 safe. fun box compare_sub( that: String box, n: USize val, offset: ISize val = seq, that_offset: ISize val = seq, ignore_case: Bool val = seq) : (Less val | Equal val | Greater val) Parameters that: String box n: USize val offset: ISize val = seq that_offset: ISize val = seq ignore_case: Bool val = seq Returns ( Less val | Equal val | Greater val) eq [Source] Returns true if the two strings have the same contents. fun box eq( that: String box) : Bool val Parameters that: String box Returns Bool val lt [Source] Returns true if this is lexically less than that. Needs to be made UTF-8 safe. fun box lt( that: String box) : Bool val Parameters that: String box Returns Bool val le [Source] Returns true if this is lexically less than or equal to that. Needs to be made UTF-8 safe. fun box le( that: String box) : Bool val Parameters that: String box Returns Bool val offset_to_index [Source] fun box offset_to_index( i: ISize val) : USize val Parameters i: ISize val Returns USize val bool [Source] fun box bool() : Bool val ? Returns Bool val ? i8 [Source] fun box i8( base: U8 val = seq) : I8 val ? Parameters base: U8 val = seq Returns I8 val ? i16 [Source] fun box i16( base: U8 val = seq) : I16 val ? Parameters base: U8 val = seq Returns I16 val ? i32 [Source] fun box i32( base: U8 val = seq) : I32 val ? Parameters base: U8 val = seq Returns I32 val ? i64 [Source] fun box i64( base: U8 val = seq) : I64 val ? Parameters base: U8 val = seq Returns I64 val ? i128 [Source] fun box i128( base: U8 val = seq) : I128 val ? Parameters base: U8 val = seq Returns I128 val ? ilong [Source] fun box ilong( base: U8 val = seq) : ILong val ? Parameters base: U8 val = seq Returns ILong val ? isize [Source] fun box isize( base: U8 val = seq) : ISize val ? Parameters base: U8 val = seq Returns ISize val ? u8 [Source] fun box u8( base: U8 val = seq) : U8 val ? Parameters base: U8 val = seq Returns U8 val ? u16 [Source] fun box u16( base: U8 val = seq) : U16 val ? Parameters base: U8 val = seq Returns U16 val ? u32 [Source] fun box u32( base: U8 val = seq) : U32 val ? Parameters base: U8 val = seq Returns U32 val ? u64 [Source] fun box u64( base: U8 val = seq) : U64 val ? Parameters base: U8 val = seq Returns U64 val ? u128 [Source] fun box u128( base: U8 val = seq) : U128 val ? Parameters base: U8 val = seq Returns U128 val ? ulong [Source] fun box ulong( base: U8 val = seq) : ULong val ? Parameters base: U8 val = seq Returns ULong val ? usize [Source] fun box usize( base: U8 val = seq) : USize val ? Parameters base: U8 val = seq Returns USize val ? read_int[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer [A] val)] [Source] Read an integer from the specified location in this string. The integer value read and the number of characters consumed are reported. The base parameter specifies the base to use, 0 indicates using the prefix, if any, to detect base 2, 10 or 16. If no integer is found at the specified location, then (0, 0) is returned, since no characters have been used. An integer out of range for the target type throws an error. A leading minus is allowed for signed integer types. Underscore characters are allowed throughout the integer and are ignored. fun box read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[A] val)]( offset: ISize val = seq, base: U8 val = seq) : (A , USize val) ? Parameters offset: ISize val = seq base: U8 val = seq Returns (A , USize val) ? f32 [Source] fun box f32( offset: ISize val = seq) : F32 val Parameters offset: ISize val = seq Returns F32 val f64 [Source] fun box f64( offset: ISize val = seq) : F64 val Parameters offset: ISize val = seq Returns F64 val hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val string [Source] fun box string() : String iso^ Returns String iso^ values [Source] Return an iterator over the bytes in the string. fun box values() : StringBytes ref^ Returns StringBytes ref^ runes [Source] Return an iterator over the codepoints in the string. fun box runes() : StringRunes ref^ Returns StringRunes ref^ ge fun box ge( that: String box) : Bool val Parameters that: String box Returns Bool val gt fun box gt( that: String box) : Bool val Parameters that: String box Returns Bool val ne fun box ne( that: String box) : Bool val Parameters that: String box Returns Bool val Private Functions _copy_to [Source] Copy copy_len characters from this to that at specified offsets. fun box _copy_to( ptr: Pointer[U8 val] ref, copy_len: USize val, from_offset: USize val = seq, to_offset: USize val = seq) : None val Parameters ptr: Pointer [ U8 val] ref copy_len: USize val from_offset: USize val = seq to_offset: USize val = seq Returns None val _append [Source] fun iso _append( s: String box) : String iso^ Parameters s: String box Returns String iso^ _to_int[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer [A] val)] [Source] Convert the whole string to the specified type. If there are any other characters in the string, or the integer found is out of range for the target type then an error is thrown. fun box _to_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[A] val)]( base: U8 val) : A ? Parameters base: U8 val Returns A ? _read_int_base[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer [A] val)] [Source] Determine the base of an integer starting at the specified index. If a non-0 base is given use that. If given base is 0 read the base specifying prefix, if any, to detect base 2 or 16. If no base is specified and no prefix is found default to decimal. Note that a leading 0 does NOT imply octal. Report the base found and the number of characters in the prefix. fun box _read_int_base[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[A] val)]( base: U8 val, index: USize val) : (A , USize val) Parameters base: U8 val index: USize val Returns (A , USize val) _set [Source] Unsafe update, used internally. fun ref _set( i: USize val, value: U8 val) : U8 val Parameters i: USize val value: U8 val Returns U8 val","title":"class String"},{"location":"builtin-String/#string","text":"[Source] A String is an ordered collection of characters. Strings don't specify an encoding. Example usage of some common String methods: actor Main new create(env: Env) = try // construct a new string let str = Hello // make an uppercased version let str_upper = str.upper() // make a reversed version let str_reversed = str.reverse() // add world to the end of our original string let str_new = str.add( world ) // count occurrences of letter l let count = str_new.count( l ) // find first occurrence of letter w let first_w = str_new.find( w ) // find first occurrence of letter d let first_d = str_new.find( d ) // get substring capturing world let substr = str_new.substring(first_w, first_d+1) // clone substring let substr_clone = substr.clone() // print our substr env.out.print(consume substr) end class val String is Seq[U8 val] ref, Comparable[String box] ref, Stringable box","title":"String"},{"location":"builtin-String/#implements","text":"Seq [ U8 val] ref Comparable [ String box] ref Stringable box","title":"Implements"},{"location":"builtin-String/#constructors","text":"","title":"Constructors"},{"location":"builtin-String/#create","text":"[Source] An empty string. Enough space for len bytes is reserved. new ref create( len: USize val = seq) : String ref^","title":"create"},{"location":"builtin-String/#parameters","text":"len: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns","text":"String ref^","title":"Returns"},{"location":"builtin-String/#from_array","text":"[Source] Create a string from an array, reusing the underlying data pointer. new val from_array( data: Array[U8 val] val) : String val^","title":"from_array"},{"location":"builtin-String/#parameters_1","text":"data: Array [ U8 val] val","title":"Parameters"},{"location":"builtin-String/#returns_1","text":"String val^","title":"Returns"},{"location":"builtin-String/#from_iso_array","text":"[Source] Create a string from an array, reusing the underlying data pointer new iso from_iso_array( data: Array[U8 val] iso) : String iso^","title":"from_iso_array"},{"location":"builtin-String/#parameters_2","text":"data: Array [ U8 val] iso","title":"Parameters"},{"location":"builtin-String/#returns_2","text":"String iso^","title":"Returns"},{"location":"builtin-String/#from_cpointer","text":"[Source] Return a string from binary pointer data without making a copy. This must be done only with C-FFI functions that return pony_alloc'd character arrays. If a null pointer is given then an empty string is returned. new ref from_cpointer( str: Pointer[U8 val] ref, len: USize val, alloc: USize val = seq) : String ref^","title":"from_cpointer"},{"location":"builtin-String/#parameters_3","text":"str: Pointer [ U8 val] ref len: USize val alloc: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_3","text":"String ref^","title":"Returns"},{"location":"builtin-String/#from_cstring","text":"[Source] Return a string from a pointer to a null-terminated cstring without making a copy. The data is not copied. This must be done only with C-FFI functions that return pony_alloc'd character arrays. The pointer is scanned for the first null byte, which will be interpreted as the null terminator. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref from_cstring( str: Pointer[U8 val] ref) : String ref^","title":"from_cstring"},{"location":"builtin-String/#parameters_4","text":"str: Pointer [ U8 val] ref","title":"Parameters"},{"location":"builtin-String/#returns_4","text":"String ref^","title":"Returns"},{"location":"builtin-String/#copy_cpointer","text":"[Source] Create a string by copying a fixed number of bytes from a pointer. new ref copy_cpointer( str: Pointer[U8 val] box, len: USize val) : String ref^","title":"copy_cpointer"},{"location":"builtin-String/#parameters_5","text":"str: Pointer [ U8 val] box len: USize val","title":"Parameters"},{"location":"builtin-String/#returns_5","text":"String ref^","title":"Returns"},{"location":"builtin-String/#copy_cstring","text":"[Source] Create a string by copying a null-terminated C string. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref copy_cstring( str: Pointer[U8 val] box) : String ref^","title":"copy_cstring"},{"location":"builtin-String/#parameters_6","text":"str: Pointer [ U8 val] box","title":"Parameters"},{"location":"builtin-String/#returns_6","text":"String ref^","title":"Returns"},{"location":"builtin-String/#from_utf32","text":"[Source] Create a UTF-8 string from a single UTF-32 code point. new ref from_utf32( value: U32 val) : String ref^","title":"from_utf32"},{"location":"builtin-String/#parameters_7","text":"value: U32 val","title":"Parameters"},{"location":"builtin-String/#returns_7","text":"String ref^","title":"Returns"},{"location":"builtin-String/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-String/#push_utf32","text":"[Source] Push a UTF-32 code point. fun ref push_utf32( value: U32 val) : None val","title":"push_utf32"},{"location":"builtin-String/#parameters_8","text":"value: U32 val","title":"Parameters"},{"location":"builtin-String/#returns_8","text":"None val","title":"Returns"},{"location":"builtin-String/#cpointer","text":"[Source] Returns a C compatible pointer to the underlying string allocation. fun box cpointer( offset: USize val = seq) : Pointer[U8 val] tag","title":"cpointer"},{"location":"builtin-String/#parameters_9","text":"offset: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_9","text":"Pointer [ U8 val] tag","title":"Returns"},{"location":"builtin-String/#cstring","text":"[Source] Returns a C compatible pointer to a null-terminated version of the string, safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. If the underlying string is already null terminated, this is returned; otherwise the string is copied into a new, null-terminated allocation. fun box cstring() : Pointer[U8 val] tag","title":"cstring"},{"location":"builtin-String/#returns_10","text":"Pointer [ U8 val] tag","title":"Returns"},{"location":"builtin-String/#array","text":"[Source] Returns an Array[U8] that reuses the underlying data pointer. fun val array() : Array[U8 val] val","title":"array"},{"location":"builtin-String/#returns_11","text":"Array [ U8 val] val","title":"Returns"},{"location":"builtin-String/#iso_array","text":"[Source] Returns an Array[U8] iso that reuses the underlying data pointer. fun iso iso_array() : Array[U8 val] iso^","title":"iso_array"},{"location":"builtin-String/#returns_12","text":"Array [ U8 val] iso^","title":"Returns"},{"location":"builtin-String/#size","text":"[Source] Returns the length of the string data in bytes. fun box size() : USize val","title":"size"},{"location":"builtin-String/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-String/#codepoints","text":"[Source] Returns the number of unicode code points in the string between the two offsets. Index range [ from .. to ) is half-open. fun box codepoints( from: ISize val = seq, to: ISize val = seq) : USize val","title":"codepoints"},{"location":"builtin-String/#parameters_10","text":"from: ISize val = seq to: ISize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-String/#space","text":"[Source] Returns the space available for data, not including the null terminator. fun box space() : USize val","title":"space"},{"location":"builtin-String/#returns_15","text":"USize val","title":"Returns"},{"location":"builtin-String/#reserve","text":"[Source] Reserve space for len bytes. An additional byte will be reserved for the null terminator. fun ref reserve( len: USize val) : None val","title":"reserve"},{"location":"builtin-String/#parameters_11","text":"len: USize val","title":"Parameters"},{"location":"builtin-String/#returns_16","text":"None val","title":"Returns"},{"location":"builtin-String/#compact","text":"[Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. The string is returned to allow call chaining. fun ref compact() : None val","title":"compact"},{"location":"builtin-String/#returns_17","text":"None val","title":"Returns"},{"location":"builtin-String/#recalc","text":"[Source] Recalculates the string length. This is only needed if the string is changed via an FFI call. If a null terminator byte is not found within the allocated length, the size will not be changed. fun ref recalc() : None val","title":"recalc"},{"location":"builtin-String/#returns_18","text":"None val","title":"Returns"},{"location":"builtin-String/#truncate","text":"[Source] Truncates the string at the minimum of len and space. Ensures there is a null terminator. Does not check for null terminators inside the string. Note that memory is not freed by this operation. fun ref truncate( len: USize val) : None val","title":"truncate"},{"location":"builtin-String/#parameters_12","text":"len: USize val","title":"Parameters"},{"location":"builtin-String/#returns_19","text":"None val","title":"Returns"},{"location":"builtin-String/#trim_in_place","text":"[Source] Trim the string to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new string nor copy elements. fun ref trim_in_place( from: USize val = seq, to: USize val = seq) : None val","title":"trim_in_place"},{"location":"builtin-String/#parameters_13","text":"from: USize val = seq to: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_20","text":"None val","title":"Returns"},{"location":"builtin-String/#trim","text":"[Source] Return a shared portion of this string, covering from until to . Both the original and the new string are immutable, as they share memory. The operation does not allocate a new string pointer nor copy elements. fun val trim( from: USize val = seq, to: USize val = seq) : String val","title":"trim"},{"location":"builtin-String/#parameters_14","text":"from: USize val = seq to: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_21","text":"String val","title":"Returns"},{"location":"builtin-String/#chop","text":"[Source] Chops the string in half at the split point requested and returns both the left and right portions. The original string is trimmed in place and returned as the right portion. If the split point is larger than the string, the left portion is the original string and the right portion is a new empty string. Both strings are isolated and mutable, as they do not share memory. The operation does not allocate a new string pointer nor copy elements. fun iso chop( split_point: USize val) : (String iso^ , String iso^)","title":"chop"},{"location":"builtin-String/#parameters_15","text":"split_point: USize val","title":"Parameters"},{"location":"builtin-String/#returns_22","text":"( String iso^ , String iso^)","title":"Returns"},{"location":"builtin-String/#is_null_terminated","text":"[Source] Return true if the string is null-terminated and safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. This method checks that there is a null byte just after the final position of populated bytes in the string, but does not check for other null bytes which may be present earlier in the content of the string. If you need a null-terminated copy of this string, use the clone method. fun box is_null_terminated() : Bool val","title":"is_null_terminated"},{"location":"builtin-String/#returns_23","text":"Bool val","title":"Returns"},{"location":"builtin-String/#utf32","text":"[Source] Return a UTF32 representation of the character at the given offset and the number of bytes needed to encode that character. If the offset does not point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode replacement character) and a length of one. Raise an error if the offset is out of bounds. fun box utf32( offset: ISize val) : (U32 val , U8 val) ?","title":"utf32"},{"location":"builtin-String/#parameters_16","text":"offset: ISize val","title":"Parameters"},{"location":"builtin-String/#returns_24","text":"( U32 val , U8 val) ?","title":"Returns"},{"location":"builtin-String/#apply","text":"[Source] Returns the i-th byte. Raise an error if the index is out of bounds. fun box apply( i: USize val) : U8 val ?","title":"apply"},{"location":"builtin-String/#parameters_17","text":"i: USize val","title":"Parameters"},{"location":"builtin-String/#returns_25","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#update","text":"[Source] Change the i-th byte. Raise an error if the index is out of bounds. fun ref update( i: USize val, value: U8 val) : U8 val ?","title":"update"},{"location":"builtin-String/#parameters_18","text":"i: USize val value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_26","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#at_offset","text":"[Source] Returns the byte at the given offset. Raise an error if the offset is out of bounds. fun box at_offset( offset: ISize val) : U8 val ?","title":"at_offset"},{"location":"builtin-String/#parameters_19","text":"offset: ISize val","title":"Parameters"},{"location":"builtin-String/#returns_27","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#update_offset","text":"[Source] Changes a byte in the string, returning the previous byte at that offset. Raise an error if the offset is out of bounds. fun ref update_offset( offset: ISize val, value: U8 val) : U8 val ?","title":"update_offset"},{"location":"builtin-String/#parameters_20","text":"offset: ISize val value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_28","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#clone","text":"[Source] Returns a copy of the string. The resulting string is null-terminated even if the original is not. fun box clone() : String iso^","title":"clone"},{"location":"builtin-String/#returns_29","text":"String iso^","title":"Returns"},{"location":"builtin-String/#find","text":"[Source] Return the index of the n-th instance of s in the string starting from the beginning. Raise an error if there is no n-th occurrence of s or s is empty. fun box find( s: String box, offset: ISize val = seq, nth: USize val = seq) : ISize val ?","title":"find"},{"location":"builtin-String/#parameters_21","text":"s: String box offset: ISize val = seq nth: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_30","text":"ISize val ?","title":"Returns"},{"location":"builtin-String/#rfind","text":"[Source] Return the index of n-th instance of s in the string starting from the end. The offset represents the highest index to included in the search. Raise an error if there is no n-th occurrence of s or s is empty. fun box rfind( s: String box, offset: ISize val = seq, nth: USize val = seq) : ISize val ?","title":"rfind"},{"location":"builtin-String/#parameters_22","text":"s: String box offset: ISize val = seq nth: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_31","text":"ISize val ?","title":"Returns"},{"location":"builtin-String/#contains","text":"[Source] Returns true if contains s as a substring, false otherwise. fun box contains( s: String box, offset: ISize val = seq, nth: USize val = seq) : Bool val","title":"contains"},{"location":"builtin-String/#parameters_23","text":"s: String box offset: ISize val = seq nth: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_32","text":"Bool val","title":"Returns"},{"location":"builtin-String/#count","text":"[Source] Counts the non-overlapping occurrences of s in the string. fun box count( s: String box, offset: ISize val = seq) : USize val","title":"count"},{"location":"builtin-String/#parameters_24","text":"s: String box offset: ISize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_33","text":"USize val","title":"Returns"},{"location":"builtin-String/#at","text":"[Source] Returns true if the substring s is present at the given offset. fun box at( s: String box, offset: ISize val = seq) : Bool val","title":"at"},{"location":"builtin-String/#parameters_25","text":"s: String box offset: ISize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_34","text":"Bool val","title":"Returns"},{"location":"builtin-String/#delete","text":"[Source] Delete len bytes at the supplied offset, compacting the string in place. fun ref delete( offset: ISize val, len: USize val = seq) : None val","title":"delete"},{"location":"builtin-String/#parameters_26","text":"offset: ISize val len: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_35","text":"None val","title":"Returns"},{"location":"builtin-String/#substring","text":"[Source] Returns a substring. Index range [ from .. to ) is half-open. Returns an empty string if nothing is in the range. Note that this operation allocates a new string to be returned. For similar operations that don't allocate a new string, see trim and trim_in_place . fun box substring( from: ISize val, to: ISize val = seq) : String iso^","title":"substring"},{"location":"builtin-String/#parameters_27","text":"from: ISize val to: ISize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_36","text":"String iso^","title":"Returns"},{"location":"builtin-String/#lower","text":"[Source] Returns a lower case version of the string. fun box lower() : String iso^","title":"lower"},{"location":"builtin-String/#returns_37","text":"String iso^","title":"Returns"},{"location":"builtin-String/#lower_in_place","text":"[Source] Transforms the string to lower case. Currently only knows ASCII case. fun ref lower_in_place() : None val","title":"lower_in_place"},{"location":"builtin-String/#returns_38","text":"None val","title":"Returns"},{"location":"builtin-String/#upper","text":"[Source] Returns an upper case version of the string. Currently only knows ASCII case. fun box upper() : String iso^","title":"upper"},{"location":"builtin-String/#returns_39","text":"String iso^","title":"Returns"},{"location":"builtin-String/#upper_in_place","text":"[Source] Transforms the string to upper case. fun ref upper_in_place() : None val","title":"upper_in_place"},{"location":"builtin-String/#returns_40","text":"None val","title":"Returns"},{"location":"builtin-String/#reverse","text":"[Source] Returns a reversed version of the string. fun box reverse() : String iso^","title":"reverse"},{"location":"builtin-String/#returns_41","text":"String iso^","title":"Returns"},{"location":"builtin-String/#reverse_in_place","text":"[Source] Reverses the byte order in the string. This needs to be changed to handle UTF-8 correctly. fun ref reverse_in_place() : None val","title":"reverse_in_place"},{"location":"builtin-String/#returns_42","text":"None val","title":"Returns"},{"location":"builtin-String/#push","text":"[Source] Add a byte to the end of the string. fun ref push( value: U8 val) : None val","title":"push"},{"location":"builtin-String/#parameters_28","text":"value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_43","text":"None val","title":"Returns"},{"location":"builtin-String/#pop","text":"[Source] Remove a byte from the end of the string. fun ref pop() : U8 val ?","title":"pop"},{"location":"builtin-String/#returns_44","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#unshift","text":"[Source] Adds a byte to the beginning of the string. fun ref unshift( value: U8 val) : None val","title":"unshift"},{"location":"builtin-String/#parameters_29","text":"value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_45","text":"None val","title":"Returns"},{"location":"builtin-String/#shift","text":"[Source] Removes a byte from the beginning of the string. fun ref shift() : U8 val ?","title":"shift"},{"location":"builtin-String/#returns_46","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#append","text":"[Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: ReadSeq[U8 val] box, offset: USize val = seq, len: USize val = seq) : None val","title":"append"},{"location":"builtin-String/#parameters_30","text":"seq: ReadSeq [ U8 val] box offset: USize val = seq len: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_47","text":"None val","title":"Returns"},{"location":"builtin-String/#concat","text":"[Source] Add len iterated bytes to the end of the string, starting from the given offset. fun ref concat( iter: Iterator[U8 val] ref, offset: USize val = seq, len: USize val = seq) : None val","title":"concat"},{"location":"builtin-String/#parameters_31","text":"iter: Iterator [ U8 val] ref offset: USize val = seq len: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_48","text":"None val","title":"Returns"},{"location":"builtin-String/#clear","text":"[Source] Truncate the string to zero length. fun ref clear() : None val","title":"clear"},{"location":"builtin-String/#returns_49","text":"None val","title":"Returns"},{"location":"builtin-String/#insert","text":"[Source] Returns a version of the string with the given string inserted at the given offset. fun box insert( offset: ISize val, that: String val) : String iso^","title":"insert"},{"location":"builtin-String/#parameters_32","text":"offset: ISize val that: String val","title":"Parameters"},{"location":"builtin-String/#returns_50","text":"String iso^","title":"Returns"},{"location":"builtin-String/#insert_in_place","text":"[Source] Inserts the given string at the given offset. Appends the string if the offset is out of bounds. fun ref insert_in_place( offset: ISize val, that: String box) : None val","title":"insert_in_place"},{"location":"builtin-String/#parameters_33","text":"offset: ISize val that: String box","title":"Parameters"},{"location":"builtin-String/#returns_51","text":"None val","title":"Returns"},{"location":"builtin-String/#insert_byte","text":"[Source] Inserts a byte at the given offset. Appends if the offset is out of bounds. fun ref insert_byte( offset: ISize val, value: U8 val) : None val","title":"insert_byte"},{"location":"builtin-String/#parameters_34","text":"offset: ISize val value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_52","text":"None val","title":"Returns"},{"location":"builtin-String/#cut","text":"[Source] Returns a version of the string with the given range deleted. Index range [ from .. to ) is half-open. fun box cut( from: ISize val, to: ISize val = seq) : String iso^","title":"cut"},{"location":"builtin-String/#parameters_35","text":"from: ISize val to: ISize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_53","text":"String iso^","title":"Returns"},{"location":"builtin-String/#cut_in_place","text":"[Source] Cuts the given range out of the string. Index range [ from .. to ) is half-open. fun ref cut_in_place( from: ISize val, to: ISize val = seq) : None val","title":"cut_in_place"},{"location":"builtin-String/#parameters_36","text":"from: ISize val to: ISize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_54","text":"None val","title":"Returns"},{"location":"builtin-String/#remove","text":"[Source] Remove all instances of s from the string. Returns the count of removed instances. fun ref remove( s: String box) : USize val","title":"remove"},{"location":"builtin-String/#parameters_37","text":"s: String box","title":"Parameters"},{"location":"builtin-String/#returns_55","text":"USize val","title":"Returns"},{"location":"builtin-String/#replace","text":"[Source] Replace up to n occurrences of from in this with to . If n is 0, all occurrences will be replaced. Returns the count of replaced occurrences. fun ref replace( from: String box, to: String box, n: USize val = seq) : USize val","title":"replace"},{"location":"builtin-String/#parameters_38","text":"from: String box to: String box n: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-String/#split_by","text":"[Source] Split the string into an array of strings that are delimited by delim in the original string. If n 0 , then the split count is limited to n. Adjacent delimiters result in a zero length entry in the array. For example, \"1,,2\".split(\",\") = [\"1\", \"\", \"2\"] . An empty delimiter results in an array that contains a single element equal to the whole string. fun box split_by( delim: String val, n: USize val = seq) : Array[String val] iso^","title":"split_by"},{"location":"builtin-String/#parameters_39","text":"delim: String val n: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_57","text":"Array [ String val] iso^","title":"Returns"},{"location":"builtin-String/#split","text":"[Source] Split the string into an array of strings. Any character in the delimiter string is accepted as a delimiter. If n 0 , then the split count is limited to n. Adjacent delimiters result in a zero length entry in the array. For example, \"1,,2\".split(\",\") = [\"1\", \"\", \"2\"] . fun box split( delim: String val = seq, n: USize val = seq) : Array[String val] iso^","title":"split"},{"location":"builtin-String/#parameters_40","text":"delim: String val = seq n: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_58","text":"Array [ String val] iso^","title":"Returns"},{"location":"builtin-String/#strip","text":"[Source] Remove all leading and trailing characters from the string that are in s. fun ref strip( s: String box = seq) : None val","title":"strip"},{"location":"builtin-String/#parameters_41","text":"s: String box = seq","title":"Parameters"},{"location":"builtin-String/#returns_59","text":"None val","title":"Returns"},{"location":"builtin-String/#rstrip","text":"[Source] Remove all trailing characters within the string that are in s. By default, trailing whitespace is removed. fun ref rstrip( s: String box = seq) : None val","title":"rstrip"},{"location":"builtin-String/#parameters_42","text":"s: String box = seq","title":"Parameters"},{"location":"builtin-String/#returns_60","text":"None val","title":"Returns"},{"location":"builtin-String/#lstrip","text":"[Source] Remove all leading characters within the string that are in s. By default, leading whitespace is removed. fun ref lstrip( s: String box = seq) : None val","title":"lstrip"},{"location":"builtin-String/#parameters_43","text":"s: String box = seq","title":"Parameters"},{"location":"builtin-String/#returns_61","text":"None val","title":"Returns"},{"location":"builtin-String/#add","text":"[Source] Return a string that is a concatenation of this and that. fun box add( that: String box) : String val","title":"add"},{"location":"builtin-String/#parameters_44","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_62","text":"String val","title":"Returns"},{"location":"builtin-String/#join","text":"[Source] Return a string that is a concatenation of the strings in data, using this as a separator. fun box join( data: Iterator[Stringable box] ref) : String iso^","title":"join"},{"location":"builtin-String/#parameters_45","text":"data: Iterator [ Stringable box] ref","title":"Parameters"},{"location":"builtin-String/#returns_63","text":"String iso^","title":"Returns"},{"location":"builtin-String/#compare","text":"[Source] Lexically compare two strings. fun box compare( that: String box) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-String/#parameters_46","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_64","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-String/#compare_sub","text":"[Source] Lexically compare at most n bytes of the substring of this starting at offset with the substring of that starting at that_offset . The comparison is case sensitive unless ignore_case is true . If the substring of this is a proper prefix of the substring of that , then this is Less than that . Likewise, if that is a proper prefix of this , then this is Greater than that . Both offset and that_offset can be negative, in which case the offsets are computed from the end of the string. If n + offset is greater than the length of this , or n + that_offset is greater than the length of that , then the number of positions compared will be reduced to the length of the longest substring. Needs to be made UTF-8 safe. fun box compare_sub( that: String box, n: USize val, offset: ISize val = seq, that_offset: ISize val = seq, ignore_case: Bool val = seq) : (Less val | Equal val | Greater val)","title":"compare_sub"},{"location":"builtin-String/#parameters_47","text":"that: String box n: USize val offset: ISize val = seq that_offset: ISize val = seq ignore_case: Bool val = seq","title":"Parameters"},{"location":"builtin-String/#returns_65","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-String/#eq","text":"[Source] Returns true if the two strings have the same contents. fun box eq( that: String box) : Bool val","title":"eq"},{"location":"builtin-String/#parameters_48","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-String/#lt","text":"[Source] Returns true if this is lexically less than that. Needs to be made UTF-8 safe. fun box lt( that: String box) : Bool val","title":"lt"},{"location":"builtin-String/#parameters_49","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_67","text":"Bool val","title":"Returns"},{"location":"builtin-String/#le","text":"[Source] Returns true if this is lexically less than or equal to that. Needs to be made UTF-8 safe. fun box le( that: String box) : Bool val","title":"le"},{"location":"builtin-String/#parameters_50","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_68","text":"Bool val","title":"Returns"},{"location":"builtin-String/#offset_to_index","text":"[Source] fun box offset_to_index( i: ISize val) : USize val","title":"offset_to_index"},{"location":"builtin-String/#parameters_51","text":"i: ISize val","title":"Parameters"},{"location":"builtin-String/#returns_69","text":"USize val","title":"Returns"},{"location":"builtin-String/#bool","text":"[Source] fun box bool() : Bool val ?","title":"bool"},{"location":"builtin-String/#returns_70","text":"Bool val ?","title":"Returns"},{"location":"builtin-String/#i8","text":"[Source] fun box i8( base: U8 val = seq) : I8 val ?","title":"i8"},{"location":"builtin-String/#parameters_52","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_71","text":"I8 val ?","title":"Returns"},{"location":"builtin-String/#i16","text":"[Source] fun box i16( base: U8 val = seq) : I16 val ?","title":"i16"},{"location":"builtin-String/#parameters_53","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_72","text":"I16 val ?","title":"Returns"},{"location":"builtin-String/#i32","text":"[Source] fun box i32( base: U8 val = seq) : I32 val ?","title":"i32"},{"location":"builtin-String/#parameters_54","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_73","text":"I32 val ?","title":"Returns"},{"location":"builtin-String/#i64","text":"[Source] fun box i64( base: U8 val = seq) : I64 val ?","title":"i64"},{"location":"builtin-String/#parameters_55","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_74","text":"I64 val ?","title":"Returns"},{"location":"builtin-String/#i128","text":"[Source] fun box i128( base: U8 val = seq) : I128 val ?","title":"i128"},{"location":"builtin-String/#parameters_56","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_75","text":"I128 val ?","title":"Returns"},{"location":"builtin-String/#ilong","text":"[Source] fun box ilong( base: U8 val = seq) : ILong val ?","title":"ilong"},{"location":"builtin-String/#parameters_57","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_76","text":"ILong val ?","title":"Returns"},{"location":"builtin-String/#isize","text":"[Source] fun box isize( base: U8 val = seq) : ISize val ?","title":"isize"},{"location":"builtin-String/#parameters_58","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_77","text":"ISize val ?","title":"Returns"},{"location":"builtin-String/#u8","text":"[Source] fun box u8( base: U8 val = seq) : U8 val ?","title":"u8"},{"location":"builtin-String/#parameters_59","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_78","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#u16","text":"[Source] fun box u16( base: U8 val = seq) : U16 val ?","title":"u16"},{"location":"builtin-String/#parameters_60","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_79","text":"U16 val ?","title":"Returns"},{"location":"builtin-String/#u32","text":"[Source] fun box u32( base: U8 val = seq) : U32 val ?","title":"u32"},{"location":"builtin-String/#parameters_61","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_80","text":"U32 val ?","title":"Returns"},{"location":"builtin-String/#u64","text":"[Source] fun box u64( base: U8 val = seq) : U64 val ?","title":"u64"},{"location":"builtin-String/#parameters_62","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_81","text":"U64 val ?","title":"Returns"},{"location":"builtin-String/#u128","text":"[Source] fun box u128( base: U8 val = seq) : U128 val ?","title":"u128"},{"location":"builtin-String/#parameters_63","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_82","text":"U128 val ?","title":"Returns"},{"location":"builtin-String/#ulong","text":"[Source] fun box ulong( base: U8 val = seq) : ULong val ?","title":"ulong"},{"location":"builtin-String/#parameters_64","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_83","text":"ULong val ?","title":"Returns"},{"location":"builtin-String/#usize","text":"[Source] fun box usize( base: U8 val = seq) : USize val ?","title":"usize"},{"location":"builtin-String/#parameters_65","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_84","text":"USize val ?","title":"Returns"},{"location":"builtin-String/#read_int91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93","text":"[Source] Read an integer from the specified location in this string. The integer value read and the number of characters consumed are reported. The base parameter specifies the base to use, 0 indicates using the prefix, if any, to detect base 2, 10 or 16. If no integer is found at the specified location, then (0, 0) is returned, since no characters have been used. An integer out of range for the target type throws an error. A leading minus is allowed for signed integer types. Underscore characters are allowed throughout the integer and are ignored. fun box read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[A] val)]( offset: ISize val = seq, base: U8 val = seq) : (A , USize val) ?","title":"read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"},{"location":"builtin-String/#parameters_66","text":"offset: ISize val = seq base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_85","text":"(A , USize val) ?","title":"Returns"},{"location":"builtin-String/#f32","text":"[Source] fun box f32( offset: ISize val = seq) : F32 val","title":"f32"},{"location":"builtin-String/#parameters_67","text":"offset: ISize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_86","text":"F32 val","title":"Returns"},{"location":"builtin-String/#f64","text":"[Source] fun box f64( offset: ISize val = seq) : F64 val","title":"f64"},{"location":"builtin-String/#parameters_68","text":"offset: ISize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_87","text":"F64 val","title":"Returns"},{"location":"builtin-String/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-String/#returns_88","text":"USize val","title":"Returns"},{"location":"builtin-String/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-String/#returns_89","text":"U64 val","title":"Returns"},{"location":"builtin-String/#string_1","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-String/#returns_90","text":"String iso^","title":"Returns"},{"location":"builtin-String/#values","text":"[Source] Return an iterator over the bytes in the string. fun box values() : StringBytes ref^","title":"values"},{"location":"builtin-String/#returns_91","text":"StringBytes ref^","title":"Returns"},{"location":"builtin-String/#runes","text":"[Source] Return an iterator over the codepoints in the string. fun box runes() : StringRunes ref^","title":"runes"},{"location":"builtin-String/#returns_92","text":"StringRunes ref^","title":"Returns"},{"location":"builtin-String/#ge","text":"fun box ge( that: String box) : Bool val","title":"ge"},{"location":"builtin-String/#parameters_69","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_93","text":"Bool val","title":"Returns"},{"location":"builtin-String/#gt","text":"fun box gt( that: String box) : Bool val","title":"gt"},{"location":"builtin-String/#parameters_70","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_94","text":"Bool val","title":"Returns"},{"location":"builtin-String/#ne","text":"fun box ne( that: String box) : Bool val","title":"ne"},{"location":"builtin-String/#parameters_71","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_95","text":"Bool val","title":"Returns"},{"location":"builtin-String/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-String/#_copy_to","text":"[Source] Copy copy_len characters from this to that at specified offsets. fun box _copy_to( ptr: Pointer[U8 val] ref, copy_len: USize val, from_offset: USize val = seq, to_offset: USize val = seq) : None val","title":"_copy_to"},{"location":"builtin-String/#parameters_72","text":"ptr: Pointer [ U8 val] ref copy_len: USize val from_offset: USize val = seq to_offset: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_96","text":"None val","title":"Returns"},{"location":"builtin-String/#_append","text":"[Source] fun iso _append( s: String box) : String iso^","title":"_append"},{"location":"builtin-String/#parameters_73","text":"s: String box","title":"Parameters"},{"location":"builtin-String/#returns_97","text":"String iso^","title":"Returns"},{"location":"builtin-String/#_to_int91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93","text":"[Source] Convert the whole string to the specified type. If there are any other characters in the string, or the integer found is out of range for the target type then an error is thrown. fun box _to_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[A] val)]( base: U8 val) : A ?","title":"_to_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"},{"location":"builtin-String/#parameters_74","text":"base: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_98","text":"A ?","title":"Returns"},{"location":"builtin-String/#_read_int_base91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93","text":"[Source] Determine the base of an integer starting at the specified index. If a non-0 base is given use that. If given base is 0 read the base specifying prefix, if any, to detect base 2 or 16. If no base is specified and no prefix is found default to decimal. Note that a leading 0 does NOT imply octal. Report the base found and the number of characters in the prefix. fun box _read_int_base[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[A] val)]( base: U8 val, index: USize val) : (A , USize val)","title":"_read_int_base[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"},{"location":"builtin-String/#parameters_75","text":"base: U8 val index: USize val","title":"Parameters"},{"location":"builtin-String/#returns_99","text":"(A , USize val)","title":"Returns"},{"location":"builtin-String/#_set","text":"[Source] Unsafe update, used internally. fun ref _set( i: USize val, value: U8 val) : U8 val","title":"_set"},{"location":"builtin-String/#parameters_76","text":"i: USize val value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_100","text":"U8 val","title":"Returns"},{"location":"builtin-StringBytes/","text":"StringBytes [Source] class ref StringBytes is Iterator[U8 val] ref Implements Iterator [ U8 val] ref Constructors create [Source] new ref create( string: String box) : StringBytes ref^ Parameters string: String box Returns StringBytes ref^ Public Functions has_next [Source] fun box has_next() : Bool val Returns Bool val next [Source] fun ref next() : U8 val ? Returns U8 val ?","title":"class StringBytes"},{"location":"builtin-StringBytes/#stringbytes","text":"[Source] class ref StringBytes is Iterator[U8 val] ref","title":"StringBytes"},{"location":"builtin-StringBytes/#implements","text":"Iterator [ U8 val] ref","title":"Implements"},{"location":"builtin-StringBytes/#constructors","text":"","title":"Constructors"},{"location":"builtin-StringBytes/#create","text":"[Source] new ref create( string: String box) : StringBytes ref^","title":"create"},{"location":"builtin-StringBytes/#parameters","text":"string: String box","title":"Parameters"},{"location":"builtin-StringBytes/#returns","text":"StringBytes ref^","title":"Returns"},{"location":"builtin-StringBytes/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-StringBytes/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-StringBytes/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-StringBytes/#next","text":"[Source] fun ref next() : U8 val ?","title":"next"},{"location":"builtin-StringBytes/#returns_2","text":"U8 val ?","title":"Returns"},{"location":"builtin-StringRunes/","text":"StringRunes [Source] class ref StringRunes is Iterator[U32 val] ref Implements Iterator [ U32 val] ref Constructors create [Source] new ref create( string: String box) : StringRunes ref^ Parameters string: String box Returns StringRunes ref^ Public Functions has_next [Source] fun box has_next() : Bool val Returns Bool val next [Source] fun ref next() : U32 val ? Returns U32 val ?","title":"class StringRunes"},{"location":"builtin-StringRunes/#stringrunes","text":"[Source] class ref StringRunes is Iterator[U32 val] ref","title":"StringRunes"},{"location":"builtin-StringRunes/#implements","text":"Iterator [ U32 val] ref","title":"Implements"},{"location":"builtin-StringRunes/#constructors","text":"","title":"Constructors"},{"location":"builtin-StringRunes/#create","text":"[Source] new ref create( string: String box) : StringRunes ref^","title":"create"},{"location":"builtin-StringRunes/#parameters","text":"string: String box","title":"Parameters"},{"location":"builtin-StringRunes/#returns","text":"StringRunes ref^","title":"Returns"},{"location":"builtin-StringRunes/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-StringRunes/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-StringRunes/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-StringRunes/#next","text":"[Source] fun ref next() : U32 val ?","title":"next"},{"location":"builtin-StringRunes/#returns_2","text":"U32 val ?","title":"Returns"},{"location":"builtin-Stringable/","text":"Stringable [Source] Things that can be turned into a String. interface box Stringable Public Functions string [Source] Generate a string representation of this object. fun box string() : String iso^ Returns String iso^","title":"interface Stringable"},{"location":"builtin-Stringable/#stringable","text":"[Source] Things that can be turned into a String. interface box Stringable","title":"Stringable"},{"location":"builtin-Stringable/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Stringable/#string","text":"[Source] Generate a string representation of this object. fun box string() : String iso^","title":"string"},{"location":"builtin-Stringable/#returns","text":"String iso^","title":"Returns"},{"location":"builtin-U128/","text":"U128 [Source] primitive val U128 is _UnsignedInteger[U128 val] val Implements _UnsignedInteger [ U128 val] val Constructors create [Source] new val create( value: U128 val) : U128 val^ Parameters value: U128 val Returns U128 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : U128 val^ Parameters a: A Returns U128 val^ min_value [Source] new val min_value() : U128 val^ Returns U128 val^ max_value [Source] new val max_value() : U128 val^ Returns U128 val^ Public Functions next_pow2 [Source] fun box next_pow2() : U128 val Returns U128 val abs [Source] fun box abs() : U128 val Returns U128 val bit_reverse [Source] fun box bit_reverse() : U128 val Returns U128 val bswap [Source] fun box bswap() : U128 val Returns U128 val popcount [Source] fun box popcount() : U128 val Returns U128 val clz [Source] fun box clz() : U128 val Returns U128 val ctz [Source] fun box ctz() : U128 val Returns U128 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val Returns U128 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val Returns U128 val bitwidth [Source] fun box bitwidth() : U128 val Returns U128 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val max [Source] fun box max( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val string [Source] fun box string() : String iso^ Returns String iso^ mul [Source] fun box mul( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val divrem [Source] fun box divrem( y: U128 val) : (U128 val , U128 val) Parameters y: U128 val Returns ( U128 val , U128 val) div [Source] fun box div( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val rem [Source] fun box rem( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val mul_unsafe [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val divrem_unsafe [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: U128 val) : (U128 val , U128 val) Parameters y: U128 val Returns ( U128 val , U128 val) div_unsafe [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val rem_unsafe [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val f32_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val Returns F64 val addc [Source] fun box addc( y: U128 val) : (U128 val , Bool val) Parameters y: U128 val Returns ( U128 val , Bool val) subc [Source] fun box subc( y: U128 val) : (U128 val , Bool val) Parameters y: U128 val Returns ( U128 val , Bool val) mulc [Source] fun box mulc( y: U128 val) : (U128 val , Bool val) Parameters y: U128 val Returns ( U128 val , Bool val) divc [Source] fun box divc( y: U128 val) : (U128 val , Bool val) Parameters y: U128 val Returns ( U128 val , Bool val) remc [Source] fun box remc( y: U128 val) : (U128 val , Bool val) Parameters y: U128 val Returns ( U128 val , Bool val) add_partial [Source] fun box add_partial( y: U128 val) : U128 val ? Parameters y: U128 val Returns U128 val ? sub_partial [Source] fun box sub_partial( y: U128 val) : U128 val ? Parameters y: U128 val Returns U128 val ? mul_partial [Source] fun box mul_partial( y: U128 val) : U128 val ? Parameters y: U128 val Returns U128 val ? div_partial [Source] fun box div_partial( y: U128 val) : U128 val ? Parameters y: U128 val Returns U128 val ? rem_partial [Source] fun box rem_partial( y: U128 val) : U128 val ? Parameters y: U128 val Returns U128 val ? divrem_partial [Source] fun box divrem_partial( y: U128 val) : (U128 val , U128 val) ? Parameters y: U128 val Returns ( U128 val , U128 val) ? shl fun box shl( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val shr fun box shr( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val shl_unsafe fun box shl_unsafe( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val shr_unsafe fun box shr_unsafe( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val rotl fun box rotl( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val rotr fun box rotr( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val add_unsafe fun box add_unsafe( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val sub_unsafe fun box sub_unsafe( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val neg_unsafe fun box neg_unsafe() : U128 val Returns U128 val op_and fun box op_and( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val op_or fun box op_or( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val op_xor fun box op_xor( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val op_not fun box op_not() : U128 val Returns U128 val add fun box add( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val sub fun box sub( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val neg fun box neg() : U128 val Returns U128 val eq fun box eq( y: U128 val) : Bool val Parameters y: U128 val Returns Bool val ne fun box ne( y: U128 val) : Bool val Parameters y: U128 val Returns Bool val lt fun box lt( y: U128 val) : Bool val Parameters y: U128 val Returns Bool val le fun box le( y: U128 val) : Bool val Parameters y: U128 val Returns Bool val ge fun box ge( y: U128 val) : Bool val Parameters y: U128 val Returns Bool val gt fun box gt( y: U128 val) : Bool val Parameters y: U128 val Returns Bool val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val compare fun box compare( that: U128 val) : (Less val | Equal val | Greater val) Parameters that: U128 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : U128 val Returns U128 val","title":"primitive U128"},{"location":"builtin-U128/#u128","text":"[Source] primitive val U128 is _UnsignedInteger[U128 val] val","title":"U128"},{"location":"builtin-U128/#implements","text":"_UnsignedInteger [ U128 val] val","title":"Implements"},{"location":"builtin-U128/#constructors","text":"","title":"Constructors"},{"location":"builtin-U128/#create","text":"[Source] new val create( value: U128 val) : U128 val^","title":"create"},{"location":"builtin-U128/#parameters","text":"value: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : U128 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U128/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U128/#returns_1","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#min_value","text":"[Source] new val min_value() : U128 val^","title":"min_value"},{"location":"builtin-U128/#returns_2","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#max_value","text":"[Source] new val max_value() : U128 val^","title":"max_value"},{"location":"builtin-U128/#returns_3","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U128/#next_pow2","text":"[Source] fun box next_pow2() : U128 val","title":"next_pow2"},{"location":"builtin-U128/#returns_4","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#abs","text":"[Source] fun box abs() : U128 val","title":"abs"},{"location":"builtin-U128/#returns_5","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bit_reverse","text":"[Source] fun box bit_reverse() : U128 val","title":"bit_reverse"},{"location":"builtin-U128/#returns_6","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bswap","text":"[Source] fun box bswap() : U128 val","title":"bswap"},{"location":"builtin-U128/#returns_7","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#popcount","text":"[Source] fun box popcount() : U128 val","title":"popcount"},{"location":"builtin-U128/#returns_8","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#clz","text":"[Source] fun box clz() : U128 val","title":"clz"},{"location":"builtin-U128/#returns_9","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ctz","text":"[Source] fun box ctz() : U128 val","title":"ctz"},{"location":"builtin-U128/#returns_10","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val","title":"clz_unsafe"},{"location":"builtin-U128/#returns_11","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val","title":"ctz_unsafe"},{"location":"builtin-U128/#returns_12","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bitwidth","text":"[Source] fun box bitwidth() : U128 val","title":"bitwidth"},{"location":"builtin-U128/#returns_13","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U128/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U128/#min","text":"[Source] fun box min( y: U128 val) : U128 val","title":"min"},{"location":"builtin-U128/#parameters_2","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_15","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#max","text":"[Source] fun box max( y: U128 val) : U128 val","title":"max"},{"location":"builtin-U128/#parameters_3","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_16","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-U128/#returns_17","text":"USize val","title":"Returns"},{"location":"builtin-U128/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U128/#returns_18","text":"U64 val","title":"Returns"},{"location":"builtin-U128/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-U128/#returns_19","text":"String iso^","title":"Returns"},{"location":"builtin-U128/#mul","text":"[Source] fun box mul( y: U128 val) : U128 val","title":"mul"},{"location":"builtin-U128/#parameters_4","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_20","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#divrem","text":"[Source] fun box divrem( y: U128 val) : (U128 val , U128 val)","title":"divrem"},{"location":"builtin-U128/#parameters_5","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_21","text":"( U128 val , U128 val)","title":"Returns"},{"location":"builtin-U128/#div","text":"[Source] fun box div( y: U128 val) : U128 val","title":"div"},{"location":"builtin-U128/#parameters_6","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_22","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rem","text":"[Source] fun box rem( y: U128 val) : U128 val","title":"rem"},{"location":"builtin-U128/#parameters_7","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_23","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#mul_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: U128 val) : U128 val","title":"mul_unsafe"},{"location":"builtin-U128/#parameters_8","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_24","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#divrem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: U128 val) : (U128 val , U128 val)","title":"divrem_unsafe"},{"location":"builtin-U128/#parameters_9","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_25","text":"( U128 val , U128 val)","title":"Returns"},{"location":"builtin-U128/#div_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: U128 val) : U128 val","title":"div_unsafe"},{"location":"builtin-U128/#parameters_10","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_26","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: U128 val) : U128 val","title":"rem_unsafe"},{"location":"builtin-U128/#parameters_11","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_27","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-U128/#returns_28","text":"F32 val","title":"Returns"},{"location":"builtin-U128/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-U128/#returns_29","text":"F64 val","title":"Returns"},{"location":"builtin-U128/#f32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U128/#returns_30","text":"F32 val","title":"Returns"},{"location":"builtin-U128/#f64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U128/#returns_31","text":"F64 val","title":"Returns"},{"location":"builtin-U128/#addc","text":"[Source] fun box addc( y: U128 val) : (U128 val , Bool val)","title":"addc"},{"location":"builtin-U128/#parameters_12","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_32","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#subc","text":"[Source] fun box subc( y: U128 val) : (U128 val , Bool val)","title":"subc"},{"location":"builtin-U128/#parameters_13","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_33","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#mulc","text":"[Source] fun box mulc( y: U128 val) : (U128 val , Bool val)","title":"mulc"},{"location":"builtin-U128/#parameters_14","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_34","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#divc","text":"[Source] fun box divc( y: U128 val) : (U128 val , Bool val)","title":"divc"},{"location":"builtin-U128/#parameters_15","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_35","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#remc","text":"[Source] fun box remc( y: U128 val) : (U128 val , Bool val)","title":"remc"},{"location":"builtin-U128/#parameters_16","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_36","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#add_partial","text":"[Source] fun box add_partial( y: U128 val) : U128 val ?","title":"add_partial"},{"location":"builtin-U128/#parameters_17","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_37","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#sub_partial","text":"[Source] fun box sub_partial( y: U128 val) : U128 val ?","title":"sub_partial"},{"location":"builtin-U128/#parameters_18","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_38","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#mul_partial","text":"[Source] fun box mul_partial( y: U128 val) : U128 val ?","title":"mul_partial"},{"location":"builtin-U128/#parameters_19","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_39","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#div_partial","text":"[Source] fun box div_partial( y: U128 val) : U128 val ?","title":"div_partial"},{"location":"builtin-U128/#parameters_20","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_40","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#rem_partial","text":"[Source] fun box rem_partial( y: U128 val) : U128 val ?","title":"rem_partial"},{"location":"builtin-U128/#parameters_21","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_41","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#divrem_partial","text":"[Source] fun box divrem_partial( y: U128 val) : (U128 val , U128 val) ?","title":"divrem_partial"},{"location":"builtin-U128/#parameters_22","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_42","text":"( U128 val , U128 val) ?","title":"Returns"},{"location":"builtin-U128/#shl","text":"fun box shl( y: U128 val) : U128 val","title":"shl"},{"location":"builtin-U128/#parameters_23","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_43","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#shr","text":"fun box shr( y: U128 val) : U128 val","title":"shr"},{"location":"builtin-U128/#parameters_24","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_44","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#shl_unsafe","text":"fun box shl_unsafe( y: U128 val) : U128 val","title":"shl_unsafe"},{"location":"builtin-U128/#parameters_25","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_45","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#shr_unsafe","text":"fun box shr_unsafe( y: U128 val) : U128 val","title":"shr_unsafe"},{"location":"builtin-U128/#parameters_26","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_46","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rotl","text":"fun box rotl( y: U128 val) : U128 val","title":"rotl"},{"location":"builtin-U128/#parameters_27","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_47","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rotr","text":"fun box rotr( y: U128 val) : U128 val","title":"rotr"},{"location":"builtin-U128/#parameters_28","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_48","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#add_unsafe","text":"fun box add_unsafe( y: U128 val) : U128 val","title":"add_unsafe"},{"location":"builtin-U128/#parameters_29","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_49","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#sub_unsafe","text":"fun box sub_unsafe( y: U128 val) : U128 val","title":"sub_unsafe"},{"location":"builtin-U128/#parameters_30","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_50","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#neg_unsafe","text":"fun box neg_unsafe() : U128 val","title":"neg_unsafe"},{"location":"builtin-U128/#returns_51","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_and","text":"fun box op_and( y: U128 val) : U128 val","title":"op_and"},{"location":"builtin-U128/#parameters_31","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_52","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_or","text":"fun box op_or( y: U128 val) : U128 val","title":"op_or"},{"location":"builtin-U128/#parameters_32","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_53","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_xor","text":"fun box op_xor( y: U128 val) : U128 val","title":"op_xor"},{"location":"builtin-U128/#parameters_33","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_54","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_not","text":"fun box op_not() : U128 val","title":"op_not"},{"location":"builtin-U128/#returns_55","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#add","text":"fun box add( y: U128 val) : U128 val","title":"add"},{"location":"builtin-U128/#parameters_34","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_56","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#sub","text":"fun box sub( y: U128 val) : U128 val","title":"sub"},{"location":"builtin-U128/#parameters_35","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_57","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#neg","text":"fun box neg() : U128 val","title":"neg"},{"location":"builtin-U128/#returns_58","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#eq","text":"fun box eq( y: U128 val) : Bool val","title":"eq"},{"location":"builtin-U128/#parameters_36","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#ne","text":"fun box ne( y: U128 val) : Bool val","title":"ne"},{"location":"builtin-U128/#parameters_37","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#lt","text":"fun box lt( y: U128 val) : Bool val","title":"lt"},{"location":"builtin-U128/#parameters_38","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#le","text":"fun box le( y: U128 val) : Bool val","title":"le"},{"location":"builtin-U128/#parameters_39","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#ge","text":"fun box ge( y: U128 val) : Bool val","title":"ge"},{"location":"builtin-U128/#parameters_40","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#gt","text":"fun box gt( y: U128 val) : Bool val","title":"gt"},{"location":"builtin-U128/#parameters_41","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U128/#returns_65","text":"I8 val","title":"Returns"},{"location":"builtin-U128/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U128/#returns_66","text":"I16 val","title":"Returns"},{"location":"builtin-U128/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U128/#returns_67","text":"I32 val","title":"Returns"},{"location":"builtin-U128/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U128/#returns_68","text":"I64 val","title":"Returns"},{"location":"builtin-U128/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U128/#returns_69","text":"I128 val","title":"Returns"},{"location":"builtin-U128/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U128/#returns_70","text":"ILong val","title":"Returns"},{"location":"builtin-U128/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U128/#returns_71","text":"ISize val","title":"Returns"},{"location":"builtin-U128/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U128/#returns_72","text":"U8 val","title":"Returns"},{"location":"builtin-U128/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U128/#returns_73","text":"U16 val","title":"Returns"},{"location":"builtin-U128/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U128/#returns_74","text":"U32 val","title":"Returns"},{"location":"builtin-U128/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U128/#returns_75","text":"U64 val","title":"Returns"},{"location":"builtin-U128/#u128_1","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U128/#returns_76","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U128/#returns_77","text":"ULong val","title":"Returns"},{"location":"builtin-U128/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U128/#returns_78","text":"USize val","title":"Returns"},{"location":"builtin-U128/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U128/#returns_79","text":"I8 val","title":"Returns"},{"location":"builtin-U128/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U128/#returns_80","text":"I16 val","title":"Returns"},{"location":"builtin-U128/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U128/#returns_81","text":"I32 val","title":"Returns"},{"location":"builtin-U128/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U128/#returns_82","text":"I64 val","title":"Returns"},{"location":"builtin-U128/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U128/#returns_83","text":"I128 val","title":"Returns"},{"location":"builtin-U128/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U128/#returns_84","text":"ILong val","title":"Returns"},{"location":"builtin-U128/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U128/#returns_85","text":"ISize val","title":"Returns"},{"location":"builtin-U128/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U128/#returns_86","text":"U8 val","title":"Returns"},{"location":"builtin-U128/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U128/#returns_87","text":"U16 val","title":"Returns"},{"location":"builtin-U128/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U128/#returns_88","text":"U32 val","title":"Returns"},{"location":"builtin-U128/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U128/#returns_89","text":"U64 val","title":"Returns"},{"location":"builtin-U128/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U128/#returns_90","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U128/#returns_91","text":"ULong val","title":"Returns"},{"location":"builtin-U128/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U128/#returns_92","text":"USize val","title":"Returns"},{"location":"builtin-U128/#compare","text":"fun box compare( that: U128 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U128/#parameters_42","text":"that: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_93","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U128/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U128/#_value","text":"fun box _value() : U128 val","title":"_value"},{"location":"builtin-U128/#returns_94","text":"U128 val","title":"Returns"},{"location":"builtin-U16/","text":"U16 [Source] primitive val U16 is _UnsignedInteger[U16 val] val Implements _UnsignedInteger [ U16 val] val Constructors create [Source] new val create( value: U16 val) : U16 val^ Parameters value: U16 val Returns U16 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : U16 val^ Parameters a: A Returns U16 val^ min_value [Source] new val min_value() : U16 val^ Returns U16 val^ max_value [Source] new val max_value() : U16 val^ Returns U16 val^ Public Functions next_pow2 [Source] fun box next_pow2() : U16 val Returns U16 val abs [Source] fun box abs() : U16 val Returns U16 val bit_reverse [Source] fun box bit_reverse() : U16 val Returns U16 val bswap [Source] fun box bswap() : U16 val Returns U16 val popcount [Source] fun box popcount() : U16 val Returns U16 val clz [Source] fun box clz() : U16 val Returns U16 val ctz [Source] fun box ctz() : U16 val Returns U16 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val Returns U16 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val Returns U16 val bitwidth [Source] fun box bitwidth() : U16 val Returns U16 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val max [Source] fun box max( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val addc [Source] fun box addc( y: U16 val) : (U16 val , Bool val) Parameters y: U16 val Returns ( U16 val , Bool val) subc [Source] fun box subc( y: U16 val) : (U16 val , Bool val) Parameters y: U16 val Returns ( U16 val , Bool val) mulc [Source] fun box mulc( y: U16 val) : (U16 val , Bool val) Parameters y: U16 val Returns ( U16 val , Bool val) divc [Source] fun box divc( y: U16 val) : (U16 val , Bool val) Parameters y: U16 val Returns ( U16 val , Bool val) remc [Source] fun box remc( y: U16 val) : (U16 val , Bool val) Parameters y: U16 val Returns ( U16 val , Bool val) add_partial [Source] fun box add_partial( y: U16 val) : U16 val ? Parameters y: U16 val Returns U16 val ? sub_partial [Source] fun box sub_partial( y: U16 val) : U16 val ? Parameters y: U16 val Returns U16 val ? mul_partial [Source] fun box mul_partial( y: U16 val) : U16 val ? Parameters y: U16 val Returns U16 val ? div_partial [Source] fun box div_partial( y: U16 val) : U16 val ? Parameters y: U16 val Returns U16 val ? rem_partial [Source] fun box rem_partial( y: U16 val) : U16 val ? Parameters y: U16 val Returns U16 val ? divrem_partial [Source] fun box divrem_partial( y: U16 val) : (U16 val , U16 val) ? Parameters y: U16 val Returns ( U16 val , U16 val) ? shl fun box shl( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val shr fun box shr( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val shl_unsafe fun box shl_unsafe( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val shr_unsafe fun box shr_unsafe( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val rotl fun box rotl( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val rotr fun box rotr( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val sub_unsafe fun box sub_unsafe( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val mul_unsafe fun box mul_unsafe( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val div_unsafe fun box div_unsafe( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val divrem_unsafe fun box divrem_unsafe( y: U16 val) : (U16 val , U16 val) Parameters y: U16 val Returns ( U16 val , U16 val) rem_unsafe fun box rem_unsafe( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val neg_unsafe fun box neg_unsafe() : U16 val Returns U16 val op_and fun box op_and( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val op_or fun box op_or( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val op_xor fun box op_xor( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val op_not fun box op_not() : U16 val Returns U16 val add fun box add( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val sub fun box sub( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val mul fun box mul( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val div fun box div( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val divrem fun box divrem( y: U16 val) : (U16 val , U16 val) Parameters y: U16 val Returns ( U16 val , U16 val) rem fun box rem( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val neg fun box neg() : U16 val Returns U16 val eq fun box eq( y: U16 val) : Bool val Parameters y: U16 val Returns Bool val ne fun box ne( y: U16 val) : Bool val Parameters y: U16 val Returns Bool val lt fun box lt( y: U16 val) : Bool val Parameters y: U16 val Returns Bool val le fun box le( y: U16 val) : Bool val Parameters y: U16 val Returns Bool val ge fun box ge( y: U16 val) : Bool val Parameters y: U16 val Returns Bool val gt fun box gt( y: U16 val) : Bool val Parameters y: U16 val Returns Bool val hash fun box hash() : USize val Returns USize val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: U16 val) : (Less val | Equal val | Greater val) Parameters that: U16 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : U16 val Returns U16 val","title":"primitive U16"},{"location":"builtin-U16/#u16","text":"[Source] primitive val U16 is _UnsignedInteger[U16 val] val","title":"U16"},{"location":"builtin-U16/#implements","text":"_UnsignedInteger [ U16 val] val","title":"Implements"},{"location":"builtin-U16/#constructors","text":"","title":"Constructors"},{"location":"builtin-U16/#create","text":"[Source] new val create( value: U16 val) : U16 val^","title":"create"},{"location":"builtin-U16/#parameters","text":"value: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : U16 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U16/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U16/#returns_1","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#min_value","text":"[Source] new val min_value() : U16 val^","title":"min_value"},{"location":"builtin-U16/#returns_2","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#max_value","text":"[Source] new val max_value() : U16 val^","title":"max_value"},{"location":"builtin-U16/#returns_3","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U16/#next_pow2","text":"[Source] fun box next_pow2() : U16 val","title":"next_pow2"},{"location":"builtin-U16/#returns_4","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#abs","text":"[Source] fun box abs() : U16 val","title":"abs"},{"location":"builtin-U16/#returns_5","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bit_reverse","text":"[Source] fun box bit_reverse() : U16 val","title":"bit_reverse"},{"location":"builtin-U16/#returns_6","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bswap","text":"[Source] fun box bswap() : U16 val","title":"bswap"},{"location":"builtin-U16/#returns_7","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#popcount","text":"[Source] fun box popcount() : U16 val","title":"popcount"},{"location":"builtin-U16/#returns_8","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#clz","text":"[Source] fun box clz() : U16 val","title":"clz"},{"location":"builtin-U16/#returns_9","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#ctz","text":"[Source] fun box ctz() : U16 val","title":"ctz"},{"location":"builtin-U16/#returns_10","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val","title":"clz_unsafe"},{"location":"builtin-U16/#returns_11","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val","title":"ctz_unsafe"},{"location":"builtin-U16/#returns_12","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bitwidth","text":"[Source] fun box bitwidth() : U16 val","title":"bitwidth"},{"location":"builtin-U16/#returns_13","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U16/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U16/#min","text":"[Source] fun box min( y: U16 val) : U16 val","title":"min"},{"location":"builtin-U16/#parameters_2","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_15","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#max","text":"[Source] fun box max( y: U16 val) : U16 val","title":"max"},{"location":"builtin-U16/#parameters_3","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_16","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#addc","text":"[Source] fun box addc( y: U16 val) : (U16 val , Bool val)","title":"addc"},{"location":"builtin-U16/#parameters_4","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_17","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#subc","text":"[Source] fun box subc( y: U16 val) : (U16 val , Bool val)","title":"subc"},{"location":"builtin-U16/#parameters_5","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_18","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#mulc","text":"[Source] fun box mulc( y: U16 val) : (U16 val , Bool val)","title":"mulc"},{"location":"builtin-U16/#parameters_6","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_19","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#divc","text":"[Source] fun box divc( y: U16 val) : (U16 val , Bool val)","title":"divc"},{"location":"builtin-U16/#parameters_7","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_20","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#remc","text":"[Source] fun box remc( y: U16 val) : (U16 val , Bool val)","title":"remc"},{"location":"builtin-U16/#parameters_8","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_21","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#add_partial","text":"[Source] fun box add_partial( y: U16 val) : U16 val ?","title":"add_partial"},{"location":"builtin-U16/#parameters_9","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_22","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#sub_partial","text":"[Source] fun box sub_partial( y: U16 val) : U16 val ?","title":"sub_partial"},{"location":"builtin-U16/#parameters_10","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_23","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#mul_partial","text":"[Source] fun box mul_partial( y: U16 val) : U16 val ?","title":"mul_partial"},{"location":"builtin-U16/#parameters_11","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_24","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#div_partial","text":"[Source] fun box div_partial( y: U16 val) : U16 val ?","title":"div_partial"},{"location":"builtin-U16/#parameters_12","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_25","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#rem_partial","text":"[Source] fun box rem_partial( y: U16 val) : U16 val ?","title":"rem_partial"},{"location":"builtin-U16/#parameters_13","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_26","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#divrem_partial","text":"[Source] fun box divrem_partial( y: U16 val) : (U16 val , U16 val) ?","title":"divrem_partial"},{"location":"builtin-U16/#parameters_14","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_27","text":"( U16 val , U16 val) ?","title":"Returns"},{"location":"builtin-U16/#shl","text":"fun box shl( y: U16 val) : U16 val","title":"shl"},{"location":"builtin-U16/#parameters_15","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_28","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#shr","text":"fun box shr( y: U16 val) : U16 val","title":"shr"},{"location":"builtin-U16/#parameters_16","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_29","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#shl_unsafe","text":"fun box shl_unsafe( y: U16 val) : U16 val","title":"shl_unsafe"},{"location":"builtin-U16/#parameters_17","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_30","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#shr_unsafe","text":"fun box shr_unsafe( y: U16 val) : U16 val","title":"shr_unsafe"},{"location":"builtin-U16/#parameters_18","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_31","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#rotl","text":"fun box rotl( y: U16 val) : U16 val","title":"rotl"},{"location":"builtin-U16/#parameters_19","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_32","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#rotr","text":"fun box rotr( y: U16 val) : U16 val","title":"rotr"},{"location":"builtin-U16/#parameters_20","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_33","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U16/#returns_34","text":"String iso^","title":"Returns"},{"location":"builtin-U16/#add_unsafe","text":"fun box add_unsafe( y: U16 val) : U16 val","title":"add_unsafe"},{"location":"builtin-U16/#parameters_21","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_35","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#sub_unsafe","text":"fun box sub_unsafe( y: U16 val) : U16 val","title":"sub_unsafe"},{"location":"builtin-U16/#parameters_22","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_36","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#mul_unsafe","text":"fun box mul_unsafe( y: U16 val) : U16 val","title":"mul_unsafe"},{"location":"builtin-U16/#parameters_23","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_37","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#div_unsafe","text":"fun box div_unsafe( y: U16 val) : U16 val","title":"div_unsafe"},{"location":"builtin-U16/#parameters_24","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_38","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#divrem_unsafe","text":"fun box divrem_unsafe( y: U16 val) : (U16 val , U16 val)","title":"divrem_unsafe"},{"location":"builtin-U16/#parameters_25","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_39","text":"( U16 val , U16 val)","title":"Returns"},{"location":"builtin-U16/#rem_unsafe","text":"fun box rem_unsafe( y: U16 val) : U16 val","title":"rem_unsafe"},{"location":"builtin-U16/#parameters_26","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_40","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#neg_unsafe","text":"fun box neg_unsafe() : U16 val","title":"neg_unsafe"},{"location":"builtin-U16/#returns_41","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_and","text":"fun box op_and( y: U16 val) : U16 val","title":"op_and"},{"location":"builtin-U16/#parameters_27","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_42","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_or","text":"fun box op_or( y: U16 val) : U16 val","title":"op_or"},{"location":"builtin-U16/#parameters_28","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_43","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_xor","text":"fun box op_xor( y: U16 val) : U16 val","title":"op_xor"},{"location":"builtin-U16/#parameters_29","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_44","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_not","text":"fun box op_not() : U16 val","title":"op_not"},{"location":"builtin-U16/#returns_45","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#add","text":"fun box add( y: U16 val) : U16 val","title":"add"},{"location":"builtin-U16/#parameters_30","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_46","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#sub","text":"fun box sub( y: U16 val) : U16 val","title":"sub"},{"location":"builtin-U16/#parameters_31","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_47","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#mul","text":"fun box mul( y: U16 val) : U16 val","title":"mul"},{"location":"builtin-U16/#parameters_32","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_48","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#div","text":"fun box div( y: U16 val) : U16 val","title":"div"},{"location":"builtin-U16/#parameters_33","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_49","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#divrem","text":"fun box divrem( y: U16 val) : (U16 val , U16 val)","title":"divrem"},{"location":"builtin-U16/#parameters_34","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_50","text":"( U16 val , U16 val)","title":"Returns"},{"location":"builtin-U16/#rem","text":"fun box rem( y: U16 val) : U16 val","title":"rem"},{"location":"builtin-U16/#parameters_35","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_51","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#neg","text":"fun box neg() : U16 val","title":"neg"},{"location":"builtin-U16/#returns_52","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#eq","text":"fun box eq( y: U16 val) : Bool val","title":"eq"},{"location":"builtin-U16/#parameters_36","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#ne","text":"fun box ne( y: U16 val) : Bool val","title":"ne"},{"location":"builtin-U16/#parameters_37","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#lt","text":"fun box lt( y: U16 val) : Bool val","title":"lt"},{"location":"builtin-U16/#parameters_38","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#le","text":"fun box le( y: U16 val) : Bool val","title":"le"},{"location":"builtin-U16/#parameters_39","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#ge","text":"fun box ge( y: U16 val) : Bool val","title":"ge"},{"location":"builtin-U16/#parameters_40","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_57","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#gt","text":"fun box gt( y: U16 val) : Bool val","title":"gt"},{"location":"builtin-U16/#parameters_41","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-U16/#returns_59","text":"USize val","title":"Returns"},{"location":"builtin-U16/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U16/#returns_60","text":"U64 val","title":"Returns"},{"location":"builtin-U16/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U16/#returns_61","text":"I8 val","title":"Returns"},{"location":"builtin-U16/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U16/#returns_62","text":"I16 val","title":"Returns"},{"location":"builtin-U16/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U16/#returns_63","text":"I32 val","title":"Returns"},{"location":"builtin-U16/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U16/#returns_64","text":"I64 val","title":"Returns"},{"location":"builtin-U16/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U16/#returns_65","text":"I128 val","title":"Returns"},{"location":"builtin-U16/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U16/#returns_66","text":"ILong val","title":"Returns"},{"location":"builtin-U16/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U16/#returns_67","text":"ISize val","title":"Returns"},{"location":"builtin-U16/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U16/#returns_68","text":"U8 val","title":"Returns"},{"location":"builtin-U16/#u16_1","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U16/#returns_69","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U16/#returns_70","text":"U32 val","title":"Returns"},{"location":"builtin-U16/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U16/#returns_71","text":"U64 val","title":"Returns"},{"location":"builtin-U16/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U16/#returns_72","text":"U128 val","title":"Returns"},{"location":"builtin-U16/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U16/#returns_73","text":"ULong val","title":"Returns"},{"location":"builtin-U16/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U16/#returns_74","text":"USize val","title":"Returns"},{"location":"builtin-U16/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U16/#returns_75","text":"F32 val","title":"Returns"},{"location":"builtin-U16/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U16/#returns_76","text":"F64 val","title":"Returns"},{"location":"builtin-U16/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U16/#returns_77","text":"I8 val","title":"Returns"},{"location":"builtin-U16/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U16/#returns_78","text":"I16 val","title":"Returns"},{"location":"builtin-U16/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U16/#returns_79","text":"I32 val","title":"Returns"},{"location":"builtin-U16/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U16/#returns_80","text":"I64 val","title":"Returns"},{"location":"builtin-U16/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U16/#returns_81","text":"I128 val","title":"Returns"},{"location":"builtin-U16/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U16/#returns_82","text":"ILong val","title":"Returns"},{"location":"builtin-U16/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U16/#returns_83","text":"ISize val","title":"Returns"},{"location":"builtin-U16/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U16/#returns_84","text":"U8 val","title":"Returns"},{"location":"builtin-U16/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U16/#returns_85","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U16/#returns_86","text":"U32 val","title":"Returns"},{"location":"builtin-U16/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U16/#returns_87","text":"U64 val","title":"Returns"},{"location":"builtin-U16/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U16/#returns_88","text":"U128 val","title":"Returns"},{"location":"builtin-U16/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U16/#returns_89","text":"ULong val","title":"Returns"},{"location":"builtin-U16/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U16/#returns_90","text":"USize val","title":"Returns"},{"location":"builtin-U16/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U16/#returns_91","text":"F32 val","title":"Returns"},{"location":"builtin-U16/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U16/#returns_92","text":"F64 val","title":"Returns"},{"location":"builtin-U16/#compare","text":"fun box compare( that: U16 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U16/#parameters_42","text":"that: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_93","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U16/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U16/#_value","text":"fun box _value() : U16 val","title":"_value"},{"location":"builtin-U16/#returns_94","text":"U16 val","title":"Returns"},{"location":"builtin-U32/","text":"U32 [Source] primitive val U32 is _UnsignedInteger[U32 val] val Implements _UnsignedInteger [ U32 val] val Constructors create [Source] new val create( value: U32 val) : U32 val^ Parameters value: U32 val Returns U32 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : U32 val^ Parameters a: A Returns U32 val^ min_value [Source] new val min_value() : U32 val^ Returns U32 val^ max_value [Source] new val max_value() : U32 val^ Returns U32 val^ Public Functions next_pow2 [Source] fun box next_pow2() : U32 val Returns U32 val abs [Source] fun box abs() : U32 val Returns U32 val bit_reverse [Source] fun box bit_reverse() : U32 val Returns U32 val bswap [Source] fun box bswap() : U32 val Returns U32 val popcount [Source] fun box popcount() : U32 val Returns U32 val clz [Source] fun box clz() : U32 val Returns U32 val ctz [Source] fun box ctz() : U32 val Returns U32 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val Returns U32 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val Returns U32 val bitwidth [Source] fun box bitwidth() : U32 val Returns U32 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val max [Source] fun box max( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val addc [Source] fun box addc( y: U32 val) : (U32 val , Bool val) Parameters y: U32 val Returns ( U32 val , Bool val) subc [Source] fun box subc( y: U32 val) : (U32 val , Bool val) Parameters y: U32 val Returns ( U32 val , Bool val) mulc [Source] fun box mulc( y: U32 val) : (U32 val , Bool val) Parameters y: U32 val Returns ( U32 val , Bool val) divc [Source] fun box divc( y: U32 val) : (U32 val , Bool val) Parameters y: U32 val Returns ( U32 val , Bool val) remc [Source] fun box remc( y: U32 val) : (U32 val , Bool val) Parameters y: U32 val Returns ( U32 val , Bool val) add_partial [Source] fun box add_partial( y: U32 val) : U32 val ? Parameters y: U32 val Returns U32 val ? sub_partial [Source] fun box sub_partial( y: U32 val) : U32 val ? Parameters y: U32 val Returns U32 val ? mul_partial [Source] fun box mul_partial( y: U32 val) : U32 val ? Parameters y: U32 val Returns U32 val ? div_partial [Source] fun box div_partial( y: U32 val) : U32 val ? Parameters y: U32 val Returns U32 val ? rem_partial [Source] fun box rem_partial( y: U32 val) : U32 val ? Parameters y: U32 val Returns U32 val ? divrem_partial [Source] fun box divrem_partial( y: U32 val) : (U32 val , U32 val) ? Parameters y: U32 val Returns ( U32 val , U32 val) ? shl fun box shl( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val shr fun box shr( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val shl_unsafe fun box shl_unsafe( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val shr_unsafe fun box shr_unsafe( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val rotl fun box rotl( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val rotr fun box rotr( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val sub_unsafe fun box sub_unsafe( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val mul_unsafe fun box mul_unsafe( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val div_unsafe fun box div_unsafe( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val divrem_unsafe fun box divrem_unsafe( y: U32 val) : (U32 val , U32 val) Parameters y: U32 val Returns ( U32 val , U32 val) rem_unsafe fun box rem_unsafe( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val neg_unsafe fun box neg_unsafe() : U32 val Returns U32 val op_and fun box op_and( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val op_or fun box op_or( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val op_xor fun box op_xor( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val op_not fun box op_not() : U32 val Returns U32 val add fun box add( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val sub fun box sub( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val mul fun box mul( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val div fun box div( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val divrem fun box divrem( y: U32 val) : (U32 val , U32 val) Parameters y: U32 val Returns ( U32 val , U32 val) rem fun box rem( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val neg fun box neg() : U32 val Returns U32 val eq fun box eq( y: U32 val) : Bool val Parameters y: U32 val Returns Bool val ne fun box ne( y: U32 val) : Bool val Parameters y: U32 val Returns Bool val lt fun box lt( y: U32 val) : Bool val Parameters y: U32 val Returns Bool val le fun box le( y: U32 val) : Bool val Parameters y: U32 val Returns Bool val ge fun box ge( y: U32 val) : Bool val Parameters y: U32 val Returns Bool val gt fun box gt( y: U32 val) : Bool val Parameters y: U32 val Returns Bool val hash fun box hash() : USize val Returns USize val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: U32 val) : (Less val | Equal val | Greater val) Parameters that: U32 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : U32 val Returns U32 val","title":"primitive U32"},{"location":"builtin-U32/#u32","text":"[Source] primitive val U32 is _UnsignedInteger[U32 val] val","title":"U32"},{"location":"builtin-U32/#implements","text":"_UnsignedInteger [ U32 val] val","title":"Implements"},{"location":"builtin-U32/#constructors","text":"","title":"Constructors"},{"location":"builtin-U32/#create","text":"[Source] new val create( value: U32 val) : U32 val^","title":"create"},{"location":"builtin-U32/#parameters","text":"value: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : U32 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U32/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U32/#returns_1","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#min_value","text":"[Source] new val min_value() : U32 val^","title":"min_value"},{"location":"builtin-U32/#returns_2","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#max_value","text":"[Source] new val max_value() : U32 val^","title":"max_value"},{"location":"builtin-U32/#returns_3","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U32/#next_pow2","text":"[Source] fun box next_pow2() : U32 val","title":"next_pow2"},{"location":"builtin-U32/#returns_4","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#abs","text":"[Source] fun box abs() : U32 val","title":"abs"},{"location":"builtin-U32/#returns_5","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bit_reverse","text":"[Source] fun box bit_reverse() : U32 val","title":"bit_reverse"},{"location":"builtin-U32/#returns_6","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bswap","text":"[Source] fun box bswap() : U32 val","title":"bswap"},{"location":"builtin-U32/#returns_7","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#popcount","text":"[Source] fun box popcount() : U32 val","title":"popcount"},{"location":"builtin-U32/#returns_8","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#clz","text":"[Source] fun box clz() : U32 val","title":"clz"},{"location":"builtin-U32/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#ctz","text":"[Source] fun box ctz() : U32 val","title":"ctz"},{"location":"builtin-U32/#returns_10","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val","title":"clz_unsafe"},{"location":"builtin-U32/#returns_11","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val","title":"ctz_unsafe"},{"location":"builtin-U32/#returns_12","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bitwidth","text":"[Source] fun box bitwidth() : U32 val","title":"bitwidth"},{"location":"builtin-U32/#returns_13","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U32/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U32/#min","text":"[Source] fun box min( y: U32 val) : U32 val","title":"min"},{"location":"builtin-U32/#parameters_2","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_15","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#max","text":"[Source] fun box max( y: U32 val) : U32 val","title":"max"},{"location":"builtin-U32/#parameters_3","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_16","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#addc","text":"[Source] fun box addc( y: U32 val) : (U32 val , Bool val)","title":"addc"},{"location":"builtin-U32/#parameters_4","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_17","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#subc","text":"[Source] fun box subc( y: U32 val) : (U32 val , Bool val)","title":"subc"},{"location":"builtin-U32/#parameters_5","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_18","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#mulc","text":"[Source] fun box mulc( y: U32 val) : (U32 val , Bool val)","title":"mulc"},{"location":"builtin-U32/#parameters_6","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_19","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#divc","text":"[Source] fun box divc( y: U32 val) : (U32 val , Bool val)","title":"divc"},{"location":"builtin-U32/#parameters_7","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_20","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#remc","text":"[Source] fun box remc( y: U32 val) : (U32 val , Bool val)","title":"remc"},{"location":"builtin-U32/#parameters_8","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_21","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#add_partial","text":"[Source] fun box add_partial( y: U32 val) : U32 val ?","title":"add_partial"},{"location":"builtin-U32/#parameters_9","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_22","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#sub_partial","text":"[Source] fun box sub_partial( y: U32 val) : U32 val ?","title":"sub_partial"},{"location":"builtin-U32/#parameters_10","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_23","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#mul_partial","text":"[Source] fun box mul_partial( y: U32 val) : U32 val ?","title":"mul_partial"},{"location":"builtin-U32/#parameters_11","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_24","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#div_partial","text":"[Source] fun box div_partial( y: U32 val) : U32 val ?","title":"div_partial"},{"location":"builtin-U32/#parameters_12","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_25","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#rem_partial","text":"[Source] fun box rem_partial( y: U32 val) : U32 val ?","title":"rem_partial"},{"location":"builtin-U32/#parameters_13","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_26","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#divrem_partial","text":"[Source] fun box divrem_partial( y: U32 val) : (U32 val , U32 val) ?","title":"divrem_partial"},{"location":"builtin-U32/#parameters_14","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_27","text":"( U32 val , U32 val) ?","title":"Returns"},{"location":"builtin-U32/#shl","text":"fun box shl( y: U32 val) : U32 val","title":"shl"},{"location":"builtin-U32/#parameters_15","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_28","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#shr","text":"fun box shr( y: U32 val) : U32 val","title":"shr"},{"location":"builtin-U32/#parameters_16","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_29","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#shl_unsafe","text":"fun box shl_unsafe( y: U32 val) : U32 val","title":"shl_unsafe"},{"location":"builtin-U32/#parameters_17","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_30","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#shr_unsafe","text":"fun box shr_unsafe( y: U32 val) : U32 val","title":"shr_unsafe"},{"location":"builtin-U32/#parameters_18","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_31","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#rotl","text":"fun box rotl( y: U32 val) : U32 val","title":"rotl"},{"location":"builtin-U32/#parameters_19","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_32","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#rotr","text":"fun box rotr( y: U32 val) : U32 val","title":"rotr"},{"location":"builtin-U32/#parameters_20","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_33","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U32/#returns_34","text":"String iso^","title":"Returns"},{"location":"builtin-U32/#add_unsafe","text":"fun box add_unsafe( y: U32 val) : U32 val","title":"add_unsafe"},{"location":"builtin-U32/#parameters_21","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_35","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#sub_unsafe","text":"fun box sub_unsafe( y: U32 val) : U32 val","title":"sub_unsafe"},{"location":"builtin-U32/#parameters_22","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_36","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#mul_unsafe","text":"fun box mul_unsafe( y: U32 val) : U32 val","title":"mul_unsafe"},{"location":"builtin-U32/#parameters_23","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_37","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#div_unsafe","text":"fun box div_unsafe( y: U32 val) : U32 val","title":"div_unsafe"},{"location":"builtin-U32/#parameters_24","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_38","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#divrem_unsafe","text":"fun box divrem_unsafe( y: U32 val) : (U32 val , U32 val)","title":"divrem_unsafe"},{"location":"builtin-U32/#parameters_25","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_39","text":"( U32 val , U32 val)","title":"Returns"},{"location":"builtin-U32/#rem_unsafe","text":"fun box rem_unsafe( y: U32 val) : U32 val","title":"rem_unsafe"},{"location":"builtin-U32/#parameters_26","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_40","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#neg_unsafe","text":"fun box neg_unsafe() : U32 val","title":"neg_unsafe"},{"location":"builtin-U32/#returns_41","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_and","text":"fun box op_and( y: U32 val) : U32 val","title":"op_and"},{"location":"builtin-U32/#parameters_27","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_42","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_or","text":"fun box op_or( y: U32 val) : U32 val","title":"op_or"},{"location":"builtin-U32/#parameters_28","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_43","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_xor","text":"fun box op_xor( y: U32 val) : U32 val","title":"op_xor"},{"location":"builtin-U32/#parameters_29","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_44","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_not","text":"fun box op_not() : U32 val","title":"op_not"},{"location":"builtin-U32/#returns_45","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#add","text":"fun box add( y: U32 val) : U32 val","title":"add"},{"location":"builtin-U32/#parameters_30","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_46","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#sub","text":"fun box sub( y: U32 val) : U32 val","title":"sub"},{"location":"builtin-U32/#parameters_31","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_47","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#mul","text":"fun box mul( y: U32 val) : U32 val","title":"mul"},{"location":"builtin-U32/#parameters_32","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_48","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#div","text":"fun box div( y: U32 val) : U32 val","title":"div"},{"location":"builtin-U32/#parameters_33","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_49","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#divrem","text":"fun box divrem( y: U32 val) : (U32 val , U32 val)","title":"divrem"},{"location":"builtin-U32/#parameters_34","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_50","text":"( U32 val , U32 val)","title":"Returns"},{"location":"builtin-U32/#rem","text":"fun box rem( y: U32 val) : U32 val","title":"rem"},{"location":"builtin-U32/#parameters_35","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_51","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#neg","text":"fun box neg() : U32 val","title":"neg"},{"location":"builtin-U32/#returns_52","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#eq","text":"fun box eq( y: U32 val) : Bool val","title":"eq"},{"location":"builtin-U32/#parameters_36","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#ne","text":"fun box ne( y: U32 val) : Bool val","title":"ne"},{"location":"builtin-U32/#parameters_37","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#lt","text":"fun box lt( y: U32 val) : Bool val","title":"lt"},{"location":"builtin-U32/#parameters_38","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#le","text":"fun box le( y: U32 val) : Bool val","title":"le"},{"location":"builtin-U32/#parameters_39","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#ge","text":"fun box ge( y: U32 val) : Bool val","title":"ge"},{"location":"builtin-U32/#parameters_40","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_57","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#gt","text":"fun box gt( y: U32 val) : Bool val","title":"gt"},{"location":"builtin-U32/#parameters_41","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-U32/#returns_59","text":"USize val","title":"Returns"},{"location":"builtin-U32/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U32/#returns_60","text":"U64 val","title":"Returns"},{"location":"builtin-U32/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U32/#returns_61","text":"I8 val","title":"Returns"},{"location":"builtin-U32/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U32/#returns_62","text":"I16 val","title":"Returns"},{"location":"builtin-U32/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U32/#returns_63","text":"I32 val","title":"Returns"},{"location":"builtin-U32/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U32/#returns_64","text":"I64 val","title":"Returns"},{"location":"builtin-U32/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U32/#returns_65","text":"I128 val","title":"Returns"},{"location":"builtin-U32/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U32/#returns_66","text":"ILong val","title":"Returns"},{"location":"builtin-U32/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U32/#returns_67","text":"ISize val","title":"Returns"},{"location":"builtin-U32/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U32/#returns_68","text":"U8 val","title":"Returns"},{"location":"builtin-U32/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U32/#returns_69","text":"U16 val","title":"Returns"},{"location":"builtin-U32/#u32_1","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U32/#returns_70","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U32/#returns_71","text":"U64 val","title":"Returns"},{"location":"builtin-U32/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U32/#returns_72","text":"U128 val","title":"Returns"},{"location":"builtin-U32/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U32/#returns_73","text":"ULong val","title":"Returns"},{"location":"builtin-U32/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U32/#returns_74","text":"USize val","title":"Returns"},{"location":"builtin-U32/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U32/#returns_75","text":"F32 val","title":"Returns"},{"location":"builtin-U32/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U32/#returns_76","text":"F64 val","title":"Returns"},{"location":"builtin-U32/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U32/#returns_77","text":"I8 val","title":"Returns"},{"location":"builtin-U32/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U32/#returns_78","text":"I16 val","title":"Returns"},{"location":"builtin-U32/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U32/#returns_79","text":"I32 val","title":"Returns"},{"location":"builtin-U32/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U32/#returns_80","text":"I64 val","title":"Returns"},{"location":"builtin-U32/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U32/#returns_81","text":"I128 val","title":"Returns"},{"location":"builtin-U32/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U32/#returns_82","text":"ILong val","title":"Returns"},{"location":"builtin-U32/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U32/#returns_83","text":"ISize val","title":"Returns"},{"location":"builtin-U32/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U32/#returns_84","text":"U8 val","title":"Returns"},{"location":"builtin-U32/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U32/#returns_85","text":"U16 val","title":"Returns"},{"location":"builtin-U32/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U32/#returns_86","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U32/#returns_87","text":"U64 val","title":"Returns"},{"location":"builtin-U32/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U32/#returns_88","text":"U128 val","title":"Returns"},{"location":"builtin-U32/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U32/#returns_89","text":"ULong val","title":"Returns"},{"location":"builtin-U32/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U32/#returns_90","text":"USize val","title":"Returns"},{"location":"builtin-U32/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U32/#returns_91","text":"F32 val","title":"Returns"},{"location":"builtin-U32/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U32/#returns_92","text":"F64 val","title":"Returns"},{"location":"builtin-U32/#compare","text":"fun box compare( that: U32 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U32/#parameters_42","text":"that: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_93","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U32/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U32/#_value","text":"fun box _value() : U32 val","title":"_value"},{"location":"builtin-U32/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-U64/","text":"U64 [Source] primitive val U64 is _UnsignedInteger[U64 val] val Implements _UnsignedInteger [ U64 val] val Constructors create [Source] new val create( value: U64 val) : U64 val^ Parameters value: U64 val Returns U64 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : U64 val^ Parameters a: A Returns U64 val^ min_value [Source] new val min_value() : U64 val^ Returns U64 val^ max_value [Source] new val max_value() : U64 val^ Returns U64 val^ Public Functions next_pow2 [Source] fun box next_pow2() : U64 val Returns U64 val abs [Source] fun box abs() : U64 val Returns U64 val bit_reverse [Source] fun box bit_reverse() : U64 val Returns U64 val bswap [Source] fun box bswap() : U64 val Returns U64 val popcount [Source] fun box popcount() : U64 val Returns U64 val clz [Source] fun box clz() : U64 val Returns U64 val ctz [Source] fun box ctz() : U64 val Returns U64 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val Returns U64 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val Returns U64 val bitwidth [Source] fun box bitwidth() : U64 val Returns U64 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val max [Source] fun box max( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val hash [Source] fun box hash() : USize val Returns USize val addc [Source] fun box addc( y: U64 val) : (U64 val , Bool val) Parameters y: U64 val Returns ( U64 val , Bool val) subc [Source] fun box subc( y: U64 val) : (U64 val , Bool val) Parameters y: U64 val Returns ( U64 val , Bool val) mulc [Source] fun box mulc( y: U64 val) : (U64 val , Bool val) Parameters y: U64 val Returns ( U64 val , Bool val) divc [Source] fun box divc( y: U64 val) : (U64 val , Bool val) Parameters y: U64 val Returns ( U64 val , Bool val) remc [Source] fun box remc( y: U64 val) : (U64 val , Bool val) Parameters y: U64 val Returns ( U64 val , Bool val) add_partial [Source] fun box add_partial( y: U64 val) : U64 val ? Parameters y: U64 val Returns U64 val ? sub_partial [Source] fun box sub_partial( y: U64 val) : U64 val ? Parameters y: U64 val Returns U64 val ? mul_partial [Source] fun box mul_partial( y: U64 val) : U64 val ? Parameters y: U64 val Returns U64 val ? div_partial [Source] fun box div_partial( y: U64 val) : U64 val ? Parameters y: U64 val Returns U64 val ? rem_partial [Source] fun box rem_partial( y: U64 val) : U64 val ? Parameters y: U64 val Returns U64 val ? divrem_partial [Source] fun box divrem_partial( y: U64 val) : (U64 val , U64 val) ? Parameters y: U64 val Returns ( U64 val , U64 val) ? shl fun box shl( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val shr fun box shr( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val shl_unsafe fun box shl_unsafe( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val shr_unsafe fun box shr_unsafe( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val rotl fun box rotl( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val rotr fun box rotr( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val sub_unsafe fun box sub_unsafe( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val mul_unsafe fun box mul_unsafe( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val div_unsafe fun box div_unsafe( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val divrem_unsafe fun box divrem_unsafe( y: U64 val) : (U64 val , U64 val) Parameters y: U64 val Returns ( U64 val , U64 val) rem_unsafe fun box rem_unsafe( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val neg_unsafe fun box neg_unsafe() : U64 val Returns U64 val op_and fun box op_and( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val op_or fun box op_or( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val op_xor fun box op_xor( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val op_not fun box op_not() : U64 val Returns U64 val add fun box add( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val sub fun box sub( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val mul fun box mul( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val div fun box div( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val divrem fun box divrem( y: U64 val) : (U64 val , U64 val) Parameters y: U64 val Returns ( U64 val , U64 val) rem fun box rem( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val neg fun box neg() : U64 val Returns U64 val eq fun box eq( y: U64 val) : Bool val Parameters y: U64 val Returns Bool val ne fun box ne( y: U64 val) : Bool val Parameters y: U64 val Returns Bool val lt fun box lt( y: U64 val) : Bool val Parameters y: U64 val Returns Bool val le fun box le( y: U64 val) : Bool val Parameters y: U64 val Returns Bool val ge fun box ge( y: U64 val) : Bool val Parameters y: U64 val Returns Bool val gt fun box gt( y: U64 val) : Bool val Parameters y: U64 val Returns Bool val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: U64 val) : (Less val | Equal val | Greater val) Parameters that: U64 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : U64 val Returns U64 val","title":"primitive U64"},{"location":"builtin-U64/#u64","text":"[Source] primitive val U64 is _UnsignedInteger[U64 val] val","title":"U64"},{"location":"builtin-U64/#implements","text":"_UnsignedInteger [ U64 val] val","title":"Implements"},{"location":"builtin-U64/#constructors","text":"","title":"Constructors"},{"location":"builtin-U64/#create","text":"[Source] new val create( value: U64 val) : U64 val^","title":"create"},{"location":"builtin-U64/#parameters","text":"value: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : U64 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U64/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U64/#returns_1","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#min_value","text":"[Source] new val min_value() : U64 val^","title":"min_value"},{"location":"builtin-U64/#returns_2","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#max_value","text":"[Source] new val max_value() : U64 val^","title":"max_value"},{"location":"builtin-U64/#returns_3","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U64/#next_pow2","text":"[Source] fun box next_pow2() : U64 val","title":"next_pow2"},{"location":"builtin-U64/#returns_4","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#abs","text":"[Source] fun box abs() : U64 val","title":"abs"},{"location":"builtin-U64/#returns_5","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bit_reverse","text":"[Source] fun box bit_reverse() : U64 val","title":"bit_reverse"},{"location":"builtin-U64/#returns_6","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bswap","text":"[Source] fun box bswap() : U64 val","title":"bswap"},{"location":"builtin-U64/#returns_7","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#popcount","text":"[Source] fun box popcount() : U64 val","title":"popcount"},{"location":"builtin-U64/#returns_8","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#clz","text":"[Source] fun box clz() : U64 val","title":"clz"},{"location":"builtin-U64/#returns_9","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#ctz","text":"[Source] fun box ctz() : U64 val","title":"ctz"},{"location":"builtin-U64/#returns_10","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val","title":"clz_unsafe"},{"location":"builtin-U64/#returns_11","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val","title":"ctz_unsafe"},{"location":"builtin-U64/#returns_12","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bitwidth","text":"[Source] fun box bitwidth() : U64 val","title":"bitwidth"},{"location":"builtin-U64/#returns_13","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U64/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U64/#min","text":"[Source] fun box min( y: U64 val) : U64 val","title":"min"},{"location":"builtin-U64/#parameters_2","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_15","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#max","text":"[Source] fun box max( y: U64 val) : U64 val","title":"max"},{"location":"builtin-U64/#parameters_3","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_16","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-U64/#returns_17","text":"USize val","title":"Returns"},{"location":"builtin-U64/#addc","text":"[Source] fun box addc( y: U64 val) : (U64 val , Bool val)","title":"addc"},{"location":"builtin-U64/#parameters_4","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_18","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#subc","text":"[Source] fun box subc( y: U64 val) : (U64 val , Bool val)","title":"subc"},{"location":"builtin-U64/#parameters_5","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_19","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#mulc","text":"[Source] fun box mulc( y: U64 val) : (U64 val , Bool val)","title":"mulc"},{"location":"builtin-U64/#parameters_6","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_20","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#divc","text":"[Source] fun box divc( y: U64 val) : (U64 val , Bool val)","title":"divc"},{"location":"builtin-U64/#parameters_7","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_21","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#remc","text":"[Source] fun box remc( y: U64 val) : (U64 val , Bool val)","title":"remc"},{"location":"builtin-U64/#parameters_8","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_22","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#add_partial","text":"[Source] fun box add_partial( y: U64 val) : U64 val ?","title":"add_partial"},{"location":"builtin-U64/#parameters_9","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_23","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#sub_partial","text":"[Source] fun box sub_partial( y: U64 val) : U64 val ?","title":"sub_partial"},{"location":"builtin-U64/#parameters_10","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_24","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#mul_partial","text":"[Source] fun box mul_partial( y: U64 val) : U64 val ?","title":"mul_partial"},{"location":"builtin-U64/#parameters_11","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_25","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#div_partial","text":"[Source] fun box div_partial( y: U64 val) : U64 val ?","title":"div_partial"},{"location":"builtin-U64/#parameters_12","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_26","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#rem_partial","text":"[Source] fun box rem_partial( y: U64 val) : U64 val ?","title":"rem_partial"},{"location":"builtin-U64/#parameters_13","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_27","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#divrem_partial","text":"[Source] fun box divrem_partial( y: U64 val) : (U64 val , U64 val) ?","title":"divrem_partial"},{"location":"builtin-U64/#parameters_14","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_28","text":"( U64 val , U64 val) ?","title":"Returns"},{"location":"builtin-U64/#shl","text":"fun box shl( y: U64 val) : U64 val","title":"shl"},{"location":"builtin-U64/#parameters_15","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_29","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#shr","text":"fun box shr( y: U64 val) : U64 val","title":"shr"},{"location":"builtin-U64/#parameters_16","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_30","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#shl_unsafe","text":"fun box shl_unsafe( y: U64 val) : U64 val","title":"shl_unsafe"},{"location":"builtin-U64/#parameters_17","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_31","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#shr_unsafe","text":"fun box shr_unsafe( y: U64 val) : U64 val","title":"shr_unsafe"},{"location":"builtin-U64/#parameters_18","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_32","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#rotl","text":"fun box rotl( y: U64 val) : U64 val","title":"rotl"},{"location":"builtin-U64/#parameters_19","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_33","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#rotr","text":"fun box rotr( y: U64 val) : U64 val","title":"rotr"},{"location":"builtin-U64/#parameters_20","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_34","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U64/#returns_35","text":"String iso^","title":"Returns"},{"location":"builtin-U64/#add_unsafe","text":"fun box add_unsafe( y: U64 val) : U64 val","title":"add_unsafe"},{"location":"builtin-U64/#parameters_21","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_36","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#sub_unsafe","text":"fun box sub_unsafe( y: U64 val) : U64 val","title":"sub_unsafe"},{"location":"builtin-U64/#parameters_22","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_37","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#mul_unsafe","text":"fun box mul_unsafe( y: U64 val) : U64 val","title":"mul_unsafe"},{"location":"builtin-U64/#parameters_23","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_38","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#div_unsafe","text":"fun box div_unsafe( y: U64 val) : U64 val","title":"div_unsafe"},{"location":"builtin-U64/#parameters_24","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_39","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#divrem_unsafe","text":"fun box divrem_unsafe( y: U64 val) : (U64 val , U64 val)","title":"divrem_unsafe"},{"location":"builtin-U64/#parameters_25","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_40","text":"( U64 val , U64 val)","title":"Returns"},{"location":"builtin-U64/#rem_unsafe","text":"fun box rem_unsafe( y: U64 val) : U64 val","title":"rem_unsafe"},{"location":"builtin-U64/#parameters_26","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_41","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#neg_unsafe","text":"fun box neg_unsafe() : U64 val","title":"neg_unsafe"},{"location":"builtin-U64/#returns_42","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_and","text":"fun box op_and( y: U64 val) : U64 val","title":"op_and"},{"location":"builtin-U64/#parameters_27","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_43","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_or","text":"fun box op_or( y: U64 val) : U64 val","title":"op_or"},{"location":"builtin-U64/#parameters_28","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_44","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_xor","text":"fun box op_xor( y: U64 val) : U64 val","title":"op_xor"},{"location":"builtin-U64/#parameters_29","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_45","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_not","text":"fun box op_not() : U64 val","title":"op_not"},{"location":"builtin-U64/#returns_46","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#add","text":"fun box add( y: U64 val) : U64 val","title":"add"},{"location":"builtin-U64/#parameters_30","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_47","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#sub","text":"fun box sub( y: U64 val) : U64 val","title":"sub"},{"location":"builtin-U64/#parameters_31","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_48","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#mul","text":"fun box mul( y: U64 val) : U64 val","title":"mul"},{"location":"builtin-U64/#parameters_32","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_49","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#div","text":"fun box div( y: U64 val) : U64 val","title":"div"},{"location":"builtin-U64/#parameters_33","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_50","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#divrem","text":"fun box divrem( y: U64 val) : (U64 val , U64 val)","title":"divrem"},{"location":"builtin-U64/#parameters_34","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_51","text":"( U64 val , U64 val)","title":"Returns"},{"location":"builtin-U64/#rem","text":"fun box rem( y: U64 val) : U64 val","title":"rem"},{"location":"builtin-U64/#parameters_35","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_52","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#neg","text":"fun box neg() : U64 val","title":"neg"},{"location":"builtin-U64/#returns_53","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#eq","text":"fun box eq( y: U64 val) : Bool val","title":"eq"},{"location":"builtin-U64/#parameters_36","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#ne","text":"fun box ne( y: U64 val) : Bool val","title":"ne"},{"location":"builtin-U64/#parameters_37","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#lt","text":"fun box lt( y: U64 val) : Bool val","title":"lt"},{"location":"builtin-U64/#parameters_38","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#le","text":"fun box le( y: U64 val) : Bool val","title":"le"},{"location":"builtin-U64/#parameters_39","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_57","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#ge","text":"fun box ge( y: U64 val) : Bool val","title":"ge"},{"location":"builtin-U64/#parameters_40","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#gt","text":"fun box gt( y: U64 val) : Bool val","title":"gt"},{"location":"builtin-U64/#parameters_41","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U64/#returns_60","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U64/#returns_61","text":"I8 val","title":"Returns"},{"location":"builtin-U64/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U64/#returns_62","text":"I16 val","title":"Returns"},{"location":"builtin-U64/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U64/#returns_63","text":"I32 val","title":"Returns"},{"location":"builtin-U64/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U64/#returns_64","text":"I64 val","title":"Returns"},{"location":"builtin-U64/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U64/#returns_65","text":"I128 val","title":"Returns"},{"location":"builtin-U64/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U64/#returns_66","text":"ILong val","title":"Returns"},{"location":"builtin-U64/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U64/#returns_67","text":"ISize val","title":"Returns"},{"location":"builtin-U64/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U64/#returns_68","text":"U8 val","title":"Returns"},{"location":"builtin-U64/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U64/#returns_69","text":"U16 val","title":"Returns"},{"location":"builtin-U64/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U64/#returns_70","text":"U32 val","title":"Returns"},{"location":"builtin-U64/#u64_1","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U64/#returns_71","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U64/#returns_72","text":"U128 val","title":"Returns"},{"location":"builtin-U64/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U64/#returns_73","text":"ULong val","title":"Returns"},{"location":"builtin-U64/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U64/#returns_74","text":"USize val","title":"Returns"},{"location":"builtin-U64/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U64/#returns_75","text":"F32 val","title":"Returns"},{"location":"builtin-U64/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U64/#returns_76","text":"F64 val","title":"Returns"},{"location":"builtin-U64/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U64/#returns_77","text":"I8 val","title":"Returns"},{"location":"builtin-U64/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U64/#returns_78","text":"I16 val","title":"Returns"},{"location":"builtin-U64/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U64/#returns_79","text":"I32 val","title":"Returns"},{"location":"builtin-U64/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U64/#returns_80","text":"I64 val","title":"Returns"},{"location":"builtin-U64/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U64/#returns_81","text":"I128 val","title":"Returns"},{"location":"builtin-U64/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U64/#returns_82","text":"ILong val","title":"Returns"},{"location":"builtin-U64/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U64/#returns_83","text":"ISize val","title":"Returns"},{"location":"builtin-U64/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U64/#returns_84","text":"U8 val","title":"Returns"},{"location":"builtin-U64/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U64/#returns_85","text":"U16 val","title":"Returns"},{"location":"builtin-U64/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U64/#returns_86","text":"U32 val","title":"Returns"},{"location":"builtin-U64/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U64/#returns_87","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U64/#returns_88","text":"U128 val","title":"Returns"},{"location":"builtin-U64/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U64/#returns_89","text":"ULong val","title":"Returns"},{"location":"builtin-U64/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U64/#returns_90","text":"USize val","title":"Returns"},{"location":"builtin-U64/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U64/#returns_91","text":"F32 val","title":"Returns"},{"location":"builtin-U64/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U64/#returns_92","text":"F64 val","title":"Returns"},{"location":"builtin-U64/#compare","text":"fun box compare( that: U64 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U64/#parameters_42","text":"that: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_93","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U64/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U64/#_value","text":"fun box _value() : U64 val","title":"_value"},{"location":"builtin-U64/#returns_94","text":"U64 val","title":"Returns"},{"location":"builtin-U8/","text":"U8 [Source] primitive val U8 is _UnsignedInteger[U8 val] val Implements _UnsignedInteger [ U8 val] val Constructors create [Source] new val create( value: U8 val) : U8 val^ Parameters value: U8 val Returns U8 val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [B] val)] [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : U8 val^ Parameters a: B Returns U8 val^ min_value [Source] new val min_value() : U8 val^ Returns U8 val^ max_value [Source] new val max_value() : U8 val^ Returns U8 val^ Public Functions next_pow2 [Source] fun box next_pow2() : U8 val Returns U8 val abs [Source] fun box abs() : U8 val Returns U8 val bit_reverse [Source] fun box bit_reverse() : U8 val Returns U8 val bswap [Source] fun box bswap() : U8 val Returns U8 val popcount [Source] fun box popcount() : U8 val Returns U8 val clz [Source] fun box clz() : U8 val Returns U8 val ctz [Source] fun box ctz() : U8 val Returns U8 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val Returns U8 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val Returns U8 val bitwidth [Source] fun box bitwidth() : U8 val Returns U8 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val max [Source] fun box max( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val addc [Source] fun box addc( y: U8 val) : (U8 val , Bool val) Parameters y: U8 val Returns ( U8 val , Bool val) subc [Source] fun box subc( y: U8 val) : (U8 val , Bool val) Parameters y: U8 val Returns ( U8 val , Bool val) mulc [Source] fun box mulc( y: U8 val) : (U8 val , Bool val) Parameters y: U8 val Returns ( U8 val , Bool val) divc [Source] fun box divc( y: U8 val) : (U8 val , Bool val) Parameters y: U8 val Returns ( U8 val , Bool val) remc [Source] fun box remc( y: U8 val) : (U8 val , Bool val) Parameters y: U8 val Returns ( U8 val , Bool val) add_partial [Source] fun box add_partial( y: U8 val) : U8 val ? Parameters y: U8 val Returns U8 val ? sub_partial [Source] fun box sub_partial( y: U8 val) : U8 val ? Parameters y: U8 val Returns U8 val ? mul_partial [Source] fun box mul_partial( y: U8 val) : U8 val ? Parameters y: U8 val Returns U8 val ? div_partial [Source] fun box div_partial( y: U8 val) : U8 val ? Parameters y: U8 val Returns U8 val ? rem_partial [Source] fun box rem_partial( y: U8 val) : U8 val ? Parameters y: U8 val Returns U8 val ? divrem_partial [Source] fun box divrem_partial( y: U8 val) : (U8 val , U8 val) ? Parameters y: U8 val Returns ( U8 val , U8 val) ? shl fun box shl( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val shr fun box shr( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val shl_unsafe fun box shl_unsafe( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val shr_unsafe fun box shr_unsafe( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val rotl fun box rotl( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val rotr fun box rotr( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val sub_unsafe fun box sub_unsafe( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val mul_unsafe fun box mul_unsafe( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val div_unsafe fun box div_unsafe( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val divrem_unsafe fun box divrem_unsafe( y: U8 val) : (U8 val , U8 val) Parameters y: U8 val Returns ( U8 val , U8 val) rem_unsafe fun box rem_unsafe( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val neg_unsafe fun box neg_unsafe() : U8 val Returns U8 val op_and fun box op_and( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val op_or fun box op_or( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val op_xor fun box op_xor( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val op_not fun box op_not() : U8 val Returns U8 val add fun box add( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val sub fun box sub( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val mul fun box mul( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val div fun box div( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val divrem fun box divrem( y: U8 val) : (U8 val , U8 val) Parameters y: U8 val Returns ( U8 val , U8 val) rem fun box rem( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val neg fun box neg() : U8 val Returns U8 val eq fun box eq( y: U8 val) : Bool val Parameters y: U8 val Returns Bool val ne fun box ne( y: U8 val) : Bool val Parameters y: U8 val Returns Bool val lt fun box lt( y: U8 val) : Bool val Parameters y: U8 val Returns Bool val le fun box le( y: U8 val) : Bool val Parameters y: U8 val Returns Bool val ge fun box ge( y: U8 val) : Bool val Parameters y: U8 val Returns Bool val gt fun box gt( y: U8 val) : Bool val Parameters y: U8 val Returns Bool val hash fun box hash() : USize val Returns USize val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: U8 val) : (Less val | Equal val | Greater val) Parameters that: U8 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : U8 val Returns U8 val","title":"primitive U8"},{"location":"builtin-U8/#u8","text":"[Source] primitive val U8 is _UnsignedInteger[U8 val] val","title":"U8"},{"location":"builtin-U8/#implements","text":"_UnsignedInteger [ U8 val] val","title":"Implements"},{"location":"builtin-U8/#constructors","text":"","title":"Constructors"},{"location":"builtin-U8/#create","text":"[Source] new val create( value: U8 val) : U8 val^","title":"create"},{"location":"builtin-U8/#parameters","text":"value: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : U8 val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-U8/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-U8/#returns_1","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#min_value","text":"[Source] new val min_value() : U8 val^","title":"min_value"},{"location":"builtin-U8/#returns_2","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#max_value","text":"[Source] new val max_value() : U8 val^","title":"max_value"},{"location":"builtin-U8/#returns_3","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U8/#next_pow2","text":"[Source] fun box next_pow2() : U8 val","title":"next_pow2"},{"location":"builtin-U8/#returns_4","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#abs","text":"[Source] fun box abs() : U8 val","title":"abs"},{"location":"builtin-U8/#returns_5","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bit_reverse","text":"[Source] fun box bit_reverse() : U8 val","title":"bit_reverse"},{"location":"builtin-U8/#returns_6","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bswap","text":"[Source] fun box bswap() : U8 val","title":"bswap"},{"location":"builtin-U8/#returns_7","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#popcount","text":"[Source] fun box popcount() : U8 val","title":"popcount"},{"location":"builtin-U8/#returns_8","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#clz","text":"[Source] fun box clz() : U8 val","title":"clz"},{"location":"builtin-U8/#returns_9","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#ctz","text":"[Source] fun box ctz() : U8 val","title":"ctz"},{"location":"builtin-U8/#returns_10","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val","title":"clz_unsafe"},{"location":"builtin-U8/#returns_11","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val","title":"ctz_unsafe"},{"location":"builtin-U8/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bitwidth","text":"[Source] fun box bitwidth() : U8 val","title":"bitwidth"},{"location":"builtin-U8/#returns_13","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U8/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U8/#min","text":"[Source] fun box min( y: U8 val) : U8 val","title":"min"},{"location":"builtin-U8/#parameters_2","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_15","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#max","text":"[Source] fun box max( y: U8 val) : U8 val","title":"max"},{"location":"builtin-U8/#parameters_3","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_16","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#addc","text":"[Source] fun box addc( y: U8 val) : (U8 val , Bool val)","title":"addc"},{"location":"builtin-U8/#parameters_4","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_17","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#subc","text":"[Source] fun box subc( y: U8 val) : (U8 val , Bool val)","title":"subc"},{"location":"builtin-U8/#parameters_5","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_18","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#mulc","text":"[Source] fun box mulc( y: U8 val) : (U8 val , Bool val)","title":"mulc"},{"location":"builtin-U8/#parameters_6","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_19","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#divc","text":"[Source] fun box divc( y: U8 val) : (U8 val , Bool val)","title":"divc"},{"location":"builtin-U8/#parameters_7","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_20","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#remc","text":"[Source] fun box remc( y: U8 val) : (U8 val , Bool val)","title":"remc"},{"location":"builtin-U8/#parameters_8","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_21","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#add_partial","text":"[Source] fun box add_partial( y: U8 val) : U8 val ?","title":"add_partial"},{"location":"builtin-U8/#parameters_9","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_22","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#sub_partial","text":"[Source] fun box sub_partial( y: U8 val) : U8 val ?","title":"sub_partial"},{"location":"builtin-U8/#parameters_10","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_23","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#mul_partial","text":"[Source] fun box mul_partial( y: U8 val) : U8 val ?","title":"mul_partial"},{"location":"builtin-U8/#parameters_11","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_24","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#div_partial","text":"[Source] fun box div_partial( y: U8 val) : U8 val ?","title":"div_partial"},{"location":"builtin-U8/#parameters_12","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_25","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#rem_partial","text":"[Source] fun box rem_partial( y: U8 val) : U8 val ?","title":"rem_partial"},{"location":"builtin-U8/#parameters_13","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_26","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#divrem_partial","text":"[Source] fun box divrem_partial( y: U8 val) : (U8 val , U8 val) ?","title":"divrem_partial"},{"location":"builtin-U8/#parameters_14","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_27","text":"( U8 val , U8 val) ?","title":"Returns"},{"location":"builtin-U8/#shl","text":"fun box shl( y: U8 val) : U8 val","title":"shl"},{"location":"builtin-U8/#parameters_15","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_28","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#shr","text":"fun box shr( y: U8 val) : U8 val","title":"shr"},{"location":"builtin-U8/#parameters_16","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_29","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#shl_unsafe","text":"fun box shl_unsafe( y: U8 val) : U8 val","title":"shl_unsafe"},{"location":"builtin-U8/#parameters_17","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_30","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#shr_unsafe","text":"fun box shr_unsafe( y: U8 val) : U8 val","title":"shr_unsafe"},{"location":"builtin-U8/#parameters_18","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_31","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#rotl","text":"fun box rotl( y: U8 val) : U8 val","title":"rotl"},{"location":"builtin-U8/#parameters_19","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_32","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#rotr","text":"fun box rotr( y: U8 val) : U8 val","title":"rotr"},{"location":"builtin-U8/#parameters_20","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_33","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U8/#returns_34","text":"String iso^","title":"Returns"},{"location":"builtin-U8/#add_unsafe","text":"fun box add_unsafe( y: U8 val) : U8 val","title":"add_unsafe"},{"location":"builtin-U8/#parameters_21","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_35","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#sub_unsafe","text":"fun box sub_unsafe( y: U8 val) : U8 val","title":"sub_unsafe"},{"location":"builtin-U8/#parameters_22","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_36","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#mul_unsafe","text":"fun box mul_unsafe( y: U8 val) : U8 val","title":"mul_unsafe"},{"location":"builtin-U8/#parameters_23","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_37","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#div_unsafe","text":"fun box div_unsafe( y: U8 val) : U8 val","title":"div_unsafe"},{"location":"builtin-U8/#parameters_24","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_38","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#divrem_unsafe","text":"fun box divrem_unsafe( y: U8 val) : (U8 val , U8 val)","title":"divrem_unsafe"},{"location":"builtin-U8/#parameters_25","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_39","text":"( U8 val , U8 val)","title":"Returns"},{"location":"builtin-U8/#rem_unsafe","text":"fun box rem_unsafe( y: U8 val) : U8 val","title":"rem_unsafe"},{"location":"builtin-U8/#parameters_26","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_40","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#neg_unsafe","text":"fun box neg_unsafe() : U8 val","title":"neg_unsafe"},{"location":"builtin-U8/#returns_41","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_and","text":"fun box op_and( y: U8 val) : U8 val","title":"op_and"},{"location":"builtin-U8/#parameters_27","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_42","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_or","text":"fun box op_or( y: U8 val) : U8 val","title":"op_or"},{"location":"builtin-U8/#parameters_28","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_43","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_xor","text":"fun box op_xor( y: U8 val) : U8 val","title":"op_xor"},{"location":"builtin-U8/#parameters_29","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_44","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_not","text":"fun box op_not() : U8 val","title":"op_not"},{"location":"builtin-U8/#returns_45","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#add","text":"fun box add( y: U8 val) : U8 val","title":"add"},{"location":"builtin-U8/#parameters_30","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_46","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#sub","text":"fun box sub( y: U8 val) : U8 val","title":"sub"},{"location":"builtin-U8/#parameters_31","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_47","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#mul","text":"fun box mul( y: U8 val) : U8 val","title":"mul"},{"location":"builtin-U8/#parameters_32","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_48","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#div","text":"fun box div( y: U8 val) : U8 val","title":"div"},{"location":"builtin-U8/#parameters_33","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_49","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#divrem","text":"fun box divrem( y: U8 val) : (U8 val , U8 val)","title":"divrem"},{"location":"builtin-U8/#parameters_34","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_50","text":"( U8 val , U8 val)","title":"Returns"},{"location":"builtin-U8/#rem","text":"fun box rem( y: U8 val) : U8 val","title":"rem"},{"location":"builtin-U8/#parameters_35","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_51","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#neg","text":"fun box neg() : U8 val","title":"neg"},{"location":"builtin-U8/#returns_52","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#eq","text":"fun box eq( y: U8 val) : Bool val","title":"eq"},{"location":"builtin-U8/#parameters_36","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#ne","text":"fun box ne( y: U8 val) : Bool val","title":"ne"},{"location":"builtin-U8/#parameters_37","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#lt","text":"fun box lt( y: U8 val) : Bool val","title":"lt"},{"location":"builtin-U8/#parameters_38","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#le","text":"fun box le( y: U8 val) : Bool val","title":"le"},{"location":"builtin-U8/#parameters_39","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#ge","text":"fun box ge( y: U8 val) : Bool val","title":"ge"},{"location":"builtin-U8/#parameters_40","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_57","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#gt","text":"fun box gt( y: U8 val) : Bool val","title":"gt"},{"location":"builtin-U8/#parameters_41","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-U8/#returns_59","text":"USize val","title":"Returns"},{"location":"builtin-U8/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U8/#returns_60","text":"U64 val","title":"Returns"},{"location":"builtin-U8/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U8/#returns_61","text":"I8 val","title":"Returns"},{"location":"builtin-U8/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U8/#returns_62","text":"I16 val","title":"Returns"},{"location":"builtin-U8/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U8/#returns_63","text":"I32 val","title":"Returns"},{"location":"builtin-U8/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U8/#returns_64","text":"I64 val","title":"Returns"},{"location":"builtin-U8/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U8/#returns_65","text":"I128 val","title":"Returns"},{"location":"builtin-U8/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U8/#returns_66","text":"ILong val","title":"Returns"},{"location":"builtin-U8/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U8/#returns_67","text":"ISize val","title":"Returns"},{"location":"builtin-U8/#u8_1","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U8/#returns_68","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U8/#returns_69","text":"U16 val","title":"Returns"},{"location":"builtin-U8/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U8/#returns_70","text":"U32 val","title":"Returns"},{"location":"builtin-U8/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U8/#returns_71","text":"U64 val","title":"Returns"},{"location":"builtin-U8/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U8/#returns_72","text":"U128 val","title":"Returns"},{"location":"builtin-U8/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U8/#returns_73","text":"ULong val","title":"Returns"},{"location":"builtin-U8/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U8/#returns_74","text":"USize val","title":"Returns"},{"location":"builtin-U8/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U8/#returns_75","text":"F32 val","title":"Returns"},{"location":"builtin-U8/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U8/#returns_76","text":"F64 val","title":"Returns"},{"location":"builtin-U8/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U8/#returns_77","text":"I8 val","title":"Returns"},{"location":"builtin-U8/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U8/#returns_78","text":"I16 val","title":"Returns"},{"location":"builtin-U8/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U8/#returns_79","text":"I32 val","title":"Returns"},{"location":"builtin-U8/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U8/#returns_80","text":"I64 val","title":"Returns"},{"location":"builtin-U8/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U8/#returns_81","text":"I128 val","title":"Returns"},{"location":"builtin-U8/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U8/#returns_82","text":"ILong val","title":"Returns"},{"location":"builtin-U8/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U8/#returns_83","text":"ISize val","title":"Returns"},{"location":"builtin-U8/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U8/#returns_84","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U8/#returns_85","text":"U16 val","title":"Returns"},{"location":"builtin-U8/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U8/#returns_86","text":"U32 val","title":"Returns"},{"location":"builtin-U8/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U8/#returns_87","text":"U64 val","title":"Returns"},{"location":"builtin-U8/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U8/#returns_88","text":"U128 val","title":"Returns"},{"location":"builtin-U8/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U8/#returns_89","text":"ULong val","title":"Returns"},{"location":"builtin-U8/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U8/#returns_90","text":"USize val","title":"Returns"},{"location":"builtin-U8/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U8/#returns_91","text":"F32 val","title":"Returns"},{"location":"builtin-U8/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U8/#returns_92","text":"F64 val","title":"Returns"},{"location":"builtin-U8/#compare","text":"fun box compare( that: U8 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U8/#parameters_42","text":"that: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_93","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U8/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U8/#_value","text":"fun box _value() : U8 val","title":"_value"},{"location":"builtin-U8/#returns_94","text":"U8 val","title":"Returns"},{"location":"builtin-ULong/","text":"ULong [Source] primitive val ULong is _UnsignedInteger[ULong val] val Implements _UnsignedInteger [ ULong val] val Constructors create [Source] new val create( value: ULong val) : ULong val^ Parameters value: ULong val Returns ULong val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : ULong val^ Parameters a: A Returns ULong val^ min_value [Source] new val min_value() : ULong val^ Returns ULong val^ max_value [Source] new val max_value() : ULong val^ Returns ULong val^ Public Functions next_pow2 [Source] fun box next_pow2() : ULong val Returns ULong val abs [Source] fun box abs() : ULong val Returns ULong val bit_reverse [Source] fun box bit_reverse() : ULong val Returns ULong val bswap [Source] fun box bswap() : ULong val Returns ULong val popcount [Source] fun box popcount() : ULong val Returns ULong val clz [Source] fun box clz() : ULong val Returns ULong val ctz [Source] fun box ctz() : ULong val Returns ULong val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : ULong val Returns ULong val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : ULong val Returns ULong val bitwidth [Source] fun box bitwidth() : ULong val Returns ULong val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val max [Source] fun box max( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val hash [Source] fun box hash() : USize val Returns USize val addc [Source] fun box addc( y: ULong val) : (ULong val , Bool val) Parameters y: ULong val Returns ( ULong val , Bool val) subc [Source] fun box subc( y: ULong val) : (ULong val , Bool val) Parameters y: ULong val Returns ( ULong val , Bool val) mulc [Source] fun box mulc( y: ULong val) : (ULong val , Bool val) Parameters y: ULong val Returns ( ULong val , Bool val) divc [Source] fun box divc( y: ULong val) : (ULong val , Bool val) Parameters y: ULong val Returns ( ULong val , Bool val) remc [Source] fun box remc( y: ULong val) : (ULong val , Bool val) Parameters y: ULong val Returns ( ULong val , Bool val) add_partial [Source] fun box add_partial( y: ULong val) : ULong val ? Parameters y: ULong val Returns ULong val ? sub_partial [Source] fun box sub_partial( y: ULong val) : ULong val ? Parameters y: ULong val Returns ULong val ? mul_partial [Source] fun box mul_partial( y: ULong val) : ULong val ? Parameters y: ULong val Returns ULong val ? div_partial [Source] fun box div_partial( y: ULong val) : ULong val ? Parameters y: ULong val Returns ULong val ? rem_partial [Source] fun box rem_partial( y: ULong val) : ULong val ? Parameters y: ULong val Returns ULong val ? divrem_partial [Source] fun box divrem_partial( y: ULong val) : (ULong val , ULong val) ? Parameters y: ULong val Returns ( ULong val , ULong val) ? shl fun box shl( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val shr fun box shr( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val shl_unsafe fun box shl_unsafe( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val shr_unsafe fun box shr_unsafe( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val rotl fun box rotl( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val rotr fun box rotr( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val sub_unsafe fun box sub_unsafe( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val mul_unsafe fun box mul_unsafe( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val div_unsafe fun box div_unsafe( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val divrem_unsafe fun box divrem_unsafe( y: ULong val) : (ULong val , ULong val) Parameters y: ULong val Returns ( ULong val , ULong val) rem_unsafe fun box rem_unsafe( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val neg_unsafe fun box neg_unsafe() : ULong val Returns ULong val op_and fun box op_and( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val op_or fun box op_or( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val op_xor fun box op_xor( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val op_not fun box op_not() : ULong val Returns ULong val add fun box add( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val sub fun box sub( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val mul fun box mul( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val div fun box div( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val divrem fun box divrem( y: ULong val) : (ULong val , ULong val) Parameters y: ULong val Returns ( ULong val , ULong val) rem fun box rem( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val neg fun box neg() : ULong val Returns ULong val eq fun box eq( y: ULong val) : Bool val Parameters y: ULong val Returns Bool val ne fun box ne( y: ULong val) : Bool val Parameters y: ULong val Returns Bool val lt fun box lt( y: ULong val) : Bool val Parameters y: ULong val Returns Bool val le fun box le( y: ULong val) : Bool val Parameters y: ULong val Returns Bool val ge fun box ge( y: ULong val) : Bool val Parameters y: ULong val Returns Bool val gt fun box gt( y: ULong val) : Bool val Parameters y: ULong val Returns Bool val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: ULong val) : (Less val | Equal val | Greater val) Parameters that: ULong val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : ULong val Returns ULong val","title":"primitive ULong"},{"location":"builtin-ULong/#ulong","text":"[Source] primitive val ULong is _UnsignedInteger[ULong val] val","title":"ULong"},{"location":"builtin-ULong/#implements","text":"_UnsignedInteger [ ULong val] val","title":"Implements"},{"location":"builtin-ULong/#constructors","text":"","title":"Constructors"},{"location":"builtin-ULong/#create","text":"[Source] new val create( value: ULong val) : ULong val^","title":"create"},{"location":"builtin-ULong/#parameters","text":"value: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : ULong val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-ULong/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-ULong/#returns_1","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#min_value","text":"[Source] new val min_value() : ULong val^","title":"min_value"},{"location":"builtin-ULong/#returns_2","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#max_value","text":"[Source] new val max_value() : ULong val^","title":"max_value"},{"location":"builtin-ULong/#returns_3","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ULong/#next_pow2","text":"[Source] fun box next_pow2() : ULong val","title":"next_pow2"},{"location":"builtin-ULong/#returns_4","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#abs","text":"[Source] fun box abs() : ULong val","title":"abs"},{"location":"builtin-ULong/#returns_5","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bit_reverse","text":"[Source] fun box bit_reverse() : ULong val","title":"bit_reverse"},{"location":"builtin-ULong/#returns_6","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bswap","text":"[Source] fun box bswap() : ULong val","title":"bswap"},{"location":"builtin-ULong/#returns_7","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#popcount","text":"[Source] fun box popcount() : ULong val","title":"popcount"},{"location":"builtin-ULong/#returns_8","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#clz","text":"[Source] fun box clz() : ULong val","title":"clz"},{"location":"builtin-ULong/#returns_9","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#ctz","text":"[Source] fun box ctz() : ULong val","title":"ctz"},{"location":"builtin-ULong/#returns_10","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : ULong val","title":"clz_unsafe"},{"location":"builtin-ULong/#returns_11","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : ULong val","title":"ctz_unsafe"},{"location":"builtin-ULong/#returns_12","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bitwidth","text":"[Source] fun box bitwidth() : ULong val","title":"bitwidth"},{"location":"builtin-ULong/#returns_13","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-ULong/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#min","text":"[Source] fun box min( y: ULong val) : ULong val","title":"min"},{"location":"builtin-ULong/#parameters_2","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_15","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#max","text":"[Source] fun box max( y: ULong val) : ULong val","title":"max"},{"location":"builtin-ULong/#parameters_3","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_16","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-ULong/#returns_17","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#addc","text":"[Source] fun box addc( y: ULong val) : (ULong val , Bool val)","title":"addc"},{"location":"builtin-ULong/#parameters_4","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_18","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#subc","text":"[Source] fun box subc( y: ULong val) : (ULong val , Bool val)","title":"subc"},{"location":"builtin-ULong/#parameters_5","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_19","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#mulc","text":"[Source] fun box mulc( y: ULong val) : (ULong val , Bool val)","title":"mulc"},{"location":"builtin-ULong/#parameters_6","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_20","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#divc","text":"[Source] fun box divc( y: ULong val) : (ULong val , Bool val)","title":"divc"},{"location":"builtin-ULong/#parameters_7","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_21","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#remc","text":"[Source] fun box remc( y: ULong val) : (ULong val , Bool val)","title":"remc"},{"location":"builtin-ULong/#parameters_8","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_22","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#add_partial","text":"[Source] fun box add_partial( y: ULong val) : ULong val ?","title":"add_partial"},{"location":"builtin-ULong/#parameters_9","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_23","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#sub_partial","text":"[Source] fun box sub_partial( y: ULong val) : ULong val ?","title":"sub_partial"},{"location":"builtin-ULong/#parameters_10","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_24","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#mul_partial","text":"[Source] fun box mul_partial( y: ULong val) : ULong val ?","title":"mul_partial"},{"location":"builtin-ULong/#parameters_11","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_25","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#div_partial","text":"[Source] fun box div_partial( y: ULong val) : ULong val ?","title":"div_partial"},{"location":"builtin-ULong/#parameters_12","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_26","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#rem_partial","text":"[Source] fun box rem_partial( y: ULong val) : ULong val ?","title":"rem_partial"},{"location":"builtin-ULong/#parameters_13","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_27","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#divrem_partial","text":"[Source] fun box divrem_partial( y: ULong val) : (ULong val , ULong val) ?","title":"divrem_partial"},{"location":"builtin-ULong/#parameters_14","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_28","text":"( ULong val , ULong val) ?","title":"Returns"},{"location":"builtin-ULong/#shl","text":"fun box shl( y: ULong val) : ULong val","title":"shl"},{"location":"builtin-ULong/#parameters_15","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_29","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#shr","text":"fun box shr( y: ULong val) : ULong val","title":"shr"},{"location":"builtin-ULong/#parameters_16","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_30","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#shl_unsafe","text":"fun box shl_unsafe( y: ULong val) : ULong val","title":"shl_unsafe"},{"location":"builtin-ULong/#parameters_17","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_31","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#shr_unsafe","text":"fun box shr_unsafe( y: ULong val) : ULong val","title":"shr_unsafe"},{"location":"builtin-ULong/#parameters_18","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_32","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#rotl","text":"fun box rotl( y: ULong val) : ULong val","title":"rotl"},{"location":"builtin-ULong/#parameters_19","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_33","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#rotr","text":"fun box rotr( y: ULong val) : ULong val","title":"rotr"},{"location":"builtin-ULong/#parameters_20","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_34","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-ULong/#returns_35","text":"String iso^","title":"Returns"},{"location":"builtin-ULong/#add_unsafe","text":"fun box add_unsafe( y: ULong val) : ULong val","title":"add_unsafe"},{"location":"builtin-ULong/#parameters_21","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_36","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#sub_unsafe","text":"fun box sub_unsafe( y: ULong val) : ULong val","title":"sub_unsafe"},{"location":"builtin-ULong/#parameters_22","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_37","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#mul_unsafe","text":"fun box mul_unsafe( y: ULong val) : ULong val","title":"mul_unsafe"},{"location":"builtin-ULong/#parameters_23","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_38","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#div_unsafe","text":"fun box div_unsafe( y: ULong val) : ULong val","title":"div_unsafe"},{"location":"builtin-ULong/#parameters_24","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_39","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#divrem_unsafe","text":"fun box divrem_unsafe( y: ULong val) : (ULong val , ULong val)","title":"divrem_unsafe"},{"location":"builtin-ULong/#parameters_25","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_40","text":"( ULong val , ULong val)","title":"Returns"},{"location":"builtin-ULong/#rem_unsafe","text":"fun box rem_unsafe( y: ULong val) : ULong val","title":"rem_unsafe"},{"location":"builtin-ULong/#parameters_26","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_41","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#neg_unsafe","text":"fun box neg_unsafe() : ULong val","title":"neg_unsafe"},{"location":"builtin-ULong/#returns_42","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_and","text":"fun box op_and( y: ULong val) : ULong val","title":"op_and"},{"location":"builtin-ULong/#parameters_27","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_43","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_or","text":"fun box op_or( y: ULong val) : ULong val","title":"op_or"},{"location":"builtin-ULong/#parameters_28","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_44","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_xor","text":"fun box op_xor( y: ULong val) : ULong val","title":"op_xor"},{"location":"builtin-ULong/#parameters_29","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_45","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_not","text":"fun box op_not() : ULong val","title":"op_not"},{"location":"builtin-ULong/#returns_46","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#add","text":"fun box add( y: ULong val) : ULong val","title":"add"},{"location":"builtin-ULong/#parameters_30","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_47","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#sub","text":"fun box sub( y: ULong val) : ULong val","title":"sub"},{"location":"builtin-ULong/#parameters_31","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_48","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#mul","text":"fun box mul( y: ULong val) : ULong val","title":"mul"},{"location":"builtin-ULong/#parameters_32","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_49","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#div","text":"fun box div( y: ULong val) : ULong val","title":"div"},{"location":"builtin-ULong/#parameters_33","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_50","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#divrem","text":"fun box divrem( y: ULong val) : (ULong val , ULong val)","title":"divrem"},{"location":"builtin-ULong/#parameters_34","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_51","text":"( ULong val , ULong val)","title":"Returns"},{"location":"builtin-ULong/#rem","text":"fun box rem( y: ULong val) : ULong val","title":"rem"},{"location":"builtin-ULong/#parameters_35","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_52","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#neg","text":"fun box neg() : ULong val","title":"neg"},{"location":"builtin-ULong/#returns_53","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#eq","text":"fun box eq( y: ULong val) : Bool val","title":"eq"},{"location":"builtin-ULong/#parameters_36","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#ne","text":"fun box ne( y: ULong val) : Bool val","title":"ne"},{"location":"builtin-ULong/#parameters_37","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#lt","text":"fun box lt( y: ULong val) : Bool val","title":"lt"},{"location":"builtin-ULong/#parameters_38","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#le","text":"fun box le( y: ULong val) : Bool val","title":"le"},{"location":"builtin-ULong/#parameters_39","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_57","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#ge","text":"fun box ge( y: ULong val) : Bool val","title":"ge"},{"location":"builtin-ULong/#parameters_40","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#gt","text":"fun box gt( y: ULong val) : Bool val","title":"gt"},{"location":"builtin-ULong/#parameters_41","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-ULong/#returns_60","text":"U64 val","title":"Returns"},{"location":"builtin-ULong/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-ULong/#returns_61","text":"I8 val","title":"Returns"},{"location":"builtin-ULong/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-ULong/#returns_62","text":"I16 val","title":"Returns"},{"location":"builtin-ULong/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-ULong/#returns_63","text":"I32 val","title":"Returns"},{"location":"builtin-ULong/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-ULong/#returns_64","text":"I64 val","title":"Returns"},{"location":"builtin-ULong/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-ULong/#returns_65","text":"I128 val","title":"Returns"},{"location":"builtin-ULong/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-ULong/#returns_66","text":"ILong val","title":"Returns"},{"location":"builtin-ULong/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-ULong/#returns_67","text":"ISize val","title":"Returns"},{"location":"builtin-ULong/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-ULong/#returns_68","text":"U8 val","title":"Returns"},{"location":"builtin-ULong/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-ULong/#returns_69","text":"U16 val","title":"Returns"},{"location":"builtin-ULong/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-ULong/#returns_70","text":"U32 val","title":"Returns"},{"location":"builtin-ULong/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-ULong/#returns_71","text":"U64 val","title":"Returns"},{"location":"builtin-ULong/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-ULong/#returns_72","text":"U128 val","title":"Returns"},{"location":"builtin-ULong/#ulong_1","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-ULong/#returns_73","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-ULong/#returns_74","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-ULong/#returns_75","text":"F32 val","title":"Returns"},{"location":"builtin-ULong/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-ULong/#returns_76","text":"F64 val","title":"Returns"},{"location":"builtin-ULong/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-ULong/#returns_77","text":"I8 val","title":"Returns"},{"location":"builtin-ULong/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-ULong/#returns_78","text":"I16 val","title":"Returns"},{"location":"builtin-ULong/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-ULong/#returns_79","text":"I32 val","title":"Returns"},{"location":"builtin-ULong/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-ULong/#returns_80","text":"I64 val","title":"Returns"},{"location":"builtin-ULong/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-ULong/#returns_81","text":"I128 val","title":"Returns"},{"location":"builtin-ULong/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-ULong/#returns_82","text":"ILong val","title":"Returns"},{"location":"builtin-ULong/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-ULong/#returns_83","text":"ISize val","title":"Returns"},{"location":"builtin-ULong/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-ULong/#returns_84","text":"U8 val","title":"Returns"},{"location":"builtin-ULong/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-ULong/#returns_85","text":"U16 val","title":"Returns"},{"location":"builtin-ULong/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-ULong/#returns_86","text":"U32 val","title":"Returns"},{"location":"builtin-ULong/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-ULong/#returns_87","text":"U64 val","title":"Returns"},{"location":"builtin-ULong/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-ULong/#returns_88","text":"U128 val","title":"Returns"},{"location":"builtin-ULong/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-ULong/#returns_89","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-ULong/#returns_90","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-ULong/#returns_91","text":"F32 val","title":"Returns"},{"location":"builtin-ULong/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-ULong/#returns_92","text":"F64 val","title":"Returns"},{"location":"builtin-ULong/#compare","text":"fun box compare( that: ULong val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-ULong/#parameters_42","text":"that: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_93","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-ULong/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-ULong/#_value","text":"fun box _value() : ULong val","title":"_value"},{"location":"builtin-ULong/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-USize/","text":"USize [Source] primitive val USize is _UnsignedInteger[USize val] val Implements _UnsignedInteger [ USize val] val Constructors create [Source] new val create( value: USize val) : USize val^ Parameters value: USize val Returns USize val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : USize val^ Parameters a: A Returns USize val^ min_value [Source] new val min_value() : USize val^ Returns USize val^ max_value [Source] new val max_value() : USize val^ Returns USize val^ Public Functions next_pow2 [Source] fun box next_pow2() : USize val Returns USize val abs [Source] fun box abs() : USize val Returns USize val bit_reverse [Source] fun box bit_reverse() : USize val Returns USize val bswap [Source] fun box bswap() : USize val Returns USize val popcount [Source] fun box popcount() : USize val Returns USize val clz [Source] fun box clz() : USize val Returns USize val ctz [Source] fun box ctz() : USize val Returns USize val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : USize val Returns USize val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : USize val Returns USize val bitwidth [Source] fun box bitwidth() : USize val Returns USize val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: USize val) : USize val Parameters y: USize val Returns USize val max [Source] fun box max( y: USize val) : USize val Parameters y: USize val Returns USize val addc [Source] fun box addc( y: USize val) : (USize val , Bool val) Parameters y: USize val Returns ( USize val , Bool val) subc [Source] fun box subc( y: USize val) : (USize val , Bool val) Parameters y: USize val Returns ( USize val , Bool val) mulc [Source] fun box mulc( y: USize val) : (USize val , Bool val) Parameters y: USize val Returns ( USize val , Bool val) divc [Source] fun box divc( y: USize val) : (USize val , Bool val) Parameters y: USize val Returns ( USize val , Bool val) remc [Source] fun box remc( y: USize val) : (USize val , Bool val) Parameters y: USize val Returns ( USize val , Bool val) add_partial [Source] fun box add_partial( y: USize val) : USize val ? Parameters y: USize val Returns USize val ? sub_partial [Source] fun box sub_partial( y: USize val) : USize val ? Parameters y: USize val Returns USize val ? mul_partial [Source] fun box mul_partial( y: USize val) : USize val ? Parameters y: USize val Returns USize val ? div_partial [Source] fun box div_partial( y: USize val) : USize val ? Parameters y: USize val Returns USize val ? rem_partial [Source] fun box rem_partial( y: USize val) : USize val ? Parameters y: USize val Returns USize val ? divrem_partial [Source] fun box divrem_partial( y: USize val) : (USize val , USize val) ? Parameters y: USize val Returns ( USize val , USize val) ? shl fun box shl( y: USize val) : USize val Parameters y: USize val Returns USize val shr fun box shr( y: USize val) : USize val Parameters y: USize val Returns USize val shl_unsafe fun box shl_unsafe( y: USize val) : USize val Parameters y: USize val Returns USize val shr_unsafe fun box shr_unsafe( y: USize val) : USize val Parameters y: USize val Returns USize val rotl fun box rotl( y: USize val) : USize val Parameters y: USize val Returns USize val rotr fun box rotr( y: USize val) : USize val Parameters y: USize val Returns USize val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: USize val) : USize val Parameters y: USize val Returns USize val sub_unsafe fun box sub_unsafe( y: USize val) : USize val Parameters y: USize val Returns USize val mul_unsafe fun box mul_unsafe( y: USize val) : USize val Parameters y: USize val Returns USize val div_unsafe fun box div_unsafe( y: USize val) : USize val Parameters y: USize val Returns USize val divrem_unsafe fun box divrem_unsafe( y: USize val) : (USize val , USize val) Parameters y: USize val Returns ( USize val , USize val) rem_unsafe fun box rem_unsafe( y: USize val) : USize val Parameters y: USize val Returns USize val neg_unsafe fun box neg_unsafe() : USize val Returns USize val op_and fun box op_and( y: USize val) : USize val Parameters y: USize val Returns USize val op_or fun box op_or( y: USize val) : USize val Parameters y: USize val Returns USize val op_xor fun box op_xor( y: USize val) : USize val Parameters y: USize val Returns USize val op_not fun box op_not() : USize val Returns USize val add fun box add( y: USize val) : USize val Parameters y: USize val Returns USize val sub fun box sub( y: USize val) : USize val Parameters y: USize val Returns USize val mul fun box mul( y: USize val) : USize val Parameters y: USize val Returns USize val div fun box div( y: USize val) : USize val Parameters y: USize val Returns USize val divrem fun box divrem( y: USize val) : (USize val , USize val) Parameters y: USize val Returns ( USize val , USize val) rem fun box rem( y: USize val) : USize val Parameters y: USize val Returns USize val neg fun box neg() : USize val Returns USize val eq fun box eq( y: USize val) : Bool val Parameters y: USize val Returns Bool val ne fun box ne( y: USize val) : Bool val Parameters y: USize val Returns Bool val lt fun box lt( y: USize val) : Bool val Parameters y: USize val Returns Bool val le fun box le( y: USize val) : Bool val Parameters y: USize val Returns Bool val ge fun box ge( y: USize val) : Bool val Parameters y: USize val Returns Bool val gt fun box gt( y: USize val) : Bool val Parameters y: USize val Returns Bool val hash fun box hash() : USize val Returns USize val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: USize val) : (Less val | Equal val | Greater val) Parameters that: USize val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : USize val Returns USize val","title":"primitive USize"},{"location":"builtin-USize/#usize","text":"[Source] primitive val USize is _UnsignedInteger[USize val] val","title":"USize"},{"location":"builtin-USize/#implements","text":"_UnsignedInteger [ USize val] val","title":"Implements"},{"location":"builtin-USize/#constructors","text":"","title":"Constructors"},{"location":"builtin-USize/#create","text":"[Source] new val create( value: USize val) : USize val^","title":"create"},{"location":"builtin-USize/#parameters","text":"value: USize val","title":"Parameters"},{"location":"builtin-USize/#returns","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : USize val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-USize/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-USize/#returns_1","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#min_value","text":"[Source] new val min_value() : USize val^","title":"min_value"},{"location":"builtin-USize/#returns_2","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#max_value","text":"[Source] new val max_value() : USize val^","title":"max_value"},{"location":"builtin-USize/#returns_3","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-USize/#next_pow2","text":"[Source] fun box next_pow2() : USize val","title":"next_pow2"},{"location":"builtin-USize/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-USize/#abs","text":"[Source] fun box abs() : USize val","title":"abs"},{"location":"builtin-USize/#returns_5","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bit_reverse","text":"[Source] fun box bit_reverse() : USize val","title":"bit_reverse"},{"location":"builtin-USize/#returns_6","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bswap","text":"[Source] fun box bswap() : USize val","title":"bswap"},{"location":"builtin-USize/#returns_7","text":"USize val","title":"Returns"},{"location":"builtin-USize/#popcount","text":"[Source] fun box popcount() : USize val","title":"popcount"},{"location":"builtin-USize/#returns_8","text":"USize val","title":"Returns"},{"location":"builtin-USize/#clz","text":"[Source] fun box clz() : USize val","title":"clz"},{"location":"builtin-USize/#returns_9","text":"USize val","title":"Returns"},{"location":"builtin-USize/#ctz","text":"[Source] fun box ctz() : USize val","title":"ctz"},{"location":"builtin-USize/#returns_10","text":"USize val","title":"Returns"},{"location":"builtin-USize/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : USize val","title":"clz_unsafe"},{"location":"builtin-USize/#returns_11","text":"USize val","title":"Returns"},{"location":"builtin-USize/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : USize val","title":"ctz_unsafe"},{"location":"builtin-USize/#returns_12","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bitwidth","text":"[Source] fun box bitwidth() : USize val","title":"bitwidth"},{"location":"builtin-USize/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-USize/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-USize/#min","text":"[Source] fun box min( y: USize val) : USize val","title":"min"},{"location":"builtin-USize/#parameters_2","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_15","text":"USize val","title":"Returns"},{"location":"builtin-USize/#max","text":"[Source] fun box max( y: USize val) : USize val","title":"max"},{"location":"builtin-USize/#parameters_3","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_16","text":"USize val","title":"Returns"},{"location":"builtin-USize/#addc","text":"[Source] fun box addc( y: USize val) : (USize val , Bool val)","title":"addc"},{"location":"builtin-USize/#parameters_4","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_17","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#subc","text":"[Source] fun box subc( y: USize val) : (USize val , Bool val)","title":"subc"},{"location":"builtin-USize/#parameters_5","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_18","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#mulc","text":"[Source] fun box mulc( y: USize val) : (USize val , Bool val)","title":"mulc"},{"location":"builtin-USize/#parameters_6","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_19","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#divc","text":"[Source] fun box divc( y: USize val) : (USize val , Bool val)","title":"divc"},{"location":"builtin-USize/#parameters_7","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_20","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#remc","text":"[Source] fun box remc( y: USize val) : (USize val , Bool val)","title":"remc"},{"location":"builtin-USize/#parameters_8","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_21","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#add_partial","text":"[Source] fun box add_partial( y: USize val) : USize val ?","title":"add_partial"},{"location":"builtin-USize/#parameters_9","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_22","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#sub_partial","text":"[Source] fun box sub_partial( y: USize val) : USize val ?","title":"sub_partial"},{"location":"builtin-USize/#parameters_10","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_23","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#mul_partial","text":"[Source] fun box mul_partial( y: USize val) : USize val ?","title":"mul_partial"},{"location":"builtin-USize/#parameters_11","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_24","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#div_partial","text":"[Source] fun box div_partial( y: USize val) : USize val ?","title":"div_partial"},{"location":"builtin-USize/#parameters_12","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_25","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#rem_partial","text":"[Source] fun box rem_partial( y: USize val) : USize val ?","title":"rem_partial"},{"location":"builtin-USize/#parameters_13","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_26","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#divrem_partial","text":"[Source] fun box divrem_partial( y: USize val) : (USize val , USize val) ?","title":"divrem_partial"},{"location":"builtin-USize/#parameters_14","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_27","text":"( USize val , USize val) ?","title":"Returns"},{"location":"builtin-USize/#shl","text":"fun box shl( y: USize val) : USize val","title":"shl"},{"location":"builtin-USize/#parameters_15","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_28","text":"USize val","title":"Returns"},{"location":"builtin-USize/#shr","text":"fun box shr( y: USize val) : USize val","title":"shr"},{"location":"builtin-USize/#parameters_16","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_29","text":"USize val","title":"Returns"},{"location":"builtin-USize/#shl_unsafe","text":"fun box shl_unsafe( y: USize val) : USize val","title":"shl_unsafe"},{"location":"builtin-USize/#parameters_17","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_30","text":"USize val","title":"Returns"},{"location":"builtin-USize/#shr_unsafe","text":"fun box shr_unsafe( y: USize val) : USize val","title":"shr_unsafe"},{"location":"builtin-USize/#parameters_18","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_31","text":"USize val","title":"Returns"},{"location":"builtin-USize/#rotl","text":"fun box rotl( y: USize val) : USize val","title":"rotl"},{"location":"builtin-USize/#parameters_19","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_32","text":"USize val","title":"Returns"},{"location":"builtin-USize/#rotr","text":"fun box rotr( y: USize val) : USize val","title":"rotr"},{"location":"builtin-USize/#parameters_20","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_33","text":"USize val","title":"Returns"},{"location":"builtin-USize/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-USize/#returns_34","text":"String iso^","title":"Returns"},{"location":"builtin-USize/#add_unsafe","text":"fun box add_unsafe( y: USize val) : USize val","title":"add_unsafe"},{"location":"builtin-USize/#parameters_21","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_35","text":"USize val","title":"Returns"},{"location":"builtin-USize/#sub_unsafe","text":"fun box sub_unsafe( y: USize val) : USize val","title":"sub_unsafe"},{"location":"builtin-USize/#parameters_22","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_36","text":"USize val","title":"Returns"},{"location":"builtin-USize/#mul_unsafe","text":"fun box mul_unsafe( y: USize val) : USize val","title":"mul_unsafe"},{"location":"builtin-USize/#parameters_23","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_37","text":"USize val","title":"Returns"},{"location":"builtin-USize/#div_unsafe","text":"fun box div_unsafe( y: USize val) : USize val","title":"div_unsafe"},{"location":"builtin-USize/#parameters_24","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_38","text":"USize val","title":"Returns"},{"location":"builtin-USize/#divrem_unsafe","text":"fun box divrem_unsafe( y: USize val) : (USize val , USize val)","title":"divrem_unsafe"},{"location":"builtin-USize/#parameters_25","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_39","text":"( USize val , USize val)","title":"Returns"},{"location":"builtin-USize/#rem_unsafe","text":"fun box rem_unsafe( y: USize val) : USize val","title":"rem_unsafe"},{"location":"builtin-USize/#parameters_26","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_40","text":"USize val","title":"Returns"},{"location":"builtin-USize/#neg_unsafe","text":"fun box neg_unsafe() : USize val","title":"neg_unsafe"},{"location":"builtin-USize/#returns_41","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_and","text":"fun box op_and( y: USize val) : USize val","title":"op_and"},{"location":"builtin-USize/#parameters_27","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_42","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_or","text":"fun box op_or( y: USize val) : USize val","title":"op_or"},{"location":"builtin-USize/#parameters_28","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_43","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_xor","text":"fun box op_xor( y: USize val) : USize val","title":"op_xor"},{"location":"builtin-USize/#parameters_29","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_44","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_not","text":"fun box op_not() : USize val","title":"op_not"},{"location":"builtin-USize/#returns_45","text":"USize val","title":"Returns"},{"location":"builtin-USize/#add","text":"fun box add( y: USize val) : USize val","title":"add"},{"location":"builtin-USize/#parameters_30","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_46","text":"USize val","title":"Returns"},{"location":"builtin-USize/#sub","text":"fun box sub( y: USize val) : USize val","title":"sub"},{"location":"builtin-USize/#parameters_31","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_47","text":"USize val","title":"Returns"},{"location":"builtin-USize/#mul","text":"fun box mul( y: USize val) : USize val","title":"mul"},{"location":"builtin-USize/#parameters_32","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_48","text":"USize val","title":"Returns"},{"location":"builtin-USize/#div","text":"fun box div( y: USize val) : USize val","title":"div"},{"location":"builtin-USize/#parameters_33","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_49","text":"USize val","title":"Returns"},{"location":"builtin-USize/#divrem","text":"fun box divrem( y: USize val) : (USize val , USize val)","title":"divrem"},{"location":"builtin-USize/#parameters_34","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_50","text":"( USize val , USize val)","title":"Returns"},{"location":"builtin-USize/#rem","text":"fun box rem( y: USize val) : USize val","title":"rem"},{"location":"builtin-USize/#parameters_35","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_51","text":"USize val","title":"Returns"},{"location":"builtin-USize/#neg","text":"fun box neg() : USize val","title":"neg"},{"location":"builtin-USize/#returns_52","text":"USize val","title":"Returns"},{"location":"builtin-USize/#eq","text":"fun box eq( y: USize val) : Bool val","title":"eq"},{"location":"builtin-USize/#parameters_36","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#ne","text":"fun box ne( y: USize val) : Bool val","title":"ne"},{"location":"builtin-USize/#parameters_37","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#lt","text":"fun box lt( y: USize val) : Bool val","title":"lt"},{"location":"builtin-USize/#parameters_38","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#le","text":"fun box le( y: USize val) : Bool val","title":"le"},{"location":"builtin-USize/#parameters_39","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#ge","text":"fun box ge( y: USize val) : Bool val","title":"ge"},{"location":"builtin-USize/#parameters_40","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_57","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#gt","text":"fun box gt( y: USize val) : Bool val","title":"gt"},{"location":"builtin-USize/#parameters_41","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-USize/#returns_59","text":"USize val","title":"Returns"},{"location":"builtin-USize/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-USize/#returns_60","text":"U64 val","title":"Returns"},{"location":"builtin-USize/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-USize/#returns_61","text":"I8 val","title":"Returns"},{"location":"builtin-USize/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-USize/#returns_62","text":"I16 val","title":"Returns"},{"location":"builtin-USize/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-USize/#returns_63","text":"I32 val","title":"Returns"},{"location":"builtin-USize/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-USize/#returns_64","text":"I64 val","title":"Returns"},{"location":"builtin-USize/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-USize/#returns_65","text":"I128 val","title":"Returns"},{"location":"builtin-USize/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-USize/#returns_66","text":"ILong val","title":"Returns"},{"location":"builtin-USize/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-USize/#returns_67","text":"ISize val","title":"Returns"},{"location":"builtin-USize/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-USize/#returns_68","text":"U8 val","title":"Returns"},{"location":"builtin-USize/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-USize/#returns_69","text":"U16 val","title":"Returns"},{"location":"builtin-USize/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-USize/#returns_70","text":"U32 val","title":"Returns"},{"location":"builtin-USize/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-USize/#returns_71","text":"U64 val","title":"Returns"},{"location":"builtin-USize/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-USize/#returns_72","text":"U128 val","title":"Returns"},{"location":"builtin-USize/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-USize/#returns_73","text":"ULong val","title":"Returns"},{"location":"builtin-USize/#usize_1","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-USize/#returns_74","text":"USize val","title":"Returns"},{"location":"builtin-USize/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-USize/#returns_75","text":"F32 val","title":"Returns"},{"location":"builtin-USize/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-USize/#returns_76","text":"F64 val","title":"Returns"},{"location":"builtin-USize/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-USize/#returns_77","text":"I8 val","title":"Returns"},{"location":"builtin-USize/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-USize/#returns_78","text":"I16 val","title":"Returns"},{"location":"builtin-USize/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-USize/#returns_79","text":"I32 val","title":"Returns"},{"location":"builtin-USize/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-USize/#returns_80","text":"I64 val","title":"Returns"},{"location":"builtin-USize/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-USize/#returns_81","text":"I128 val","title":"Returns"},{"location":"builtin-USize/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-USize/#returns_82","text":"ILong val","title":"Returns"},{"location":"builtin-USize/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-USize/#returns_83","text":"ISize val","title":"Returns"},{"location":"builtin-USize/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-USize/#returns_84","text":"U8 val","title":"Returns"},{"location":"builtin-USize/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-USize/#returns_85","text":"U16 val","title":"Returns"},{"location":"builtin-USize/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-USize/#returns_86","text":"U32 val","title":"Returns"},{"location":"builtin-USize/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-USize/#returns_87","text":"U64 val","title":"Returns"},{"location":"builtin-USize/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-USize/#returns_88","text":"U128 val","title":"Returns"},{"location":"builtin-USize/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-USize/#returns_89","text":"ULong val","title":"Returns"},{"location":"builtin-USize/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-USize/#returns_90","text":"USize val","title":"Returns"},{"location":"builtin-USize/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-USize/#returns_91","text":"F32 val","title":"Returns"},{"location":"builtin-USize/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-USize/#returns_92","text":"F64 val","title":"Returns"},{"location":"builtin-USize/#compare","text":"fun box compare( that: USize val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-USize/#parameters_42","text":"that: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_93","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-USize/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-USize/#_value","text":"fun box _value() : USize val","title":"_value"},{"location":"builtin-USize/#returns_94","text":"USize val","title":"Returns"},{"location":"builtin-Unsigned/","text":"Unsigned [Source] type Unsigned is (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Type Alias For ( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"type Unsigned"},{"location":"builtin-Unsigned/#unsigned","text":"[Source] type Unsigned is (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Unsigned"},{"location":"builtin-Unsigned/#type-alias-for","text":"( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Type Alias For"},{"location":"builtin-_ArithmeticConvertible/","text":"_ArithmeticConvertible [Source] trait val _ArithmeticConvertible Public Functions i8 [Source] fun box i8() : I8 val Returns I8 val i16 [Source] fun box i16() : I16 val Returns I16 val i32 [Source] fun box i32() : I32 val Returns I32 val i64 [Source] fun box i64() : I64 val Returns I64 val i128 [Source] fun box i128() : I128 val Returns I128 val ilong [Source] fun box ilong() : ILong val Returns ILong val isize [Source] fun box isize() : ISize val Returns ISize val u8 [Source] fun box u8() : U8 val Returns U8 val u16 [Source] fun box u16() : U16 val Returns U16 val u32 [Source] fun box u32() : U32 val Returns U32 val u64 [Source] fun box u64() : U64 val Returns U64 val u128 [Source] fun box u128() : U128 val Returns U128 val ulong [Source] fun box ulong() : ULong val Returns ULong val usize [Source] fun box usize() : USize val Returns USize val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val i8_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box usize_unsafe() : USize val Returns USize val f32_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val Returns F64 val","title":"trait _ArithmeticConvertible"},{"location":"builtin-_ArithmeticConvertible/#_arithmeticconvertible","text":"[Source] trait val _ArithmeticConvertible","title":"_ArithmeticConvertible"},{"location":"builtin-_ArithmeticConvertible/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_ArithmeticConvertible/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-_ArithmeticConvertible/#returns","text":"I8 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-_ArithmeticConvertible/#returns_1","text":"I16 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-_ArithmeticConvertible/#returns_2","text":"I32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-_ArithmeticConvertible/#returns_3","text":"I64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-_ArithmeticConvertible/#returns_4","text":"I128 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-_ArithmeticConvertible/#returns_5","text":"ILong val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-_ArithmeticConvertible/#returns_6","text":"ISize val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-_ArithmeticConvertible/#returns_7","text":"U8 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-_ArithmeticConvertible/#returns_8","text":"U16 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-_ArithmeticConvertible/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-_ArithmeticConvertible/#returns_10","text":"U64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-_ArithmeticConvertible/#returns_11","text":"U128 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-_ArithmeticConvertible/#returns_12","text":"ULong val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-_ArithmeticConvertible/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-_ArithmeticConvertible/#returns_14","text":"F32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-_ArithmeticConvertible/#returns_15","text":"F64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i8_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_16","text":"I8 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i16_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_17","text":"I16 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_18","text":"I32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_19","text":"I64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_20","text":"I128 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#ilong_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_21","text":"ILong val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#isize_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_22","text":"ISize val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u8_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_23","text":"U8 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u16_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_24","text":"U16 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_25","text":"U32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_26","text":"U64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_27","text":"U128 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#ulong_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_28","text":"ULong val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#usize_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_29","text":"USize val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#f32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_30","text":"F32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#f64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_31","text":"F64 val","title":"Returns"},{"location":"builtin-_PartialArithmetic/","text":"_PartialArithmetic [Source] trait ref _PartialArithmetic Public Functions add_partial[T: ( Integer [T] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] [Source] fun box add_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? sub_partial[T: ( Integer [T] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] [Source] fun box sub_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? mul_partial[T: ( Integer [T] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] [Source] fun box mul_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters x: T y: T Returns T ?","title":"trait _PartialArithmetic"},{"location":"builtin-_PartialArithmetic/#_partialarithmetic","text":"[Source] trait ref _PartialArithmetic","title":"_PartialArithmetic"},{"location":"builtin-_PartialArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_PartialArithmetic/#add_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box add_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"add_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_PartialArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_PartialArithmetic/#returns","text":"T ?","title":"Returns"},{"location":"builtin-_PartialArithmetic/#sub_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box sub_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"sub_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_PartialArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_PartialArithmetic/#returns_1","text":"T ?","title":"Returns"},{"location":"builtin-_PartialArithmetic/#mul_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box mul_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"mul_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_PartialArithmetic/#parameters_2","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_PartialArithmetic/#returns_2","text":"T ?","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/","text":"_SignedCheckedArithmetic [Source] primitive val _SignedCheckedArithmetic Constructors create [Source] new val create() : _SignedCheckedArithmetic val^ Returns _SignedCheckedArithmetic val^ Public Functions eq [Source] fun box eq( that: _SignedCheckedArithmetic val) : Bool val Parameters that: _SignedCheckedArithmetic val Returns Bool val ne [Source] fun box ne( that: _SignedCheckedArithmetic val) : Bool val Parameters that: _SignedCheckedArithmetic val Returns Bool val Private Functions _mulc[U: _UnsignedInteger [U] val, T: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) _SignedInteger [T, U] val)] [Source] basically exactly what the runtime functions __muloti4, mulodi4 etc. are doing and roughly as fast as these. Additionally on (at least some) 32 bit systems, the runtime function for checked 64 bit integer addition __mulodi4 is not available. So we shouldn't use: @\"llvm.smul.with.overflow.i64\"[(I64, Bool)](this, y) Also see https://bugs.llvm.org/show_bug.cgi?id=14469 That's basically why we rolled our own. fun box _mulc[U: _UnsignedInteger[U] val, T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) _SignedInteger[T, U] val)]( x: T, y: T) : (T , Bool val) Parameters x: T y: T Returns (T , Bool val)","title":"primitive _SignedCheckedArithmetic"},{"location":"builtin-_SignedCheckedArithmetic/#_signedcheckedarithmetic","text":"[Source] primitive val _SignedCheckedArithmetic","title":"_SignedCheckedArithmetic"},{"location":"builtin-_SignedCheckedArithmetic/#constructors","text":"","title":"Constructors"},{"location":"builtin-_SignedCheckedArithmetic/#create","text":"[Source] new val create() : _SignedCheckedArithmetic val^","title":"create"},{"location":"builtin-_SignedCheckedArithmetic/#returns","text":"_SignedCheckedArithmetic val^","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_SignedCheckedArithmetic/#eq","text":"[Source] fun box eq( that: _SignedCheckedArithmetic val) : Bool val","title":"eq"},{"location":"builtin-_SignedCheckedArithmetic/#parameters","text":"that: _SignedCheckedArithmetic val","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#ne","text":"[Source] fun box ne( that: _SignedCheckedArithmetic val) : Bool val","title":"ne"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_1","text":"that: _SignedCheckedArithmetic val","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-_SignedCheckedArithmetic/#_mulc91u-_unsignedinteger91u93-val-t-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-_signedinteger91t-u93-val93","text":"[Source] basically exactly what the runtime functions __muloti4, mulodi4 etc. are doing and roughly as fast as these. Additionally on (at least some) 32 bit systems, the runtime function for checked 64 bit integer addition __mulodi4 is not available. So we shouldn't use: @\"llvm.smul.with.overflow.i64\"[(I64, Bool)](this, y) Also see https://bugs.llvm.org/show_bug.cgi?id=14469 That's basically why we rolled our own. fun box _mulc[U: _UnsignedInteger[U] val, T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) _SignedInteger[T, U] val)]( x: T, y: T) : (T , Bool val)","title":"_mulc[U: _UnsignedInteger[U] val, T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) &amp; _SignedInteger[T, U] val)]"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_2","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_3","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_SignedInteger/","text":"_SignedInteger[A: _SignedInteger [A, B] val, B: _UnsignedInteger [B] val] [Source] trait val _SignedInteger[A: _SignedInteger[A, B] val, B: _UnsignedInteger[B] val] is Integer[A] val Implements Integer [A] val Constructors create [Source] new val create( value: A) : Real[A] val^ Parameters value: A Returns Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [B] val)] [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^ Parameters a: B Returns Real [A] val^ min_value [Source] new val min_value() : Real[A] val^ Returns Real [A] val^ max_value [Source] new val max_value() : Real[A] val^ Returns Real [A] val^ Public Functions abs [Source] fun box abs() : B Returns B shl [Source] fun box shl( y: B) : A Parameters y: B Returns A shr [Source] fun box shr( y: B) : A Parameters y: B Returns A shl_unsafe [Source] Unsafe operation. If bits differing from the final sign bit are shifted-out, the result is undefined. fun box shl_unsafe( y: B) : A Parameters y: B Returns A shr_unsafe [Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: B) : A Parameters y: B Returns A popcount [Source] fun box popcount() : B Returns B clz [Source] fun box clz() : B Returns B ctz [Source] fun box ctz() : B Returns B clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : B Returns B ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : B Returns B bitwidth [Source] fun box bitwidth() : B Returns B bytewidth [Source] fun box bytewidth() : USize val Returns USize val string [Source] fun box string() : String iso^ Returns String iso^ add_unsafe [Source] fun box add_unsafe( y: A) : A Parameters y: A Returns A sub_unsafe [Source] fun box sub_unsafe( y: A) : A Parameters y: A Returns A mul_unsafe [Source] fun box mul_unsafe( y: A) : A Parameters y: A Returns A div_unsafe [Source] fun box div_unsafe( y: A) : A Parameters y: A Returns A divrem_unsafe [Source] fun box divrem_unsafe( y: A) : (A , A) Parameters y: A Returns (A , A) rem_unsafe [Source] fun box rem_unsafe( y: A) : A Parameters y: A Returns A add_partial [Source] fun box add_partial( y: A) : A ? Parameters y: A Returns A ? sub_partial [Source] fun box sub_partial( y: A) : A ? Parameters y: A Returns A ? mul_partial [Source] fun box mul_partial( y: A) : A ? Parameters y: A Returns A ? div_partial [Source] fun box div_partial( y: A) : A ? Parameters y: A Returns A ? rem_partial [Source] fun box rem_partial( y: A) : A ? Parameters y: A Returns A ? divrem_partial [Source] fun box divrem_partial( y: A) : (A , A) ? Parameters y: A Returns (A , A) ? neg_unsafe [Source] fun box neg_unsafe() : A Returns A addc [Source] fun box addc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) subc [Source] fun box subc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) mulc [Source] fun box mulc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) divc [Source] fun box divc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) remc [Source] fun box remc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) op_and [Source] fun box op_and( y: A) : A Parameters y: A Returns A op_or [Source] fun box op_or( y: A) : A Parameters y: A Returns A op_xor [Source] fun box op_xor( y: A) : A Parameters y: A Returns A op_not [Source] fun box op_not() : A Returns A bit_reverse [Source] fun box bit_reverse() : A Returns A bswap [Source] fun box bswap() : A Returns A add [Source] fun box add( y: A) : A Parameters y: A Returns A sub [Source] fun box sub( y: A) : A Parameters y: A Returns A mul [Source] fun box mul( y: A) : A Parameters y: A Returns A div [Source] fun box div( y: A) : A Parameters y: A Returns A divrem [Source] fun box divrem( y: A) : (A , A) Parameters y: A Returns (A , A) rem [Source] fun box rem( y: A) : A Parameters y: A Returns A neg [Source] fun box neg() : A Returns A eq [Source] fun box eq( y: box- A) : Bool val Parameters y: box- A Returns Bool val ne [Source] fun box ne( y: box- A) : Bool val Parameters y: box- A Returns Bool val lt [Source] fun box lt( y: box- A) : Bool val Parameters y: box- A Returns Bool val le [Source] fun box le( y: box- A) : Bool val Parameters y: box- A Returns Bool val ge [Source] fun box ge( y: box- A) : Bool val Parameters y: box- A Returns Bool val gt [Source] fun box gt( y: box- A) : Bool val Parameters y: box- A Returns Bool val min [Source] fun box min( y: A) : A Parameters y: A Returns A max [Source] fun box max( y: A) : A Parameters y: A Returns A hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val i8 [Source] fun box i8() : I8 val Returns I8 val i16 [Source] fun box i16() : I16 val Returns I16 val i32 [Source] fun box i32() : I32 val Returns I32 val i64 [Source] fun box i64() : I64 val Returns I64 val i128 [Source] fun box i128() : I128 val Returns I128 val ilong [Source] fun box ilong() : ILong val Returns ILong val isize [Source] fun box isize() : ISize val Returns ISize val u8 [Source] fun box u8() : U8 val Returns U8 val u16 [Source] fun box u16() : U16 val Returns U16 val u32 [Source] fun box u32() : U32 val Returns U32 val u64 [Source] fun box u64() : U64 val Returns U64 val u128 [Source] fun box u128() : U128 val Returns U128 val ulong [Source] fun box ulong() : ULong val Returns ULong val usize [Source] fun box usize() : USize val Returns USize val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val i8_unsafe [Source] fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe [Source] fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe [Source] fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe [Source] fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe [Source] fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe [Source] fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe [Source] fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe [Source] fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe [Source] fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe [Source] fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe [Source] fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe [Source] fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe [Source] fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe [Source] fun box usize_unsafe() : USize val Returns USize val f32_unsafe [Source] fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: box- A) : (Less val | Equal val | Greater val) Parameters that: box- A Returns ( Less val | Equal val | Greater val) Private Functions _value [Source] fun box _value() : A Returns A","title":"trait _SignedInteger"},{"location":"builtin-_SignedInteger/#_signedinteger91a-_signedinteger91a-b93-val-b-_unsignedinteger91b93-val93","text":"[Source] trait val _SignedInteger[A: _SignedInteger[A, B] val, B: _UnsignedInteger[B] val] is Integer[A] val","title":"_SignedInteger[A: _SignedInteger[A, B] val, B: _UnsignedInteger[B] val]"},{"location":"builtin-_SignedInteger/#implements","text":"Integer [A] val","title":"Implements"},{"location":"builtin-_SignedInteger/#constructors","text":"","title":"Constructors"},{"location":"builtin-_SignedInteger/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-_SignedInteger/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-_SignedInteger/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-_SignedInteger/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-_SignedInteger/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-_SignedInteger/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-_SignedInteger/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-_SignedInteger/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-_SignedInteger/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_SignedInteger/#abs","text":"[Source] fun box abs() : B","title":"abs"},{"location":"builtin-_SignedInteger/#returns_4","text":"B","title":"Returns"},{"location":"builtin-_SignedInteger/#shl","text":"[Source] fun box shl( y: B) : A","title":"shl"},{"location":"builtin-_SignedInteger/#parameters_2","text":"y: B","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_5","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#shr","text":"[Source] fun box shr( y: B) : A","title":"shr"},{"location":"builtin-_SignedInteger/#parameters_3","text":"y: B","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_6","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#shl_unsafe","text":"[Source] Unsafe operation. If bits differing from the final sign bit are shifted-out, the result is undefined. fun box shl_unsafe( y: B) : A","title":"shl_unsafe"},{"location":"builtin-_SignedInteger/#parameters_4","text":"y: B","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_7","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#shr_unsafe","text":"[Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: B) : A","title":"shr_unsafe"},{"location":"builtin-_SignedInteger/#parameters_5","text":"y: B","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_8","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#popcount","text":"[Source] fun box popcount() : B","title":"popcount"},{"location":"builtin-_SignedInteger/#returns_9","text":"B","title":"Returns"},{"location":"builtin-_SignedInteger/#clz","text":"[Source] fun box clz() : B","title":"clz"},{"location":"builtin-_SignedInteger/#returns_10","text":"B","title":"Returns"},{"location":"builtin-_SignedInteger/#ctz","text":"[Source] fun box ctz() : B","title":"ctz"},{"location":"builtin-_SignedInteger/#returns_11","text":"B","title":"Returns"},{"location":"builtin-_SignedInteger/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : B","title":"clz_unsafe"},{"location":"builtin-_SignedInteger/#returns_12","text":"B","title":"Returns"},{"location":"builtin-_SignedInteger/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : B","title":"ctz_unsafe"},{"location":"builtin-_SignedInteger/#returns_13","text":"B","title":"Returns"},{"location":"builtin-_SignedInteger/#bitwidth","text":"[Source] fun box bitwidth() : B","title":"bitwidth"},{"location":"builtin-_SignedInteger/#returns_14","text":"B","title":"Returns"},{"location":"builtin-_SignedInteger/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-_SignedInteger/#returns_15","text":"USize val","title":"Returns"},{"location":"builtin-_SignedInteger/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-_SignedInteger/#returns_16","text":"String iso^","title":"Returns"},{"location":"builtin-_SignedInteger/#add_unsafe","text":"[Source] fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-_SignedInteger/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_17","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-_SignedInteger/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_18","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-_SignedInteger/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_19","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#div_unsafe","text":"[Source] fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-_SignedInteger/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_20","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-_SignedInteger/#parameters_10","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_21","text":"(A , A)","title":"Returns"},{"location":"builtin-_SignedInteger/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-_SignedInteger/#parameters_11","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_22","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#add_partial","text":"[Source] fun box add_partial( y: A) : A ?","title":"add_partial"},{"location":"builtin-_SignedInteger/#parameters_12","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_23","text":"A ?","title":"Returns"},{"location":"builtin-_SignedInteger/#sub_partial","text":"[Source] fun box sub_partial( y: A) : A ?","title":"sub_partial"},{"location":"builtin-_SignedInteger/#parameters_13","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_24","text":"A ?","title":"Returns"},{"location":"builtin-_SignedInteger/#mul_partial","text":"[Source] fun box mul_partial( y: A) : A ?","title":"mul_partial"},{"location":"builtin-_SignedInteger/#parameters_14","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_25","text":"A ?","title":"Returns"},{"location":"builtin-_SignedInteger/#div_partial","text":"[Source] fun box div_partial( y: A) : A ?","title":"div_partial"},{"location":"builtin-_SignedInteger/#parameters_15","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_26","text":"A ?","title":"Returns"},{"location":"builtin-_SignedInteger/#rem_partial","text":"[Source] fun box rem_partial( y: A) : A ?","title":"rem_partial"},{"location":"builtin-_SignedInteger/#parameters_16","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_27","text":"A ?","title":"Returns"},{"location":"builtin-_SignedInteger/#divrem_partial","text":"[Source] fun box divrem_partial( y: A) : (A , A) ?","title":"divrem_partial"},{"location":"builtin-_SignedInteger/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_28","text":"(A , A) ?","title":"Returns"},{"location":"builtin-_SignedInteger/#neg_unsafe","text":"[Source] fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-_SignedInteger/#returns_29","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#addc","text":"[Source] fun box addc( y: A) : (A , Bool val)","title":"addc"},{"location":"builtin-_SignedInteger/#parameters_18","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_30","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_SignedInteger/#subc","text":"[Source] fun box subc( y: A) : (A , Bool val)","title":"subc"},{"location":"builtin-_SignedInteger/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_31","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_SignedInteger/#mulc","text":"[Source] fun box mulc( y: A) : (A , Bool val)","title":"mulc"},{"location":"builtin-_SignedInteger/#parameters_20","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_32","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_SignedInteger/#divc","text":"[Source] fun box divc( y: A) : (A , Bool val)","title":"divc"},{"location":"builtin-_SignedInteger/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_33","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_SignedInteger/#remc","text":"[Source] fun box remc( y: A) : (A , Bool val)","title":"remc"},{"location":"builtin-_SignedInteger/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_34","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_SignedInteger/#op_and","text":"[Source] fun box op_and( y: A) : A","title":"op_and"},{"location":"builtin-_SignedInteger/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_35","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#op_or","text":"[Source] fun box op_or( y: A) : A","title":"op_or"},{"location":"builtin-_SignedInteger/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_36","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#op_xor","text":"[Source] fun box op_xor( y: A) : A","title":"op_xor"},{"location":"builtin-_SignedInteger/#parameters_25","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_37","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#op_not","text":"[Source] fun box op_not() : A","title":"op_not"},{"location":"builtin-_SignedInteger/#returns_38","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#bit_reverse","text":"[Source] fun box bit_reverse() : A","title":"bit_reverse"},{"location":"builtin-_SignedInteger/#returns_39","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#bswap","text":"[Source] fun box bswap() : A","title":"bswap"},{"location":"builtin-_SignedInteger/#returns_40","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-_SignedInteger/#parameters_26","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_41","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-_SignedInteger/#parameters_27","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_42","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-_SignedInteger/#parameters_28","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_43","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-_SignedInteger/#parameters_29","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_44","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-_SignedInteger/#parameters_30","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_45","text":"(A , A)","title":"Returns"},{"location":"builtin-_SignedInteger/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-_SignedInteger/#parameters_31","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_46","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-_SignedInteger/#returns_47","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#eq","text":"[Source] fun box eq( y: box- A) : Bool val","title":"eq"},{"location":"builtin-_SignedInteger/#parameters_32","text":"y: box- A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_48","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedInteger/#ne","text":"[Source] fun box ne( y: box- A) : Bool val","title":"ne"},{"location":"builtin-_SignedInteger/#parameters_33","text":"y: box- A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_49","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedInteger/#lt","text":"[Source] fun box lt( y: box- A) : Bool val","title":"lt"},{"location":"builtin-_SignedInteger/#parameters_34","text":"y: box- A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_50","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedInteger/#le","text":"[Source] fun box le( y: box- A) : Bool val","title":"le"},{"location":"builtin-_SignedInteger/#parameters_35","text":"y: box- A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_51","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedInteger/#ge","text":"[Source] fun box ge( y: box- A) : Bool val","title":"ge"},{"location":"builtin-_SignedInteger/#parameters_36","text":"y: box- A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_52","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedInteger/#gt","text":"[Source] fun box gt( y: box- A) : Bool val","title":"gt"},{"location":"builtin-_SignedInteger/#parameters_37","text":"y: box- A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedInteger/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-_SignedInteger/#parameters_38","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_54","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-_SignedInteger/#parameters_39","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_55","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-_SignedInteger/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-_SignedInteger/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-_SignedInteger/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-_SignedInteger/#returns_58","text":"I8 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-_SignedInteger/#returns_59","text":"I16 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-_SignedInteger/#returns_60","text":"I32 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-_SignedInteger/#returns_61","text":"I64 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-_SignedInteger/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-_SignedInteger/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-_SignedInteger/#returns_63","text":"ILong val","title":"Returns"},{"location":"builtin-_SignedInteger/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-_SignedInteger/#returns_64","text":"ISize val","title":"Returns"},{"location":"builtin-_SignedInteger/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-_SignedInteger/#returns_65","text":"U8 val","title":"Returns"},{"location":"builtin-_SignedInteger/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-_SignedInteger/#returns_66","text":"U16 val","title":"Returns"},{"location":"builtin-_SignedInteger/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-_SignedInteger/#returns_67","text":"U32 val","title":"Returns"},{"location":"builtin-_SignedInteger/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-_SignedInteger/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-_SignedInteger/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-_SignedInteger/#returns_69","text":"U128 val","title":"Returns"},{"location":"builtin-_SignedInteger/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-_SignedInteger/#returns_70","text":"ULong val","title":"Returns"},{"location":"builtin-_SignedInteger/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-_SignedInteger/#returns_71","text":"USize val","title":"Returns"},{"location":"builtin-_SignedInteger/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-_SignedInteger/#returns_72","text":"F32 val","title":"Returns"},{"location":"builtin-_SignedInteger/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-_SignedInteger/#returns_73","text":"F64 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-_SignedInteger/#returns_74","text":"I8 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-_SignedInteger/#returns_75","text":"I16 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-_SignedInteger/#returns_76","text":"I32 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-_SignedInteger/#returns_77","text":"I64 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-_SignedInteger/#returns_78","text":"I128 val","title":"Returns"},{"location":"builtin-_SignedInteger/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-_SignedInteger/#returns_79","text":"ILong val","title":"Returns"},{"location":"builtin-_SignedInteger/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-_SignedInteger/#returns_80","text":"ISize val","title":"Returns"},{"location":"builtin-_SignedInteger/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-_SignedInteger/#returns_81","text":"U8 val","title":"Returns"},{"location":"builtin-_SignedInteger/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-_SignedInteger/#returns_82","text":"U16 val","title":"Returns"},{"location":"builtin-_SignedInteger/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-_SignedInteger/#returns_83","text":"U32 val","title":"Returns"},{"location":"builtin-_SignedInteger/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-_SignedInteger/#returns_84","text":"U64 val","title":"Returns"},{"location":"builtin-_SignedInteger/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-_SignedInteger/#returns_85","text":"U128 val","title":"Returns"},{"location":"builtin-_SignedInteger/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-_SignedInteger/#returns_86","text":"ULong val","title":"Returns"},{"location":"builtin-_SignedInteger/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-_SignedInteger/#returns_87","text":"USize val","title":"Returns"},{"location":"builtin-_SignedInteger/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-_SignedInteger/#returns_88","text":"F32 val","title":"Returns"},{"location":"builtin-_SignedInteger/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-_SignedInteger/#returns_89","text":"F64 val","title":"Returns"},{"location":"builtin-_SignedInteger/#compare","text":"fun box compare( that: box- A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-_SignedInteger/#parameters_40","text":"that: box- A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_90","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-_SignedInteger/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-_SignedInteger/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-_SignedInteger/#returns_91","text":"A","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/","text":"_SignedPartialArithmetic [Source] primitive val _SignedPartialArithmetic is _PartialArithmetic ref Implements _PartialArithmetic ref Constructors create [Source] new val create() : _SignedPartialArithmetic val^ Returns _SignedPartialArithmetic val^ Public Functions div_checked[T: ( _SignedInteger [T, U] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger [U] val] [Source] fun box div_checked[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val) Parameters x: T y: T Returns (T , Bool val) rem_checked[T: ( _SignedInteger [T, U] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger [U] val] [Source] fun box rem_checked[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val) Parameters x: T y: T Returns (T , Bool val) div_partial[T: ( _SignedInteger [T, U] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger [U] val] [Source] fun box div_partial[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? rem_partial[T: ( _SignedInteger [T, U] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger [U] val] [Source] fun box rem_partial[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? divrem_partial[T: ( _SignedInteger [T, U] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger [U] val] [Source] fun box divrem_partial[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : (T , T) ? Parameters x: T y: T Returns (T , T) ? neg_partial[T: ( _SignedInteger [T, U] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger [U] val] [Source] fun box neg_partial[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T) : T ? Parameters x: T Returns T ? add_partial[T: ( Integer [T] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] [Source] fun box add_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? sub_partial[T: ( Integer [T] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] [Source] fun box sub_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? mul_partial[T: ( Integer [T] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] [Source] fun box mul_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? eq [Source] fun box eq( that: _SignedPartialArithmetic val) : Bool val Parameters that: _SignedPartialArithmetic val Returns Bool val ne [Source] fun box ne( that: _SignedPartialArithmetic val) : Bool val Parameters that: _SignedPartialArithmetic val Returns Bool val","title":"primitive _SignedPartialArithmetic"},{"location":"builtin-_SignedPartialArithmetic/#_signedpartialarithmetic","text":"[Source] primitive val _SignedPartialArithmetic is _PartialArithmetic ref","title":"_SignedPartialArithmetic"},{"location":"builtin-_SignedPartialArithmetic/#implements","text":"_PartialArithmetic ref","title":"Implements"},{"location":"builtin-_SignedPartialArithmetic/#constructors","text":"","title":"Constructors"},{"location":"builtin-_SignedPartialArithmetic/#create","text":"[Source] new val create() : _SignedPartialArithmetic val^","title":"create"},{"location":"builtin-_SignedPartialArithmetic/#returns","text":"_SignedPartialArithmetic val^","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_SignedPartialArithmetic/#div_checked91t-_signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-_unsignedinteger91u93-val93","text":"[Source] fun box div_checked[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val)","title":"div_checked[T: (_SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_1","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#rem_checked91t-_signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-_unsignedinteger91u93-val93","text":"[Source] fun box rem_checked[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val)","title":"rem_checked[T: (_SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_2","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#div_partial91t-_signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-_unsignedinteger91u93-val93","text":"[Source] fun box div_partial[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : T ?","title":"div_partial[T: (_SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_2","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_3","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#rem_partial91t-_signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-_unsignedinteger91u93-val93","text":"[Source] fun box rem_partial[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : T ?","title":"rem_partial[T: (_SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_3","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_4","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#divrem_partial91t-_signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-_unsignedinteger91u93-val93","text":"[Source] fun box divrem_partial[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : (T , T) ?","title":"divrem_partial[T: (_SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_4","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_5","text":"(T , T) ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#neg_partial91t-_signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-_unsignedinteger91u93-val93","text":"[Source] fun box neg_partial[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T) : T ?","title":"neg_partial[T: (_SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_5","text":"x: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_6","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#add_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box add_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"add_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_6","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_7","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#sub_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box sub_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"sub_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_7","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_8","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#mul_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box mul_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"mul_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_8","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_9","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#eq","text":"[Source] fun box eq( that: _SignedPartialArithmetic val) : Bool val","title":"eq"},{"location":"builtin-_SignedPartialArithmetic/#parameters_9","text":"that: _SignedPartialArithmetic val","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_10","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#ne","text":"[Source] fun box ne( that: _SignedPartialArithmetic val) : Bool val","title":"ne"},{"location":"builtin-_SignedPartialArithmetic/#parameters_10","text":"that: _SignedPartialArithmetic val","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_11","text":"Bool val","title":"Returns"},{"location":"builtin-_ToString/","text":"_ToString [Source] Worker type providing simple to string conversions for numbers. primitive val _ToString Constructors create [Source] new val create() : _ToString val^ Returns _ToString val^ Public Functions eq [Source] fun box eq( that: _ToString val) : Bool val Parameters that: _ToString val Returns Bool val ne [Source] fun box ne( that: _ToString val) : Bool val Parameters that: _ToString val Returns Bool val Private Functions _u64 [Source] fun box _u64( x: U64 val, neg: Bool val) : String iso^ Parameters x: U64 val neg: Bool val Returns String iso^ _u128 [Source] fun box _u128( x: U128 val, neg: Bool val) : String iso^ Parameters x: U128 val neg: Bool val Returns String iso^ _f64 [Source] fun box _f64( x: F64 val) : String iso^ Parameters x: F64 val Returns String iso^","title":"primitive _ToString"},{"location":"builtin-_ToString/#_tostring","text":"[Source] Worker type providing simple to string conversions for numbers. primitive val _ToString","title":"_ToString"},{"location":"builtin-_ToString/#constructors","text":"","title":"Constructors"},{"location":"builtin-_ToString/#create","text":"[Source] new val create() : _ToString val^","title":"create"},{"location":"builtin-_ToString/#returns","text":"_ToString val^","title":"Returns"},{"location":"builtin-_ToString/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_ToString/#eq","text":"[Source] fun box eq( that: _ToString val) : Bool val","title":"eq"},{"location":"builtin-_ToString/#parameters","text":"that: _ToString val","title":"Parameters"},{"location":"builtin-_ToString/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-_ToString/#ne","text":"[Source] fun box ne( that: _ToString val) : Bool val","title":"ne"},{"location":"builtin-_ToString/#parameters_1","text":"that: _ToString val","title":"Parameters"},{"location":"builtin-_ToString/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-_ToString/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-_ToString/#_u64","text":"[Source] fun box _u64( x: U64 val, neg: Bool val) : String iso^","title":"_u64"},{"location":"builtin-_ToString/#parameters_2","text":"x: U64 val neg: Bool val","title":"Parameters"},{"location":"builtin-_ToString/#returns_3","text":"String iso^","title":"Returns"},{"location":"builtin-_ToString/#_u128","text":"[Source] fun box _u128( x: U128 val, neg: Bool val) : String iso^","title":"_u128"},{"location":"builtin-_ToString/#parameters_3","text":"x: U128 val neg: Bool val","title":"Parameters"},{"location":"builtin-_ToString/#returns_4","text":"String iso^","title":"Returns"},{"location":"builtin-_ToString/#_f64","text":"[Source] fun box _f64( x: F64 val) : String iso^","title":"_f64"},{"location":"builtin-_ToString/#parameters_4","text":"x: F64 val","title":"Parameters"},{"location":"builtin-_ToString/#returns_5","text":"String iso^","title":"Returns"},{"location":"builtin-_UTF32Encoder/","text":"_UTF32Encoder [Source] primitive val _UTF32Encoder Constructors create [Source] new val create() : _UTF32Encoder val^ Returns _UTF32Encoder val^ Public Functions encode [Source] Encode the code point into UTF-8. It returns a tuple with the size of the encoded data and then the data. fun box encode( value: U32 val) : (USize val , U8 val , U8 val , U8 val , U8 val) Parameters value: U32 val Returns ( USize val , U8 val , U8 val , U8 val , U8 val) eq [Source] fun box eq( that: _UTF32Encoder val) : Bool val Parameters that: _UTF32Encoder val Returns Bool val ne [Source] fun box ne( that: _UTF32Encoder val) : Bool val Parameters that: _UTF32Encoder val Returns Bool val","title":"primitive _UTF32Encoder"},{"location":"builtin-_UTF32Encoder/#_utf32encoder","text":"[Source] primitive val _UTF32Encoder","title":"_UTF32Encoder"},{"location":"builtin-_UTF32Encoder/#constructors","text":"","title":"Constructors"},{"location":"builtin-_UTF32Encoder/#create","text":"[Source] new val create() : _UTF32Encoder val^","title":"create"},{"location":"builtin-_UTF32Encoder/#returns","text":"_UTF32Encoder val^","title":"Returns"},{"location":"builtin-_UTF32Encoder/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_UTF32Encoder/#encode","text":"[Source] Encode the code point into UTF-8. It returns a tuple with the size of the encoded data and then the data. fun box encode( value: U32 val) : (USize val , U8 val , U8 val , U8 val , U8 val)","title":"encode"},{"location":"builtin-_UTF32Encoder/#parameters","text":"value: U32 val","title":"Parameters"},{"location":"builtin-_UTF32Encoder/#returns_1","text":"( USize val , U8 val , U8 val , U8 val , U8 val)","title":"Returns"},{"location":"builtin-_UTF32Encoder/#eq","text":"[Source] fun box eq( that: _UTF32Encoder val) : Bool val","title":"eq"},{"location":"builtin-_UTF32Encoder/#parameters_1","text":"that: _UTF32Encoder val","title":"Parameters"},{"location":"builtin-_UTF32Encoder/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-_UTF32Encoder/#ne","text":"[Source] fun box ne( that: _UTF32Encoder val) : Bool val","title":"ne"},{"location":"builtin-_UTF32Encoder/#parameters_2","text":"that: _UTF32Encoder val","title":"Parameters"},{"location":"builtin-_UTF32Encoder/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedInteger/","text":"_UnsignedInteger[A: _UnsignedInteger [A] val] [Source] trait val _UnsignedInteger[A: _UnsignedInteger[A] val] is Integer[A] val Implements Integer [A] val Constructors create [Source] new val create( value: A) : Real[A] val^ Parameters value: A Returns Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [B] val)] [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^ Parameters a: B Returns Real [A] val^ min_value [Source] new val min_value() : Real[A] val^ Returns Real [A] val^ max_value [Source] new val max_value() : Real[A] val^ Returns Real [A] val^ Public Functions abs [Source] fun box abs() : A Returns A shl [Source] fun box shl( y: A) : A Parameters y: A Returns A shr [Source] fun box shr( y: A) : A Parameters y: A Returns A shl_unsafe [Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shl_unsafe( y: A) : A Parameters y: A Returns A shr_unsafe [Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: A) : A Parameters y: A Returns A rotl [Source] fun box rotl( y: A) : A Parameters y: A Returns A rotr [Source] fun box rotr( y: A) : A Parameters y: A Returns A popcount [Source] fun box popcount() : A Returns A clz [Source] fun box clz() : A Returns A ctz [Source] fun box ctz() : A Returns A clz_unsafe [Source] Count leading zeroes. Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : A Returns A ctz_unsafe [Source] Count trailing zeroes. Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : A Returns A bitwidth [Source] fun box bitwidth() : A Returns A bytewidth [Source] fun box bytewidth() : USize val Returns USize val string [Source] fun box string() : String iso^ Returns String iso^ add_unsafe [Source] fun box add_unsafe( y: A) : A Parameters y: A Returns A sub_unsafe [Source] fun box sub_unsafe( y: A) : A Parameters y: A Returns A mul_unsafe [Source] fun box mul_unsafe( y: A) : A Parameters y: A Returns A div_unsafe [Source] fun box div_unsafe( y: A) : A Parameters y: A Returns A divrem_unsafe [Source] fun box divrem_unsafe( y: A) : (A , A) Parameters y: A Returns (A , A) rem_unsafe [Source] fun box rem_unsafe( y: A) : A Parameters y: A Returns A add_partial [Source] fun box add_partial( y: A) : A ? Parameters y: A Returns A ? sub_partial [Source] fun box sub_partial( y: A) : A ? Parameters y: A Returns A ? mul_partial [Source] fun box mul_partial( y: A) : A ? Parameters y: A Returns A ? div_partial [Source] fun box div_partial( y: A) : A ? Parameters y: A Returns A ? rem_partial [Source] fun box rem_partial( y: A) : A ? Parameters y: A Returns A ? divrem_partial [Source] fun box divrem_partial( y: A) : (A , A) ? Parameters y: A Returns (A , A) ? neg_unsafe [Source] fun box neg_unsafe() : A Returns A addc [Source] fun box addc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) subc [Source] fun box subc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) mulc [Source] fun box mulc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) divc [Source] fun box divc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) remc [Source] fun box remc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) op_and [Source] fun box op_and( y: A) : A Parameters y: A Returns A op_or [Source] fun box op_or( y: A) : A Parameters y: A Returns A op_xor [Source] fun box op_xor( y: A) : A Parameters y: A Returns A op_not [Source] fun box op_not() : A Returns A bit_reverse [Source] fun box bit_reverse() : A Returns A bswap [Source] fun box bswap() : A Returns A add [Source] fun box add( y: A) : A Parameters y: A Returns A sub [Source] fun box sub( y: A) : A Parameters y: A Returns A mul [Source] fun box mul( y: A) : A Parameters y: A Returns A div [Source] fun box div( y: A) : A Parameters y: A Returns A divrem [Source] fun box divrem( y: A) : (A , A) Parameters y: A Returns (A , A) rem [Source] fun box rem( y: A) : A Parameters y: A Returns A neg [Source] fun box neg() : A Returns A eq [Source] fun box eq( y: box- A) : Bool val Parameters y: box- A Returns Bool val ne [Source] fun box ne( y: box- A) : Bool val Parameters y: box- A Returns Bool val lt [Source] fun box lt( y: box- A) : Bool val Parameters y: box- A Returns Bool val le [Source] fun box le( y: box- A) : Bool val Parameters y: box- A Returns Bool val ge [Source] fun box ge( y: box- A) : Bool val Parameters y: box- A Returns Bool val gt [Source] fun box gt( y: box- A) : Bool val Parameters y: box- A Returns Bool val min [Source] fun box min( y: A) : A Parameters y: A Returns A max [Source] fun box max( y: A) : A Parameters y: A Returns A hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val i8 [Source] fun box i8() : I8 val Returns I8 val i16 [Source] fun box i16() : I16 val Returns I16 val i32 [Source] fun box i32() : I32 val Returns I32 val i64 [Source] fun box i64() : I64 val Returns I64 val i128 [Source] fun box i128() : I128 val Returns I128 val ilong [Source] fun box ilong() : ILong val Returns ILong val isize [Source] fun box isize() : ISize val Returns ISize val u8 [Source] fun box u8() : U8 val Returns U8 val u16 [Source] fun box u16() : U16 val Returns U16 val u32 [Source] fun box u32() : U32 val Returns U32 val u64 [Source] fun box u64() : U64 val Returns U64 val u128 [Source] fun box u128() : U128 val Returns U128 val ulong [Source] fun box ulong() : ULong val Returns ULong val usize [Source] fun box usize() : USize val Returns USize val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val i8_unsafe [Source] fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe [Source] fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe [Source] fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe [Source] fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe [Source] fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe [Source] fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe [Source] fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe [Source] fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe [Source] fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe [Source] fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe [Source] fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe [Source] fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe [Source] fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe [Source] fun box usize_unsafe() : USize val Returns USize val f32_unsafe [Source] fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: box- A) : (Less val | Equal val | Greater val) Parameters that: box- A Returns ( Less val | Equal val | Greater val) Private Functions _value [Source] fun box _value() : A Returns A","title":"trait _UnsignedInteger"},{"location":"builtin-_UnsignedInteger/#_unsignedinteger91a-_unsignedinteger91a93-val93","text":"[Source] trait val _UnsignedInteger[A: _UnsignedInteger[A] val] is Integer[A] val","title":"_UnsignedInteger[A: _UnsignedInteger[A] val]"},{"location":"builtin-_UnsignedInteger/#implements","text":"Integer [A] val","title":"Implements"},{"location":"builtin-_UnsignedInteger/#constructors","text":"","title":"Constructors"},{"location":"builtin-_UnsignedInteger/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-_UnsignedInteger/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-_UnsignedInteger/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-_UnsignedInteger/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-_UnsignedInteger/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-_UnsignedInteger/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-_UnsignedInteger/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-_UnsignedInteger/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-_UnsignedInteger/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_UnsignedInteger/#abs","text":"[Source] fun box abs() : A","title":"abs"},{"location":"builtin-_UnsignedInteger/#returns_4","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#shl","text":"[Source] fun box shl( y: A) : A","title":"shl"},{"location":"builtin-_UnsignedInteger/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_5","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#shr","text":"[Source] fun box shr( y: A) : A","title":"shr"},{"location":"builtin-_UnsignedInteger/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_6","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#shl_unsafe","text":"[Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shl_unsafe( y: A) : A","title":"shl_unsafe"},{"location":"builtin-_UnsignedInteger/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_7","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#shr_unsafe","text":"[Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: A) : A","title":"shr_unsafe"},{"location":"builtin-_UnsignedInteger/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_8","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#rotl","text":"[Source] fun box rotl( y: A) : A","title":"rotl"},{"location":"builtin-_UnsignedInteger/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_9","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#rotr","text":"[Source] fun box rotr( y: A) : A","title":"rotr"},{"location":"builtin-_UnsignedInteger/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_10","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#popcount","text":"[Source] fun box popcount() : A","title":"popcount"},{"location":"builtin-_UnsignedInteger/#returns_11","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#clz","text":"[Source] fun box clz() : A","title":"clz"},{"location":"builtin-_UnsignedInteger/#returns_12","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#ctz","text":"[Source] fun box ctz() : A","title":"ctz"},{"location":"builtin-_UnsignedInteger/#returns_13","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#clz_unsafe","text":"[Source] Count leading zeroes. Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : A","title":"clz_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_14","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#ctz_unsafe","text":"[Source] Count trailing zeroes. Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : A","title":"ctz_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_15","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#bitwidth","text":"[Source] fun box bitwidth() : A","title":"bitwidth"},{"location":"builtin-_UnsignedInteger/#returns_16","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-_UnsignedInteger/#returns_17","text":"USize val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-_UnsignedInteger/#returns_18","text":"String iso^","title":"Returns"},{"location":"builtin-_UnsignedInteger/#add_unsafe","text":"[Source] fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-_UnsignedInteger/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_19","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-_UnsignedInteger/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_20","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-_UnsignedInteger/#parameters_10","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_21","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#div_unsafe","text":"[Source] fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-_UnsignedInteger/#parameters_11","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_22","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-_UnsignedInteger/#parameters_12","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_23","text":"(A , A)","title":"Returns"},{"location":"builtin-_UnsignedInteger/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-_UnsignedInteger/#parameters_13","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_24","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#add_partial","text":"[Source] fun box add_partial( y: A) : A ?","title":"add_partial"},{"location":"builtin-_UnsignedInteger/#parameters_14","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_25","text":"A ?","title":"Returns"},{"location":"builtin-_UnsignedInteger/#sub_partial","text":"[Source] fun box sub_partial( y: A) : A ?","title":"sub_partial"},{"location":"builtin-_UnsignedInteger/#parameters_15","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_26","text":"A ?","title":"Returns"},{"location":"builtin-_UnsignedInteger/#mul_partial","text":"[Source] fun box mul_partial( y: A) : A ?","title":"mul_partial"},{"location":"builtin-_UnsignedInteger/#parameters_16","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_27","text":"A ?","title":"Returns"},{"location":"builtin-_UnsignedInteger/#div_partial","text":"[Source] fun box div_partial( y: A) : A ?","title":"div_partial"},{"location":"builtin-_UnsignedInteger/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_28","text":"A ?","title":"Returns"},{"location":"builtin-_UnsignedInteger/#rem_partial","text":"[Source] fun box rem_partial( y: A) : A ?","title":"rem_partial"},{"location":"builtin-_UnsignedInteger/#parameters_18","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_29","text":"A ?","title":"Returns"},{"location":"builtin-_UnsignedInteger/#divrem_partial","text":"[Source] fun box divrem_partial( y: A) : (A , A) ?","title":"divrem_partial"},{"location":"builtin-_UnsignedInteger/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_30","text":"(A , A) ?","title":"Returns"},{"location":"builtin-_UnsignedInteger/#neg_unsafe","text":"[Source] fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_31","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#addc","text":"[Source] fun box addc( y: A) : (A , Bool val)","title":"addc"},{"location":"builtin-_UnsignedInteger/#parameters_20","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_32","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedInteger/#subc","text":"[Source] fun box subc( y: A) : (A , Bool val)","title":"subc"},{"location":"builtin-_UnsignedInteger/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_33","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedInteger/#mulc","text":"[Source] fun box mulc( y: A) : (A , Bool val)","title":"mulc"},{"location":"builtin-_UnsignedInteger/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_34","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedInteger/#divc","text":"[Source] fun box divc( y: A) : (A , Bool val)","title":"divc"},{"location":"builtin-_UnsignedInteger/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_35","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedInteger/#remc","text":"[Source] fun box remc( y: A) : (A , Bool val)","title":"remc"},{"location":"builtin-_UnsignedInteger/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_36","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedInteger/#op_and","text":"[Source] fun box op_and( y: A) : A","title":"op_and"},{"location":"builtin-_UnsignedInteger/#parameters_25","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_37","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#op_or","text":"[Source] fun box op_or( y: A) : A","title":"op_or"},{"location":"builtin-_UnsignedInteger/#parameters_26","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_38","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#op_xor","text":"[Source] fun box op_xor( y: A) : A","title":"op_xor"},{"location":"builtin-_UnsignedInteger/#parameters_27","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_39","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#op_not","text":"[Source] fun box op_not() : A","title":"op_not"},{"location":"builtin-_UnsignedInteger/#returns_40","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#bit_reverse","text":"[Source] fun box bit_reverse() : A","title":"bit_reverse"},{"location":"builtin-_UnsignedInteger/#returns_41","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#bswap","text":"[Source] fun box bswap() : A","title":"bswap"},{"location":"builtin-_UnsignedInteger/#returns_42","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-_UnsignedInteger/#parameters_28","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_43","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-_UnsignedInteger/#parameters_29","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_44","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-_UnsignedInteger/#parameters_30","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_45","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-_UnsignedInteger/#parameters_31","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_46","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-_UnsignedInteger/#parameters_32","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_47","text":"(A , A)","title":"Returns"},{"location":"builtin-_UnsignedInteger/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-_UnsignedInteger/#parameters_33","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_48","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-_UnsignedInteger/#returns_49","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#eq","text":"[Source] fun box eq( y: box- A) : Bool val","title":"eq"},{"location":"builtin-_UnsignedInteger/#parameters_34","text":"y: box- A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_50","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#ne","text":"[Source] fun box ne( y: box- A) : Bool val","title":"ne"},{"location":"builtin-_UnsignedInteger/#parameters_35","text":"y: box- A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_51","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#lt","text":"[Source] fun box lt( y: box- A) : Bool val","title":"lt"},{"location":"builtin-_UnsignedInteger/#parameters_36","text":"y: box- A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_52","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#le","text":"[Source] fun box le( y: box- A) : Bool val","title":"le"},{"location":"builtin-_UnsignedInteger/#parameters_37","text":"y: box- A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#ge","text":"[Source] fun box ge( y: box- A) : Bool val","title":"ge"},{"location":"builtin-_UnsignedInteger/#parameters_38","text":"y: box- A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#gt","text":"[Source] fun box gt( y: box- A) : Bool val","title":"gt"},{"location":"builtin-_UnsignedInteger/#parameters_39","text":"y: box- A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-_UnsignedInteger/#parameters_40","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_56","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-_UnsignedInteger/#parameters_41","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_57","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-_UnsignedInteger/#returns_58","text":"USize val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-_UnsignedInteger/#returns_59","text":"U64 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-_UnsignedInteger/#returns_60","text":"I8 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-_UnsignedInteger/#returns_61","text":"I16 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-_UnsignedInteger/#returns_62","text":"I32 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-_UnsignedInteger/#returns_63","text":"I64 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-_UnsignedInteger/#returns_64","text":"I128 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-_UnsignedInteger/#returns_65","text":"ILong val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-_UnsignedInteger/#returns_66","text":"ISize val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-_UnsignedInteger/#returns_67","text":"U8 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-_UnsignedInteger/#returns_68","text":"U16 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-_UnsignedInteger/#returns_69","text":"U32 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-_UnsignedInteger/#returns_70","text":"U64 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-_UnsignedInteger/#returns_71","text":"U128 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-_UnsignedInteger/#returns_72","text":"ULong val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-_UnsignedInteger/#returns_73","text":"USize val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-_UnsignedInteger/#returns_74","text":"F32 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-_UnsignedInteger/#returns_75","text":"F64 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_76","text":"I8 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_77","text":"I16 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_78","text":"I32 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_79","text":"I64 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_80","text":"I128 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_81","text":"ILong val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_82","text":"ISize val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_83","text":"U8 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_84","text":"U16 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_85","text":"U32 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_86","text":"U64 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_87","text":"U128 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_88","text":"ULong val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_89","text":"USize val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_90","text":"F32 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_91","text":"F64 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#compare","text":"fun box compare( that: box- A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-_UnsignedInteger/#parameters_42","text":"that: box- A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_92","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-_UnsignedInteger/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-_UnsignedInteger/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-_UnsignedInteger/#returns_93","text":"A","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/","text":"_UnsignedPartialArithmetic [Source] primitive val _UnsignedPartialArithmetic is _PartialArithmetic ref Implements _PartialArithmetic ref Constructors create [Source] new val create() : _UnsignedPartialArithmetic val^ Returns _UnsignedPartialArithmetic val^ Public Functions div_checked[T: _UnsignedInteger [T] val] [Source] fun box div_checked[T: _UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val) Parameters x: T y: T Returns (T , Bool val) rem_checked[T: _UnsignedInteger [T] val] [Source] fun box rem_checked[T: _UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val) Parameters x: T y: T Returns (T , Bool val) div_partial[T: _UnsignedInteger [T] val] [Source] fun box div_partial[T: _UnsignedInteger[T] val]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? rem_partial[T: _UnsignedInteger [T] val] [Source] fun box rem_partial[T: _UnsignedInteger[T] val]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? divrem_partial[T: _UnsignedInteger [T] val] [Source] fun box divrem_partial[T: _UnsignedInteger[T] val]( x: T, y: T) : (T , T) ? Parameters x: T y: T Returns (T , T) ? add_partial[T: ( Integer [T] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] [Source] fun box add_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? sub_partial[T: ( Integer [T] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] [Source] fun box sub_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? mul_partial[T: ( Integer [T] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] [Source] fun box mul_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? eq [Source] fun box eq( that: _UnsignedPartialArithmetic val) : Bool val Parameters that: _UnsignedPartialArithmetic val Returns Bool val ne [Source] fun box ne( that: _UnsignedPartialArithmetic val) : Bool val Parameters that: _UnsignedPartialArithmetic val Returns Bool val","title":"primitive _UnsignedPartialArithmetic"},{"location":"builtin-_UnsignedPartialArithmetic/#_unsignedpartialarithmetic","text":"[Source] primitive val _UnsignedPartialArithmetic is _PartialArithmetic ref","title":"_UnsignedPartialArithmetic"},{"location":"builtin-_UnsignedPartialArithmetic/#implements","text":"_PartialArithmetic ref","title":"Implements"},{"location":"builtin-_UnsignedPartialArithmetic/#constructors","text":"","title":"Constructors"},{"location":"builtin-_UnsignedPartialArithmetic/#create","text":"[Source] new val create() : _UnsignedPartialArithmetic val^","title":"create"},{"location":"builtin-_UnsignedPartialArithmetic/#returns","text":"_UnsignedPartialArithmetic val^","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_UnsignedPartialArithmetic/#div_checked91t-_unsignedinteger91t93-val93","text":"[Source] fun box div_checked[T: _UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val)","title":"div_checked[T: _UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_1","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#rem_checked91t-_unsignedinteger91t93-val93","text":"[Source] fun box rem_checked[T: _UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val)","title":"rem_checked[T: _UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_2","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#div_partial91t-_unsignedinteger91t93-val93","text":"[Source] fun box div_partial[T: _UnsignedInteger[T] val]( x: T, y: T) : T ?","title":"div_partial[T: _UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_2","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_3","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#rem_partial91t-_unsignedinteger91t93-val93","text":"[Source] fun box rem_partial[T: _UnsignedInteger[T] val]( x: T, y: T) : T ?","title":"rem_partial[T: _UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_3","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_4","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#divrem_partial91t-_unsignedinteger91t93-val93","text":"[Source] fun box divrem_partial[T: _UnsignedInteger[T] val]( x: T, y: T) : (T , T) ?","title":"divrem_partial[T: _UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_4","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_5","text":"(T , T) ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#add_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box add_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"add_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_5","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_6","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#sub_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box sub_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"sub_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_6","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_7","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#mul_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box mul_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"mul_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_7","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_8","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#eq","text":"[Source] fun box eq( that: _UnsignedPartialArithmetic val) : Bool val","title":"eq"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_8","text":"that: _UnsignedPartialArithmetic val","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_9","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#ne","text":"[Source] fun box ne( that: _UnsignedPartialArithmetic val) : Bool val","title":"ne"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_9","text":"that: _UnsignedPartialArithmetic val","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_10","text":"Bool val","title":"Returns"},{"location":"capsicum--index/","text":"No package doc string provided for capsicum. Public Types type CapRights class CapRights0 primitive Cap","title":"Package"},{"location":"capsicum--index/#public-types","text":"type CapRights class CapRights0 primitive Cap","title":"Public Types"},{"location":"capsicum-Cap/","text":"Cap [Source] The Capsicum rights. primitive val Cap Constructors create [Source] new val create() : Cap val^ Returns Cap val^ Public Functions enter [Source] This places the current process into capability mode, a mode of execution in which processes may only issue system calls operating on file descriptors or reading limited global system state. Access to global name spaces, such as file system or IPC name spaces, is prevented. fun box enter() : Bool val Returns Bool val read [Source] fun box read() : U64 val Returns U64 val write [Source] fun box write() : U64 val Returns U64 val seek_tell [Source] fun box seek_tell() : U64 val Returns U64 val seek [Source] fun box seek() : U64 val Returns U64 val pread [Source] fun box pread() : U64 val Returns U64 val pwrite [Source] fun box pwrite() : U64 val Returns U64 val mmap [Source] fun box mmap() : U64 val Returns U64 val mmap_r [Source] fun box mmap_r() : U64 val Returns U64 val mmap_w [Source] fun box mmap_w() : U64 val Returns U64 val mmap_x [Source] fun box mmap_x() : U64 val Returns U64 val mmap_rw [Source] fun box mmap_rw() : U64 val Returns U64 val mmap_rx [Source] fun box mmap_rx() : U64 val Returns U64 val mmap_wx [Source] fun box mmap_wx() : U64 val Returns U64 val mmap_rwx [Source] fun box mmap_rwx() : U64 val Returns U64 val creat [Source] fun box creat() : U64 val Returns U64 val fexecve [Source] fun box fexecve() : U64 val Returns U64 val fsync [Source] fun box fsync() : U64 val Returns U64 val ftruncate [Source] fun box ftruncate() : U64 val Returns U64 val lookup [Source] fun box lookup() : U64 val Returns U64 val fchdir [Source] fun box fchdir() : U64 val Returns U64 val fchflags [Source] fun box fchflags() : U64 val Returns U64 val chflagsat [Source] fun box chflagsat() : U64 val Returns U64 val fchmod [Source] fun box fchmod() : U64 val Returns U64 val fchmodat [Source] fun box fchmodat() : U64 val Returns U64 val fchown [Source] fun box fchown() : U64 val Returns U64 val fchownat [Source] fun box fchownat() : U64 val Returns U64 val fcntl [Source] fun box fcntl() : U64 val Returns U64 val flock [Source] fun box flock() : U64 val Returns U64 val fpathconf [Source] fun box fpathconf() : U64 val Returns U64 val fsck [Source] fun box fsck() : U64 val Returns U64 val fstat [Source] fun box fstat() : U64 val Returns U64 val fstatat [Source] fun box fstatat() : U64 val Returns U64 val fstatfs [Source] fun box fstatfs() : U64 val Returns U64 val futimes [Source] fun box futimes() : U64 val Returns U64 val futimesat [Source] fun box futimesat() : U64 val Returns U64 val linkat [Source] fun box linkat() : U64 val Returns U64 val mkdirat [Source] fun box mkdirat() : U64 val Returns U64 val mkfifoat [Source] fun box mkfifoat() : U64 val Returns U64 val mknodat [Source] fun box mknodat() : U64 val Returns U64 val renameat [Source] fun box renameat() : U64 val Returns U64 val symlinkat [Source] fun box symlinkat() : U64 val Returns U64 val unlinkat [Source] fun box unlinkat() : U64 val Returns U64 val accept [Source] fun box accept() : U64 val Returns U64 val bind [Source] fun box bind() : U64 val Returns U64 val connect [Source] fun box connect() : U64 val Returns U64 val getpeername [Source] fun box getpeername() : U64 val Returns U64 val getsockname [Source] fun box getsockname() : U64 val Returns U64 val getsockopt [Source] fun box getsockopt() : U64 val Returns U64 val listen [Source] fun box listen() : U64 val Returns U64 val peeloff [Source] fun box peeloff() : U64 val Returns U64 val recv [Source] fun box recv() : U64 val Returns U64 val send [Source] fun box send() : U64 val Returns U64 val setsockopt [Source] fun box setsockopt() : U64 val Returns U64 val shutdown [Source] fun box shutdown() : U64 val Returns U64 val bindat [Source] fun box bindat() : U64 val Returns U64 val connectat [Source] fun box connectat() : U64 val Returns U64 val sock_client [Source] fun box sock_client() : U64 val Returns U64 val sock_server [Source] fun box sock_server() : U64 val Returns U64 val mac_get [Source] fun box mac_get() : U64 val Returns U64 val mac_set [Source] fun box mac_set() : U64 val Returns U64 val sem_getvalue [Source] fun box sem_getvalue() : U64 val Returns U64 val sem_post [Source] fun box sem_post() : U64 val Returns U64 val sem_wait [Source] fun box sem_wait() : U64 val Returns U64 val event [Source] fun box event() : U64 val Returns U64 val kqueue_event [Source] fun box kqueue_event() : U64 val Returns U64 val ioctl [Source] fun box ioctl() : U64 val Returns U64 val ttyhook [Source] fun box ttyhook() : U64 val Returns U64 val pdgetpid [Source] fun box pdgetpid() : U64 val Returns U64 val pdwait [Source] fun box pdwait() : U64 val Returns U64 val pdkill [Source] fun box pdkill() : U64 val Returns U64 val exattr_delete [Source] fun box exattr_delete() : U64 val Returns U64 val exattr_get [Source] fun box exattr_get() : U64 val Returns U64 val exattr_list [Source] fun box exattr_list() : U64 val Returns U64 val exattr_set [Source] fun box exattr_set() : U64 val Returns U64 val acl_check [Source] fun box acl_check() : U64 val Returns U64 val acl_delete [Source] fun box acl_delete() : U64 val Returns U64 val acl_get [Source] fun box acl_get() : U64 val Returns U64 val acl_set [Source] fun box acl_set() : U64 val Returns U64 val kqueue_change [Source] fun box kqueue_change() : U64 val Returns U64 val kqueue [Source] fun box kqueue() : U64 val Returns U64 val eq [Source] fun box eq( that: Cap val) : Bool val Parameters that: Cap val Returns Bool val ne [Source] fun box ne( that: Cap val) : Bool val Parameters that: Cap val Returns Bool val Private Functions _id [Source] Build a Capsicum ID from an index and a bit position. fun box _id( idx: U64 val, bit: U64 val) : U64 val Parameters idx: U64 val bit: U64 val Returns U64 val","title":"primitive Cap"},{"location":"capsicum-Cap/#cap","text":"[Source] The Capsicum rights. primitive val Cap","title":"Cap"},{"location":"capsicum-Cap/#constructors","text":"","title":"Constructors"},{"location":"capsicum-Cap/#create","text":"[Source] new val create() : Cap val^","title":"create"},{"location":"capsicum-Cap/#returns","text":"Cap val^","title":"Returns"},{"location":"capsicum-Cap/#public-functions","text":"","title":"Public Functions"},{"location":"capsicum-Cap/#enter","text":"[Source] This places the current process into capability mode, a mode of execution in which processes may only issue system calls operating on file descriptors or reading limited global system state. Access to global name spaces, such as file system or IPC name spaces, is prevented. fun box enter() : Bool val","title":"enter"},{"location":"capsicum-Cap/#returns_1","text":"Bool val","title":"Returns"},{"location":"capsicum-Cap/#read","text":"[Source] fun box read() : U64 val","title":"read"},{"location":"capsicum-Cap/#returns_2","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#write","text":"[Source] fun box write() : U64 val","title":"write"},{"location":"capsicum-Cap/#returns_3","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#seek_tell","text":"[Source] fun box seek_tell() : U64 val","title":"seek_tell"},{"location":"capsicum-Cap/#returns_4","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#seek","text":"[Source] fun box seek() : U64 val","title":"seek"},{"location":"capsicum-Cap/#returns_5","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#pread","text":"[Source] fun box pread() : U64 val","title":"pread"},{"location":"capsicum-Cap/#returns_6","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#pwrite","text":"[Source] fun box pwrite() : U64 val","title":"pwrite"},{"location":"capsicum-Cap/#returns_7","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mmap","text":"[Source] fun box mmap() : U64 val","title":"mmap"},{"location":"capsicum-Cap/#returns_8","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mmap_r","text":"[Source] fun box mmap_r() : U64 val","title":"mmap_r"},{"location":"capsicum-Cap/#returns_9","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mmap_w","text":"[Source] fun box mmap_w() : U64 val","title":"mmap_w"},{"location":"capsicum-Cap/#returns_10","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mmap_x","text":"[Source] fun box mmap_x() : U64 val","title":"mmap_x"},{"location":"capsicum-Cap/#returns_11","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mmap_rw","text":"[Source] fun box mmap_rw() : U64 val","title":"mmap_rw"},{"location":"capsicum-Cap/#returns_12","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mmap_rx","text":"[Source] fun box mmap_rx() : U64 val","title":"mmap_rx"},{"location":"capsicum-Cap/#returns_13","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mmap_wx","text":"[Source] fun box mmap_wx() : U64 val","title":"mmap_wx"},{"location":"capsicum-Cap/#returns_14","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mmap_rwx","text":"[Source] fun box mmap_rwx() : U64 val","title":"mmap_rwx"},{"location":"capsicum-Cap/#returns_15","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#creat","text":"[Source] fun box creat() : U64 val","title":"creat"},{"location":"capsicum-Cap/#returns_16","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fexecve","text":"[Source] fun box fexecve() : U64 val","title":"fexecve"},{"location":"capsicum-Cap/#returns_17","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fsync","text":"[Source] fun box fsync() : U64 val","title":"fsync"},{"location":"capsicum-Cap/#returns_18","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#ftruncate","text":"[Source] fun box ftruncate() : U64 val","title":"ftruncate"},{"location":"capsicum-Cap/#returns_19","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#lookup","text":"[Source] fun box lookup() : U64 val","title":"lookup"},{"location":"capsicum-Cap/#returns_20","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fchdir","text":"[Source] fun box fchdir() : U64 val","title":"fchdir"},{"location":"capsicum-Cap/#returns_21","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fchflags","text":"[Source] fun box fchflags() : U64 val","title":"fchflags"},{"location":"capsicum-Cap/#returns_22","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#chflagsat","text":"[Source] fun box chflagsat() : U64 val","title":"chflagsat"},{"location":"capsicum-Cap/#returns_23","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fchmod","text":"[Source] fun box fchmod() : U64 val","title":"fchmod"},{"location":"capsicum-Cap/#returns_24","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fchmodat","text":"[Source] fun box fchmodat() : U64 val","title":"fchmodat"},{"location":"capsicum-Cap/#returns_25","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fchown","text":"[Source] fun box fchown() : U64 val","title":"fchown"},{"location":"capsicum-Cap/#returns_26","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fchownat","text":"[Source] fun box fchownat() : U64 val","title":"fchownat"},{"location":"capsicum-Cap/#returns_27","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fcntl","text":"[Source] fun box fcntl() : U64 val","title":"fcntl"},{"location":"capsicum-Cap/#returns_28","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#flock","text":"[Source] fun box flock() : U64 val","title":"flock"},{"location":"capsicum-Cap/#returns_29","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fpathconf","text":"[Source] fun box fpathconf() : U64 val","title":"fpathconf"},{"location":"capsicum-Cap/#returns_30","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fsck","text":"[Source] fun box fsck() : U64 val","title":"fsck"},{"location":"capsicum-Cap/#returns_31","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fstat","text":"[Source] fun box fstat() : U64 val","title":"fstat"},{"location":"capsicum-Cap/#returns_32","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fstatat","text":"[Source] fun box fstatat() : U64 val","title":"fstatat"},{"location":"capsicum-Cap/#returns_33","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fstatfs","text":"[Source] fun box fstatfs() : U64 val","title":"fstatfs"},{"location":"capsicum-Cap/#returns_34","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#futimes","text":"[Source] fun box futimes() : U64 val","title":"futimes"},{"location":"capsicum-Cap/#returns_35","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#futimesat","text":"[Source] fun box futimesat() : U64 val","title":"futimesat"},{"location":"capsicum-Cap/#returns_36","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#linkat","text":"[Source] fun box linkat() : U64 val","title":"linkat"},{"location":"capsicum-Cap/#returns_37","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mkdirat","text":"[Source] fun box mkdirat() : U64 val","title":"mkdirat"},{"location":"capsicum-Cap/#returns_38","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mkfifoat","text":"[Source] fun box mkfifoat() : U64 val","title":"mkfifoat"},{"location":"capsicum-Cap/#returns_39","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mknodat","text":"[Source] fun box mknodat() : U64 val","title":"mknodat"},{"location":"capsicum-Cap/#returns_40","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#renameat","text":"[Source] fun box renameat() : U64 val","title":"renameat"},{"location":"capsicum-Cap/#returns_41","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#symlinkat","text":"[Source] fun box symlinkat() : U64 val","title":"symlinkat"},{"location":"capsicum-Cap/#returns_42","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#unlinkat","text":"[Source] fun box unlinkat() : U64 val","title":"unlinkat"},{"location":"capsicum-Cap/#returns_43","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#accept","text":"[Source] fun box accept() : U64 val","title":"accept"},{"location":"capsicum-Cap/#returns_44","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#bind","text":"[Source] fun box bind() : U64 val","title":"bind"},{"location":"capsicum-Cap/#returns_45","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#connect","text":"[Source] fun box connect() : U64 val","title":"connect"},{"location":"capsicum-Cap/#returns_46","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#getpeername","text":"[Source] fun box getpeername() : U64 val","title":"getpeername"},{"location":"capsicum-Cap/#returns_47","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#getsockname","text":"[Source] fun box getsockname() : U64 val","title":"getsockname"},{"location":"capsicum-Cap/#returns_48","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#getsockopt","text":"[Source] fun box getsockopt() : U64 val","title":"getsockopt"},{"location":"capsicum-Cap/#returns_49","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#listen","text":"[Source] fun box listen() : U64 val","title":"listen"},{"location":"capsicum-Cap/#returns_50","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#peeloff","text":"[Source] fun box peeloff() : U64 val","title":"peeloff"},{"location":"capsicum-Cap/#returns_51","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#recv","text":"[Source] fun box recv() : U64 val","title":"recv"},{"location":"capsicum-Cap/#returns_52","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#send","text":"[Source] fun box send() : U64 val","title":"send"},{"location":"capsicum-Cap/#returns_53","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#setsockopt","text":"[Source] fun box setsockopt() : U64 val","title":"setsockopt"},{"location":"capsicum-Cap/#returns_54","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#shutdown","text":"[Source] fun box shutdown() : U64 val","title":"shutdown"},{"location":"capsicum-Cap/#returns_55","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#bindat","text":"[Source] fun box bindat() : U64 val","title":"bindat"},{"location":"capsicum-Cap/#returns_56","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#connectat","text":"[Source] fun box connectat() : U64 val","title":"connectat"},{"location":"capsicum-Cap/#returns_57","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#sock_client","text":"[Source] fun box sock_client() : U64 val","title":"sock_client"},{"location":"capsicum-Cap/#returns_58","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#sock_server","text":"[Source] fun box sock_server() : U64 val","title":"sock_server"},{"location":"capsicum-Cap/#returns_59","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mac_get","text":"[Source] fun box mac_get() : U64 val","title":"mac_get"},{"location":"capsicum-Cap/#returns_60","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mac_set","text":"[Source] fun box mac_set() : U64 val","title":"mac_set"},{"location":"capsicum-Cap/#returns_61","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#sem_getvalue","text":"[Source] fun box sem_getvalue() : U64 val","title":"sem_getvalue"},{"location":"capsicum-Cap/#returns_62","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#sem_post","text":"[Source] fun box sem_post() : U64 val","title":"sem_post"},{"location":"capsicum-Cap/#returns_63","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#sem_wait","text":"[Source] fun box sem_wait() : U64 val","title":"sem_wait"},{"location":"capsicum-Cap/#returns_64","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#event","text":"[Source] fun box event() : U64 val","title":"event"},{"location":"capsicum-Cap/#returns_65","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#kqueue_event","text":"[Source] fun box kqueue_event() : U64 val","title":"kqueue_event"},{"location":"capsicum-Cap/#returns_66","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#ioctl","text":"[Source] fun box ioctl() : U64 val","title":"ioctl"},{"location":"capsicum-Cap/#returns_67","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#ttyhook","text":"[Source] fun box ttyhook() : U64 val","title":"ttyhook"},{"location":"capsicum-Cap/#returns_68","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#pdgetpid","text":"[Source] fun box pdgetpid() : U64 val","title":"pdgetpid"},{"location":"capsicum-Cap/#returns_69","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#pdwait","text":"[Source] fun box pdwait() : U64 val","title":"pdwait"},{"location":"capsicum-Cap/#returns_70","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#pdkill","text":"[Source] fun box pdkill() : U64 val","title":"pdkill"},{"location":"capsicum-Cap/#returns_71","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#exattr_delete","text":"[Source] fun box exattr_delete() : U64 val","title":"exattr_delete"},{"location":"capsicum-Cap/#returns_72","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#exattr_get","text":"[Source] fun box exattr_get() : U64 val","title":"exattr_get"},{"location":"capsicum-Cap/#returns_73","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#exattr_list","text":"[Source] fun box exattr_list() : U64 val","title":"exattr_list"},{"location":"capsicum-Cap/#returns_74","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#exattr_set","text":"[Source] fun box exattr_set() : U64 val","title":"exattr_set"},{"location":"capsicum-Cap/#returns_75","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#acl_check","text":"[Source] fun box acl_check() : U64 val","title":"acl_check"},{"location":"capsicum-Cap/#returns_76","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#acl_delete","text":"[Source] fun box acl_delete() : U64 val","title":"acl_delete"},{"location":"capsicum-Cap/#returns_77","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#acl_get","text":"[Source] fun box acl_get() : U64 val","title":"acl_get"},{"location":"capsicum-Cap/#returns_78","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#acl_set","text":"[Source] fun box acl_set() : U64 val","title":"acl_set"},{"location":"capsicum-Cap/#returns_79","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#kqueue_change","text":"[Source] fun box kqueue_change() : U64 val","title":"kqueue_change"},{"location":"capsicum-Cap/#returns_80","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#kqueue","text":"[Source] fun box kqueue() : U64 val","title":"kqueue"},{"location":"capsicum-Cap/#returns_81","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#eq","text":"[Source] fun box eq( that: Cap val) : Bool val","title":"eq"},{"location":"capsicum-Cap/#parameters","text":"that: Cap val","title":"Parameters"},{"location":"capsicum-Cap/#returns_82","text":"Bool val","title":"Returns"},{"location":"capsicum-Cap/#ne","text":"[Source] fun box ne( that: Cap val) : Bool val","title":"ne"},{"location":"capsicum-Cap/#parameters_1","text":"that: Cap val","title":"Parameters"},{"location":"capsicum-Cap/#returns_83","text":"Bool val","title":"Returns"},{"location":"capsicum-Cap/#private-functions","text":"","title":"Private Functions"},{"location":"capsicum-Cap/#_id","text":"[Source] Build a Capsicum ID from an index and a bit position. fun box _id( idx: U64 val, bit: U64 val) : U64 val","title":"_id"},{"location":"capsicum-Cap/#parameters_2","text":"idx: U64 val bit: U64 val","title":"Parameters"},{"location":"capsicum-Cap/#returns_84","text":"U64 val","title":"Returns"},{"location":"capsicum-CapRights/","text":"CapRights [Source] type CapRights is CapRights0 ref Type Alias For CapRights0 ref","title":"type CapRights"},{"location":"capsicum-CapRights/#caprights","text":"[Source] type CapRights is CapRights0 ref","title":"CapRights"},{"location":"capsicum-CapRights/#type-alias-for","text":"CapRights0 ref","title":"Type Alias For"},{"location":"capsicum-CapRights0/","text":"CapRights0 [Source] Version 0 of the capsicum cap_rights_t structure. class ref CapRights0 Constructors create [Source] Initialises with no rights. new ref create() : CapRights0 ref^ Returns CapRights0 ref^ from [Source] Initialises with the rights from a FileCaps. new ref from( caps: Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] box) : CapRights0 ref^ Parameters caps: Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] box Returns CapRights0 ref^ descriptor [Source] Initialises with the rights on the given file descriptor. new ref descriptor( fd: I32 val) : CapRights0 ref^ Parameters fd: I32 val Returns CapRights0 ref^ Public Functions set [Source] fun ref set( cap: U64 val) : None val Parameters cap: U64 val Returns None val unset [Source] fun ref unset( cap: U64 val) : None val Parameters cap: U64 val Returns None val limit [Source] Limits the fd to the encoded rights. fun box limit( fd: I32 val) : Bool val Parameters fd: I32 val Returns Bool val merge [Source] Merge the rights in that into this. fun ref merge( that: CapRights0 ref) : None val Parameters that: CapRights0 ref Returns None val remove [Source] Remove the rights in that from this. fun ref remove( that: CapRights0 ref) : None val Parameters that: CapRights0 ref Returns None val clear [Source] Clear all rights. fun ref clear() : None val Returns None val contains [Source] Check that this is a superset of the rights in that. fun box contains( that: CapRights0 ref) : Bool val Parameters that: CapRights0 ref Returns Bool val Private Functions _version [Source] fun box _version() : I32 val Returns I32 val","title":"class CapRights0"},{"location":"capsicum-CapRights0/#caprights0","text":"[Source] Version 0 of the capsicum cap_rights_t structure. class ref CapRights0","title":"CapRights0"},{"location":"capsicum-CapRights0/#constructors","text":"","title":"Constructors"},{"location":"capsicum-CapRights0/#create","text":"[Source] Initialises with no rights. new ref create() : CapRights0 ref^","title":"create"},{"location":"capsicum-CapRights0/#returns","text":"CapRights0 ref^","title":"Returns"},{"location":"capsicum-CapRights0/#from","text":"[Source] Initialises with the rights from a FileCaps. new ref from( caps: Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] box) : CapRights0 ref^","title":"from"},{"location":"capsicum-CapRights0/#parameters","text":"caps: Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] box","title":"Parameters"},{"location":"capsicum-CapRights0/#returns_1","text":"CapRights0 ref^","title":"Returns"},{"location":"capsicum-CapRights0/#descriptor","text":"[Source] Initialises with the rights on the given file descriptor. new ref descriptor( fd: I32 val) : CapRights0 ref^","title":"descriptor"},{"location":"capsicum-CapRights0/#parameters_1","text":"fd: I32 val","title":"Parameters"},{"location":"capsicum-CapRights0/#returns_2","text":"CapRights0 ref^","title":"Returns"},{"location":"capsicum-CapRights0/#public-functions","text":"","title":"Public Functions"},{"location":"capsicum-CapRights0/#set","text":"[Source] fun ref set( cap: U64 val) : None val","title":"set"},{"location":"capsicum-CapRights0/#parameters_2","text":"cap: U64 val","title":"Parameters"},{"location":"capsicum-CapRights0/#returns_3","text":"None val","title":"Returns"},{"location":"capsicum-CapRights0/#unset","text":"[Source] fun ref unset( cap: U64 val) : None val","title":"unset"},{"location":"capsicum-CapRights0/#parameters_3","text":"cap: U64 val","title":"Parameters"},{"location":"capsicum-CapRights0/#returns_4","text":"None val","title":"Returns"},{"location":"capsicum-CapRights0/#limit","text":"[Source] Limits the fd to the encoded rights. fun box limit( fd: I32 val) : Bool val","title":"limit"},{"location":"capsicum-CapRights0/#parameters_4","text":"fd: I32 val","title":"Parameters"},{"location":"capsicum-CapRights0/#returns_5","text":"Bool val","title":"Returns"},{"location":"capsicum-CapRights0/#merge","text":"[Source] Merge the rights in that into this. fun ref merge( that: CapRights0 ref) : None val","title":"merge"},{"location":"capsicum-CapRights0/#parameters_5","text":"that: CapRights0 ref","title":"Parameters"},{"location":"capsicum-CapRights0/#returns_6","text":"None val","title":"Returns"},{"location":"capsicum-CapRights0/#remove","text":"[Source] Remove the rights in that from this. fun ref remove( that: CapRights0 ref) : None val","title":"remove"},{"location":"capsicum-CapRights0/#parameters_6","text":"that: CapRights0 ref","title":"Parameters"},{"location":"capsicum-CapRights0/#returns_7","text":"None val","title":"Returns"},{"location":"capsicum-CapRights0/#clear","text":"[Source] Clear all rights. fun ref clear() : None val","title":"clear"},{"location":"capsicum-CapRights0/#returns_8","text":"None val","title":"Returns"},{"location":"capsicum-CapRights0/#contains","text":"[Source] Check that this is a superset of the rights in that. fun box contains( that: CapRights0 ref) : Bool val","title":"contains"},{"location":"capsicum-CapRights0/#parameters_7","text":"that: CapRights0 ref","title":"Parameters"},{"location":"capsicum-CapRights0/#returns_9","text":"Bool val","title":"Returns"},{"location":"capsicum-CapRights0/#private-functions","text":"","title":"Private Functions"},{"location":"capsicum-CapRights0/#_version","text":"[Source] fun box _version() : I32 val","title":"_version"},{"location":"capsicum-CapRights0/#returns_10","text":"I32 val","title":"Returns"},{"location":"collections--index/","text":"No package doc string provided for collections. Public Types primitive Sort type Set type SetIs class HashSet class SetValues class RingBuffer class Reverse class Range type Map type MapIs class HashMap class MapKeys class MapValues class MapPairs class ListNode class List class ListNodes class ListValues interface Hashable interface Hashable64 interface HashFunction interface HashFunction64 primitive HashEq primitive HashEq64 primitive HashIs primitive HashByteSeq interface Flag class Flags Private Types primitive _MapEmpty primitive _MapDeleted","title":"Package"},{"location":"collections--index/#public-types","text":"primitive Sort type Set type SetIs class HashSet class SetValues class RingBuffer class Reverse class Range type Map type MapIs class HashMap class MapKeys class MapValues class MapPairs class ListNode class List class ListNodes class ListValues interface Hashable interface Hashable64 interface HashFunction interface HashFunction64 primitive HashEq primitive HashEq64 primitive HashIs primitive HashByteSeq interface Flag class Flags","title":"Public Types"},{"location":"collections--index/#private-types","text":"primitive _MapEmpty primitive _MapDeleted","title":"Private Types"},{"location":"collections-Flag/","text":"Flag[A: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer [A] val)] [Source] A flag should be a primitive with a value method that returns the bits that represent the flag. This allows a flag to encode a single bit, or any combination of bits. interface val Flag[A: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[A] val)] Public Functions value [Source] fun box value() : A Returns A","title":"interface Flag"},{"location":"collections-Flag/#flag91a-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93","text":"[Source] A flag should be a primitive with a value method that returns the bits that represent the flag. This allows a flag to encode a single bit, or any combination of bits. interface val Flag[A: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[A] val)]","title":"Flag[A: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"},{"location":"collections-Flag/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Flag/#value","text":"[Source] fun box value() : A","title":"value"},{"location":"collections-Flag/#returns","text":"A","title":"Returns"},{"location":"collections-Flags/","text":"Flags[A: Flag [B] val, optional B: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer [B] val)] [Source] Flags is a set of flags. The flags that are recognised should be passed as a union type for type parameter A. For example: primitive SSE fun value(): U64 = 1 primitive AVX fun value(): U64 = 2 primitive RDTSCP fun value(): U64 = 4 type Features is Flags[(SSE | AVX | RDTSCP)] Type parameter B is the unlying field used to store the flags. class ref Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[B] val)] is Comparable[Flags[A, B] box] ref Implements Comparable [ Flags [A, B] box] ref Constructors create [Source] new iso create() : Flags[A, B] iso^ Returns Flags [A, B] iso^ Public Functions value [Source] Returns the bit encoding of the set flags. fun box value() : B Returns B apply [Source] Returns true if the flag is set. fun box apply( flag: A) : Bool val Parameters flag: A Returns Bool val all [Source] Sets all bits, including undefined flags. fun ref all() : None val Returns None val clear [Source] Unsets all flags. fun ref clear() : None val Returns None val set [Source] Sets the flag. fun ref set( flag: A) : None val Parameters flag: A Returns None val unset [Source] Unsets the flag. fun ref unset( flag: A) : None val Parameters flag: A Returns None val flip [Source] Sets the flag if it is unset, unsets the flag if it is set. fun ref flip( flag: A) : None val Parameters flag: A Returns None val union [Source] The union of this and that. fun ref union( that: Flags[A, B] box) : None val Parameters that: Flags [A, B] box Returns None val intersect [Source] The intersection of this and that. fun ref intersect( that: Flags[A, B] box) : None val Parameters that: Flags [A, B] box Returns None val difference [Source] The symmetric difference of this and that. fun ref difference( that: Flags[A, B] box) : None val Parameters that: Flags [A, B] box Returns None val remove [Source] Unset flags that are set in that. fun ref remove( that: Flags[A, B] box) : None val Parameters that: Flags [A, B] box Returns None val add [Source] This with the flag set. fun box add( flag: A) : Flags[A, B] iso^ Parameters flag: A Returns Flags [A, B] iso^ sub [Source] This with the flag unset. fun box sub( flag: A) : Flags[A, B] iso^ Parameters flag: A Returns Flags [A, B] iso^ op_or [Source] The union of this and that. fun box op_or( that: Flags[A, B] box) : Flags[A, B] iso^ Parameters that: Flags [A, B] box Returns Flags [A, B] iso^ op_and [Source] The intersection of this and that. fun box op_and( that: Flags[A, B] box) : Flags[A, B] iso^ Parameters that: Flags [A, B] box Returns Flags [A, B] iso^ op_xor [Source] The symmetric difference of this and that. fun box op_xor( that: Flags[A, B] box) : Flags[A, B] iso^ Parameters that: Flags [A, B] box Returns Flags [A, B] iso^ without [Source] The flags in this that are not in that. fun box without( that: Flags[A, B] box) : Flags[A, B] iso^ Parameters that: Flags [A, B] box Returns Flags [A, B] iso^ clone [Source] Create a clone. fun box clone() : Flags[A, B] iso^ Returns Flags [A, B] iso^ eq [Source] Returns true if this has the same flags set as that. fun box eq( that: Flags[A, B] box) : Bool val Parameters that: Flags [A, B] box Returns Bool val lt [Source] Returns true if the flags set on this are a strict subset of the flags set on that. Flags is only partially ordered, so lt is not the opposite of ge. fun box lt( that: Flags[A, B] box) : Bool val Parameters that: Flags [A, B] box Returns Bool val le [Source] Returns true if the flags set on this are a subset of the flags set on that or they are the same. Flags is only partially ordered, so le is not the opposite of te. fun box le( that: Flags[A, B] box) : Bool val Parameters that: Flags [A, B] box Returns Bool val gt [Source] Returns true if the flags set on this are a struct superset of the flags set on that. Flags is only partially ordered, so gt is not the opposite of le. fun box gt( that: Flags[A, B] box) : Bool val Parameters that: Flags [A, B] box Returns Bool val ge [Source] Returns true if the flags set on this are a superset of the flags set on that or they are the same. Flags is only partially ordered, so ge is not the opposite of lt. fun box ge( that: Flags[A, B] box) : Bool val Parameters that: Flags [A, B] box Returns Bool val compare [Source] fun box compare( that: Flags[A, B] box) : (Less val | Equal val | Greater val) Parameters that: Flags [A, B] box Returns ( Less val | Equal val | Greater val) ne [Source] fun box ne( that: Flags[A, B] box) : Bool val Parameters that: Flags [A, B] box Returns Bool val","title":"class Flags"},{"location":"collections-Flags/#flags91a-flag91b93-val-optional-b-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91b93-val93","text":"[Source] Flags is a set of flags. The flags that are recognised should be passed as a union type for type parameter A. For example: primitive SSE fun value(): U64 = 1 primitive AVX fun value(): U64 = 2 primitive RDTSCP fun value(): U64 = 4 type Features is Flags[(SSE | AVX | RDTSCP)] Type parameter B is the unlying field used to store the flags. class ref Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[B] val)] is Comparable[Flags[A, B] box] ref","title":"Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[B] val)]"},{"location":"collections-Flags/#implements","text":"Comparable [ Flags [A, B] box] ref","title":"Implements"},{"location":"collections-Flags/#constructors","text":"","title":"Constructors"},{"location":"collections-Flags/#create","text":"[Source] new iso create() : Flags[A, B] iso^","title":"create"},{"location":"collections-Flags/#returns","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Flags/#value","text":"[Source] Returns the bit encoding of the set flags. fun box value() : B","title":"value"},{"location":"collections-Flags/#returns_1","text":"B","title":"Returns"},{"location":"collections-Flags/#apply","text":"[Source] Returns true if the flag is set. fun box apply( flag: A) : Bool val","title":"apply"},{"location":"collections-Flags/#parameters","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#all","text":"[Source] Sets all bits, including undefined flags. fun ref all() : None val","title":"all"},{"location":"collections-Flags/#returns_3","text":"None val","title":"Returns"},{"location":"collections-Flags/#clear","text":"[Source] Unsets all flags. fun ref clear() : None val","title":"clear"},{"location":"collections-Flags/#returns_4","text":"None val","title":"Returns"},{"location":"collections-Flags/#set","text":"[Source] Sets the flag. fun ref set( flag: A) : None val","title":"set"},{"location":"collections-Flags/#parameters_1","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_5","text":"None val","title":"Returns"},{"location":"collections-Flags/#unset","text":"[Source] Unsets the flag. fun ref unset( flag: A) : None val","title":"unset"},{"location":"collections-Flags/#parameters_2","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_6","text":"None val","title":"Returns"},{"location":"collections-Flags/#flip","text":"[Source] Sets the flag if it is unset, unsets the flag if it is set. fun ref flip( flag: A) : None val","title":"flip"},{"location":"collections-Flags/#parameters_3","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_7","text":"None val","title":"Returns"},{"location":"collections-Flags/#union","text":"[Source] The union of this and that. fun ref union( that: Flags[A, B] box) : None val","title":"union"},{"location":"collections-Flags/#parameters_4","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_8","text":"None val","title":"Returns"},{"location":"collections-Flags/#intersect","text":"[Source] The intersection of this and that. fun ref intersect( that: Flags[A, B] box) : None val","title":"intersect"},{"location":"collections-Flags/#parameters_5","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_9","text":"None val","title":"Returns"},{"location":"collections-Flags/#difference","text":"[Source] The symmetric difference of this and that. fun ref difference( that: Flags[A, B] box) : None val","title":"difference"},{"location":"collections-Flags/#parameters_6","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_10","text":"None val","title":"Returns"},{"location":"collections-Flags/#remove","text":"[Source] Unset flags that are set in that. fun ref remove( that: Flags[A, B] box) : None val","title":"remove"},{"location":"collections-Flags/#parameters_7","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_11","text":"None val","title":"Returns"},{"location":"collections-Flags/#add","text":"[Source] This with the flag set. fun box add( flag: A) : Flags[A, B] iso^","title":"add"},{"location":"collections-Flags/#parameters_8","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_12","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#sub","text":"[Source] This with the flag unset. fun box sub( flag: A) : Flags[A, B] iso^","title":"sub"},{"location":"collections-Flags/#parameters_9","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_13","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#op_or","text":"[Source] The union of this and that. fun box op_or( that: Flags[A, B] box) : Flags[A, B] iso^","title":"op_or"},{"location":"collections-Flags/#parameters_10","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_14","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#op_and","text":"[Source] The intersection of this and that. fun box op_and( that: Flags[A, B] box) : Flags[A, B] iso^","title":"op_and"},{"location":"collections-Flags/#parameters_11","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_15","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#op_xor","text":"[Source] The symmetric difference of this and that. fun box op_xor( that: Flags[A, B] box) : Flags[A, B] iso^","title":"op_xor"},{"location":"collections-Flags/#parameters_12","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_16","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#without","text":"[Source] The flags in this that are not in that. fun box without( that: Flags[A, B] box) : Flags[A, B] iso^","title":"without"},{"location":"collections-Flags/#parameters_13","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_17","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#clone","text":"[Source] Create a clone. fun box clone() : Flags[A, B] iso^","title":"clone"},{"location":"collections-Flags/#returns_18","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#eq","text":"[Source] Returns true if this has the same flags set as that. fun box eq( that: Flags[A, B] box) : Bool val","title":"eq"},{"location":"collections-Flags/#parameters_14","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_19","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#lt","text":"[Source] Returns true if the flags set on this are a strict subset of the flags set on that. Flags is only partially ordered, so lt is not the opposite of ge. fun box lt( that: Flags[A, B] box) : Bool val","title":"lt"},{"location":"collections-Flags/#parameters_15","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_20","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#le","text":"[Source] Returns true if the flags set on this are a subset of the flags set on that or they are the same. Flags is only partially ordered, so le is not the opposite of te. fun box le( that: Flags[A, B] box) : Bool val","title":"le"},{"location":"collections-Flags/#parameters_16","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_21","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#gt","text":"[Source] Returns true if the flags set on this are a struct superset of the flags set on that. Flags is only partially ordered, so gt is not the opposite of le. fun box gt( that: Flags[A, B] box) : Bool val","title":"gt"},{"location":"collections-Flags/#parameters_17","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_22","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#ge","text":"[Source] Returns true if the flags set on this are a superset of the flags set on that or they are the same. Flags is only partially ordered, so ge is not the opposite of lt. fun box ge( that: Flags[A, B] box) : Bool val","title":"ge"},{"location":"collections-Flags/#parameters_18","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_23","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#compare","text":"[Source] fun box compare( that: Flags[A, B] box) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"collections-Flags/#parameters_19","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_24","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"collections-Flags/#ne","text":"[Source] fun box ne( that: Flags[A, B] box) : Bool val","title":"ne"},{"location":"collections-Flags/#parameters_20","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_25","text":"Bool val","title":"Returns"},{"location":"collections-HashByteSeq/","text":"HashByteSeq [Source] Hash and equality functions for arbitrary ByteSeq. primitive val HashByteSeq is HashFunction[(String box | Array[U8 val] box)] val, HashFunction64[(String box | Array[U8 val] box)] val Implements HashFunction [( String box | Array [ U8 val] box)] val HashFunction64 [( String box | Array [ U8 val] box)] val Constructors create [Source] new val create() : HashByteSeq val^ Returns HashByteSeq val^ Public Functions hash [Source] fun box hash( x: (String box | Array[U8 val] box)) : USize val Parameters x: ( String box | Array [ U8 val] box) Returns USize val hash64 [Source] fun box hash64( x: (String box | Array[U8 val] box)) : U64 val Parameters x: ( String box | Array [ U8 val] box) Returns U64 val eq [Source] fun box eq( x: (String box | Array[U8 val] box), y: (String box | Array[U8 val] box)) : Bool val Parameters x: ( String box | Array [ U8 val] box) y: ( String box | Array [ U8 val] box) Returns Bool val ne [Source] fun box ne( that: HashByteSeq val) : Bool val Parameters that: HashByteSeq val Returns Bool val","title":"primitive HashByteSeq"},{"location":"collections-HashByteSeq/#hashbyteseq","text":"[Source] Hash and equality functions for arbitrary ByteSeq. primitive val HashByteSeq is HashFunction[(String box | Array[U8 val] box)] val, HashFunction64[(String box | Array[U8 val] box)] val","title":"HashByteSeq"},{"location":"collections-HashByteSeq/#implements","text":"HashFunction [( String box | Array [ U8 val] box)] val HashFunction64 [( String box | Array [ U8 val] box)] val","title":"Implements"},{"location":"collections-HashByteSeq/#constructors","text":"","title":"Constructors"},{"location":"collections-HashByteSeq/#create","text":"[Source] new val create() : HashByteSeq val^","title":"create"},{"location":"collections-HashByteSeq/#returns","text":"HashByteSeq val^","title":"Returns"},{"location":"collections-HashByteSeq/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashByteSeq/#hash","text":"[Source] fun box hash( x: (String box | Array[U8 val] box)) : USize val","title":"hash"},{"location":"collections-HashByteSeq/#parameters","text":"x: ( String box | Array [ U8 val] box)","title":"Parameters"},{"location":"collections-HashByteSeq/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashByteSeq/#hash64","text":"[Source] fun box hash64( x: (String box | Array[U8 val] box)) : U64 val","title":"hash64"},{"location":"collections-HashByteSeq/#parameters_1","text":"x: ( String box | Array [ U8 val] box)","title":"Parameters"},{"location":"collections-HashByteSeq/#returns_2","text":"U64 val","title":"Returns"},{"location":"collections-HashByteSeq/#eq","text":"[Source] fun box eq( x: (String box | Array[U8 val] box), y: (String box | Array[U8 val] box)) : Bool val","title":"eq"},{"location":"collections-HashByteSeq/#parameters_2","text":"x: ( String box | Array [ U8 val] box) y: ( String box | Array [ U8 val] box)","title":"Parameters"},{"location":"collections-HashByteSeq/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-HashByteSeq/#ne","text":"[Source] fun box ne( that: HashByteSeq val) : Bool val","title":"ne"},{"location":"collections-HashByteSeq/#parameters_3","text":"that: HashByteSeq val","title":"Parameters"},{"location":"collections-HashByteSeq/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-HashEq/","text":"HashEq[A: ( Hashable #read Equatable [A] #read)] [Source] primitive val HashEq[A: (Hashable #read Equatable[A] #read)] is HashFunction[A] val Implements HashFunction [A] val Constructors create [Source] new val create() : HashEq[A] val^ Returns HashEq [A] val^ Public Functions hash [Source] Use the hash function from the type parameter. fun box hash( x: box- A) : USize val Parameters x: box- A Returns USize val eq [Source] Use the structural equality function from the type parameter. fun box eq( x: box- A, y: box- A) : Bool val Parameters x: box- A y: box- A Returns Bool val ne [Source] fun box ne( that: HashEq[A] val) : Bool val Parameters that: HashEq [A] val Returns Bool val","title":"primitive HashEq"},{"location":"collections-HashEq/#hasheq91a-hashable-read-equatable91a93-read93","text":"[Source] primitive val HashEq[A: (Hashable #read Equatable[A] #read)] is HashFunction[A] val","title":"HashEq[A: (Hashable #read &amp; Equatable[A] #read)]"},{"location":"collections-HashEq/#implements","text":"HashFunction [A] val","title":"Implements"},{"location":"collections-HashEq/#constructors","text":"","title":"Constructors"},{"location":"collections-HashEq/#create","text":"[Source] new val create() : HashEq[A] val^","title":"create"},{"location":"collections-HashEq/#returns","text":"HashEq [A] val^","title":"Returns"},{"location":"collections-HashEq/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashEq/#hash","text":"[Source] Use the hash function from the type parameter. fun box hash( x: box- A) : USize val","title":"hash"},{"location":"collections-HashEq/#parameters","text":"x: box- A","title":"Parameters"},{"location":"collections-HashEq/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashEq/#eq","text":"[Source] Use the structural equality function from the type parameter. fun box eq( x: box- A, y: box- A) : Bool val","title":"eq"},{"location":"collections-HashEq/#parameters_1","text":"x: box- A y: box- A","title":"Parameters"},{"location":"collections-HashEq/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-HashEq/#ne","text":"[Source] fun box ne( that: HashEq[A] val) : Bool val","title":"ne"},{"location":"collections-HashEq/#parameters_2","text":"that: HashEq [A] val","title":"Parameters"},{"location":"collections-HashEq/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-HashEq64/","text":"HashEq64[A: ( Hashable64 #read Equatable [A] #read)] [Source] primitive val HashEq64[A: (Hashable64 #read Equatable[A] #read)] is HashFunction64[A] val Implements HashFunction64 [A] val Constructors create [Source] new val create() : HashEq64[A] val^ Returns HashEq64 [A] val^ Public Functions hash64 [Source] Use the hash function from the type parameter. fun box hash64( x: box- A) : U64 val Parameters x: box- A Returns U64 val eq [Source] Use the structural equality function from the type parameter. fun box eq( x: box- A, y: box- A) : Bool val Parameters x: box- A y: box- A Returns Bool val ne [Source] fun box ne( that: HashEq64[A] val) : Bool val Parameters that: HashEq64 [A] val Returns Bool val","title":"primitive HashEq64"},{"location":"collections-HashEq64/#hasheq6491a-hashable64-read-equatable91a93-read93","text":"[Source] primitive val HashEq64[A: (Hashable64 #read Equatable[A] #read)] is HashFunction64[A] val","title":"HashEq64[A: (Hashable64 #read &amp; Equatable[A] #read)]"},{"location":"collections-HashEq64/#implements","text":"HashFunction64 [A] val","title":"Implements"},{"location":"collections-HashEq64/#constructors","text":"","title":"Constructors"},{"location":"collections-HashEq64/#create","text":"[Source] new val create() : HashEq64[A] val^","title":"create"},{"location":"collections-HashEq64/#returns","text":"HashEq64 [A] val^","title":"Returns"},{"location":"collections-HashEq64/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashEq64/#hash64","text":"[Source] Use the hash function from the type parameter. fun box hash64( x: box- A) : U64 val","title":"hash64"},{"location":"collections-HashEq64/#parameters","text":"x: box- A","title":"Parameters"},{"location":"collections-HashEq64/#returns_1","text":"U64 val","title":"Returns"},{"location":"collections-HashEq64/#eq","text":"[Source] Use the structural equality function from the type parameter. fun box eq( x: box- A, y: box- A) : Bool val","title":"eq"},{"location":"collections-HashEq64/#parameters_1","text":"x: box- A y: box- A","title":"Parameters"},{"location":"collections-HashEq64/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-HashEq64/#ne","text":"[Source] fun box ne( that: HashEq64[A] val) : Bool val","title":"ne"},{"location":"collections-HashEq64/#parameters_2","text":"that: HashEq64 [A] val","title":"Parameters"},{"location":"collections-HashEq64/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-HashFunction/","text":"HashFunction[A: A] [Source] A pluggable hash function. interface val HashFunction[A: A] Constructors create [Source] Data structures create instances internally. Use a primitive if possible. new val create() : HashFunction[A] val^ Returns HashFunction [A] val^ Public Functions hash [Source] Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun box hash( x: box- A!) : USize val Parameters x: box- A! Returns USize val eq [Source] Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. fun box eq( x: box- A!, y: box- A!) : Bool val Parameters x: box- A! y: box- A! Returns Bool val","title":"interface HashFunction"},{"location":"collections-HashFunction/#hashfunction91a-a93","text":"[Source] A pluggable hash function. interface val HashFunction[A: A]","title":"HashFunction[A: A]"},{"location":"collections-HashFunction/#constructors","text":"","title":"Constructors"},{"location":"collections-HashFunction/#create","text":"[Source] Data structures create instances internally. Use a primitive if possible. new val create() : HashFunction[A] val^","title":"create"},{"location":"collections-HashFunction/#returns","text":"HashFunction [A] val^","title":"Returns"},{"location":"collections-HashFunction/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashFunction/#hash","text":"[Source] Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun box hash( x: box- A!) : USize val","title":"hash"},{"location":"collections-HashFunction/#parameters","text":"x: box- A!","title":"Parameters"},{"location":"collections-HashFunction/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashFunction/#eq","text":"[Source] Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. fun box eq( x: box- A!, y: box- A!) : Bool val","title":"eq"},{"location":"collections-HashFunction/#parameters_1","text":"x: box- A! y: box- A!","title":"Parameters"},{"location":"collections-HashFunction/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-HashFunction64/","text":"HashFunction64[A: A] [Source] A pluggable hash function with 64-bit hashes. interface val HashFunction64[A: A] Constructors create [Source] Data structures create instances internally. Use a primitive if possible. new val create() : HashFunction64[A] val^ Returns HashFunction64 [A] val^ Public Functions hash64 [Source] Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun box hash64( x: box- A!) : U64 val Parameters x: box- A! Returns U64 val eq [Source] Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. fun box eq( x: box- A!, y: box- A!) : Bool val Parameters x: box- A! y: box- A! Returns Bool val","title":"interface HashFunction64"},{"location":"collections-HashFunction64/#hashfunction6491a-a93","text":"[Source] A pluggable hash function with 64-bit hashes. interface val HashFunction64[A: A]","title":"HashFunction64[A: A]"},{"location":"collections-HashFunction64/#constructors","text":"","title":"Constructors"},{"location":"collections-HashFunction64/#create","text":"[Source] Data structures create instances internally. Use a primitive if possible. new val create() : HashFunction64[A] val^","title":"create"},{"location":"collections-HashFunction64/#returns","text":"HashFunction64 [A] val^","title":"Returns"},{"location":"collections-HashFunction64/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashFunction64/#hash64","text":"[Source] Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun box hash64( x: box- A!) : U64 val","title":"hash64"},{"location":"collections-HashFunction64/#parameters","text":"x: box- A!","title":"Parameters"},{"location":"collections-HashFunction64/#returns_1","text":"U64 val","title":"Returns"},{"location":"collections-HashFunction64/#eq","text":"[Source] Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. fun box eq( x: box- A!, y: box- A!) : Bool val","title":"eq"},{"location":"collections-HashFunction64/#parameters_1","text":"x: box- A! y: box- A!","title":"Parameters"},{"location":"collections-HashFunction64/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-HashIs/","text":"HashIs[A: A] [Source] primitive val HashIs[A: A] is HashFunction[A] val, HashFunction64[A] val Implements HashFunction [A] val HashFunction64 [A] val Constructors create [Source] new val create() : HashIs[A] val^ Returns HashIs [A] val^ Public Functions hash [Source] Hash the identity rather than the contents. fun box hash( x: box- A!) : USize val Parameters x: box- A! Returns USize val hash64 [Source] Hash the identity rather than the contents. fun box hash64( x: box- A!) : U64 val Parameters x: box- A! Returns U64 val eq [Source] Determine equality by identity rather than structurally. fun box eq( x: box- A!, y: box- A!) : Bool val Parameters x: box- A! y: box- A! Returns Bool val ne [Source] fun box ne( that: HashIs[A] val) : Bool val Parameters that: HashIs [A] val Returns Bool val","title":"primitive HashIs"},{"location":"collections-HashIs/#hashis91a-a93","text":"[Source] primitive val HashIs[A: A] is HashFunction[A] val, HashFunction64[A] val","title":"HashIs[A: A]"},{"location":"collections-HashIs/#implements","text":"HashFunction [A] val HashFunction64 [A] val","title":"Implements"},{"location":"collections-HashIs/#constructors","text":"","title":"Constructors"},{"location":"collections-HashIs/#create","text":"[Source] new val create() : HashIs[A] val^","title":"create"},{"location":"collections-HashIs/#returns","text":"HashIs [A] val^","title":"Returns"},{"location":"collections-HashIs/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashIs/#hash","text":"[Source] Hash the identity rather than the contents. fun box hash( x: box- A!) : USize val","title":"hash"},{"location":"collections-HashIs/#parameters","text":"x: box- A!","title":"Parameters"},{"location":"collections-HashIs/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashIs/#hash64","text":"[Source] Hash the identity rather than the contents. fun box hash64( x: box- A!) : U64 val","title":"hash64"},{"location":"collections-HashIs/#parameters_1","text":"x: box- A!","title":"Parameters"},{"location":"collections-HashIs/#returns_2","text":"U64 val","title":"Returns"},{"location":"collections-HashIs/#eq","text":"[Source] Determine equality by identity rather than structurally. fun box eq( x: box- A!, y: box- A!) : Bool val","title":"eq"},{"location":"collections-HashIs/#parameters_2","text":"x: box- A! y: box- A!","title":"Parameters"},{"location":"collections-HashIs/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-HashIs/#ne","text":"[Source] fun box ne( that: HashIs[A] val) : Bool val","title":"ne"},{"location":"collections-HashIs/#parameters_3","text":"that: HashIs [A] val","title":"Parameters"},{"location":"collections-HashIs/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-HashMap/","text":"HashMap[K: K, V: V, H: HashFunction [K] val] [Source] A quadratic probing hash map. Resize occurs at a load factor of 0.75. A resized map has 2 times the space. The hash function can be plugged in to the type to create different kinds of maps. class ref HashMap[K: K, V: V, H: HashFunction[K] val] Constructors create [Source] Create an array with space for prealloc elements without triggering a resize. Defaults to 6. new ref create( prealloc: USize val = seq) : HashMap[K, V, H] ref^ Parameters prealloc: USize val = seq Returns HashMap [K, V, H] ref^ Public Functions size [Source] The number of items in the map. fun box size() : USize val Returns USize val space [Source] The available space in the map. Resize will happen when size / space = 0.75. fun box space() : USize val Returns USize val apply [Source] Gets a value from the map. Raises an error if no such item exists. fun box apply( key: box- K!) : this- V ? Parameters key: box- K! Returns this- V ? update [Source] Sets a value in the map. Returns the old value if there was one, otherwise returns None. If there was no previous value, this may trigger a resize. fun ref update( key: K, value: V) : (V^ | None val) Parameters key: K value: V Returns (V^ | None val) upsert [Source] Combines a provided value with the current value for the provided key using the provided function. If the provided key has not been added to the map yet, it sets its value to the provided value. As a simple example, say we had a map with I64 values and we wanted to add 4 to the current value for key \"test\", which let's say is currently 2. We call m.upsert(\"test\", 4, {(x, y) = x - y }) This changes the value associated with \"test\" to -2. If we have not yet added the key \"new-key\" to the map and we call m.upsert(\"new-key\", 4, {(x, y) = x - y }) then \"new-key\" is added to the map with a value of -4. Returns the value that we set the key to fun ref upsert( key: K, value: V, f: {(V, V): V^}[K, V, H] box) : V ? Parameters key: K value: V f: {(V, V): V^}[K, V, H] box Returns V ? insert [Source] Set a value in the map. Returns the new value, allowing reuse. fun ref insert( key: K, value: V) : V ? Parameters key: K value: V Returns V ? insert_if_absent [Source] Set a value in the map if the key doesn't already exist in the Map. Saves an extra lookup when doing a pattern like: if not my_map.contains(my_key) then my_map(my_key) = my_value end Returns the value, the same as insert , allowing 'insert_if_absent' to be used as a drop-in replacement for insert . fun ref insert_if_absent( key: K, value: V) : V ? Parameters key: K value: V Returns V ? remove [Source] Delete a value from the map and return it. Raises an error if there was no value for the given key. fun ref remove( key: box- K!) : (K^ , V^) ? Parameters key: box- K! Returns (K^ , V^) ? get_or_else [Source] Get the value associated with provided key if present. Otherwise, return the provided alternate value. fun box get_or_else( key: box- K!, alt: this- V) : this- V Parameters key: box- K! alt: this- V Returns this- V contains [Source] Checks whether the map contains the key k fun box contains( k: box- K!) : Bool val Parameters k: box- K! Returns Bool val concat [Source] Add K, V pairs from the iterator to the map. fun ref concat( iter: Iterator[(K^ , V^)] ref) : None val Parameters iter: Iterator [(K^ , V^)] ref Returns None val add[optional H2: HashFunction [this- K!] val] [Source] This with the new (key, value) mapping. fun box add[optional H2: HashFunction[this- K!] val]( key: this- K!, value: this- V!) : HashMap[this- K!, this- V!, H2] ref^ Parameters key: this- K! value: this- V! Returns HashMap [this- K!, this- V!, H2] ref^ sub[optional H2: HashFunction [this- K!] val] [Source] This without the given key. fun box sub[optional H2: HashFunction[this- K!] val]( key: this- K!, value: this- V!) : HashMap[this- K!, this- V!, H2] ref^ Parameters key: this- K! value: this- V! Returns HashMap [this- K!, this- V!, H2] ref^ next_index [Source] Given an index, return the next index that has a populated key and value. Raise an error if there is no next populated index. fun box next_index( prev: USize val = seq) : USize val ? Parameters prev: USize val = seq Returns USize val ? index [Source] Returns the key and value at a given index. Raise an error if the index is not populated. fun box index( i: USize val) : (this- K , this- V) ? Parameters i: USize val Returns (this- K , this- V) ? compact [Source] Minimise the memory used for the map. fun ref compact() : None val Returns None val clone[optional H2: HashFunction [this- K!] val] [Source] Create a clone. The key and value types may be different due to aliasing and viewpoint adaptation. fun box clone[optional H2: HashFunction[this- K!] val]() : HashMap[this- K!, this- V!, H2] ref^ Returns HashMap [this- K!, this- V!, H2] ref^ clear [Source] Remove all entries. fun ref clear() : None val Returns None val keys [Source] Return an iterator over the keys. fun box keys() : MapKeys[K, V, H, this- HashMap[K, V, H] ref] ref^ Returns MapKeys [K, V, H, this- HashMap [K, V, H] ref] ref^ values [Source] Return an iterator over the values. fun box values() : MapValues[K, V, H, this- HashMap[K, V, H] ref] ref^ Returns MapValues [K, V, H, this- HashMap [K, V, H] ref] ref^ pairs [Source] Return an iterator over the keys and values. fun box pairs() : MapPairs[K, V, H, this- HashMap[K, V, H] ref] ref^ Returns MapPairs [K, V, H, this- HashMap [K, V, H] ref] ref^ Private Functions _search [Source] Return a slot number and whether or not it's currently occupied. fun box _search( key: box- K!) : (USize val , Bool val) Parameters key: box- K! Returns ( USize val , Bool val) _resize [Source] Change the available space. fun ref _resize( len: USize val) : None val Parameters len: USize val Returns None val","title":"class HashMap"},{"location":"collections-HashMap/#hashmap91k-k-v-v-h-hashfunction91k93-val93","text":"[Source] A quadratic probing hash map. Resize occurs at a load factor of 0.75. A resized map has 2 times the space. The hash function can be plugged in to the type to create different kinds of maps. class ref HashMap[K: K, V: V, H: HashFunction[K] val]","title":"HashMap[K: K, V: V, H: HashFunction[K] val]"},{"location":"collections-HashMap/#constructors","text":"","title":"Constructors"},{"location":"collections-HashMap/#create","text":"[Source] Create an array with space for prealloc elements without triggering a resize. Defaults to 6. new ref create( prealloc: USize val = seq) : HashMap[K, V, H] ref^","title":"create"},{"location":"collections-HashMap/#parameters","text":"prealloc: USize val = seq","title":"Parameters"},{"location":"collections-HashMap/#returns","text":"HashMap [K, V, H] ref^","title":"Returns"},{"location":"collections-HashMap/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashMap/#size","text":"[Source] The number of items in the map. fun box size() : USize val","title":"size"},{"location":"collections-HashMap/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashMap/#space","text":"[Source] The available space in the map. Resize will happen when size / space = 0.75. fun box space() : USize val","title":"space"},{"location":"collections-HashMap/#returns_2","text":"USize val","title":"Returns"},{"location":"collections-HashMap/#apply","text":"[Source] Gets a value from the map. Raises an error if no such item exists. fun box apply( key: box- K!) : this- V ?","title":"apply"},{"location":"collections-HashMap/#parameters_1","text":"key: box- K!","title":"Parameters"},{"location":"collections-HashMap/#returns_3","text":"this- V ?","title":"Returns"},{"location":"collections-HashMap/#update","text":"[Source] Sets a value in the map. Returns the old value if there was one, otherwise returns None. If there was no previous value, this may trigger a resize. fun ref update( key: K, value: V) : (V^ | None val)","title":"update"},{"location":"collections-HashMap/#parameters_2","text":"key: K value: V","title":"Parameters"},{"location":"collections-HashMap/#returns_4","text":"(V^ | None val)","title":"Returns"},{"location":"collections-HashMap/#upsert","text":"[Source] Combines a provided value with the current value for the provided key using the provided function. If the provided key has not been added to the map yet, it sets its value to the provided value. As a simple example, say we had a map with I64 values and we wanted to add 4 to the current value for key \"test\", which let's say is currently 2. We call m.upsert(\"test\", 4, {(x, y) = x - y }) This changes the value associated with \"test\" to -2. If we have not yet added the key \"new-key\" to the map and we call m.upsert(\"new-key\", 4, {(x, y) = x - y }) then \"new-key\" is added to the map with a value of -4. Returns the value that we set the key to fun ref upsert( key: K, value: V, f: {(V, V): V^}[K, V, H] box) : V ?","title":"upsert"},{"location":"collections-HashMap/#parameters_3","text":"key: K value: V f: {(V, V): V^}[K, V, H] box","title":"Parameters"},{"location":"collections-HashMap/#returns_5","text":"V ?","title":"Returns"},{"location":"collections-HashMap/#insert","text":"[Source] Set a value in the map. Returns the new value, allowing reuse. fun ref insert( key: K, value: V) : V ?","title":"insert"},{"location":"collections-HashMap/#parameters_4","text":"key: K value: V","title":"Parameters"},{"location":"collections-HashMap/#returns_6","text":"V ?","title":"Returns"},{"location":"collections-HashMap/#insert_if_absent","text":"[Source] Set a value in the map if the key doesn't already exist in the Map. Saves an extra lookup when doing a pattern like: if not my_map.contains(my_key) then my_map(my_key) = my_value end Returns the value, the same as insert , allowing 'insert_if_absent' to be used as a drop-in replacement for insert . fun ref insert_if_absent( key: K, value: V) : V ?","title":"insert_if_absent"},{"location":"collections-HashMap/#parameters_5","text":"key: K value: V","title":"Parameters"},{"location":"collections-HashMap/#returns_7","text":"V ?","title":"Returns"},{"location":"collections-HashMap/#remove","text":"[Source] Delete a value from the map and return it. Raises an error if there was no value for the given key. fun ref remove( key: box- K!) : (K^ , V^) ?","title":"remove"},{"location":"collections-HashMap/#parameters_6","text":"key: box- K!","title":"Parameters"},{"location":"collections-HashMap/#returns_8","text":"(K^ , V^) ?","title":"Returns"},{"location":"collections-HashMap/#get_or_else","text":"[Source] Get the value associated with provided key if present. Otherwise, return the provided alternate value. fun box get_or_else( key: box- K!, alt: this- V) : this- V","title":"get_or_else"},{"location":"collections-HashMap/#parameters_7","text":"key: box- K! alt: this- V","title":"Parameters"},{"location":"collections-HashMap/#returns_9","text":"this- V","title":"Returns"},{"location":"collections-HashMap/#contains","text":"[Source] Checks whether the map contains the key k fun box contains( k: box- K!) : Bool val","title":"contains"},{"location":"collections-HashMap/#parameters_8","text":"k: box- K!","title":"Parameters"},{"location":"collections-HashMap/#returns_10","text":"Bool val","title":"Returns"},{"location":"collections-HashMap/#concat","text":"[Source] Add K, V pairs from the iterator to the map. fun ref concat( iter: Iterator[(K^ , V^)] ref) : None val","title":"concat"},{"location":"collections-HashMap/#parameters_9","text":"iter: Iterator [(K^ , V^)] ref","title":"Parameters"},{"location":"collections-HashMap/#returns_11","text":"None val","title":"Returns"},{"location":"collections-HashMap/#add91optional-h2-hashfunction91this-k93-val93","text":"[Source] This with the new (key, value) mapping. fun box add[optional H2: HashFunction[this- K!] val]( key: this- K!, value: this- V!) : HashMap[this- K!, this- V!, H2] ref^","title":"add[optional H2: HashFunction[this-&gt;K!] val]"},{"location":"collections-HashMap/#parameters_10","text":"key: this- K! value: this- V!","title":"Parameters"},{"location":"collections-HashMap/#returns_12","text":"HashMap [this- K!, this- V!, H2] ref^","title":"Returns"},{"location":"collections-HashMap/#sub91optional-h2-hashfunction91this-k93-val93","text":"[Source] This without the given key. fun box sub[optional H2: HashFunction[this- K!] val]( key: this- K!, value: this- V!) : HashMap[this- K!, this- V!, H2] ref^","title":"sub[optional H2: HashFunction[this-&gt;K!] val]"},{"location":"collections-HashMap/#parameters_11","text":"key: this- K! value: this- V!","title":"Parameters"},{"location":"collections-HashMap/#returns_13","text":"HashMap [this- K!, this- V!, H2] ref^","title":"Returns"},{"location":"collections-HashMap/#next_index","text":"[Source] Given an index, return the next index that has a populated key and value. Raise an error if there is no next populated index. fun box next_index( prev: USize val = seq) : USize val ?","title":"next_index"},{"location":"collections-HashMap/#parameters_12","text":"prev: USize val = seq","title":"Parameters"},{"location":"collections-HashMap/#returns_14","text":"USize val ?","title":"Returns"},{"location":"collections-HashMap/#index","text":"[Source] Returns the key and value at a given index. Raise an error if the index is not populated. fun box index( i: USize val) : (this- K , this- V) ?","title":"index"},{"location":"collections-HashMap/#parameters_13","text":"i: USize val","title":"Parameters"},{"location":"collections-HashMap/#returns_15","text":"(this- K , this- V) ?","title":"Returns"},{"location":"collections-HashMap/#compact","text":"[Source] Minimise the memory used for the map. fun ref compact() : None val","title":"compact"},{"location":"collections-HashMap/#returns_16","text":"None val","title":"Returns"},{"location":"collections-HashMap/#clone91optional-h2-hashfunction91this-k93-val93","text":"[Source] Create a clone. The key and value types may be different due to aliasing and viewpoint adaptation. fun box clone[optional H2: HashFunction[this- K!] val]() : HashMap[this- K!, this- V!, H2] ref^","title":"clone[optional H2: HashFunction[this-&gt;K!] val]"},{"location":"collections-HashMap/#returns_17","text":"HashMap [this- K!, this- V!, H2] ref^","title":"Returns"},{"location":"collections-HashMap/#clear","text":"[Source] Remove all entries. fun ref clear() : None val","title":"clear"},{"location":"collections-HashMap/#returns_18","text":"None val","title":"Returns"},{"location":"collections-HashMap/#keys","text":"[Source] Return an iterator over the keys. fun box keys() : MapKeys[K, V, H, this- HashMap[K, V, H] ref] ref^","title":"keys"},{"location":"collections-HashMap/#returns_19","text":"MapKeys [K, V, H, this- HashMap [K, V, H] ref] ref^","title":"Returns"},{"location":"collections-HashMap/#values","text":"[Source] Return an iterator over the values. fun box values() : MapValues[K, V, H, this- HashMap[K, V, H] ref] ref^","title":"values"},{"location":"collections-HashMap/#returns_20","text":"MapValues [K, V, H, this- HashMap [K, V, H] ref] ref^","title":"Returns"},{"location":"collections-HashMap/#pairs","text":"[Source] Return an iterator over the keys and values. fun box pairs() : MapPairs[K, V, H, this- HashMap[K, V, H] ref] ref^","title":"pairs"},{"location":"collections-HashMap/#returns_21","text":"MapPairs [K, V, H, this- HashMap [K, V, H] ref] ref^","title":"Returns"},{"location":"collections-HashMap/#private-functions","text":"","title":"Private Functions"},{"location":"collections-HashMap/#_search","text":"[Source] Return a slot number and whether or not it's currently occupied. fun box _search( key: box- K!) : (USize val , Bool val)","title":"_search"},{"location":"collections-HashMap/#parameters_14","text":"key: box- K!","title":"Parameters"},{"location":"collections-HashMap/#returns_22","text":"( USize val , Bool val)","title":"Returns"},{"location":"collections-HashMap/#_resize","text":"[Source] Change the available space. fun ref _resize( len: USize val) : None val","title":"_resize"},{"location":"collections-HashMap/#parameters_15","text":"len: USize val","title":"Parameters"},{"location":"collections-HashMap/#returns_23","text":"None val","title":"Returns"},{"location":"collections-HashSet/","text":"HashSet[A: A, H: HashFunction [A!] val] [Source] A set, built on top of a HashMap. This is implemented as map of an alias of a type to itself class ref HashSet[A: A, H: HashFunction[A!] val] is Comparable[HashSet[A, H] box] ref Implements Comparable [ HashSet [A, H] box] ref Constructors create [Source] Defaults to a prealloc of 8. new ref create( prealloc: USize val = seq) : HashSet[A, H] ref^ Parameters prealloc: USize val = seq Returns HashSet [A, H] ref^ Public Functions size [Source] The number of items in the set. fun box size() : USize val Returns USize val space [Source] The available space in the set. fun box space() : USize val Returns USize val apply [Source] Return the value if its in the set, otherwise raise an error. fun box apply( value: box- A!) : this- A ? Parameters value: box- A! Returns this- A ? contains [Source] Checks whether the set contains the value. fun box contains( value: box- A!) : Bool val Parameters value: box- A! Returns Bool val clear [Source] Remove all elements from the set. fun ref clear() : None val Returns None val set [Source] Add a value to the set. fun ref set( value: A) : None val Parameters value: A Returns None val unset [Source] Remove a value from the set. fun ref unset( value: box- A!) : None val Parameters value: box- A! Returns None val extract [Source] Remove a value from the set and return it. Raises an error if the value wasn't in the set. fun ref extract( value: box- A!) : A^ ? Parameters value: box- A! Returns A^ ? union [Source] Add everything in that to the set. fun ref union( that: Iterator[A^] ref) : None val Parameters that: Iterator [A^] ref Returns None val intersect[optional K: HashFunction [box- A!] val] [Source] Remove everything that isn't in that. fun ref intersect[optional K: HashFunction[box- A!] val]( that: HashSet[box- A!, K] ref) : None val Parameters that: HashSet [box- A!, K] ref Returns None val difference [Source] Remove elements in this which are also in that. Add elements in that which are not in this. fun ref difference( that: Iterator[A^] ref) : None val Parameters that: Iterator [A^] ref Returns None val remove [Source] Remove everything that is in that. fun ref remove( that: Iterator[box- A!] ref) : None val Parameters that: Iterator [box- A!] ref Returns None val add[optional K: HashFunction [this- A!] val] [Source] Add a value to the set. fun box add[optional K: HashFunction[this- A!] val]( value: this- A!) : HashSet[this- A!, K] ref^ Parameters value: this- A! Returns HashSet [this- A!, K] ref^ sub[optional K: HashFunction [this- A!] val] [Source] Remove a value from the set. fun box sub[optional K: HashFunction[this- A!] val]( value: box- this- A!) : HashSet[this- A!, K] ref^ Parameters value: box- this- A! Returns HashSet [this- A!, K] ref^ op_or[optional K: HashFunction [this- A!] val] [Source] Create a set with the elements of both this and that. fun box op_or[optional K: HashFunction[this- A!] val]( that: this- HashSet[A, H] ref) : HashSet[this- A!, K] ref^ Parameters that: this- HashSet [A, H] ref Returns HashSet [this- A!, K] ref^ op_and[optional K: HashFunction [this- A!] val] [Source] Create a set with the elements that are in both this and that. fun box op_and[optional K: HashFunction[this- A!] val]( that: this- HashSet[A, H] ref) : HashSet[this- A!, K] ref^ Parameters that: this- HashSet [A, H] ref Returns HashSet [this- A!, K] ref^ op_xor[optional K: HashFunction [this- A!] val] [Source] Create a set with the elements that are in either set but not both. fun box op_xor[optional K: HashFunction[this- A!] val]( that: this- HashSet[A, H] ref) : HashSet[this- A!, K] ref^ Parameters that: this- HashSet [A, H] ref Returns HashSet [this- A!, K] ref^ without[optional K: HashFunction [this- A!] val] [Source] Create a set with the elements of this that are not in that. fun box without[optional K: HashFunction[this- A!] val]( that: this- HashSet[A, H] ref) : HashSet[this- A!, K] ref^ Parameters that: this- HashSet [A, H] ref Returns HashSet [this- A!, K] ref^ clone[optional K: HashFunction [this- A!] val] [Source] Create a clone. The element type may be different due to aliasing and viewpoint adaptation. fun box clone[optional K: HashFunction[this- A!] val]() : HashSet[this- A!, K] ref^ Returns HashSet [this- A!, K] ref^ eq [Source] Returns true if the sets contain the same elements. fun box eq( that: HashSet[A, H] box) : Bool val Parameters that: HashSet [A, H] box Returns Bool val ne [Source] Returns false if the sets contain the same elements. fun box ne( that: HashSet[A, H] box) : Bool val Parameters that: HashSet [A, H] box Returns Bool val lt [Source] Returns true if every element in this is also in that, and this has fewer elements than that. fun box lt( that: HashSet[A, H] box) : Bool val Parameters that: HashSet [A, H] box Returns Bool val le [Source] Returns true if every element in this is also in that. fun box le( that: HashSet[A, H] box) : Bool val Parameters that: HashSet [A, H] box Returns Bool val gt [Source] Returns true if every element in that is also in this, and this has more elements than that. fun box gt( that: HashSet[A, H] box) : Bool val Parameters that: HashSet [A, H] box Returns Bool val ge [Source] Returns true if every element in that is also in this. fun box ge( that: HashSet[A, H] box) : Bool val Parameters that: HashSet [A, H] box Returns Bool val next_index [Source] Given an index, return the next index that has a populated value. Raise an error if there is no next populated index. fun box next_index( prev: USize val = seq) : USize val ? Parameters prev: USize val = seq Returns USize val ? index [Source] Returns the value at a given index. Raise an error if the index is not populated. fun box index( i: USize val) : this- A ? Parameters i: USize val Returns this- A ? values [Source] Return an iterator over the values. fun box values() : SetValues[A, H, this- HashSet[A, H] ref] ref^ Returns SetValues [A, H, this- HashSet [A, H] ref] ref^ compare [Source] fun box compare( that: HashSet[A, H] box) : (Less val | Equal val | Greater val) Parameters that: HashSet [A, H] box Returns ( Less val | Equal val | Greater val)","title":"class HashSet"},{"location":"collections-HashSet/#hashset91a-a-h-hashfunction91a93-val93","text":"[Source] A set, built on top of a HashMap. This is implemented as map of an alias of a type to itself class ref HashSet[A: A, H: HashFunction[A!] val] is Comparable[HashSet[A, H] box] ref","title":"HashSet[A: A, H: HashFunction[A!] val]"},{"location":"collections-HashSet/#implements","text":"Comparable [ HashSet [A, H] box] ref","title":"Implements"},{"location":"collections-HashSet/#constructors","text":"","title":"Constructors"},{"location":"collections-HashSet/#create","text":"[Source] Defaults to a prealloc of 8. new ref create( prealloc: USize val = seq) : HashSet[A, H] ref^","title":"create"},{"location":"collections-HashSet/#parameters","text":"prealloc: USize val = seq","title":"Parameters"},{"location":"collections-HashSet/#returns","text":"HashSet [A, H] ref^","title":"Returns"},{"location":"collections-HashSet/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashSet/#size","text":"[Source] The number of items in the set. fun box size() : USize val","title":"size"},{"location":"collections-HashSet/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashSet/#space","text":"[Source] The available space in the set. fun box space() : USize val","title":"space"},{"location":"collections-HashSet/#returns_2","text":"USize val","title":"Returns"},{"location":"collections-HashSet/#apply","text":"[Source] Return the value if its in the set, otherwise raise an error. fun box apply( value: box- A!) : this- A ?","title":"apply"},{"location":"collections-HashSet/#parameters_1","text":"value: box- A!","title":"Parameters"},{"location":"collections-HashSet/#returns_3","text":"this- A ?","title":"Returns"},{"location":"collections-HashSet/#contains","text":"[Source] Checks whether the set contains the value. fun box contains( value: box- A!) : Bool val","title":"contains"},{"location":"collections-HashSet/#parameters_2","text":"value: box- A!","title":"Parameters"},{"location":"collections-HashSet/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#clear","text":"[Source] Remove all elements from the set. fun ref clear() : None val","title":"clear"},{"location":"collections-HashSet/#returns_5","text":"None val","title":"Returns"},{"location":"collections-HashSet/#set","text":"[Source] Add a value to the set. fun ref set( value: A) : None val","title":"set"},{"location":"collections-HashSet/#parameters_3","text":"value: A","title":"Parameters"},{"location":"collections-HashSet/#returns_6","text":"None val","title":"Returns"},{"location":"collections-HashSet/#unset","text":"[Source] Remove a value from the set. fun ref unset( value: box- A!) : None val","title":"unset"},{"location":"collections-HashSet/#parameters_4","text":"value: box- A!","title":"Parameters"},{"location":"collections-HashSet/#returns_7","text":"None val","title":"Returns"},{"location":"collections-HashSet/#extract","text":"[Source] Remove a value from the set and return it. Raises an error if the value wasn't in the set. fun ref extract( value: box- A!) : A^ ?","title":"extract"},{"location":"collections-HashSet/#parameters_5","text":"value: box- A!","title":"Parameters"},{"location":"collections-HashSet/#returns_8","text":"A^ ?","title":"Returns"},{"location":"collections-HashSet/#union","text":"[Source] Add everything in that to the set. fun ref union( that: Iterator[A^] ref) : None val","title":"union"},{"location":"collections-HashSet/#parameters_6","text":"that: Iterator [A^] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_9","text":"None val","title":"Returns"},{"location":"collections-HashSet/#intersect91optional-k-hashfunction91box-a93-val93","text":"[Source] Remove everything that isn't in that. fun ref intersect[optional K: HashFunction[box- A!] val]( that: HashSet[box- A!, K] ref) : None val","title":"intersect[optional K: HashFunction[box-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_7","text":"that: HashSet [box- A!, K] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_10","text":"None val","title":"Returns"},{"location":"collections-HashSet/#difference","text":"[Source] Remove elements in this which are also in that. Add elements in that which are not in this. fun ref difference( that: Iterator[A^] ref) : None val","title":"difference"},{"location":"collections-HashSet/#parameters_8","text":"that: Iterator [A^] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_11","text":"None val","title":"Returns"},{"location":"collections-HashSet/#remove","text":"[Source] Remove everything that is in that. fun ref remove( that: Iterator[box- A!] ref) : None val","title":"remove"},{"location":"collections-HashSet/#parameters_9","text":"that: Iterator [box- A!] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_12","text":"None val","title":"Returns"},{"location":"collections-HashSet/#add91optional-k-hashfunction91this-a93-val93","text":"[Source] Add a value to the set. fun box add[optional K: HashFunction[this- A!] val]( value: this- A!) : HashSet[this- A!, K] ref^","title":"add[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_10","text":"value: this- A!","title":"Parameters"},{"location":"collections-HashSet/#returns_13","text":"HashSet [this- A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#sub91optional-k-hashfunction91this-a93-val93","text":"[Source] Remove a value from the set. fun box sub[optional K: HashFunction[this- A!] val]( value: box- this- A!) : HashSet[this- A!, K] ref^","title":"sub[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_11","text":"value: box- this- A!","title":"Parameters"},{"location":"collections-HashSet/#returns_14","text":"HashSet [this- A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#op_or91optional-k-hashfunction91this-a93-val93","text":"[Source] Create a set with the elements of both this and that. fun box op_or[optional K: HashFunction[this- A!] val]( that: this- HashSet[A, H] ref) : HashSet[this- A!, K] ref^","title":"op_or[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_12","text":"that: this- HashSet [A, H] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_15","text":"HashSet [this- A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#op_and91optional-k-hashfunction91this-a93-val93","text":"[Source] Create a set with the elements that are in both this and that. fun box op_and[optional K: HashFunction[this- A!] val]( that: this- HashSet[A, H] ref) : HashSet[this- A!, K] ref^","title":"op_and[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_13","text":"that: this- HashSet [A, H] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_16","text":"HashSet [this- A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#op_xor91optional-k-hashfunction91this-a93-val93","text":"[Source] Create a set with the elements that are in either set but not both. fun box op_xor[optional K: HashFunction[this- A!] val]( that: this- HashSet[A, H] ref) : HashSet[this- A!, K] ref^","title":"op_xor[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_14","text":"that: this- HashSet [A, H] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_17","text":"HashSet [this- A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#without91optional-k-hashfunction91this-a93-val93","text":"[Source] Create a set with the elements of this that are not in that. fun box without[optional K: HashFunction[this- A!] val]( that: this- HashSet[A, H] ref) : HashSet[this- A!, K] ref^","title":"without[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_15","text":"that: this- HashSet [A, H] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_18","text":"HashSet [this- A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#clone91optional-k-hashfunction91this-a93-val93","text":"[Source] Create a clone. The element type may be different due to aliasing and viewpoint adaptation. fun box clone[optional K: HashFunction[this- A!] val]() : HashSet[this- A!, K] ref^","title":"clone[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#returns_19","text":"HashSet [this- A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#eq","text":"[Source] Returns true if the sets contain the same elements. fun box eq( that: HashSet[A, H] box) : Bool val","title":"eq"},{"location":"collections-HashSet/#parameters_16","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_20","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#ne","text":"[Source] Returns false if the sets contain the same elements. fun box ne( that: HashSet[A, H] box) : Bool val","title":"ne"},{"location":"collections-HashSet/#parameters_17","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_21","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#lt","text":"[Source] Returns true if every element in this is also in that, and this has fewer elements than that. fun box lt( that: HashSet[A, H] box) : Bool val","title":"lt"},{"location":"collections-HashSet/#parameters_18","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_22","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#le","text":"[Source] Returns true if every element in this is also in that. fun box le( that: HashSet[A, H] box) : Bool val","title":"le"},{"location":"collections-HashSet/#parameters_19","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_23","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#gt","text":"[Source] Returns true if every element in that is also in this, and this has more elements than that. fun box gt( that: HashSet[A, H] box) : Bool val","title":"gt"},{"location":"collections-HashSet/#parameters_20","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_24","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#ge","text":"[Source] Returns true if every element in that is also in this. fun box ge( that: HashSet[A, H] box) : Bool val","title":"ge"},{"location":"collections-HashSet/#parameters_21","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_25","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#next_index","text":"[Source] Given an index, return the next index that has a populated value. Raise an error if there is no next populated index. fun box next_index( prev: USize val = seq) : USize val ?","title":"next_index"},{"location":"collections-HashSet/#parameters_22","text":"prev: USize val = seq","title":"Parameters"},{"location":"collections-HashSet/#returns_26","text":"USize val ?","title":"Returns"},{"location":"collections-HashSet/#index","text":"[Source] Returns the value at a given index. Raise an error if the index is not populated. fun box index( i: USize val) : this- A ?","title":"index"},{"location":"collections-HashSet/#parameters_23","text":"i: USize val","title":"Parameters"},{"location":"collections-HashSet/#returns_27","text":"this- A ?","title":"Returns"},{"location":"collections-HashSet/#values","text":"[Source] Return an iterator over the values. fun box values() : SetValues[A, H, this- HashSet[A, H] ref] ref^","title":"values"},{"location":"collections-HashSet/#returns_28","text":"SetValues [A, H, this- HashSet [A, H] ref] ref^","title":"Returns"},{"location":"collections-HashSet/#compare","text":"[Source] fun box compare( that: HashSet[A, H] box) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"collections-HashSet/#parameters_24","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_29","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"collections-Hashable/","text":"Hashable [Source] Anything with a hash method is hashable. interface ref Hashable Public Functions hash [Source] fun box hash() : USize val Returns USize val","title":"interface Hashable"},{"location":"collections-Hashable/#hashable","text":"[Source] Anything with a hash method is hashable. interface ref Hashable","title":"Hashable"},{"location":"collections-Hashable/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Hashable/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"collections-Hashable/#returns","text":"USize val","title":"Returns"},{"location":"collections-Hashable64/","text":"Hashable64 [Source] A version of Hashable that returns 64-bit hashes on every platform. interface ref Hashable64 Public Functions hash64 [Source] fun box hash64() : U64 val Returns U64 val","title":"interface Hashable64"},{"location":"collections-Hashable64/#hashable64","text":"[Source] A version of Hashable that returns 64-bit hashes on every platform. interface ref Hashable64","title":"Hashable64"},{"location":"collections-Hashable64/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Hashable64/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"collections-Hashable64/#returns","text":"U64 val","title":"Returns"},{"location":"collections-List/","text":"List[A: A] [Source] A doubly linked list. class ref List[A: A] is Seq[A] ref Implements Seq [A] ref Constructors create [Source] Do nothing, but be compatible with Seq. new ref create( len: USize val = seq) : List[A] ref^ Parameters len: USize val = seq Returns List [A] ref^ unit [Source] Builds a new list from an element. new ref unit( a: A) : List[A] ref^ Parameters a: A Returns List [A] ref^ from [Source] Builds a new list from the sequence passed in. new ref from( seq: Array[A^] ref) : List[A] ref^ Parameters seq: Array [A^] ref Returns List [A] ref^ Public Functions reserve [Source] Do nothing, but be compatible with Seq. fun ref reserve( len: USize val) : None val Parameters len: USize val Returns None val size [Source] Returns the number of items in the list. fun box size() : USize val Returns USize val apply [Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val = seq) : this- A ? Parameters i: USize val = seq Returns this- A ? update [Source] Change the i-th element, raising an error if the index is out of bounds. Returns the previous value, which may be None if the node has been popped but left on the list. fun ref update( i: USize val, value: A) : A^ ? Parameters i: USize val value: A Returns A^ ? index [Source] Gets the i-th node, raising an error if the index is out of bounds. fun box index( i: USize val) : this- ListNode[A] ref ? Parameters i: USize val Returns this- ListNode [A] ref ? remove [Source] Remove the i-th node, raising an error if the index is out of bounds. The removed node is returned. fun ref remove( i: USize val) : ListNode[A] ref ? Parameters i: USize val Returns ListNode [A] ref ? clear [Source] Empties the list. fun ref clear() : None val Returns None val head [Source] Get the head of the list. fun box head() : this- ListNode[A] ref ? Returns this- ListNode [A] ref ? tail [Source] Get the tail of the list. fun box tail() : this- ListNode[A] ref ? Returns this- ListNode [A] ref ? prepend_node [Source] Adds a node to the head of the list. fun ref prepend_node( node: ListNode[A] ref) : None val Parameters node: ListNode [A] ref Returns None val append_node [Source] Adds a node to the tail of the list. fun ref append_node( node: ListNode[A] ref) : None val Parameters node: ListNode [A] ref Returns None val append_list [Source] Remove all nodes from that and append them to this. fun ref append_list( that: List[A] ref) : None val Parameters that: List [A] ref Returns None val prepend_list [Source] Remove all nodes from that and prepend them to this. fun ref prepend_list( that: List[A] ref) : None val Parameters that: List [A] ref Returns None val push [Source] Adds a value to the tail of the list. fun ref push( a: A) : None val Parameters a: A Returns None val pop [Source] Removes a value from the tail of the list. fun ref pop() : A^ ? Returns A^ ? unshift [Source] Adds a value to the head of the list. fun ref unshift( a: A) : None val Parameters a: A Returns None val shift [Source] Removes a value from the head of the list. fun ref shift() : A^ ? Returns A^ ? append [Source] Append len elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box ReadElement[A^] box), offset: USize val = seq, len: USize val = seq) : None val Parameters seq: ( ReadSeq [A] box ReadElement [A^] box) offset: USize val = seq len: USize val = seq Returns None val concat [Source] Add len iterated elements to the end of the list, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = seq, len: USize val = seq) : None val Parameters iter: Iterator [A^] ref offset: USize val = seq len: USize val = seq Returns None val truncate [Source] Truncate the list to the given length, discarding excess elements. If the list is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val Parameters len: USize val Returns None val clone [Source] Clone the list. fun box clone() : List[this- A!] ref^ Returns List [this- A!] ref^ map[B: B] [Source] Builds a new list by applying a function to every member of the list. fun box map[B: B]( f: {(this- A!): B^}[A, B] box) : List[B] ref^ Parameters f: {(this- A!): B^}[A, B] box Returns List [B] ref^ flat_map[B: B] [Source] Builds a new list by applying a function to every member of the list and using the elements of the resulting lists. fun box flat_map[B: B]( f: {(this- A!): List[B]}[A, B] box) : List[B] ref^ Parameters f: {(this- A!): List[B]}[A, B] box Returns List [B] ref^ filter [Source] Builds a new list with those elements that satisfy a provided predicate. fun box filter( f: {(this- A!): Bool}[A] box) : List[this- A!] ref^ Parameters f: {(this- A!): Bool}[A] box Returns List [this- A!] ref^ fold[B: B] [Source] Folds the elements of the list using the supplied function. fun box fold[B: B]( f: {(B!, this- A!): B^}[A, B] box, acc: B) : B Parameters f: {(B!, this- A!): B^}[A, B] box acc: B Returns B every [Source] Returns true if every element satisfies the provided predicate, false otherwise. fun box every( f: {(this- A!): Bool}[A] box) : Bool val Parameters f: {(this- A!): Bool}[A] box Returns Bool val exists [Source] Returns true if at least one element satisfies the provided predicate, false otherwise. fun box exists( f: {(this- A!): Bool}[A] box) : Bool val Parameters f: {(this- A!): Bool}[A] box Returns Bool val partition [Source] Builds a pair of lists, the first of which is made up of the elements satisfying the supplied predicate and the second of which is made up of those that do not. fun box partition( f: {(this- A!): Bool}[A] box) : (List[this- A!] ref^ , List[this- A!] ref^) Parameters f: {(this- A!): Bool}[A] box Returns ( List [this- A!] ref^ , List [this- A!] ref^) drop [Source] Builds a list by dropping the first n elements. fun box drop( n: USize val) : List[this- A!] ref^ Parameters n: USize val Returns List [this- A!] ref^ take [Source] Builds a list of the first n elements. fun box take( n: USize val) : List[this- A!] ref Parameters n: USize val Returns List [this- A!] ref take_while [Source] Builds a list of elements satisfying the provided predicate until one does not. fun box take_while( f: {(this- A!): Bool}[A] box) : List[this- A!] ref^ Parameters f: {(this- A!): Bool}[A] box Returns List [this- A!] ref^ reverse [Source] Builds a new list by reversing the elements in the list. fun box reverse() : List[this- A!] ref^ Returns List [this- A!] ref^ contains[optional B: (A HasEq [A!] #read)] [Source] Returns true if the list contains the provided element, false otherwise. fun box contains[optional B: (A HasEq[A!] #read)]( a: box- B) : Bool val Parameters a: box- B Returns Bool val nodes [Source] Return an iterator on the nodes in the list. fun box nodes() : ListNodes[A, this- ListNode[A] ref] ref^ Returns ListNodes [A, this- ListNode [A] ref] ref^ rnodes [Source] Return an iterator on the nodes in the list. fun box rnodes() : ListNodes[A, this- ListNode[A] ref] ref^ Returns ListNodes [A, this- ListNode [A] ref] ref^ values [Source] Return an iterator on the values in the list. fun box values() : ListValues[A, this- ListNode[A] ref] ref^ Returns ListValues [A, this- ListNode [A] ref] ref^ rvalues [Source] Return an iterator on the values in the list. fun box rvalues() : ListValues[A, this- ListNode[A] ref] ref^ Returns ListValues [A, this- ListNode [A] ref] ref^ Private Functions _map[B: B] [Source] Private helper for map, recursively working with ListNodes. fun box _map[B: B]( ln: this- ListNode[A] ref, f: {(this- A!): B^}[A, B] box, acc: List[B] ref) : List[B] ref^ Parameters ln: this- ListNode [A] ref f: {(this- A!): B^}[A, B] box acc: List [B] ref Returns List [B] ref^ _flat_map[B: B] [Source] Private helper for flat_map, recursively working with ListNodes. fun box _flat_map[B: B]( ln: this- ListNode[A] ref, f: {(this- A!): List[B]}[A, B] box, acc: List[B] ref) : List[B] ref^ Parameters ln: this- ListNode [A] ref f: {(this- A!): List[B]}[A, B] box acc: List [B] ref Returns List [B] ref^ _filter [Source] Private helper for filter, recursively working with ListNodes. fun box _filter( ln: this- ListNode[A] ref, f: {(this- A!): Bool}[A] box, acc: List[this- A!] ref) : List[this- A!] ref Parameters ln: this- ListNode [A] ref f: {(this- A!): Bool}[A] box acc: List [this- A!] ref Returns List [this- A!] ref _fold[B: B] [Source] Private helper for fold, recursively working with ListNodes. fun box _fold[B: B]( ln: this- ListNode[A] ref, f: {(B!, this- A!): B^}[A, B] box, acc: B) : B Parameters ln: this- ListNode [A] ref f: {(B!, this- A!): B^}[A, B] box acc: B Returns B _every [Source] Private helper for every, recursively working with ListNodes. fun box _every( ln: this- ListNode[A] ref, f: {(this- A!): Bool}[A] box) : Bool val Parameters ln: this- ListNode [A] ref f: {(this- A!): Bool}[A] box Returns Bool val _exists [Source] Private helper for exists, recursively working with ListNodes. fun box _exists( ln: this- ListNode[A] ref, f: {(this- A!): Bool}[A] box) : Bool val Parameters ln: this- ListNode [A] ref f: {(this- A!): Bool}[A] box Returns Bool val _reverse [Source] Private helper for reverse, recursively working with ListNodes. fun box _reverse( ln: this- ListNode[A] ref, acc: List[this- A!] ref) : List[this- A!] ref^ Parameters ln: this- ListNode [A] ref acc: List [this- A!] ref Returns List [this- A!] ref^ _contains[optional B: (A HasEq [A!] #read)] [Source] Private helper for contains, recursively working with ListNodes. fun box _contains[optional B: (A HasEq[A!] #read)]( ln: this- ListNode[A] ref, a: box- B) : Bool val Parameters ln: this- ListNode [A] ref a: box- B Returns Bool val _increment [Source] fun ref _increment() : None val Returns None val _decrement [Source] fun ref _decrement() : None val Returns None val _set_head [Source] fun ref _set_head( head': (ListNode[A] ref | None val)) : None val Parameters head': ( ListNode [A] ref | None val) Returns None val _set_tail [Source] fun ref _set_tail( tail': (ListNode[A] ref | None val)) : None val Parameters tail': ( ListNode [A] ref | None val) Returns None val _set_both [Source] fun ref _set_both( node: ListNode[A] ref) : None val Parameters node: ListNode [A] ref Returns None val","title":"class List"},{"location":"collections-List/#list91a-a93","text":"[Source] A doubly linked list. class ref List[A: A] is Seq[A] ref","title":"List[A: A]"},{"location":"collections-List/#implements","text":"Seq [A] ref","title":"Implements"},{"location":"collections-List/#constructors","text":"","title":"Constructors"},{"location":"collections-List/#create","text":"[Source] Do nothing, but be compatible with Seq. new ref create( len: USize val = seq) : List[A] ref^","title":"create"},{"location":"collections-List/#parameters","text":"len: USize val = seq","title":"Parameters"},{"location":"collections-List/#returns","text":"List [A] ref^","title":"Returns"},{"location":"collections-List/#unit","text":"[Source] Builds a new list from an element. new ref unit( a: A) : List[A] ref^","title":"unit"},{"location":"collections-List/#parameters_1","text":"a: A","title":"Parameters"},{"location":"collections-List/#returns_1","text":"List [A] ref^","title":"Returns"},{"location":"collections-List/#from","text":"[Source] Builds a new list from the sequence passed in. new ref from( seq: Array[A^] ref) : List[A] ref^","title":"from"},{"location":"collections-List/#parameters_2","text":"seq: Array [A^] ref","title":"Parameters"},{"location":"collections-List/#returns_2","text":"List [A] ref^","title":"Returns"},{"location":"collections-List/#public-functions","text":"","title":"Public Functions"},{"location":"collections-List/#reserve","text":"[Source] Do nothing, but be compatible with Seq. fun ref reserve( len: USize val) : None val","title":"reserve"},{"location":"collections-List/#parameters_3","text":"len: USize val","title":"Parameters"},{"location":"collections-List/#returns_3","text":"None val","title":"Returns"},{"location":"collections-List/#size","text":"[Source] Returns the number of items in the list. fun box size() : USize val","title":"size"},{"location":"collections-List/#returns_4","text":"USize val","title":"Returns"},{"location":"collections-List/#apply","text":"[Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val = seq) : this- A ?","title":"apply"},{"location":"collections-List/#parameters_4","text":"i: USize val = seq","title":"Parameters"},{"location":"collections-List/#returns_5","text":"this- A ?","title":"Returns"},{"location":"collections-List/#update","text":"[Source] Change the i-th element, raising an error if the index is out of bounds. Returns the previous value, which may be None if the node has been popped but left on the list. fun ref update( i: USize val, value: A) : A^ ?","title":"update"},{"location":"collections-List/#parameters_5","text":"i: USize val value: A","title":"Parameters"},{"location":"collections-List/#returns_6","text":"A^ ?","title":"Returns"},{"location":"collections-List/#index","text":"[Source] Gets the i-th node, raising an error if the index is out of bounds. fun box index( i: USize val) : this- ListNode[A] ref ?","title":"index"},{"location":"collections-List/#parameters_6","text":"i: USize val","title":"Parameters"},{"location":"collections-List/#returns_7","text":"this- ListNode [A] ref ?","title":"Returns"},{"location":"collections-List/#remove","text":"[Source] Remove the i-th node, raising an error if the index is out of bounds. The removed node is returned. fun ref remove( i: USize val) : ListNode[A] ref ?","title":"remove"},{"location":"collections-List/#parameters_7","text":"i: USize val","title":"Parameters"},{"location":"collections-List/#returns_8","text":"ListNode [A] ref ?","title":"Returns"},{"location":"collections-List/#clear","text":"[Source] Empties the list. fun ref clear() : None val","title":"clear"},{"location":"collections-List/#returns_9","text":"None val","title":"Returns"},{"location":"collections-List/#head","text":"[Source] Get the head of the list. fun box head() : this- ListNode[A] ref ?","title":"head"},{"location":"collections-List/#returns_10","text":"this- ListNode [A] ref ?","title":"Returns"},{"location":"collections-List/#tail","text":"[Source] Get the tail of the list. fun box tail() : this- ListNode[A] ref ?","title":"tail"},{"location":"collections-List/#returns_11","text":"this- ListNode [A] ref ?","title":"Returns"},{"location":"collections-List/#prepend_node","text":"[Source] Adds a node to the head of the list. fun ref prepend_node( node: ListNode[A] ref) : None val","title":"prepend_node"},{"location":"collections-List/#parameters_8","text":"node: ListNode [A] ref","title":"Parameters"},{"location":"collections-List/#returns_12","text":"None val","title":"Returns"},{"location":"collections-List/#append_node","text":"[Source] Adds a node to the tail of the list. fun ref append_node( node: ListNode[A] ref) : None val","title":"append_node"},{"location":"collections-List/#parameters_9","text":"node: ListNode [A] ref","title":"Parameters"},{"location":"collections-List/#returns_13","text":"None val","title":"Returns"},{"location":"collections-List/#append_list","text":"[Source] Remove all nodes from that and append them to this. fun ref append_list( that: List[A] ref) : None val","title":"append_list"},{"location":"collections-List/#parameters_10","text":"that: List [A] ref","title":"Parameters"},{"location":"collections-List/#returns_14","text":"None val","title":"Returns"},{"location":"collections-List/#prepend_list","text":"[Source] Remove all nodes from that and prepend them to this. fun ref prepend_list( that: List[A] ref) : None val","title":"prepend_list"},{"location":"collections-List/#parameters_11","text":"that: List [A] ref","title":"Parameters"},{"location":"collections-List/#returns_15","text":"None val","title":"Returns"},{"location":"collections-List/#push","text":"[Source] Adds a value to the tail of the list. fun ref push( a: A) : None val","title":"push"},{"location":"collections-List/#parameters_12","text":"a: A","title":"Parameters"},{"location":"collections-List/#returns_16","text":"None val","title":"Returns"},{"location":"collections-List/#pop","text":"[Source] Removes a value from the tail of the list. fun ref pop() : A^ ?","title":"pop"},{"location":"collections-List/#returns_17","text":"A^ ?","title":"Returns"},{"location":"collections-List/#unshift","text":"[Source] Adds a value to the head of the list. fun ref unshift( a: A) : None val","title":"unshift"},{"location":"collections-List/#parameters_13","text":"a: A","title":"Parameters"},{"location":"collections-List/#returns_18","text":"None val","title":"Returns"},{"location":"collections-List/#shift","text":"[Source] Removes a value from the head of the list. fun ref shift() : A^ ?","title":"shift"},{"location":"collections-List/#returns_19","text":"A^ ?","title":"Returns"},{"location":"collections-List/#append","text":"[Source] Append len elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box ReadElement[A^] box), offset: USize val = seq, len: USize val = seq) : None val","title":"append"},{"location":"collections-List/#parameters_14","text":"seq: ( ReadSeq [A] box ReadElement [A^] box) offset: USize val = seq len: USize val = seq","title":"Parameters"},{"location":"collections-List/#returns_20","text":"None val","title":"Returns"},{"location":"collections-List/#concat","text":"[Source] Add len iterated elements to the end of the list, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = seq, len: USize val = seq) : None val","title":"concat"},{"location":"collections-List/#parameters_15","text":"iter: Iterator [A^] ref offset: USize val = seq len: USize val = seq","title":"Parameters"},{"location":"collections-List/#returns_21","text":"None val","title":"Returns"},{"location":"collections-List/#truncate","text":"[Source] Truncate the list to the given length, discarding excess elements. If the list is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val","title":"truncate"},{"location":"collections-List/#parameters_16","text":"len: USize val","title":"Parameters"},{"location":"collections-List/#returns_22","text":"None val","title":"Returns"},{"location":"collections-List/#clone","text":"[Source] Clone the list. fun box clone() : List[this- A!] ref^","title":"clone"},{"location":"collections-List/#returns_23","text":"List [this- A!] ref^","title":"Returns"},{"location":"collections-List/#map91b-b93","text":"[Source] Builds a new list by applying a function to every member of the list. fun box map[B: B]( f: {(this- A!): B^}[A, B] box) : List[B] ref^","title":"map[B: B]"},{"location":"collections-List/#parameters_17","text":"f: {(this- A!): B^}[A, B] box","title":"Parameters"},{"location":"collections-List/#returns_24","text":"List [B] ref^","title":"Returns"},{"location":"collections-List/#flat_map91b-b93","text":"[Source] Builds a new list by applying a function to every member of the list and using the elements of the resulting lists. fun box flat_map[B: B]( f: {(this- A!): List[B]}[A, B] box) : List[B] ref^","title":"flat_map[B: B]"},{"location":"collections-List/#parameters_18","text":"f: {(this- A!): List[B]}[A, B] box","title":"Parameters"},{"location":"collections-List/#returns_25","text":"List [B] ref^","title":"Returns"},{"location":"collections-List/#filter","text":"[Source] Builds a new list with those elements that satisfy a provided predicate. fun box filter( f: {(this- A!): Bool}[A] box) : List[this- A!] ref^","title":"filter"},{"location":"collections-List/#parameters_19","text":"f: {(this- A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_26","text":"List [this- A!] ref^","title":"Returns"},{"location":"collections-List/#fold91b-b93","text":"[Source] Folds the elements of the list using the supplied function. fun box fold[B: B]( f: {(B!, this- A!): B^}[A, B] box, acc: B) : B","title":"fold[B: B]"},{"location":"collections-List/#parameters_20","text":"f: {(B!, this- A!): B^}[A, B] box acc: B","title":"Parameters"},{"location":"collections-List/#returns_27","text":"B","title":"Returns"},{"location":"collections-List/#every","text":"[Source] Returns true if every element satisfies the provided predicate, false otherwise. fun box every( f: {(this- A!): Bool}[A] box) : Bool val","title":"every"},{"location":"collections-List/#parameters_21","text":"f: {(this- A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_28","text":"Bool val","title":"Returns"},{"location":"collections-List/#exists","text":"[Source] Returns true if at least one element satisfies the provided predicate, false otherwise. fun box exists( f: {(this- A!): Bool}[A] box) : Bool val","title":"exists"},{"location":"collections-List/#parameters_22","text":"f: {(this- A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_29","text":"Bool val","title":"Returns"},{"location":"collections-List/#partition","text":"[Source] Builds a pair of lists, the first of which is made up of the elements satisfying the supplied predicate and the second of which is made up of those that do not. fun box partition( f: {(this- A!): Bool}[A] box) : (List[this- A!] ref^ , List[this- A!] ref^)","title":"partition"},{"location":"collections-List/#parameters_23","text":"f: {(this- A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_30","text":"( List [this- A!] ref^ , List [this- A!] ref^)","title":"Returns"},{"location":"collections-List/#drop","text":"[Source] Builds a list by dropping the first n elements. fun box drop( n: USize val) : List[this- A!] ref^","title":"drop"},{"location":"collections-List/#parameters_24","text":"n: USize val","title":"Parameters"},{"location":"collections-List/#returns_31","text":"List [this- A!] ref^","title":"Returns"},{"location":"collections-List/#take","text":"[Source] Builds a list of the first n elements. fun box take( n: USize val) : List[this- A!] ref","title":"take"},{"location":"collections-List/#parameters_25","text":"n: USize val","title":"Parameters"},{"location":"collections-List/#returns_32","text":"List [this- A!] ref","title":"Returns"},{"location":"collections-List/#take_while","text":"[Source] Builds a list of elements satisfying the provided predicate until one does not. fun box take_while( f: {(this- A!): Bool}[A] box) : List[this- A!] ref^","title":"take_while"},{"location":"collections-List/#parameters_26","text":"f: {(this- A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_33","text":"List [this- A!] ref^","title":"Returns"},{"location":"collections-List/#reverse","text":"[Source] Builds a new list by reversing the elements in the list. fun box reverse() : List[this- A!] ref^","title":"reverse"},{"location":"collections-List/#returns_34","text":"List [this- A!] ref^","title":"Returns"},{"location":"collections-List/#contains91optional-b-a-haseq91a93-read93","text":"[Source] Returns true if the list contains the provided element, false otherwise. fun box contains[optional B: (A HasEq[A!] #read)]( a: box- B) : Bool val","title":"contains[optional B: (A &amp; HasEq[A!] #read)]"},{"location":"collections-List/#parameters_27","text":"a: box- B","title":"Parameters"},{"location":"collections-List/#returns_35","text":"Bool val","title":"Returns"},{"location":"collections-List/#nodes","text":"[Source] Return an iterator on the nodes in the list. fun box nodes() : ListNodes[A, this- ListNode[A] ref] ref^","title":"nodes"},{"location":"collections-List/#returns_36","text":"ListNodes [A, this- ListNode [A] ref] ref^","title":"Returns"},{"location":"collections-List/#rnodes","text":"[Source] Return an iterator on the nodes in the list. fun box rnodes() : ListNodes[A, this- ListNode[A] ref] ref^","title":"rnodes"},{"location":"collections-List/#returns_37","text":"ListNodes [A, this- ListNode [A] ref] ref^","title":"Returns"},{"location":"collections-List/#values","text":"[Source] Return an iterator on the values in the list. fun box values() : ListValues[A, this- ListNode[A] ref] ref^","title":"values"},{"location":"collections-List/#returns_38","text":"ListValues [A, this- ListNode [A] ref] ref^","title":"Returns"},{"location":"collections-List/#rvalues","text":"[Source] Return an iterator on the values in the list. fun box rvalues() : ListValues[A, this- ListNode[A] ref] ref^","title":"rvalues"},{"location":"collections-List/#returns_39","text":"ListValues [A, this- ListNode [A] ref] ref^","title":"Returns"},{"location":"collections-List/#private-functions","text":"","title":"Private Functions"},{"location":"collections-List/#_map91b-b93","text":"[Source] Private helper for map, recursively working with ListNodes. fun box _map[B: B]( ln: this- ListNode[A] ref, f: {(this- A!): B^}[A, B] box, acc: List[B] ref) : List[B] ref^","title":"_map[B: B]"},{"location":"collections-List/#parameters_28","text":"ln: this- ListNode [A] ref f: {(this- A!): B^}[A, B] box acc: List [B] ref","title":"Parameters"},{"location":"collections-List/#returns_40","text":"List [B] ref^","title":"Returns"},{"location":"collections-List/#_flat_map91b-b93","text":"[Source] Private helper for flat_map, recursively working with ListNodes. fun box _flat_map[B: B]( ln: this- ListNode[A] ref, f: {(this- A!): List[B]}[A, B] box, acc: List[B] ref) : List[B] ref^","title":"_flat_map[B: B]"},{"location":"collections-List/#parameters_29","text":"ln: this- ListNode [A] ref f: {(this- A!): List[B]}[A, B] box acc: List [B] ref","title":"Parameters"},{"location":"collections-List/#returns_41","text":"List [B] ref^","title":"Returns"},{"location":"collections-List/#_filter","text":"[Source] Private helper for filter, recursively working with ListNodes. fun box _filter( ln: this- ListNode[A] ref, f: {(this- A!): Bool}[A] box, acc: List[this- A!] ref) : List[this- A!] ref","title":"_filter"},{"location":"collections-List/#parameters_30","text":"ln: this- ListNode [A] ref f: {(this- A!): Bool}[A] box acc: List [this- A!] ref","title":"Parameters"},{"location":"collections-List/#returns_42","text":"List [this- A!] ref","title":"Returns"},{"location":"collections-List/#_fold91b-b93","text":"[Source] Private helper for fold, recursively working with ListNodes. fun box _fold[B: B]( ln: this- ListNode[A] ref, f: {(B!, this- A!): B^}[A, B] box, acc: B) : B","title":"_fold[B: B]"},{"location":"collections-List/#parameters_31","text":"ln: this- ListNode [A] ref f: {(B!, this- A!): B^}[A, B] box acc: B","title":"Parameters"},{"location":"collections-List/#returns_43","text":"B","title":"Returns"},{"location":"collections-List/#_every","text":"[Source] Private helper for every, recursively working with ListNodes. fun box _every( ln: this- ListNode[A] ref, f: {(this- A!): Bool}[A] box) : Bool val","title":"_every"},{"location":"collections-List/#parameters_32","text":"ln: this- ListNode [A] ref f: {(this- A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_44","text":"Bool val","title":"Returns"},{"location":"collections-List/#_exists","text":"[Source] Private helper for exists, recursively working with ListNodes. fun box _exists( ln: this- ListNode[A] ref, f: {(this- A!): Bool}[A] box) : Bool val","title":"_exists"},{"location":"collections-List/#parameters_33","text":"ln: this- ListNode [A] ref f: {(this- A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_45","text":"Bool val","title":"Returns"},{"location":"collections-List/#_reverse","text":"[Source] Private helper for reverse, recursively working with ListNodes. fun box _reverse( ln: this- ListNode[A] ref, acc: List[this- A!] ref) : List[this- A!] ref^","title":"_reverse"},{"location":"collections-List/#parameters_34","text":"ln: this- ListNode [A] ref acc: List [this- A!] ref","title":"Parameters"},{"location":"collections-List/#returns_46","text":"List [this- A!] ref^","title":"Returns"},{"location":"collections-List/#_contains91optional-b-a-haseq91a93-read93","text":"[Source] Private helper for contains, recursively working with ListNodes. fun box _contains[optional B: (A HasEq[A!] #read)]( ln: this- ListNode[A] ref, a: box- B) : Bool val","title":"_contains[optional B: (A &amp; HasEq[A!] #read)]"},{"location":"collections-List/#parameters_35","text":"ln: this- ListNode [A] ref a: box- B","title":"Parameters"},{"location":"collections-List/#returns_47","text":"Bool val","title":"Returns"},{"location":"collections-List/#_increment","text":"[Source] fun ref _increment() : None val","title":"_increment"},{"location":"collections-List/#returns_48","text":"None val","title":"Returns"},{"location":"collections-List/#_decrement","text":"[Source] fun ref _decrement() : None val","title":"_decrement"},{"location":"collections-List/#returns_49","text":"None val","title":"Returns"},{"location":"collections-List/#_set_head","text":"[Source] fun ref _set_head( head': (ListNode[A] ref | None val)) : None val","title":"_set_head"},{"location":"collections-List/#parameters_36","text":"head': ( ListNode [A] ref | None val)","title":"Parameters"},{"location":"collections-List/#returns_50","text":"None val","title":"Returns"},{"location":"collections-List/#_set_tail","text":"[Source] fun ref _set_tail( tail': (ListNode[A] ref | None val)) : None val","title":"_set_tail"},{"location":"collections-List/#parameters_37","text":"tail': ( ListNode [A] ref | None val)","title":"Parameters"},{"location":"collections-List/#returns_51","text":"None val","title":"Returns"},{"location":"collections-List/#_set_both","text":"[Source] fun ref _set_both( node: ListNode[A] ref) : None val","title":"_set_both"},{"location":"collections-List/#parameters_38","text":"node: ListNode [A] ref","title":"Parameters"},{"location":"collections-List/#returns_52","text":"None val","title":"Returns"},{"location":"collections-ListNode/","text":"ListNode[A: A] [Source] A node in a list. class ref ListNode[A: A] Constructors create [Source] Create a node. Initially, it is not in any list. new ref create( item: (A | None val) = seq) : ListNode[A] ref^ Parameters item: (A | None val) = seq Returns ListNode [A] ref^ Public Functions apply [Source] Return the item, if we have one, otherwise raise an error. fun box apply() : this- A ? Returns this- A ? update [Source] Replace the item and return the previous one. Raise an error if we have no previous value. fun ref update( value: (A | None val)) : A^ ? Parameters value: (A | None val) Returns A^ ? pop [Source] Remove the item from the node, if we have one, otherwise raise an error. fun ref pop() : A^ ? Returns A^ ? prepend [Source] Prepend a node to this one. If that is already in a list, it is removed before it is prepended. Returns true if that was removed from another list. fun ref prepend( that: ListNode[A] ref) : Bool val Parameters that: ListNode [A] ref Returns Bool val append [Source] Append a node to this one. If that is already in a list, it is removed before it is appended. Returns true if that was removed from another list. fun ref append( that: ListNode[A] ref) : Bool val Parameters that: ListNode [A] ref Returns Bool val remove [Source] Remove a node from a list. fun ref remove() : None val Returns None val has_prev [Source] Return true if there is a previous node. fun box has_prev() : Bool val Returns Bool val has_next [Source] Return true if there is a next node. fun box has_next() : Bool val Returns Bool val prev [Source] Return the previous node. fun box prev() : (this- ListNode[A] ref | None val) Returns (this- ListNode [A] ref | None val) next [Source] Return the next node. fun box next() : (this- ListNode[A] ref | None val) Returns (this- ListNode [A] ref | None val) Private Functions _set_list [Source] Make this node the only node on the given list. fun ref _set_list( list: List[A] ref) : ListNode[A] ref^ Parameters list: List [A] ref Returns ListNode [A] ref^","title":"class ListNode"},{"location":"collections-ListNode/#listnode91a-a93","text":"[Source] A node in a list. class ref ListNode[A: A]","title":"ListNode[A: A]"},{"location":"collections-ListNode/#constructors","text":"","title":"Constructors"},{"location":"collections-ListNode/#create","text":"[Source] Create a node. Initially, it is not in any list. new ref create( item: (A | None val) = seq) : ListNode[A] ref^","title":"create"},{"location":"collections-ListNode/#parameters","text":"item: (A | None val) = seq","title":"Parameters"},{"location":"collections-ListNode/#returns","text":"ListNode [A] ref^","title":"Returns"},{"location":"collections-ListNode/#public-functions","text":"","title":"Public Functions"},{"location":"collections-ListNode/#apply","text":"[Source] Return the item, if we have one, otherwise raise an error. fun box apply() : this- A ?","title":"apply"},{"location":"collections-ListNode/#returns_1","text":"this- A ?","title":"Returns"},{"location":"collections-ListNode/#update","text":"[Source] Replace the item and return the previous one. Raise an error if we have no previous value. fun ref update( value: (A | None val)) : A^ ?","title":"update"},{"location":"collections-ListNode/#parameters_1","text":"value: (A | None val)","title":"Parameters"},{"location":"collections-ListNode/#returns_2","text":"A^ ?","title":"Returns"},{"location":"collections-ListNode/#pop","text":"[Source] Remove the item from the node, if we have one, otherwise raise an error. fun ref pop() : A^ ?","title":"pop"},{"location":"collections-ListNode/#returns_3","text":"A^ ?","title":"Returns"},{"location":"collections-ListNode/#prepend","text":"[Source] Prepend a node to this one. If that is already in a list, it is removed before it is prepended. Returns true if that was removed from another list. fun ref prepend( that: ListNode[A] ref) : Bool val","title":"prepend"},{"location":"collections-ListNode/#parameters_2","text":"that: ListNode [A] ref","title":"Parameters"},{"location":"collections-ListNode/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-ListNode/#append","text":"[Source] Append a node to this one. If that is already in a list, it is removed before it is appended. Returns true if that was removed from another list. fun ref append( that: ListNode[A] ref) : Bool val","title":"append"},{"location":"collections-ListNode/#parameters_3","text":"that: ListNode [A] ref","title":"Parameters"},{"location":"collections-ListNode/#returns_5","text":"Bool val","title":"Returns"},{"location":"collections-ListNode/#remove","text":"[Source] Remove a node from a list. fun ref remove() : None val","title":"remove"},{"location":"collections-ListNode/#returns_6","text":"None val","title":"Returns"},{"location":"collections-ListNode/#has_prev","text":"[Source] Return true if there is a previous node. fun box has_prev() : Bool val","title":"has_prev"},{"location":"collections-ListNode/#returns_7","text":"Bool val","title":"Returns"},{"location":"collections-ListNode/#has_next","text":"[Source] Return true if there is a next node. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-ListNode/#returns_8","text":"Bool val","title":"Returns"},{"location":"collections-ListNode/#prev","text":"[Source] Return the previous node. fun box prev() : (this- ListNode[A] ref | None val)","title":"prev"},{"location":"collections-ListNode/#returns_9","text":"(this- ListNode [A] ref | None val)","title":"Returns"},{"location":"collections-ListNode/#next","text":"[Source] Return the next node. fun box next() : (this- ListNode[A] ref | None val)","title":"next"},{"location":"collections-ListNode/#returns_10","text":"(this- ListNode [A] ref | None val)","title":"Returns"},{"location":"collections-ListNode/#private-functions","text":"","title":"Private Functions"},{"location":"collections-ListNode/#_set_list","text":"[Source] Make this node the only node on the given list. fun ref _set_list( list: List[A] ref) : ListNode[A] ref^","title":"_set_list"},{"location":"collections-ListNode/#parameters_4","text":"list: List [A] ref","title":"Parameters"},{"location":"collections-ListNode/#returns_11","text":"ListNode [A] ref^","title":"Returns"},{"location":"collections-ListNodes/","text":"ListNodes[A: A, N: ListNode [A] #read] [Source] Iterate over the nodes in a list. class ref ListNodes[A: A, N: ListNode[A] #read] is Iterator[N] ref Implements Iterator [N] ref Constructors create [Source] Keep the next list node to be examined. new ref create( head: (N | None val), reverse: Bool val = seq) : ListNodes[A, N] ref^ Parameters head: (N | None val) reverse: Bool val = seq Returns ListNodes [A, N] ref^ Public Functions has_next [Source] If we have a list node, we have more values. fun box has_next() : Bool val Returns Bool val next [Source] Get the list node and replace it with the next one. fun ref next() : N ? Returns N ?","title":"class ListNodes"},{"location":"collections-ListNodes/#listnodes91a-a-n-listnode91a93-read93","text":"[Source] Iterate over the nodes in a list. class ref ListNodes[A: A, N: ListNode[A] #read] is Iterator[N] ref","title":"ListNodes[A: A, N: ListNode[A] #read]"},{"location":"collections-ListNodes/#implements","text":"Iterator [N] ref","title":"Implements"},{"location":"collections-ListNodes/#constructors","text":"","title":"Constructors"},{"location":"collections-ListNodes/#create","text":"[Source] Keep the next list node to be examined. new ref create( head: (N | None val), reverse: Bool val = seq) : ListNodes[A, N] ref^","title":"create"},{"location":"collections-ListNodes/#parameters","text":"head: (N | None val) reverse: Bool val = seq","title":"Parameters"},{"location":"collections-ListNodes/#returns","text":"ListNodes [A, N] ref^","title":"Returns"},{"location":"collections-ListNodes/#public-functions","text":"","title":"Public Functions"},{"location":"collections-ListNodes/#has_next","text":"[Source] If we have a list node, we have more values. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-ListNodes/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-ListNodes/#next","text":"[Source] Get the list node and replace it with the next one. fun ref next() : N ?","title":"next"},{"location":"collections-ListNodes/#returns_2","text":"N ?","title":"Returns"},{"location":"collections-ListValues/","text":"ListValues[A: A, N: ListNode [A] #read] [Source] Iterate over the values in a list. class ref ListValues[A: A, N: ListNode[A] #read] is Iterator[N- A] ref Implements Iterator [N- A] ref Constructors create [Source] Keep the next list node to be examined. new ref create( head: (N | None val), reverse: Bool val = seq) : ListValues[A, N] ref^ Parameters head: (N | None val) reverse: Bool val = seq Returns ListValues [A, N] ref^ Public Functions has_next [Source] If we have a list node, we have more values. fun box has_next() : Bool val Returns Bool val next [Source] Get the value of the list node and replace it with the next one. fun ref next() : N- A ? Returns N- A ?","title":"class ListValues"},{"location":"collections-ListValues/#listvalues91a-a-n-listnode91a93-read93","text":"[Source] Iterate over the values in a list. class ref ListValues[A: A, N: ListNode[A] #read] is Iterator[N- A] ref","title":"ListValues[A: A, N: ListNode[A] #read]"},{"location":"collections-ListValues/#implements","text":"Iterator [N- A] ref","title":"Implements"},{"location":"collections-ListValues/#constructors","text":"","title":"Constructors"},{"location":"collections-ListValues/#create","text":"[Source] Keep the next list node to be examined. new ref create( head: (N | None val), reverse: Bool val = seq) : ListValues[A, N] ref^","title":"create"},{"location":"collections-ListValues/#parameters","text":"head: (N | None val) reverse: Bool val = seq","title":"Parameters"},{"location":"collections-ListValues/#returns","text":"ListValues [A, N] ref^","title":"Returns"},{"location":"collections-ListValues/#public-functions","text":"","title":"Public Functions"},{"location":"collections-ListValues/#has_next","text":"[Source] If we have a list node, we have more values. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-ListValues/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-ListValues/#next","text":"[Source] Get the value of the list node and replace it with the next one. fun ref next() : N- A ?","title":"next"},{"location":"collections-ListValues/#returns_2","text":"N- A ?","title":"Returns"},{"location":"collections-Map/","text":"Map[K: ( Hashable #read Equatable [K] #read), V: V] [Source] This is a map that uses structural equality on the key. type Map[K: (Hashable #read Equatable[K] #read), V: V] is HashMap[K, V, HashEq[K] val] ref Type Alias For HashMap [K, V, HashEq [K] val] ref","title":"type Map"},{"location":"collections-Map/#map91k-hashable-read-equatable91k93-read-v-v93","text":"[Source] This is a map that uses structural equality on the key. type Map[K: (Hashable #read Equatable[K] #read), V: V] is HashMap[K, V, HashEq[K] val] ref","title":"Map[K: (Hashable #read &amp; Equatable[K] #read), V: V]"},{"location":"collections-Map/#type-alias-for","text":"HashMap [K, V, HashEq [K] val] ref","title":"Type Alias For"},{"location":"collections-MapIs/","text":"MapIs[K: K, V: V] [Source] This is a map that uses identity comparison on the key. type MapIs[K: K, V: V] is HashMap[K, V, HashIs[K] val] ref Type Alias For HashMap [K, V, HashIs [K] val] ref","title":"type MapIs"},{"location":"collections-MapIs/#mapis91k-k-v-v93","text":"[Source] This is a map that uses identity comparison on the key. type MapIs[K: K, V: V] is HashMap[K, V, HashIs[K] val] ref","title":"MapIs[K: K, V: V]"},{"location":"collections-MapIs/#type-alias-for","text":"HashMap [K, V, HashIs [K] val] ref","title":"Type Alias For"},{"location":"collections-MapKeys/","text":"MapKeys[K: K, V: V, H: HashFunction [K] val, M: HashMap [K, V, H] #read] [Source] An iterator over the keys in a map. class ref MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M- K] ref Implements Iterator [M- K] ref Constructors create [Source] Creates an iterator for the given map. new ref create( map: M) : MapKeys[K, V, H, M] ref^ Parameters map: M Returns MapKeys [K, V, H, M] ref^ Public Functions has_next [Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val Returns Bool val next [Source] Returns the next key, or raises an error if there isn't one. If keys are added during iteration, this may not return all keys. fun ref next() : M- K ? Returns M- K ?","title":"class MapKeys"},{"location":"collections-MapKeys/#mapkeys91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h93-read93","text":"[Source] An iterator over the keys in a map. class ref MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M- K] ref","title":"MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"},{"location":"collections-MapKeys/#implements","text":"Iterator [M- K] ref","title":"Implements"},{"location":"collections-MapKeys/#constructors","text":"","title":"Constructors"},{"location":"collections-MapKeys/#create","text":"[Source] Creates an iterator for the given map. new ref create( map: M) : MapKeys[K, V, H, M] ref^","title":"create"},{"location":"collections-MapKeys/#parameters","text":"map: M","title":"Parameters"},{"location":"collections-MapKeys/#returns","text":"MapKeys [K, V, H, M] ref^","title":"Returns"},{"location":"collections-MapKeys/#public-functions","text":"","title":"Public Functions"},{"location":"collections-MapKeys/#has_next","text":"[Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-MapKeys/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-MapKeys/#next","text":"[Source] Returns the next key, or raises an error if there isn't one. If keys are added during iteration, this may not return all keys. fun ref next() : M- K ?","title":"next"},{"location":"collections-MapKeys/#returns_2","text":"M- K ?","title":"Returns"},{"location":"collections-MapPairs/","text":"MapPairs[K: K, V: V, H: HashFunction [K] val, M: HashMap [K, V, H] #read] [Source] An iterator over the keys and values in a map. class ref MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[(M- K , M- V)] ref Implements Iterator [(M- K , M- V)] ref Constructors create [Source] Creates an iterator for the given map. new ref create( map: M) : MapPairs[K, V, H, M] ref^ Parameters map: M Returns MapPairs [K, V, H, M] ref^ Public Functions has_next [Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val Returns Bool val next [Source] Returns the next entry, or raises an error if there isn't one. If entries are added during iteration, this may not return all entries. fun ref next() : (M- K , M- V) ? Returns (M- K , M- V) ?","title":"class MapPairs"},{"location":"collections-MapPairs/#mappairs91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h93-read93","text":"[Source] An iterator over the keys and values in a map. class ref MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[(M- K , M- V)] ref","title":"MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"},{"location":"collections-MapPairs/#implements","text":"Iterator [(M- K , M- V)] ref","title":"Implements"},{"location":"collections-MapPairs/#constructors","text":"","title":"Constructors"},{"location":"collections-MapPairs/#create","text":"[Source] Creates an iterator for the given map. new ref create( map: M) : MapPairs[K, V, H, M] ref^","title":"create"},{"location":"collections-MapPairs/#parameters","text":"map: M","title":"Parameters"},{"location":"collections-MapPairs/#returns","text":"MapPairs [K, V, H, M] ref^","title":"Returns"},{"location":"collections-MapPairs/#public-functions","text":"","title":"Public Functions"},{"location":"collections-MapPairs/#has_next","text":"[Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-MapPairs/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-MapPairs/#next","text":"[Source] Returns the next entry, or raises an error if there isn't one. If entries are added during iteration, this may not return all entries. fun ref next() : (M- K , M- V) ?","title":"next"},{"location":"collections-MapPairs/#returns_2","text":"(M- K , M- V) ?","title":"Returns"},{"location":"collections-MapValues/","text":"MapValues[K: K, V: V, H: HashFunction [K] val, M: HashMap [K, V, H] #read] [Source] An iterator over the values in a map. class ref MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M- V] ref Implements Iterator [M- V] ref Constructors create [Source] Creates an iterator for the given map. new ref create( map: M) : MapValues[K, V, H, M] ref^ Parameters map: M Returns MapValues [K, V, H, M] ref^ Public Functions has_next [Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val Returns Bool val next [Source] Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. fun ref next() : M- V ? Returns M- V ?","title":"class MapValues"},{"location":"collections-MapValues/#mapvalues91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h93-read93","text":"[Source] An iterator over the values in a map. class ref MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M- V] ref","title":"MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"},{"location":"collections-MapValues/#implements","text":"Iterator [M- V] ref","title":"Implements"},{"location":"collections-MapValues/#constructors","text":"","title":"Constructors"},{"location":"collections-MapValues/#create","text":"[Source] Creates an iterator for the given map. new ref create( map: M) : MapValues[K, V, H, M] ref^","title":"create"},{"location":"collections-MapValues/#parameters","text":"map: M","title":"Parameters"},{"location":"collections-MapValues/#returns","text":"MapValues [K, V, H, M] ref^","title":"Returns"},{"location":"collections-MapValues/#public-functions","text":"","title":"Public Functions"},{"location":"collections-MapValues/#has_next","text":"[Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-MapValues/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-MapValues/#next","text":"[Source] Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. fun ref next() : M- V ?","title":"next"},{"location":"collections-MapValues/#returns_2","text":"M- V ?","title":"Returns"},{"location":"collections-Range/","text":"Range[optional A: ( Real [A] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] [Source] Produces [min, max) with a step of inc for any Number type. // iterating with for-loop for i in Range(0, 10) do env.out.print(i.string()) end // iterating over Range of U8 with while-loop let range = Range[U8](5, 100, 5) while range.has_next() do handle_u8(range.next()) end Supports min being smaller than max with negative inc but only for signed integer types and floats: var previous = 11 for left in Range[I64](10, -5, -1) do if not (left previous) then error end previous = left end If the step is not moving min towards max or if it is 0 , the Range is considered infinite and iterating over it will never terminate: let infinite_range1 = Range(0, 1, 0) infinite_range1.is_infinite() == true let infinite_range2 = Range[I8](0, 10, -1) for _ in infinite_range2 do env.out.print( will this ever end? ) env.err.print( no, never! ) end When using Range with floating point types ( F32 and F64 ) inc steps 1.0 are possible. If any of the arguments contains NaN , +Inf or -Inf the range is considered infinite as operations on any of them won't move min towards max . The actual values produced by such a Range are determined by what IEEE 754 defines as the result of min + inc : for and_a_half in Range[F64](0.5, 100) do handle_half(and_a_half) end // this Range will produce 0 at first, then infinitely NaN let nan: F64 = F64(0) / F64(0) for what_am_i in Range[F64](0, 1000, nan) do wild_guess(what_am_i) end class ref Range[optional A: (Real[A] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] is Iterator[A] ref Implements Iterator [A] ref Constructors create [Source] new ref create( min: A, max: A, inc: A = seq) : Range[A] ref^ Parameters min: A max: A inc: A = seq Returns Range [A] ref^ Public Functions has_next [Source] fun box has_next() : Bool val Returns Bool val next [Source] fun ref next() : A Returns A rewind [Source] fun ref rewind() : None val Returns None val is_infinite [Source] fun box is_infinite() : Bool val Returns Bool val","title":"class Range"},{"location":"collections-Range/#range91optional-a-real91a93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93","text":"[Source] Produces [min, max) with a step of inc for any Number type. // iterating with for-loop for i in Range(0, 10) do env.out.print(i.string()) end // iterating over Range of U8 with while-loop let range = Range[U8](5, 100, 5) while range.has_next() do handle_u8(range.next()) end Supports min being smaller than max with negative inc but only for signed integer types and floats: var previous = 11 for left in Range[I64](10, -5, -1) do if not (left previous) then error end previous = left end If the step is not moving min towards max or if it is 0 , the Range is considered infinite and iterating over it will never terminate: let infinite_range1 = Range(0, 1, 0) infinite_range1.is_infinite() == true let infinite_range2 = Range[I8](0, 10, -1) for _ in infinite_range2 do env.out.print( will this ever end? ) env.err.print( no, never! ) end When using Range with floating point types ( F32 and F64 ) inc steps 1.0 are possible. If any of the arguments contains NaN , +Inf or -Inf the range is considered infinite as operations on any of them won't move min towards max . The actual values produced by such a Range are determined by what IEEE 754 defines as the result of min + inc : for and_a_half in Range[F64](0.5, 100) do handle_half(and_a_half) end // this Range will produce 0 at first, then infinitely NaN let nan: F64 = F64(0) / F64(0) for what_am_i in Range[F64](0, 1000, nan) do wild_guess(what_am_i) end class ref Range[optional A: (Real[A] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] is Iterator[A] ref","title":"Range[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"},{"location":"collections-Range/#implements","text":"Iterator [A] ref","title":"Implements"},{"location":"collections-Range/#constructors","text":"","title":"Constructors"},{"location":"collections-Range/#create","text":"[Source] new ref create( min: A, max: A, inc: A = seq) : Range[A] ref^","title":"create"},{"location":"collections-Range/#parameters","text":"min: A max: A inc: A = seq","title":"Parameters"},{"location":"collections-Range/#returns","text":"Range [A] ref^","title":"Returns"},{"location":"collections-Range/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Range/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"collections-Range/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-Range/#next","text":"[Source] fun ref next() : A","title":"next"},{"location":"collections-Range/#returns_2","text":"A","title":"Returns"},{"location":"collections-Range/#rewind","text":"[Source] fun ref rewind() : None val","title":"rewind"},{"location":"collections-Range/#returns_3","text":"None val","title":"Returns"},{"location":"collections-Range/#is_infinite","text":"[Source] fun box is_infinite() : Bool val","title":"is_infinite"},{"location":"collections-Range/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-Reverse/","text":"Reverse[optional A: ( Real [A] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] [Source] Produces [max, min]. class ref Reverse[optional A: (Real[A] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] is Iterator[A] ref Implements Iterator [A] ref Constructors create [Source] new ref create( max: A, min: A, dec: A = seq) : Reverse[A] ref^ Parameters max: A min: A dec: A = seq Returns Reverse [A] ref^ Public Functions has_next [Source] fun box has_next() : Bool val Returns Bool val next [Source] fun ref next() : A Returns A rewind [Source] fun ref rewind() : None val Returns None val","title":"class Reverse"},{"location":"collections-Reverse/#reverse91optional-a-real91a93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93","text":"[Source] Produces [max, min]. class ref Reverse[optional A: (Real[A] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] is Iterator[A] ref","title":"Reverse[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"},{"location":"collections-Reverse/#implements","text":"Iterator [A] ref","title":"Implements"},{"location":"collections-Reverse/#constructors","text":"","title":"Constructors"},{"location":"collections-Reverse/#create","text":"[Source] new ref create( max: A, min: A, dec: A = seq) : Reverse[A] ref^","title":"create"},{"location":"collections-Reverse/#parameters","text":"max: A min: A dec: A = seq","title":"Parameters"},{"location":"collections-Reverse/#returns","text":"Reverse [A] ref^","title":"Returns"},{"location":"collections-Reverse/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Reverse/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"collections-Reverse/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-Reverse/#next","text":"[Source] fun ref next() : A","title":"next"},{"location":"collections-Reverse/#returns_2","text":"A","title":"Returns"},{"location":"collections-Reverse/#rewind","text":"[Source] fun ref rewind() : None val","title":"rewind"},{"location":"collections-Reverse/#returns_3","text":"None val","title":"Returns"},{"location":"collections-RingBuffer/","text":"RingBuffer[A: A] [Source] A ring buffer. class ref RingBuffer[A: A] Constructors create [Source] Create a ring buffer with a fixed size. The size will be rounded up to the next power of 2. new ref create( len: USize val) : RingBuffer[A] ref^ Parameters len: USize val Returns RingBuffer [A] ref^ Public Functions head [Source] The first read that will succeed. If nothing has been written to the ring, this will raise an error. fun box head() : USize val ? Returns USize val ? size [Source] The number of elements that have been added to the ring. fun box size() : USize val Returns USize val space [Source] The available space in the ring. fun box space() : USize val Returns USize val apply [Source] Get the i-th element from the ring. If the i-th element has not yet been added or is no longer available, this will raise an error. fun box apply( i: USize val) : this- A ? Parameters i: USize val Returns this- A ? push [Source] Add an element to the ring. If the ring is full, this will drop the oldest element in the ring. Returns true if an element was dropped. fun ref push( value: A) : Bool val Parameters value: A Returns Bool val clear [Source] Clear the queue. fun ref clear() : None val Returns None val","title":"class RingBuffer"},{"location":"collections-RingBuffer/#ringbuffer91a-a93","text":"[Source] A ring buffer. class ref RingBuffer[A: A]","title":"RingBuffer[A: A]"},{"location":"collections-RingBuffer/#constructors","text":"","title":"Constructors"},{"location":"collections-RingBuffer/#create","text":"[Source] Create a ring buffer with a fixed size. The size will be rounded up to the next power of 2. new ref create( len: USize val) : RingBuffer[A] ref^","title":"create"},{"location":"collections-RingBuffer/#parameters","text":"len: USize val","title":"Parameters"},{"location":"collections-RingBuffer/#returns","text":"RingBuffer [A] ref^","title":"Returns"},{"location":"collections-RingBuffer/#public-functions","text":"","title":"Public Functions"},{"location":"collections-RingBuffer/#head","text":"[Source] The first read that will succeed. If nothing has been written to the ring, this will raise an error. fun box head() : USize val ?","title":"head"},{"location":"collections-RingBuffer/#returns_1","text":"USize val ?","title":"Returns"},{"location":"collections-RingBuffer/#size","text":"[Source] The number of elements that have been added to the ring. fun box size() : USize val","title":"size"},{"location":"collections-RingBuffer/#returns_2","text":"USize val","title":"Returns"},{"location":"collections-RingBuffer/#space","text":"[Source] The available space in the ring. fun box space() : USize val","title":"space"},{"location":"collections-RingBuffer/#returns_3","text":"USize val","title":"Returns"},{"location":"collections-RingBuffer/#apply","text":"[Source] Get the i-th element from the ring. If the i-th element has not yet been added or is no longer available, this will raise an error. fun box apply( i: USize val) : this- A ?","title":"apply"},{"location":"collections-RingBuffer/#parameters_1","text":"i: USize val","title":"Parameters"},{"location":"collections-RingBuffer/#returns_4","text":"this- A ?","title":"Returns"},{"location":"collections-RingBuffer/#push","text":"[Source] Add an element to the ring. If the ring is full, this will drop the oldest element in the ring. Returns true if an element was dropped. fun ref push( value: A) : Bool val","title":"push"},{"location":"collections-RingBuffer/#parameters_2","text":"value: A","title":"Parameters"},{"location":"collections-RingBuffer/#returns_5","text":"Bool val","title":"Returns"},{"location":"collections-RingBuffer/#clear","text":"[Source] Clear the queue. fun ref clear() : None val","title":"clear"},{"location":"collections-RingBuffer/#returns_6","text":"None val","title":"Returns"},{"location":"collections-Set/","text":"Set[A: ( Hashable #read Equatable [A] #read)] [Source] type Set[A: (Hashable #read Equatable[A] #read)] is HashSet[A, HashEq[A] val] ref Type Alias For HashSet [A, HashEq [A] val] ref","title":"type Set"},{"location":"collections-Set/#set91a-hashable-read-equatable91a93-read93","text":"[Source] type Set[A: (Hashable #read Equatable[A] #read)] is HashSet[A, HashEq[A] val] ref","title":"Set[A: (Hashable #read &amp; Equatable[A] #read)]"},{"location":"collections-Set/#type-alias-for","text":"HashSet [A, HashEq [A] val] ref","title":"Type Alias For"},{"location":"collections-SetIs/","text":"SetIs[A: A] [Source] type SetIs[A: A] is HashSet[A, HashIs[A!] val] ref Type Alias For HashSet [A, HashIs [A!] val] ref","title":"type SetIs"},{"location":"collections-SetIs/#setis91a-a93","text":"[Source] type SetIs[A: A] is HashSet[A, HashIs[A!] val] ref","title":"SetIs[A: A]"},{"location":"collections-SetIs/#type-alias-for","text":"HashSet [A, HashIs [A!] val] ref","title":"Type Alias For"},{"location":"collections-SetValues/","text":"SetValues[A: A, H: HashFunction [A!] val, S: HashSet [A, H] #read] [Source] An iterator over the values in a set. class ref SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is Iterator[S- A] ref Implements Iterator [S- A] ref Constructors create [Source] Creates an iterator for the given set. new ref create( set: S) : SetValues[A, H, S] ref^ Parameters set: S Returns SetValues [A, H, S] ref^ Public Functions has_next [Source] True if it believes there are remaining entries. May not be right if values were added or removed from the set. fun box has_next() : Bool val Returns Bool val next [Source] Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. fun ref next() : S- A ? Returns S- A ?","title":"class SetValues"},{"location":"collections-SetValues/#setvalues91a-a-h-hashfunction91a93-val-s-hashset91a-h93-read93","text":"[Source] An iterator over the values in a set. class ref SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is Iterator[S- A] ref","title":"SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read]"},{"location":"collections-SetValues/#implements","text":"Iterator [S- A] ref","title":"Implements"},{"location":"collections-SetValues/#constructors","text":"","title":"Constructors"},{"location":"collections-SetValues/#create","text":"[Source] Creates an iterator for the given set. new ref create( set: S) : SetValues[A, H, S] ref^","title":"create"},{"location":"collections-SetValues/#parameters","text":"set: S","title":"Parameters"},{"location":"collections-SetValues/#returns","text":"SetValues [A, H, S] ref^","title":"Returns"},{"location":"collections-SetValues/#public-functions","text":"","title":"Public Functions"},{"location":"collections-SetValues/#has_next","text":"[Source] True if it believes there are remaining entries. May not be right if values were added or removed from the set. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-SetValues/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-SetValues/#next","text":"[Source] Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. fun ref next() : S- A ?","title":"next"},{"location":"collections-SetValues/#returns_2","text":"S- A ?","title":"Returns"},{"location":"collections-Sort/","text":"Sort[A: Seq [B] ref, B: Comparable [B] #read] [Source] Implementation of dual-pivot quicksort. primitive val Sort[A: Seq[B] ref, B: Comparable[B] #read] Constructors create [Source] new val create() : Sort[A, B] val^ Returns Sort [A, B] val^ Public Functions apply [Source] Sort the given seq. fun box apply( a: A) : A^ Parameters a: A Returns A^ eq [Source] fun box eq( that: Sort[A, B] val) : Bool val Parameters that: Sort [A, B] val Returns Bool val ne [Source] fun box ne( that: Sort[A, B] val) : Bool val Parameters that: Sort [A, B] val Returns Bool val Private Functions _sort [Source] fun box _sort( a: A, lo: ISize val, hi: ISize val) : None val ? Parameters a: A lo: ISize val hi: ISize val Returns None val ? _swap [Source] fun box _swap( a: A, i: ISize val, j: ISize val) : None val ? Parameters a: A i: ISize val j: ISize val Returns None val ?","title":"primitive Sort"},{"location":"collections-Sort/#sort91a-seq91b93-ref-b-comparable91b93-read93","text":"[Source] Implementation of dual-pivot quicksort. primitive val Sort[A: Seq[B] ref, B: Comparable[B] #read]","title":"Sort[A: Seq[B] ref, B: Comparable[B] #read]"},{"location":"collections-Sort/#constructors","text":"","title":"Constructors"},{"location":"collections-Sort/#create","text":"[Source] new val create() : Sort[A, B] val^","title":"create"},{"location":"collections-Sort/#returns","text":"Sort [A, B] val^","title":"Returns"},{"location":"collections-Sort/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Sort/#apply","text":"[Source] Sort the given seq. fun box apply( a: A) : A^","title":"apply"},{"location":"collections-Sort/#parameters","text":"a: A","title":"Parameters"},{"location":"collections-Sort/#returns_1","text":"A^","title":"Returns"},{"location":"collections-Sort/#eq","text":"[Source] fun box eq( that: Sort[A, B] val) : Bool val","title":"eq"},{"location":"collections-Sort/#parameters_1","text":"that: Sort [A, B] val","title":"Parameters"},{"location":"collections-Sort/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-Sort/#ne","text":"[Source] fun box ne( that: Sort[A, B] val) : Bool val","title":"ne"},{"location":"collections-Sort/#parameters_2","text":"that: Sort [A, B] val","title":"Parameters"},{"location":"collections-Sort/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-Sort/#private-functions","text":"","title":"Private Functions"},{"location":"collections-Sort/#_sort","text":"[Source] fun box _sort( a: A, lo: ISize val, hi: ISize val) : None val ?","title":"_sort"},{"location":"collections-Sort/#parameters_3","text":"a: A lo: ISize val hi: ISize val","title":"Parameters"},{"location":"collections-Sort/#returns_4","text":"None val ?","title":"Returns"},{"location":"collections-Sort/#_swap","text":"[Source] fun box _swap( a: A, i: ISize val, j: ISize val) : None val ?","title":"_swap"},{"location":"collections-Sort/#parameters_4","text":"a: A i: ISize val j: ISize val","title":"Parameters"},{"location":"collections-Sort/#returns_5","text":"None val ?","title":"Returns"},{"location":"collections-_MapDeleted/","text":"_MapDeleted [Source] primitive val _MapDeleted Constructors create [Source] new val create() : _MapDeleted val^ Returns _MapDeleted val^ Public Functions eq [Source] fun box eq( that: _MapDeleted val) : Bool val Parameters that: _MapDeleted val Returns Bool val ne [Source] fun box ne( that: _MapDeleted val) : Bool val Parameters that: _MapDeleted val Returns Bool val","title":"primitive _MapDeleted"},{"location":"collections-_MapDeleted/#_mapdeleted","text":"[Source] primitive val _MapDeleted","title":"_MapDeleted"},{"location":"collections-_MapDeleted/#constructors","text":"","title":"Constructors"},{"location":"collections-_MapDeleted/#create","text":"[Source] new val create() : _MapDeleted val^","title":"create"},{"location":"collections-_MapDeleted/#returns","text":"_MapDeleted val^","title":"Returns"},{"location":"collections-_MapDeleted/#public-functions","text":"","title":"Public Functions"},{"location":"collections-_MapDeleted/#eq","text":"[Source] fun box eq( that: _MapDeleted val) : Bool val","title":"eq"},{"location":"collections-_MapDeleted/#parameters","text":"that: _MapDeleted val","title":"Parameters"},{"location":"collections-_MapDeleted/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-_MapDeleted/#ne","text":"[Source] fun box ne( that: _MapDeleted val) : Bool val","title":"ne"},{"location":"collections-_MapDeleted/#parameters_1","text":"that: _MapDeleted val","title":"Parameters"},{"location":"collections-_MapDeleted/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-_MapEmpty/","text":"_MapEmpty [Source] primitive val _MapEmpty Constructors create [Source] new val create() : _MapEmpty val^ Returns _MapEmpty val^ Public Functions eq [Source] fun box eq( that: _MapEmpty val) : Bool val Parameters that: _MapEmpty val Returns Bool val ne [Source] fun box ne( that: _MapEmpty val) : Bool val Parameters that: _MapEmpty val Returns Bool val","title":"primitive _MapEmpty"},{"location":"collections-_MapEmpty/#_mapempty","text":"[Source] primitive val _MapEmpty","title":"_MapEmpty"},{"location":"collections-_MapEmpty/#constructors","text":"","title":"Constructors"},{"location":"collections-_MapEmpty/#create","text":"[Source] new val create() : _MapEmpty val^","title":"create"},{"location":"collections-_MapEmpty/#returns","text":"_MapEmpty val^","title":"Returns"},{"location":"collections-_MapEmpty/#public-functions","text":"","title":"Public Functions"},{"location":"collections-_MapEmpty/#eq","text":"[Source] fun box eq( that: _MapEmpty val) : Bool val","title":"eq"},{"location":"collections-_MapEmpty/#parameters","text":"that: _MapEmpty val","title":"Parameters"},{"location":"collections-_MapEmpty/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-_MapEmpty/#ne","text":"[Source] fun box ne( that: _MapEmpty val) : Bool val","title":"ne"},{"location":"collections-_MapEmpty/#parameters_1","text":"that: _MapEmpty val","title":"Parameters"},{"location":"collections-_MapEmpty/#returns_2","text":"Bool val","title":"Returns"},{"location":"encode-base64--index/","text":"Base64 package The Base64 package contains support for doing Base64 binary-to-text encodings. We currently have support 3 encodings: PEM, MIME and URL. To learn more about Base64, we suggest you check out the wikipedia entry . Example code use encode/base64 actor Main new create(env: Env) = env.out.print(Base64.encode( foobar )) try env.out.print(Base64.decode[String iso]( Zm9vYmFy )?) end Public Types primitive Base64","title":"Package"},{"location":"encode-base64--index/#base64-package","text":"The Base64 package contains support for doing Base64 binary-to-text encodings. We currently have support 3 encodings: PEM, MIME and URL. To learn more about Base64, we suggest you check out the wikipedia entry .","title":"Base64 package"},{"location":"encode-base64--index/#example-code","text":"use encode/base64 actor Main new create(env: Env) = env.out.print(Base64.encode( foobar )) try env.out.print(Base64.decode[String iso]( Zm9vYmFy )?) end","title":"Example code"},{"location":"encode-base64--index/#public-types","text":"primitive Base64","title":"Public Types"},{"location":"encode-base64-Base64/","text":"Base64 [Source] primitive val Base64 Constructors create [Source] new val create() : Base64 val^ Returns Base64 val^ Public Functions encode_pem [Source] Encode for PEM (RFC 1421). fun box encode_pem( data: ReadSeq[U8 val] box) : String iso^ Parameters data: ReadSeq [ U8 val] box Returns String iso^ encode_mime [Source] Encode for MIME (RFC 2045). fun box encode_mime( data: ReadSeq[U8 val] box) : String iso^ Parameters data: ReadSeq [ U8 val] box Returns String iso^ encode_url[optional A: Seq [ U8 val] iso] [Source] Encode for URLs (RFC 4648). Padding characters are stripped by default. fun box encode_url[optional A: Seq[U8 val] iso]( data: ReadSeq[U8 val] box, pad: Bool val = seq) : A^ Parameters data: ReadSeq [ U8 val] box pad: Bool val = seq Returns A^ encode[optional A: Seq [ U8 val] iso] [Source] Configurable encoding. The defaults are for RFC 4648. fun box encode[optional A: Seq[U8 val] iso]( data: ReadSeq[U8 val] box, at62: U8 val = seq, at63: U8 val = seq, pad: U8 val = seq, linelen: USize val = seq, linesep: String val = seq) : A^ Parameters data: ReadSeq [ U8 val] box at62: U8 val = seq at63: U8 val = seq pad: U8 val = seq linelen: USize val = seq linesep: String val = seq Returns A^ decode_url[optional A: Seq [ U8 val] iso] [Source] Decode for URLs (RFC 4648). fun box decode_url[optional A: Seq[U8 val] iso]( data: ReadSeq[U8 val] box) : A^ ? Parameters data: ReadSeq [ U8 val] box Returns A^ ? decode[optional A: Seq [ U8 val] iso] [Source] Configurable decoding. The defaults are for RFC 4648. Missing padding is not an error. Non-base64 data, other than whitespace (which can appear at any time), is an error. fun box decode[optional A: Seq[U8 val] iso]( data: ReadSeq[U8 val] box, at62: U8 val = seq, at63: U8 val = seq, pad: U8 val = seq) : A^ ? Parameters data: ReadSeq [ U8 val] box at62: U8 val = seq at63: U8 val = seq pad: U8 val = seq Returns A^ ? eq [Source] fun box eq( that: Base64 val) : Bool val Parameters that: Base64 val Returns Bool val ne [Source] fun box ne( that: Base64 val) : Bool val Parameters that: Base64 val Returns Bool val Private Functions _enc_byte [Source] Encode a single byte. fun box _enc_byte( i: U8 val, at62: U8 val, at63: U8 val) : U8 val ? Parameters i: U8 val at62: U8 val at63: U8 val Returns U8 val ?","title":"primitive Base64"},{"location":"encode-base64-Base64/#base64","text":"[Source] primitive val Base64","title":"Base64"},{"location":"encode-base64-Base64/#constructors","text":"","title":"Constructors"},{"location":"encode-base64-Base64/#create","text":"[Source] new val create() : Base64 val^","title":"create"},{"location":"encode-base64-Base64/#returns","text":"Base64 val^","title":"Returns"},{"location":"encode-base64-Base64/#public-functions","text":"","title":"Public Functions"},{"location":"encode-base64-Base64/#encode_pem","text":"[Source] Encode for PEM (RFC 1421). fun box encode_pem( data: ReadSeq[U8 val] box) : String iso^","title":"encode_pem"},{"location":"encode-base64-Base64/#parameters","text":"data: ReadSeq [ U8 val] box","title":"Parameters"},{"location":"encode-base64-Base64/#returns_1","text":"String iso^","title":"Returns"},{"location":"encode-base64-Base64/#encode_mime","text":"[Source] Encode for MIME (RFC 2045). fun box encode_mime( data: ReadSeq[U8 val] box) : String iso^","title":"encode_mime"},{"location":"encode-base64-Base64/#parameters_1","text":"data: ReadSeq [ U8 val] box","title":"Parameters"},{"location":"encode-base64-Base64/#returns_2","text":"String iso^","title":"Returns"},{"location":"encode-base64-Base64/#encode_url91optional-a-seq91u8-val93-iso93","text":"[Source] Encode for URLs (RFC 4648). Padding characters are stripped by default. fun box encode_url[optional A: Seq[U8 val] iso]( data: ReadSeq[U8 val] box, pad: Bool val = seq) : A^","title":"encode_url[optional A: Seq[U8 val] iso]"},{"location":"encode-base64-Base64/#parameters_2","text":"data: ReadSeq [ U8 val] box pad: Bool val = seq","title":"Parameters"},{"location":"encode-base64-Base64/#returns_3","text":"A^","title":"Returns"},{"location":"encode-base64-Base64/#encode91optional-a-seq91u8-val93-iso93","text":"[Source] Configurable encoding. The defaults are for RFC 4648. fun box encode[optional A: Seq[U8 val] iso]( data: ReadSeq[U8 val] box, at62: U8 val = seq, at63: U8 val = seq, pad: U8 val = seq, linelen: USize val = seq, linesep: String val = seq) : A^","title":"encode[optional A: Seq[U8 val] iso]"},{"location":"encode-base64-Base64/#parameters_3","text":"data: ReadSeq [ U8 val] box at62: U8 val = seq at63: U8 val = seq pad: U8 val = seq linelen: USize val = seq linesep: String val = seq","title":"Parameters"},{"location":"encode-base64-Base64/#returns_4","text":"A^","title":"Returns"},{"location":"encode-base64-Base64/#decode_url91optional-a-seq91u8-val93-iso93","text":"[Source] Decode for URLs (RFC 4648). fun box decode_url[optional A: Seq[U8 val] iso]( data: ReadSeq[U8 val] box) : A^ ?","title":"decode_url[optional A: Seq[U8 val] iso]"},{"location":"encode-base64-Base64/#parameters_4","text":"data: ReadSeq [ U8 val] box","title":"Parameters"},{"location":"encode-base64-Base64/#returns_5","text":"A^ ?","title":"Returns"},{"location":"encode-base64-Base64/#decode91optional-a-seq91u8-val93-iso93","text":"[Source] Configurable decoding. The defaults are for RFC 4648. Missing padding is not an error. Non-base64 data, other than whitespace (which can appear at any time), is an error. fun box decode[optional A: Seq[U8 val] iso]( data: ReadSeq[U8 val] box, at62: U8 val = seq, at63: U8 val = seq, pad: U8 val = seq) : A^ ?","title":"decode[optional A: Seq[U8 val] iso]"},{"location":"encode-base64-Base64/#parameters_5","text":"data: ReadSeq [ U8 val] box at62: U8 val = seq at63: U8 val = seq pad: U8 val = seq","title":"Parameters"},{"location":"encode-base64-Base64/#returns_6","text":"A^ ?","title":"Returns"},{"location":"encode-base64-Base64/#eq","text":"[Source] fun box eq( that: Base64 val) : Bool val","title":"eq"},{"location":"encode-base64-Base64/#parameters_6","text":"that: Base64 val","title":"Parameters"},{"location":"encode-base64-Base64/#returns_7","text":"Bool val","title":"Returns"},{"location":"encode-base64-Base64/#ne","text":"[Source] fun box ne( that: Base64 val) : Bool val","title":"ne"},{"location":"encode-base64-Base64/#parameters_7","text":"that: Base64 val","title":"Parameters"},{"location":"encode-base64-Base64/#returns_8","text":"Bool val","title":"Returns"},{"location":"encode-base64-Base64/#private-functions","text":"","title":"Private Functions"},{"location":"encode-base64-Base64/#_enc_byte","text":"[Source] Encode a single byte. fun box _enc_byte( i: U8 val, at62: U8 val, at63: U8 val) : U8 val ?","title":"_enc_byte"},{"location":"encode-base64-Base64/#parameters_8","text":"i: U8 val at62: U8 val at63: U8 val","title":"Parameters"},{"location":"encode-base64-Base64/#returns_9","text":"U8 val ?","title":"Returns"},{"location":"files--index/","text":"Files package The Files package provides classes for working with files and directories. Files are identified by FilePath objects, which represent both the path to the file and the capabilites for accessing the file at that path. FilePath objects can be used with the CreateFile and OpenFile primitives and the File class to get a reference to a file that can be used to write to and/or read from the file. It can also be used with the Directory object to get a reference to a directory object that can be used for directory operations. The FileLine class allows a file to be accessed one line at a time. The FileStream actor provides the ability to asynchronously write to a file. The Path primitive can be used to do path-related operations on strings and characters. Example program This program opens the files that are given as command line arguments and prints their contents. use files actor Main new create(env: Env) = try for file_name in env.args.slice(1).values() do let path = FilePath(env.root as AmbientAuth, file_name)? match OpenFile(path) | let file: File = while file.errno() is FileOK do env.out.write(file.read(1024)) end else env.err.print( Error opening file ' + file_name + ' ) end end end Public Types primitive Path actor FileStream interface WalkHandler class FilePath class FileMode class FileLines class FileInfo primitive FileCreate primitive FileChmod primitive FileChown primitive FileLink primitive FileLookup primitive FileMkdir primitive FileRead primitive FileRemove primitive FileRename primitive FileSeek primitive FileStat primitive FileSync primitive FileTime primitive FileTruncate primitive FileWrite primitive FileExec type FileCaps primitive FileOK primitive FileError primitive FileEOF primitive FileBadFileNumber primitive FileExists primitive FilePermissionDenied type FileErrNo primitive CreateFile primitive OpenFile class File class Directory Private Types primitive _PathSep primitive _PathDot primitive _PathDot2 primitive _PathOther type _PathState primitive _EBADF primitive _EEXIST primitive _EACCES primitive _DirectoryHandle primitive _DirectoryEntry primitive _FileHelper primitive _FileDes","title":"Package"},{"location":"files--index/#files-package","text":"The Files package provides classes for working with files and directories. Files are identified by FilePath objects, which represent both the path to the file and the capabilites for accessing the file at that path. FilePath objects can be used with the CreateFile and OpenFile primitives and the File class to get a reference to a file that can be used to write to and/or read from the file. It can also be used with the Directory object to get a reference to a directory object that can be used for directory operations. The FileLine class allows a file to be accessed one line at a time. The FileStream actor provides the ability to asynchronously write to a file. The Path primitive can be used to do path-related operations on strings and characters.","title":"Files package"},{"location":"files--index/#example-program","text":"This program opens the files that are given as command line arguments and prints their contents. use files actor Main new create(env: Env) = try for file_name in env.args.slice(1).values() do let path = FilePath(env.root as AmbientAuth, file_name)? match OpenFile(path) | let file: File = while file.errno() is FileOK do env.out.write(file.read(1024)) end else env.err.print( Error opening file ' + file_name + ' ) end end end","title":"Example program"},{"location":"files--index/#public-types","text":"primitive Path actor FileStream interface WalkHandler class FilePath class FileMode class FileLines class FileInfo primitive FileCreate primitive FileChmod primitive FileChown primitive FileLink primitive FileLookup primitive FileMkdir primitive FileRead primitive FileRemove primitive FileRename primitive FileSeek primitive FileStat primitive FileSync primitive FileTime primitive FileTruncate primitive FileWrite primitive FileExec type FileCaps primitive FileOK primitive FileError primitive FileEOF primitive FileBadFileNumber primitive FileExists primitive FilePermissionDenied type FileErrNo primitive CreateFile primitive OpenFile class File class Directory","title":"Public Types"},{"location":"files--index/#private-types","text":"primitive _PathSep primitive _PathDot primitive _PathDot2 primitive _PathOther type _PathState primitive _EBADF primitive _EEXIST primitive _EACCES primitive _DirectoryHandle primitive _DirectoryEntry primitive _FileHelper primitive _FileDes","title":"Private Types"},{"location":"files-CreateFile/","text":"CreateFile [Source] Open a File for read/write, creating if it doesn't exist, preserving the contents if it does exist. primitive val CreateFile Constructors create [Source] new val create() : CreateFile val^ Returns CreateFile val^ Public Functions apply [Source] fun box apply( from: FilePath val) : (File ref | FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val) Parameters from: FilePath val Returns ( File ref | FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val) eq [Source] fun box eq( that: CreateFile val) : Bool val Parameters that: CreateFile val Returns Bool val ne [Source] fun box ne( that: CreateFile val) : Bool val Parameters that: CreateFile val Returns Bool val","title":"primitive CreateFile"},{"location":"files-CreateFile/#createfile","text":"[Source] Open a File for read/write, creating if it doesn't exist, preserving the contents if it does exist. primitive val CreateFile","title":"CreateFile"},{"location":"files-CreateFile/#constructors","text":"","title":"Constructors"},{"location":"files-CreateFile/#create","text":"[Source] new val create() : CreateFile val^","title":"create"},{"location":"files-CreateFile/#returns","text":"CreateFile val^","title":"Returns"},{"location":"files-CreateFile/#public-functions","text":"","title":"Public Functions"},{"location":"files-CreateFile/#apply","text":"[Source] fun box apply( from: FilePath val) : (File ref | FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"apply"},{"location":"files-CreateFile/#parameters","text":"from: FilePath val","title":"Parameters"},{"location":"files-CreateFile/#returns_1","text":"( File ref | FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"Returns"},{"location":"files-CreateFile/#eq","text":"[Source] fun box eq( that: CreateFile val) : Bool val","title":"eq"},{"location":"files-CreateFile/#parameters_1","text":"that: CreateFile val","title":"Parameters"},{"location":"files-CreateFile/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-CreateFile/#ne","text":"[Source] fun box ne( that: CreateFile val) : Bool val","title":"ne"},{"location":"files-CreateFile/#parameters_2","text":"that: CreateFile val","title":"Parameters"},{"location":"files-CreateFile/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-Directory/","text":"Directory [Source] Operations on a directory. The directory-relative functions (open, etc) use the *at interface on FreeBSD and Linux. This isn't available on OS X prior to 10.10, so it is not used. On FreeBSD, this allows the directory-relative functions to take advantage of Capsicum. class ref Directory Constructors create [Source] This will raise an error if the path doesn't exist or it is not a directory, or if FileRead or FileStat permission isn't available. new ref create( from: FilePath val) : Directory ref^ ? Parameters from: FilePath val Returns Directory ref^ ? _relative [Source] Internal constructor. Capsicum rights are already set by inheritence. new iso _relative( path': FilePath val, fd': I32 val) : Directory iso^ Parameters path': FilePath val fd': I32 val Returns Directory iso^ Public fields let path: FilePath val [Source] This is the filesystem path locating this directory on the file system and an object capability granting access to operate on this directory. Public Functions entries [Source] The entries will include everything in the directory, but it is not recursive. The path for the entry will be relative to the directory, so it will contain no directory separators. The entries will not include \".\" or \"..\". fun box entries() : Array[String val] iso^ ? Returns Array [ String val] iso^ ? open [Source] Open a directory relative to this one. Raises an error if the path is not within this directory hierarchy. fun box open( target: String val) : Directory iso^ ? Parameters target: String val Returns Directory iso^ ? mkdir [Source] Creates a directory relative to this one. Returns false if the path is not within this directory hierarchy or if FileMkdir permission is missing. fun box mkdir( target: String val) : Bool val Parameters target: String val Returns Bool val create_file [Source] Open for read/write, creating if it doesn't exist, preserving the contents if it does exist. fun box create_file( target: String val) : File iso^ ? Parameters target: String val Returns File iso^ ? open_file [Source] Open for read only, failing if it doesn't exist. fun box open_file( target: String val) : File iso^ ? Parameters target: String val Returns File iso^ ? info [Source] Return a FileInfo for this directory. Raise an error if the fd is invalid or if we don't have FileStat permission. fun box info() : FileInfo val ? Returns FileInfo val ? chmod [Source] Set the FileMode for this directory. fun box chmod( mode: FileMode box) : Bool val Parameters mode: FileMode box Returns Bool val chown [Source] Set the owner and group for this directory. Does nothing on Windows. fun box chown( uid: U32 val, gid: U32 val) : Bool val Parameters uid: U32 val gid: U32 val Returns Bool val touch [Source] Set the last access and modification times of the directory to now. fun box touch() : Bool val Returns Bool val set_time [Source] Set the last access and modification times of the directory to the given values. fun box set_time( atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val Parameters atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val) Returns Bool val infoat [Source] Return a FileInfo for some path relative to this directory. fun box infoat( target: String val) : FileInfo val ? Parameters target: String val Returns FileInfo val ? chmodat [Source] Set the FileMode for some path relative to this directory. fun box chmodat( target: String val, mode: FileMode box) : Bool val Parameters target: String val mode: FileMode box Returns Bool val chownat [Source] Set the FileMode for some path relative to this directory. fun box chownat( target: String val, uid: U32 val, gid: U32 val) : Bool val Parameters target: String val uid: U32 val gid: U32 val Returns Bool val touchat [Source] Set the last access and modification times of the directory to now. fun box touchat( target: String val) : Bool val Parameters target: String val Returns Bool val set_time_at [Source] Set the last access and modification times of the directory to the given values. fun box set_time_at( target: String val, atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val Parameters target: String val atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val) Returns Bool val symlink [Source] Link the source path to the link_name, where the link_name is relative to this directory. fun box symlink( source: FilePath val, link_name: String val) : Bool val Parameters source: FilePath val link_name: String val Returns Bool val remove [Source] Remove the file or directory. The directory contents will be removed as well, recursively. Symlinks will be removed but not traversed. fun box remove( target: String val) : Bool val Parameters target: String val Returns Bool val rename [Source] Rename source (which is relative to this directory) to target (which is relative to the to directory). fun box rename( source: String val, to: Directory box, target: String val) : Bool val Parameters source: String val to: Directory box target: String val Returns Bool val dispose [Source] Close the directory. fun ref dispose() : None val Returns None val Private Functions _final [Source] Close the file descriptor. fun box _final() : None val Returns None val","title":"class Directory"},{"location":"files-Directory/#directory","text":"[Source] Operations on a directory. The directory-relative functions (open, etc) use the *at interface on FreeBSD and Linux. This isn't available on OS X prior to 10.10, so it is not used. On FreeBSD, this allows the directory-relative functions to take advantage of Capsicum. class ref Directory","title":"Directory"},{"location":"files-Directory/#constructors","text":"","title":"Constructors"},{"location":"files-Directory/#create","text":"[Source] This will raise an error if the path doesn't exist or it is not a directory, or if FileRead or FileStat permission isn't available. new ref create( from: FilePath val) : Directory ref^ ?","title":"create"},{"location":"files-Directory/#parameters","text":"from: FilePath val","title":"Parameters"},{"location":"files-Directory/#returns","text":"Directory ref^ ?","title":"Returns"},{"location":"files-Directory/#_relative","text":"[Source] Internal constructor. Capsicum rights are already set by inheritence. new iso _relative( path': FilePath val, fd': I32 val) : Directory iso^","title":"_relative"},{"location":"files-Directory/#parameters_1","text":"path': FilePath val fd': I32 val","title":"Parameters"},{"location":"files-Directory/#returns_1","text":"Directory iso^","title":"Returns"},{"location":"files-Directory/#public-fields","text":"","title":"Public fields"},{"location":"files-Directory/#let-path-filepath-val","text":"[Source] This is the filesystem path locating this directory on the file system and an object capability granting access to operate on this directory.","title":"let path: FilePath val"},{"location":"files-Directory/#public-functions","text":"","title":"Public Functions"},{"location":"files-Directory/#entries","text":"[Source] The entries will include everything in the directory, but it is not recursive. The path for the entry will be relative to the directory, so it will contain no directory separators. The entries will not include \".\" or \"..\". fun box entries() : Array[String val] iso^ ?","title":"entries"},{"location":"files-Directory/#returns_2","text":"Array [ String val] iso^ ?","title":"Returns"},{"location":"files-Directory/#open","text":"[Source] Open a directory relative to this one. Raises an error if the path is not within this directory hierarchy. fun box open( target: String val) : Directory iso^ ?","title":"open"},{"location":"files-Directory/#parameters_2","text":"target: String val","title":"Parameters"},{"location":"files-Directory/#returns_3","text":"Directory iso^ ?","title":"Returns"},{"location":"files-Directory/#mkdir","text":"[Source] Creates a directory relative to this one. Returns false if the path is not within this directory hierarchy or if FileMkdir permission is missing. fun box mkdir( target: String val) : Bool val","title":"mkdir"},{"location":"files-Directory/#parameters_3","text":"target: String val","title":"Parameters"},{"location":"files-Directory/#returns_4","text":"Bool val","title":"Returns"},{"location":"files-Directory/#create_file","text":"[Source] Open for read/write, creating if it doesn't exist, preserving the contents if it does exist. fun box create_file( target: String val) : File iso^ ?","title":"create_file"},{"location":"files-Directory/#parameters_4","text":"target: String val","title":"Parameters"},{"location":"files-Directory/#returns_5","text":"File iso^ ?","title":"Returns"},{"location":"files-Directory/#open_file","text":"[Source] Open for read only, failing if it doesn't exist. fun box open_file( target: String val) : File iso^ ?","title":"open_file"},{"location":"files-Directory/#parameters_5","text":"target: String val","title":"Parameters"},{"location":"files-Directory/#returns_6","text":"File iso^ ?","title":"Returns"},{"location":"files-Directory/#info","text":"[Source] Return a FileInfo for this directory. Raise an error if the fd is invalid or if we don't have FileStat permission. fun box info() : FileInfo val ?","title":"info"},{"location":"files-Directory/#returns_7","text":"FileInfo val ?","title":"Returns"},{"location":"files-Directory/#chmod","text":"[Source] Set the FileMode for this directory. fun box chmod( mode: FileMode box) : Bool val","title":"chmod"},{"location":"files-Directory/#parameters_6","text":"mode: FileMode box","title":"Parameters"},{"location":"files-Directory/#returns_8","text":"Bool val","title":"Returns"},{"location":"files-Directory/#chown","text":"[Source] Set the owner and group for this directory. Does nothing on Windows. fun box chown( uid: U32 val, gid: U32 val) : Bool val","title":"chown"},{"location":"files-Directory/#parameters_7","text":"uid: U32 val gid: U32 val","title":"Parameters"},{"location":"files-Directory/#returns_9","text":"Bool val","title":"Returns"},{"location":"files-Directory/#touch","text":"[Source] Set the last access and modification times of the directory to now. fun box touch() : Bool val","title":"touch"},{"location":"files-Directory/#returns_10","text":"Bool val","title":"Returns"},{"location":"files-Directory/#set_time","text":"[Source] Set the last access and modification times of the directory to the given values. fun box set_time( atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val","title":"set_time"},{"location":"files-Directory/#parameters_8","text":"atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val)","title":"Parameters"},{"location":"files-Directory/#returns_11","text":"Bool val","title":"Returns"},{"location":"files-Directory/#infoat","text":"[Source] Return a FileInfo for some path relative to this directory. fun box infoat( target: String val) : FileInfo val ?","title":"infoat"},{"location":"files-Directory/#parameters_9","text":"target: String val","title":"Parameters"},{"location":"files-Directory/#returns_12","text":"FileInfo val ?","title":"Returns"},{"location":"files-Directory/#chmodat","text":"[Source] Set the FileMode for some path relative to this directory. fun box chmodat( target: String val, mode: FileMode box) : Bool val","title":"chmodat"},{"location":"files-Directory/#parameters_10","text":"target: String val mode: FileMode box","title":"Parameters"},{"location":"files-Directory/#returns_13","text":"Bool val","title":"Returns"},{"location":"files-Directory/#chownat","text":"[Source] Set the FileMode for some path relative to this directory. fun box chownat( target: String val, uid: U32 val, gid: U32 val) : Bool val","title":"chownat"},{"location":"files-Directory/#parameters_11","text":"target: String val uid: U32 val gid: U32 val","title":"Parameters"},{"location":"files-Directory/#returns_14","text":"Bool val","title":"Returns"},{"location":"files-Directory/#touchat","text":"[Source] Set the last access and modification times of the directory to now. fun box touchat( target: String val) : Bool val","title":"touchat"},{"location":"files-Directory/#parameters_12","text":"target: String val","title":"Parameters"},{"location":"files-Directory/#returns_15","text":"Bool val","title":"Returns"},{"location":"files-Directory/#set_time_at","text":"[Source] Set the last access and modification times of the directory to the given values. fun box set_time_at( target: String val, atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val","title":"set_time_at"},{"location":"files-Directory/#parameters_13","text":"target: String val atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val)","title":"Parameters"},{"location":"files-Directory/#returns_16","text":"Bool val","title":"Returns"},{"location":"files-Directory/#symlink","text":"[Source] Link the source path to the link_name, where the link_name is relative to this directory. fun box symlink( source: FilePath val, link_name: String val) : Bool val","title":"symlink"},{"location":"files-Directory/#parameters_14","text":"source: FilePath val link_name: String val","title":"Parameters"},{"location":"files-Directory/#returns_17","text":"Bool val","title":"Returns"},{"location":"files-Directory/#remove","text":"[Source] Remove the file or directory. The directory contents will be removed as well, recursively. Symlinks will be removed but not traversed. fun box remove( target: String val) : Bool val","title":"remove"},{"location":"files-Directory/#parameters_15","text":"target: String val","title":"Parameters"},{"location":"files-Directory/#returns_18","text":"Bool val","title":"Returns"},{"location":"files-Directory/#rename","text":"[Source] Rename source (which is relative to this directory) to target (which is relative to the to directory). fun box rename( source: String val, to: Directory box, target: String val) : Bool val","title":"rename"},{"location":"files-Directory/#parameters_16","text":"source: String val to: Directory box target: String val","title":"Parameters"},{"location":"files-Directory/#returns_19","text":"Bool val","title":"Returns"},{"location":"files-Directory/#dispose","text":"[Source] Close the directory. fun ref dispose() : None val","title":"dispose"},{"location":"files-Directory/#returns_20","text":"None val","title":"Returns"},{"location":"files-Directory/#private-functions","text":"","title":"Private Functions"},{"location":"files-Directory/#_final","text":"[Source] Close the file descriptor. fun box _final() : None val","title":"_final"},{"location":"files-Directory/#returns_21","text":"None val","title":"Returns"},{"location":"files-File/","text":"File [Source] Operations on a file. class ref File Constructors create [Source] Attempt to open for read/write, creating if it doesn't exist, preserving the contents if it does exist. Set errno according to result. new ref create( from: FilePath val) : File ref^ Parameters from: FilePath val Returns File ref^ open [Source] Open for read only. Set _errno according to result. new ref open( from: FilePath val) : File ref^ Parameters from: FilePath val Returns File ref^ _descriptor [Source] Internal constructor from a file descriptor and a path. new ref _descriptor( fd: I32 val, from: FilePath val) : File ref^ ? Parameters fd: I32 val from: FilePath val Returns File ref^ ? Public fields let path: FilePath val [Source] This is the filesystem path locating this file on the file system and an object capability granting access to operate on this file. let writeable: Bool val [Source] true if the underlying file descriptor has been opened as writeable. Public Functions errno [Source] Returns the last error code set for this File fun box errno() : (FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val) Returns ( FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val) clear_errno [Source] Clears the last error code set for this File. Clears the error indicator for the stream. fun ref clear_errno() : None val Returns None val valid [Source] Returns true if the file is currently open. fun box valid() : Bool val Returns Bool val read [Source] Returns up to len bytes. fun ref read( len: USize val) : Array[U8 val] iso^ Parameters len: USize val Returns Array [ U8 val] iso^ read_string [Source] Returns up to len bytes. The resulting string may have internal null characters. fun ref read_string( len: USize val) : String iso^ Parameters len: USize val Returns String iso^ print [Source] Same as write, buts adds a newline. fun ref print( data: (String box | Array[U8 val] box)) : Bool val Parameters data: ( String box | Array [ U8 val] box) Returns Bool val printv [Source] Print an iterable collection of ByteSeqs. fun ref printv( data: ByteSeqIter box) : Bool val Parameters data: ByteSeqIter box Returns Bool val write [Source] Returns false if the file wasn't opened with write permission. Returns false and closes the file if not all the bytes were written. fun ref write( data: (String box | Array[U8 val] box)) : Bool val Parameters data: ( String box | Array [ U8 val] box) Returns Bool val writev [Source] Write an iterable collection of ByteSeqs. fun ref writev( data: ByteSeqIter box) : Bool val Parameters data: ByteSeqIter box Returns Bool val queue [Source] Queue data to be written NOTE: Queue'd data will always be written before normal print/write requested data fun ref queue( data: (String box | Array[U8 val] box)) : None val Parameters data: ( String box | Array [ U8 val] box) Returns None val queuev [Source] Queue an iterable collection of ByteSeqs to be written NOTE: Queue'd data will always be written before normal print/write requested data fun ref queuev( data: ByteSeqIter box) : None val Parameters data: ByteSeqIter box Returns None val flush [Source] Flush any queued data fun ref flush() : Bool val Returns Bool val position [Source] Return the current cursor position in the file. fun ref position() : USize val Returns USize val size [Source] Return the total length of the file. fun ref size() : USize val Returns USize val seek_start [Source] Set the cursor position relative to the start of the file. fun ref seek_start( offset: USize val) : None val Parameters offset: USize val Returns None val seek_end [Source] Set the cursor position relative to the end of the file. fun ref seek_end( offset: USize val) : None val Parameters offset: USize val Returns None val seek [Source] Move the cursor position. fun ref seek( offset: ISize val) : None val Parameters offset: ISize val Returns None val sync [Source] Sync the file contents to physical storage. fun ref sync() : None val Returns None val datasync [Source] Sync the file contents to physical storage. fun ref datasync() : None val Returns None val set_length [Source] Change the file size. If it is made larger, the new contents are undefined. fun ref set_length( len: USize val) : Bool val Parameters len: USize val Returns Bool val info [Source] Return a FileInfo for this directory. Raise an error if the fd is invalid or if we don't have FileStat permission. fun box info() : FileInfo val ? Returns FileInfo val ? chmod [Source] Set the FileMode for this directory. fun box chmod( mode: FileMode box) : Bool val Parameters mode: FileMode box Returns Bool val chown [Source] Set the owner and group for this directory. Does nothing on Windows. fun box chown( uid: U32 val, gid: U32 val) : Bool val Parameters uid: U32 val gid: U32 val Returns Bool val touch [Source] Set the last access and modification times of the directory to now. fun box touch() : Bool val Returns Bool val set_time [Source] Set the last access and modification times of the directory to the given values. fun box set_time( atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val Parameters atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val) Returns Bool val lines [Source] Returns an iterator for reading lines from the file. fun ref lines() : FileLines ref Returns FileLines ref dispose [Source] Close the file. Future operations will do nothing. fun ref dispose() : None val Returns None val Private Functions _get_error [Source] Fetch errno from the OS. fun box _get_error() : (FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val) Returns ( FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val) _pending_writes [Source] Write pending data. Returns false if the file wasn't opened with write permission. Returns false and closes the file and discards all pending data if not all the bytes were written. Returns true if it sent all pending data. fun ref _pending_writes() : Bool val Returns Bool val _write_to_disk [Source] Write pending data. Returns false if the file wasn't opened with write permission. Raises an error if not all the bytes were written. Returns true if it sent all pending data. Returns num_processed and new pending_total also. fun box _write_to_disk() : (Bool val , USize val , USize val) ? Returns ( Bool val , USize val , USize val) ? _seek [Source] Move the cursor position. fun ref _seek( offset: I64 val, base: I32 val) : None val Parameters offset: I64 val base: I32 val Returns None val _final [Source] Close the file. fun box _final() : None val Returns None val","title":"class File"},{"location":"files-File/#file","text":"[Source] Operations on a file. class ref File","title":"File"},{"location":"files-File/#constructors","text":"","title":"Constructors"},{"location":"files-File/#create","text":"[Source] Attempt to open for read/write, creating if it doesn't exist, preserving the contents if it does exist. Set errno according to result. new ref create( from: FilePath val) : File ref^","title":"create"},{"location":"files-File/#parameters","text":"from: FilePath val","title":"Parameters"},{"location":"files-File/#returns","text":"File ref^","title":"Returns"},{"location":"files-File/#open","text":"[Source] Open for read only. Set _errno according to result. new ref open( from: FilePath val) : File ref^","title":"open"},{"location":"files-File/#parameters_1","text":"from: FilePath val","title":"Parameters"},{"location":"files-File/#returns_1","text":"File ref^","title":"Returns"},{"location":"files-File/#_descriptor","text":"[Source] Internal constructor from a file descriptor and a path. new ref _descriptor( fd: I32 val, from: FilePath val) : File ref^ ?","title":"_descriptor"},{"location":"files-File/#parameters_2","text":"fd: I32 val from: FilePath val","title":"Parameters"},{"location":"files-File/#returns_2","text":"File ref^ ?","title":"Returns"},{"location":"files-File/#public-fields","text":"","title":"Public fields"},{"location":"files-File/#let-path-filepath-val","text":"[Source] This is the filesystem path locating this file on the file system and an object capability granting access to operate on this file.","title":"let path: FilePath val"},{"location":"files-File/#let-writeable-bool-val","text":"[Source] true if the underlying file descriptor has been opened as writeable.","title":"let writeable: Bool val"},{"location":"files-File/#public-functions","text":"","title":"Public Functions"},{"location":"files-File/#errno","text":"[Source] Returns the last error code set for this File fun box errno() : (FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"errno"},{"location":"files-File/#returns_3","text":"( FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"Returns"},{"location":"files-File/#clear_errno","text":"[Source] Clears the last error code set for this File. Clears the error indicator for the stream. fun ref clear_errno() : None val","title":"clear_errno"},{"location":"files-File/#returns_4","text":"None val","title":"Returns"},{"location":"files-File/#valid","text":"[Source] Returns true if the file is currently open. fun box valid() : Bool val","title":"valid"},{"location":"files-File/#returns_5","text":"Bool val","title":"Returns"},{"location":"files-File/#read","text":"[Source] Returns up to len bytes. fun ref read( len: USize val) : Array[U8 val] iso^","title":"read"},{"location":"files-File/#parameters_3","text":"len: USize val","title":"Parameters"},{"location":"files-File/#returns_6","text":"Array [ U8 val] iso^","title":"Returns"},{"location":"files-File/#read_string","text":"[Source] Returns up to len bytes. The resulting string may have internal null characters. fun ref read_string( len: USize val) : String iso^","title":"read_string"},{"location":"files-File/#parameters_4","text":"len: USize val","title":"Parameters"},{"location":"files-File/#returns_7","text":"String iso^","title":"Returns"},{"location":"files-File/#print","text":"[Source] Same as write, buts adds a newline. fun ref print( data: (String box | Array[U8 val] box)) : Bool val","title":"print"},{"location":"files-File/#parameters_5","text":"data: ( String box | Array [ U8 val] box)","title":"Parameters"},{"location":"files-File/#returns_8","text":"Bool val","title":"Returns"},{"location":"files-File/#printv","text":"[Source] Print an iterable collection of ByteSeqs. fun ref printv( data: ByteSeqIter box) : Bool val","title":"printv"},{"location":"files-File/#parameters_6","text":"data: ByteSeqIter box","title":"Parameters"},{"location":"files-File/#returns_9","text":"Bool val","title":"Returns"},{"location":"files-File/#write","text":"[Source] Returns false if the file wasn't opened with write permission. Returns false and closes the file if not all the bytes were written. fun ref write( data: (String box | Array[U8 val] box)) : Bool val","title":"write"},{"location":"files-File/#parameters_7","text":"data: ( String box | Array [ U8 val] box)","title":"Parameters"},{"location":"files-File/#returns_10","text":"Bool val","title":"Returns"},{"location":"files-File/#writev","text":"[Source] Write an iterable collection of ByteSeqs. fun ref writev( data: ByteSeqIter box) : Bool val","title":"writev"},{"location":"files-File/#parameters_8","text":"data: ByteSeqIter box","title":"Parameters"},{"location":"files-File/#returns_11","text":"Bool val","title":"Returns"},{"location":"files-File/#queue","text":"[Source] Queue data to be written NOTE: Queue'd data will always be written before normal print/write requested data fun ref queue( data: (String box | Array[U8 val] box)) : None val","title":"queue"},{"location":"files-File/#parameters_9","text":"data: ( String box | Array [ U8 val] box)","title":"Parameters"},{"location":"files-File/#returns_12","text":"None val","title":"Returns"},{"location":"files-File/#queuev","text":"[Source] Queue an iterable collection of ByteSeqs to be written NOTE: Queue'd data will always be written before normal print/write requested data fun ref queuev( data: ByteSeqIter box) : None val","title":"queuev"},{"location":"files-File/#parameters_10","text":"data: ByteSeqIter box","title":"Parameters"},{"location":"files-File/#returns_13","text":"None val","title":"Returns"},{"location":"files-File/#flush","text":"[Source] Flush any queued data fun ref flush() : Bool val","title":"flush"},{"location":"files-File/#returns_14","text":"Bool val","title":"Returns"},{"location":"files-File/#position","text":"[Source] Return the current cursor position in the file. fun ref position() : USize val","title":"position"},{"location":"files-File/#returns_15","text":"USize val","title":"Returns"},{"location":"files-File/#size","text":"[Source] Return the total length of the file. fun ref size() : USize val","title":"size"},{"location":"files-File/#returns_16","text":"USize val","title":"Returns"},{"location":"files-File/#seek_start","text":"[Source] Set the cursor position relative to the start of the file. fun ref seek_start( offset: USize val) : None val","title":"seek_start"},{"location":"files-File/#parameters_11","text":"offset: USize val","title":"Parameters"},{"location":"files-File/#returns_17","text":"None val","title":"Returns"},{"location":"files-File/#seek_end","text":"[Source] Set the cursor position relative to the end of the file. fun ref seek_end( offset: USize val) : None val","title":"seek_end"},{"location":"files-File/#parameters_12","text":"offset: USize val","title":"Parameters"},{"location":"files-File/#returns_18","text":"None val","title":"Returns"},{"location":"files-File/#seek","text":"[Source] Move the cursor position. fun ref seek( offset: ISize val) : None val","title":"seek"},{"location":"files-File/#parameters_13","text":"offset: ISize val","title":"Parameters"},{"location":"files-File/#returns_19","text":"None val","title":"Returns"},{"location":"files-File/#sync","text":"[Source] Sync the file contents to physical storage. fun ref sync() : None val","title":"sync"},{"location":"files-File/#returns_20","text":"None val","title":"Returns"},{"location":"files-File/#datasync","text":"[Source] Sync the file contents to physical storage. fun ref datasync() : None val","title":"datasync"},{"location":"files-File/#returns_21","text":"None val","title":"Returns"},{"location":"files-File/#set_length","text":"[Source] Change the file size. If it is made larger, the new contents are undefined. fun ref set_length( len: USize val) : Bool val","title":"set_length"},{"location":"files-File/#parameters_14","text":"len: USize val","title":"Parameters"},{"location":"files-File/#returns_22","text":"Bool val","title":"Returns"},{"location":"files-File/#info","text":"[Source] Return a FileInfo for this directory. Raise an error if the fd is invalid or if we don't have FileStat permission. fun box info() : FileInfo val ?","title":"info"},{"location":"files-File/#returns_23","text":"FileInfo val ?","title":"Returns"},{"location":"files-File/#chmod","text":"[Source] Set the FileMode for this directory. fun box chmod( mode: FileMode box) : Bool val","title":"chmod"},{"location":"files-File/#parameters_15","text":"mode: FileMode box","title":"Parameters"},{"location":"files-File/#returns_24","text":"Bool val","title":"Returns"},{"location":"files-File/#chown","text":"[Source] Set the owner and group for this directory. Does nothing on Windows. fun box chown( uid: U32 val, gid: U32 val) : Bool val","title":"chown"},{"location":"files-File/#parameters_16","text":"uid: U32 val gid: U32 val","title":"Parameters"},{"location":"files-File/#returns_25","text":"Bool val","title":"Returns"},{"location":"files-File/#touch","text":"[Source] Set the last access and modification times of the directory to now. fun box touch() : Bool val","title":"touch"},{"location":"files-File/#returns_26","text":"Bool val","title":"Returns"},{"location":"files-File/#set_time","text":"[Source] Set the last access and modification times of the directory to the given values. fun box set_time( atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val","title":"set_time"},{"location":"files-File/#parameters_17","text":"atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val)","title":"Parameters"},{"location":"files-File/#returns_27","text":"Bool val","title":"Returns"},{"location":"files-File/#lines","text":"[Source] Returns an iterator for reading lines from the file. fun ref lines() : FileLines ref","title":"lines"},{"location":"files-File/#returns_28","text":"FileLines ref","title":"Returns"},{"location":"files-File/#dispose","text":"[Source] Close the file. Future operations will do nothing. fun ref dispose() : None val","title":"dispose"},{"location":"files-File/#returns_29","text":"None val","title":"Returns"},{"location":"files-File/#private-functions","text":"","title":"Private Functions"},{"location":"files-File/#_get_error","text":"[Source] Fetch errno from the OS. fun box _get_error() : (FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"_get_error"},{"location":"files-File/#returns_30","text":"( FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"Returns"},{"location":"files-File/#_pending_writes","text":"[Source] Write pending data. Returns false if the file wasn't opened with write permission. Returns false and closes the file and discards all pending data if not all the bytes were written. Returns true if it sent all pending data. fun ref _pending_writes() : Bool val","title":"_pending_writes"},{"location":"files-File/#returns_31","text":"Bool val","title":"Returns"},{"location":"files-File/#_write_to_disk","text":"[Source] Write pending data. Returns false if the file wasn't opened with write permission. Raises an error if not all the bytes were written. Returns true if it sent all pending data. Returns num_processed and new pending_total also. fun box _write_to_disk() : (Bool val , USize val , USize val) ?","title":"_write_to_disk"},{"location":"files-File/#returns_32","text":"( Bool val , USize val , USize val) ?","title":"Returns"},{"location":"files-File/#_seek","text":"[Source] Move the cursor position. fun ref _seek( offset: I64 val, base: I32 val) : None val","title":"_seek"},{"location":"files-File/#parameters_18","text":"offset: I64 val base: I32 val","title":"Parameters"},{"location":"files-File/#returns_33","text":"None val","title":"Returns"},{"location":"files-File/#_final","text":"[Source] Close the file. fun box _final() : None val","title":"_final"},{"location":"files-File/#returns_34","text":"None val","title":"Returns"},{"location":"files-FileBadFileNumber/","text":"FileBadFileNumber [Source] primitive val FileBadFileNumber Constructors create [Source] new val create() : FileBadFileNumber val^ Returns FileBadFileNumber val^ Public Functions eq [Source] fun box eq( that: FileBadFileNumber val) : Bool val Parameters that: FileBadFileNumber val Returns Bool val ne [Source] fun box ne( that: FileBadFileNumber val) : Bool val Parameters that: FileBadFileNumber val Returns Bool val","title":"primitive FileBadFileNumber"},{"location":"files-FileBadFileNumber/#filebadfilenumber","text":"[Source] primitive val FileBadFileNumber","title":"FileBadFileNumber"},{"location":"files-FileBadFileNumber/#constructors","text":"","title":"Constructors"},{"location":"files-FileBadFileNumber/#create","text":"[Source] new val create() : FileBadFileNumber val^","title":"create"},{"location":"files-FileBadFileNumber/#returns","text":"FileBadFileNumber val^","title":"Returns"},{"location":"files-FileBadFileNumber/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileBadFileNumber/#eq","text":"[Source] fun box eq( that: FileBadFileNumber val) : Bool val","title":"eq"},{"location":"files-FileBadFileNumber/#parameters","text":"that: FileBadFileNumber val","title":"Parameters"},{"location":"files-FileBadFileNumber/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-FileBadFileNumber/#ne","text":"[Source] fun box ne( that: FileBadFileNumber val) : Bool val","title":"ne"},{"location":"files-FileBadFileNumber/#parameters_1","text":"that: FileBadFileNumber val","title":"Parameters"},{"location":"files-FileBadFileNumber/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileCaps/","text":"FileCaps [Source] type FileCaps is Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref Type Alias For Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref","title":"type FileCaps"},{"location":"files-FileCaps/#filecaps","text":"[Source] type FileCaps is Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref","title":"FileCaps"},{"location":"files-FileCaps/#type-alias-for","text":"Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref","title":"Type Alias For"},{"location":"files-FileChmod/","text":"FileChmod [Source] primitive val FileChmod Constructors create [Source] new val create() : FileChmod val^ Returns FileChmod val^ Public Functions value [Source] fun box value() : U32 val Returns U32 val eq [Source] fun box eq( that: FileChmod val) : Bool val Parameters that: FileChmod val Returns Bool val ne [Source] fun box ne( that: FileChmod val) : Bool val Parameters that: FileChmod val Returns Bool val","title":"primitive FileChmod"},{"location":"files-FileChmod/#filechmod","text":"[Source] primitive val FileChmod","title":"FileChmod"},{"location":"files-FileChmod/#constructors","text":"","title":"Constructors"},{"location":"files-FileChmod/#create","text":"[Source] new val create() : FileChmod val^","title":"create"},{"location":"files-FileChmod/#returns","text":"FileChmod val^","title":"Returns"},{"location":"files-FileChmod/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileChmod/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileChmod/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileChmod/#eq","text":"[Source] fun box eq( that: FileChmod val) : Bool val","title":"eq"},{"location":"files-FileChmod/#parameters","text":"that: FileChmod val","title":"Parameters"},{"location":"files-FileChmod/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileChmod/#ne","text":"[Source] fun box ne( that: FileChmod val) : Bool val","title":"ne"},{"location":"files-FileChmod/#parameters_1","text":"that: FileChmod val","title":"Parameters"},{"location":"files-FileChmod/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileChown/","text":"FileChown [Source] primitive val FileChown Constructors create [Source] new val create() : FileChown val^ Returns FileChown val^ Public Functions value [Source] fun box value() : U32 val Returns U32 val eq [Source] fun box eq( that: FileChown val) : Bool val Parameters that: FileChown val Returns Bool val ne [Source] fun box ne( that: FileChown val) : Bool val Parameters that: FileChown val Returns Bool val","title":"primitive FileChown"},{"location":"files-FileChown/#filechown","text":"[Source] primitive val FileChown","title":"FileChown"},{"location":"files-FileChown/#constructors","text":"","title":"Constructors"},{"location":"files-FileChown/#create","text":"[Source] new val create() : FileChown val^","title":"create"},{"location":"files-FileChown/#returns","text":"FileChown val^","title":"Returns"},{"location":"files-FileChown/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileChown/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileChown/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileChown/#eq","text":"[Source] fun box eq( that: FileChown val) : Bool val","title":"eq"},{"location":"files-FileChown/#parameters","text":"that: FileChown val","title":"Parameters"},{"location":"files-FileChown/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileChown/#ne","text":"[Source] fun box ne( that: FileChown val) : Bool val","title":"ne"},{"location":"files-FileChown/#parameters_1","text":"that: FileChown val","title":"Parameters"},{"location":"files-FileChown/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileCreate/","text":"FileCreate [Source] primitive val FileCreate Constructors create [Source] new val create() : FileCreate val^ Returns FileCreate val^ Public Functions value [Source] fun box value() : U32 val Returns U32 val eq [Source] fun box eq( that: FileCreate val) : Bool val Parameters that: FileCreate val Returns Bool val ne [Source] fun box ne( that: FileCreate val) : Bool val Parameters that: FileCreate val Returns Bool val","title":"primitive FileCreate"},{"location":"files-FileCreate/#filecreate","text":"[Source] primitive val FileCreate","title":"FileCreate"},{"location":"files-FileCreate/#constructors","text":"","title":"Constructors"},{"location":"files-FileCreate/#create","text":"[Source] new val create() : FileCreate val^","title":"create"},{"location":"files-FileCreate/#returns","text":"FileCreate val^","title":"Returns"},{"location":"files-FileCreate/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileCreate/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileCreate/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileCreate/#eq","text":"[Source] fun box eq( that: FileCreate val) : Bool val","title":"eq"},{"location":"files-FileCreate/#parameters","text":"that: FileCreate val","title":"Parameters"},{"location":"files-FileCreate/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileCreate/#ne","text":"[Source] fun box ne( that: FileCreate val) : Bool val","title":"ne"},{"location":"files-FileCreate/#parameters_1","text":"that: FileCreate val","title":"Parameters"},{"location":"files-FileCreate/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileEOF/","text":"FileEOF [Source] primitive val FileEOF Constructors create [Source] new val create() : FileEOF val^ Returns FileEOF val^ Public Functions eq [Source] fun box eq( that: FileEOF val) : Bool val Parameters that: FileEOF val Returns Bool val ne [Source] fun box ne( that: FileEOF val) : Bool val Parameters that: FileEOF val Returns Bool val","title":"primitive FileEOF"},{"location":"files-FileEOF/#fileeof","text":"[Source] primitive val FileEOF","title":"FileEOF"},{"location":"files-FileEOF/#constructors","text":"","title":"Constructors"},{"location":"files-FileEOF/#create","text":"[Source] new val create() : FileEOF val^","title":"create"},{"location":"files-FileEOF/#returns","text":"FileEOF val^","title":"Returns"},{"location":"files-FileEOF/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileEOF/#eq","text":"[Source] fun box eq( that: FileEOF val) : Bool val","title":"eq"},{"location":"files-FileEOF/#parameters","text":"that: FileEOF val","title":"Parameters"},{"location":"files-FileEOF/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-FileEOF/#ne","text":"[Source] fun box ne( that: FileEOF val) : Bool val","title":"ne"},{"location":"files-FileEOF/#parameters_1","text":"that: FileEOF val","title":"Parameters"},{"location":"files-FileEOF/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileErrNo/","text":"FileErrNo [Source] type FileErrNo is (FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val) Type Alias For ( FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"type FileErrNo"},{"location":"files-FileErrNo/#fileerrno","text":"[Source] type FileErrNo is (FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"FileErrNo"},{"location":"files-FileErrNo/#type-alias-for","text":"( FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"Type Alias For"},{"location":"files-FileError/","text":"FileError [Source] primitive val FileError Constructors create [Source] new val create() : FileError val^ Returns FileError val^ Public Functions eq [Source] fun box eq( that: FileError val) : Bool val Parameters that: FileError val Returns Bool val ne [Source] fun box ne( that: FileError val) : Bool val Parameters that: FileError val Returns Bool val","title":"primitive FileError"},{"location":"files-FileError/#fileerror","text":"[Source] primitive val FileError","title":"FileError"},{"location":"files-FileError/#constructors","text":"","title":"Constructors"},{"location":"files-FileError/#create","text":"[Source] new val create() : FileError val^","title":"create"},{"location":"files-FileError/#returns","text":"FileError val^","title":"Returns"},{"location":"files-FileError/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileError/#eq","text":"[Source] fun box eq( that: FileError val) : Bool val","title":"eq"},{"location":"files-FileError/#parameters","text":"that: FileError val","title":"Parameters"},{"location":"files-FileError/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-FileError/#ne","text":"[Source] fun box ne( that: FileError val) : Bool val","title":"ne"},{"location":"files-FileError/#parameters_1","text":"that: FileError val","title":"Parameters"},{"location":"files-FileError/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileExec/","text":"FileExec [Source] primitive val FileExec Constructors create [Source] new val create() : FileExec val^ Returns FileExec val^ Public Functions value [Source] fun box value() : U32 val Returns U32 val eq [Source] fun box eq( that: FileExec val) : Bool val Parameters that: FileExec val Returns Bool val ne [Source] fun box ne( that: FileExec val) : Bool val Parameters that: FileExec val Returns Bool val","title":"primitive FileExec"},{"location":"files-FileExec/#fileexec","text":"[Source] primitive val FileExec","title":"FileExec"},{"location":"files-FileExec/#constructors","text":"","title":"Constructors"},{"location":"files-FileExec/#create","text":"[Source] new val create() : FileExec val^","title":"create"},{"location":"files-FileExec/#returns","text":"FileExec val^","title":"Returns"},{"location":"files-FileExec/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileExec/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileExec/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileExec/#eq","text":"[Source] fun box eq( that: FileExec val) : Bool val","title":"eq"},{"location":"files-FileExec/#parameters","text":"that: FileExec val","title":"Parameters"},{"location":"files-FileExec/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileExec/#ne","text":"[Source] fun box ne( that: FileExec val) : Bool val","title":"ne"},{"location":"files-FileExec/#parameters_1","text":"that: FileExec val","title":"Parameters"},{"location":"files-FileExec/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileExists/","text":"FileExists [Source] primitive val FileExists Constructors create [Source] new val create() : FileExists val^ Returns FileExists val^ Public Functions eq [Source] fun box eq( that: FileExists val) : Bool val Parameters that: FileExists val Returns Bool val ne [Source] fun box ne( that: FileExists val) : Bool val Parameters that: FileExists val Returns Bool val","title":"primitive FileExists"},{"location":"files-FileExists/#fileexists","text":"[Source] primitive val FileExists","title":"FileExists"},{"location":"files-FileExists/#constructors","text":"","title":"Constructors"},{"location":"files-FileExists/#create","text":"[Source] new val create() : FileExists val^","title":"create"},{"location":"files-FileExists/#returns","text":"FileExists val^","title":"Returns"},{"location":"files-FileExists/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileExists/#eq","text":"[Source] fun box eq( that: FileExists val) : Bool val","title":"eq"},{"location":"files-FileExists/#parameters","text":"that: FileExists val","title":"Parameters"},{"location":"files-FileExists/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-FileExists/#ne","text":"[Source] fun box ne( that: FileExists val) : Bool val","title":"ne"},{"location":"files-FileExists/#parameters_1","text":"that: FileExists val","title":"Parameters"},{"location":"files-FileExists/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileInfo/","text":"FileInfo [Source] This contains file system metadata for a path. A symlink will report information about itself, other than the size which will be the size of the target. A broken symlink will report as much as it can and will set the broken flag. class val FileInfo Constructors create [Source] This will raise an error if the FileStat capability isn't available or the path doesn't exist. new val create( from: FilePath val) : FileInfo val^ ? Parameters from: FilePath val Returns FileInfo val^ ? _descriptor [Source] This will raise an error if the FileStat capability isn't available or the file descriptor is invalid. new val _descriptor( fd: I32 val, path: FilePath val) : FileInfo val^ ? Parameters fd: I32 val path: FilePath val Returns FileInfo val^ ? _relative [Source] new val _relative( fd: I32 val, path: FilePath val, from: String val) : FileInfo val^ ? Parameters fd: I32 val path: FilePath val from: String val Returns FileInfo val^ ? Public fields let filepath: FilePath val [Source] let mode: FileMode val [Source] UNIX-style file mode. let hard_links: U32 val [Source] Number of hardlinks to this filepath . let device: U64 val [Source] OS id of the device containing this filepath . Device IDs consist of a major and minor device id, denoting the type of device and the instance of this type on the system. let inode: U64 val [Source] UNIX specific INODE number of filepath . Is 0 on Windows. let uid: U32 val [Source] UNIX-style user ID of the owner of filepath . let gid: U32 val [Source] UNIX-style user ID of the owning group of filepath . let size: USize val [Source] Total size of filepath in bytes. In case of a symlink this is the size of the target, not the symlink itself. let access_time: ( I64 val , I64 val) [Source] Time of last access as a tuple of seconds and nanoseconds since the epoch: (let a_secs: I64, let a_nanos: I64) = file_info.access_time let modified_time: ( I64 val , I64 val) [Source] Time of last modification as tuple of seconds and nanoseconds since the epoch: (let m_secs: I64, let m_nanos: I64) = file_info.modified_time let change_time: ( I64 val , I64 val) [Source] Time of the last change either the attributes (number of links, owner, group, file mode, ...) or the content of filepath as a tuple of seconds and nanoseconds since the epoch: (let c_secs: I64, let c_nanos: I64) = file_info.change_time On Windows this will be the file creation time. let file: Bool val [Source] true if filepath points to an a regular file. let directory: Bool val [Source] true if filepath points to a directory. let pipe: Bool val [Source] true if filepath points to a named pipe. let symlink: Bool val [Source] true if filepath points to a symbolic link. let broken: Bool val [Source] true if filepath points to a broken symlink.","title":"class FileInfo"},{"location":"files-FileInfo/#fileinfo","text":"[Source] This contains file system metadata for a path. A symlink will report information about itself, other than the size which will be the size of the target. A broken symlink will report as much as it can and will set the broken flag. class val FileInfo","title":"FileInfo"},{"location":"files-FileInfo/#constructors","text":"","title":"Constructors"},{"location":"files-FileInfo/#create","text":"[Source] This will raise an error if the FileStat capability isn't available or the path doesn't exist. new val create( from: FilePath val) : FileInfo val^ ?","title":"create"},{"location":"files-FileInfo/#parameters","text":"from: FilePath val","title":"Parameters"},{"location":"files-FileInfo/#returns","text":"FileInfo val^ ?","title":"Returns"},{"location":"files-FileInfo/#_descriptor","text":"[Source] This will raise an error if the FileStat capability isn't available or the file descriptor is invalid. new val _descriptor( fd: I32 val, path: FilePath val) : FileInfo val^ ?","title":"_descriptor"},{"location":"files-FileInfo/#parameters_1","text":"fd: I32 val path: FilePath val","title":"Parameters"},{"location":"files-FileInfo/#returns_1","text":"FileInfo val^ ?","title":"Returns"},{"location":"files-FileInfo/#_relative","text":"[Source] new val _relative( fd: I32 val, path: FilePath val, from: String val) : FileInfo val^ ?","title":"_relative"},{"location":"files-FileInfo/#parameters_2","text":"fd: I32 val path: FilePath val from: String val","title":"Parameters"},{"location":"files-FileInfo/#returns_2","text":"FileInfo val^ ?","title":"Returns"},{"location":"files-FileInfo/#public-fields","text":"","title":"Public fields"},{"location":"files-FileInfo/#let-filepath-filepath-val","text":"[Source]","title":"let filepath: FilePath val"},{"location":"files-FileInfo/#let-mode-filemode-val","text":"[Source] UNIX-style file mode.","title":"let mode: FileMode val"},{"location":"files-FileInfo/#let-hard_links-u32-val","text":"[Source] Number of hardlinks to this filepath .","title":"let hard_links: U32 val"},{"location":"files-FileInfo/#let-device-u64-val","text":"[Source] OS id of the device containing this filepath . Device IDs consist of a major and minor device id, denoting the type of device and the instance of this type on the system.","title":"let device: U64 val"},{"location":"files-FileInfo/#let-inode-u64-val","text":"[Source] UNIX specific INODE number of filepath . Is 0 on Windows.","title":"let inode: U64 val"},{"location":"files-FileInfo/#let-uid-u32-val","text":"[Source] UNIX-style user ID of the owner of filepath .","title":"let uid: U32 val"},{"location":"files-FileInfo/#let-gid-u32-val","text":"[Source] UNIX-style user ID of the owning group of filepath .","title":"let gid: U32 val"},{"location":"files-FileInfo/#let-size-usize-val","text":"[Source] Total size of filepath in bytes. In case of a symlink this is the size of the target, not the symlink itself.","title":"let size: USize val"},{"location":"files-FileInfo/#let-access_time-i64-val-i64-val","text":"[Source] Time of last access as a tuple of seconds and nanoseconds since the epoch: (let a_secs: I64, let a_nanos: I64) = file_info.access_time","title":"let access_time: (I64 val , I64 val)"},{"location":"files-FileInfo/#let-modified_time-i64-val-i64-val","text":"[Source] Time of last modification as tuple of seconds and nanoseconds since the epoch: (let m_secs: I64, let m_nanos: I64) = file_info.modified_time","title":"let modified_time: (I64 val , I64 val)"},{"location":"files-FileInfo/#let-change_time-i64-val-i64-val","text":"[Source] Time of the last change either the attributes (number of links, owner, group, file mode, ...) or the content of filepath as a tuple of seconds and nanoseconds since the epoch: (let c_secs: I64, let c_nanos: I64) = file_info.change_time On Windows this will be the file creation time.","title":"let change_time: (I64 val , I64 val)"},{"location":"files-FileInfo/#let-file-bool-val","text":"[Source] true if filepath points to an a regular file.","title":"let file: Bool val"},{"location":"files-FileInfo/#let-directory-bool-val","text":"[Source] true if filepath points to a directory.","title":"let directory: Bool val"},{"location":"files-FileInfo/#let-pipe-bool-val","text":"[Source] true if filepath points to a named pipe.","title":"let pipe: Bool val"},{"location":"files-FileInfo/#let-symlink-bool-val","text":"[Source] true if filepath points to a symbolic link.","title":"let symlink: Bool val"},{"location":"files-FileInfo/#let-broken-bool-val","text":"[Source] true if filepath points to a broken symlink.","title":"let broken: Bool val"},{"location":"files-FileLines/","text":"FileLines [Source] Iterate over the lines in a file. Returns lines without trailing line breaks. Advances the file cursor to the end of each line returned from next . This class buffers the file contents to accumulate full lines. If the file does not contain linebreaks, the whole file content is read and buffered, which might exceed memory resources. Take care. class ref FileLines is Iterator[String iso^] ref Implements Iterator [ String iso^] ref Constructors create [Source] Create a FileLines instance on a given file. This instance returns lines from the position of the given file at the time this constructor is called. Later manipulation of the file position is not accounted for. As a result iterating with this class will always return the full file content without gaps or repeated lines. min_read_size determines the minimum amount of bytes to read from the file in one go. This class keeps track of the line lengths in the current file and uses the length of the last line as amount of bytes to read next, but it will never read less than min_read_size . new ref create( file: File ref, min_read_size: USize val = seq) : FileLines ref^ Parameters file: File ref min_read_size: USize val = seq Returns FileLines ref^ Public Functions has_next [Source] fun ref has_next() : Bool val Returns Bool val next [Source] Returns the next line in the file. fun ref next() : String iso^ ? Returns String iso^ ? Private Functions _read_line [Source] fun ref _read_line() : String iso^ ? Returns String iso^ ? _fill_buffer [Source] read from file and fill the reader-buffer. Returns true if data could be read from the file. After a successful reading operation _buffer_cursor is updated. fun ref _fill_buffer() : Bool val Returns Bool val _read_last_line [Source] fun ref _read_last_line() : String iso^ ? Returns String iso^ ? _inc_public_file_cursor [Source] fun ref _inc_public_file_cursor( amount: USize val) : None val Parameters amount: USize val Returns None val","title":"class FileLines"},{"location":"files-FileLines/#filelines","text":"[Source] Iterate over the lines in a file. Returns lines without trailing line breaks. Advances the file cursor to the end of each line returned from next . This class buffers the file contents to accumulate full lines. If the file does not contain linebreaks, the whole file content is read and buffered, which might exceed memory resources. Take care. class ref FileLines is Iterator[String iso^] ref","title":"FileLines"},{"location":"files-FileLines/#implements","text":"Iterator [ String iso^] ref","title":"Implements"},{"location":"files-FileLines/#constructors","text":"","title":"Constructors"},{"location":"files-FileLines/#create","text":"[Source] Create a FileLines instance on a given file. This instance returns lines from the position of the given file at the time this constructor is called. Later manipulation of the file position is not accounted for. As a result iterating with this class will always return the full file content without gaps or repeated lines. min_read_size determines the minimum amount of bytes to read from the file in one go. This class keeps track of the line lengths in the current file and uses the length of the last line as amount of bytes to read next, but it will never read less than min_read_size . new ref create( file: File ref, min_read_size: USize val = seq) : FileLines ref^","title":"create"},{"location":"files-FileLines/#parameters","text":"file: File ref min_read_size: USize val = seq","title":"Parameters"},{"location":"files-FileLines/#returns","text":"FileLines ref^","title":"Returns"},{"location":"files-FileLines/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileLines/#has_next","text":"[Source] fun ref has_next() : Bool val","title":"has_next"},{"location":"files-FileLines/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-FileLines/#next","text":"[Source] Returns the next line in the file. fun ref next() : String iso^ ?","title":"next"},{"location":"files-FileLines/#returns_2","text":"String iso^ ?","title":"Returns"},{"location":"files-FileLines/#private-functions","text":"","title":"Private Functions"},{"location":"files-FileLines/#_read_line","text":"[Source] fun ref _read_line() : String iso^ ?","title":"_read_line"},{"location":"files-FileLines/#returns_3","text":"String iso^ ?","title":"Returns"},{"location":"files-FileLines/#_fill_buffer","text":"[Source] read from file and fill the reader-buffer. Returns true if data could be read from the file. After a successful reading operation _buffer_cursor is updated. fun ref _fill_buffer() : Bool val","title":"_fill_buffer"},{"location":"files-FileLines/#returns_4","text":"Bool val","title":"Returns"},{"location":"files-FileLines/#_read_last_line","text":"[Source] fun ref _read_last_line() : String iso^ ?","title":"_read_last_line"},{"location":"files-FileLines/#returns_5","text":"String iso^ ?","title":"Returns"},{"location":"files-FileLines/#_inc_public_file_cursor","text":"[Source] fun ref _inc_public_file_cursor( amount: USize val) : None val","title":"_inc_public_file_cursor"},{"location":"files-FileLines/#parameters_1","text":"amount: USize val","title":"Parameters"},{"location":"files-FileLines/#returns_6","text":"None val","title":"Returns"},{"location":"files-FileLink/","text":"FileLink [Source] primitive val FileLink Constructors create [Source] new val create() : FileLink val^ Returns FileLink val^ Public Functions value [Source] fun box value() : U32 val Returns U32 val eq [Source] fun box eq( that: FileLink val) : Bool val Parameters that: FileLink val Returns Bool val ne [Source] fun box ne( that: FileLink val) : Bool val Parameters that: FileLink val Returns Bool val","title":"primitive FileLink"},{"location":"files-FileLink/#filelink","text":"[Source] primitive val FileLink","title":"FileLink"},{"location":"files-FileLink/#constructors","text":"","title":"Constructors"},{"location":"files-FileLink/#create","text":"[Source] new val create() : FileLink val^","title":"create"},{"location":"files-FileLink/#returns","text":"FileLink val^","title":"Returns"},{"location":"files-FileLink/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileLink/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileLink/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileLink/#eq","text":"[Source] fun box eq( that: FileLink val) : Bool val","title":"eq"},{"location":"files-FileLink/#parameters","text":"that: FileLink val","title":"Parameters"},{"location":"files-FileLink/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileLink/#ne","text":"[Source] fun box ne( that: FileLink val) : Bool val","title":"ne"},{"location":"files-FileLink/#parameters_1","text":"that: FileLink val","title":"Parameters"},{"location":"files-FileLink/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileLookup/","text":"FileLookup [Source] primitive val FileLookup Constructors create [Source] new val create() : FileLookup val^ Returns FileLookup val^ Public Functions value [Source] fun box value() : U32 val Returns U32 val eq [Source] fun box eq( that: FileLookup val) : Bool val Parameters that: FileLookup val Returns Bool val ne [Source] fun box ne( that: FileLookup val) : Bool val Parameters that: FileLookup val Returns Bool val","title":"primitive FileLookup"},{"location":"files-FileLookup/#filelookup","text":"[Source] primitive val FileLookup","title":"FileLookup"},{"location":"files-FileLookup/#constructors","text":"","title":"Constructors"},{"location":"files-FileLookup/#create","text":"[Source] new val create() : FileLookup val^","title":"create"},{"location":"files-FileLookup/#returns","text":"FileLookup val^","title":"Returns"},{"location":"files-FileLookup/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileLookup/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileLookup/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileLookup/#eq","text":"[Source] fun box eq( that: FileLookup val) : Bool val","title":"eq"},{"location":"files-FileLookup/#parameters","text":"that: FileLookup val","title":"Parameters"},{"location":"files-FileLookup/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileLookup/#ne","text":"[Source] fun box ne( that: FileLookup val) : Bool val","title":"ne"},{"location":"files-FileLookup/#parameters_1","text":"that: FileLookup val","title":"Parameters"},{"location":"files-FileLookup/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileMkdir/","text":"FileMkdir [Source] primitive val FileMkdir Constructors create [Source] new val create() : FileMkdir val^ Returns FileMkdir val^ Public Functions value [Source] fun box value() : U32 val Returns U32 val eq [Source] fun box eq( that: FileMkdir val) : Bool val Parameters that: FileMkdir val Returns Bool val ne [Source] fun box ne( that: FileMkdir val) : Bool val Parameters that: FileMkdir val Returns Bool val","title":"primitive FileMkdir"},{"location":"files-FileMkdir/#filemkdir","text":"[Source] primitive val FileMkdir","title":"FileMkdir"},{"location":"files-FileMkdir/#constructors","text":"","title":"Constructors"},{"location":"files-FileMkdir/#create","text":"[Source] new val create() : FileMkdir val^","title":"create"},{"location":"files-FileMkdir/#returns","text":"FileMkdir val^","title":"Returns"},{"location":"files-FileMkdir/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileMkdir/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileMkdir/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileMkdir/#eq","text":"[Source] fun box eq( that: FileMkdir val) : Bool val","title":"eq"},{"location":"files-FileMkdir/#parameters","text":"that: FileMkdir val","title":"Parameters"},{"location":"files-FileMkdir/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileMkdir/#ne","text":"[Source] fun box ne( that: FileMkdir val) : Bool val","title":"ne"},{"location":"files-FileMkdir/#parameters_1","text":"that: FileMkdir val","title":"Parameters"},{"location":"files-FileMkdir/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileMode/","text":"FileMode [Source] This stores a UNIX-style mode broken out into a Bool for each bit. For other operating systems, the mapping will be approximate. For example, on Windows, if the file is readable all the read Bools will be set, and if the file is writeable, all the write Bools will be set. The default mode is read/write for the owner, read-only for everyone else. class ref FileMode Constructors create [Source] new iso create() : FileMode iso^ Returns FileMode iso^ Public fields var setuid: Bool val [Source] true if the SETUID bit is set. var setgid: Bool val [Source] true if the SETGID bit is set. var sticky: Bool val [Source] true if the sticky bit is set. var owner_read: Bool val [Source] true if the owning user can read the file. var owner_write: Bool val [Source] true if the owning user can write to the file. var owner_exec: Bool val [Source] true if the owning user can execute the file. var group_read: Bool val [Source] true if members of the owning group can read the file. var group_write: Bool val [Source] true if members of the owning group can write to the file. var group_exec: Bool val [Source] true if members of the owning group can execute the file. var any_read: Bool val [Source] true if every user can read the file. var any_write: Bool val [Source] true if every user can write to the file. var any_exec: Bool val [Source] `true if every user can execute the file. Public Functions exec [Source] Set the executable flag for everyone. fun ref exec() : None val Returns None val shared [Source] Set the write flag for everyone to the same as owner_write. fun ref shared() : None val Returns None val group [Source] Clear all of the any-user flags. fun ref group() : None val Returns None val private [Source] Clear all of the group and any-user flags. fun ref private() : None val Returns None val Private Functions _os [Source] Get the OS specific integer for a file mode. On Windows, if any read flag is set, the path is made readable, and if any write flag is set, the path is made writeable. fun box _os() : U32 val Returns U32 val","title":"class FileMode"},{"location":"files-FileMode/#filemode","text":"[Source] This stores a UNIX-style mode broken out into a Bool for each bit. For other operating systems, the mapping will be approximate. For example, on Windows, if the file is readable all the read Bools will be set, and if the file is writeable, all the write Bools will be set. The default mode is read/write for the owner, read-only for everyone else. class ref FileMode","title":"FileMode"},{"location":"files-FileMode/#constructors","text":"","title":"Constructors"},{"location":"files-FileMode/#create","text":"[Source] new iso create() : FileMode iso^","title":"create"},{"location":"files-FileMode/#returns","text":"FileMode iso^","title":"Returns"},{"location":"files-FileMode/#public-fields","text":"","title":"Public fields"},{"location":"files-FileMode/#var-setuid-bool-val","text":"[Source] true if the SETUID bit is set.","title":"var setuid: Bool val"},{"location":"files-FileMode/#var-setgid-bool-val","text":"[Source] true if the SETGID bit is set.","title":"var setgid: Bool val"},{"location":"files-FileMode/#var-sticky-bool-val","text":"[Source] true if the sticky bit is set.","title":"var sticky: Bool val"},{"location":"files-FileMode/#var-owner_read-bool-val","text":"[Source] true if the owning user can read the file.","title":"var owner_read: Bool val"},{"location":"files-FileMode/#var-owner_write-bool-val","text":"[Source] true if the owning user can write to the file.","title":"var owner_write: Bool val"},{"location":"files-FileMode/#var-owner_exec-bool-val","text":"[Source] true if the owning user can execute the file.","title":"var owner_exec: Bool val"},{"location":"files-FileMode/#var-group_read-bool-val","text":"[Source] true if members of the owning group can read the file.","title":"var group_read: Bool val"},{"location":"files-FileMode/#var-group_write-bool-val","text":"[Source] true if members of the owning group can write to the file.","title":"var group_write: Bool val"},{"location":"files-FileMode/#var-group_exec-bool-val","text":"[Source] true if members of the owning group can execute the file.","title":"var group_exec: Bool val"},{"location":"files-FileMode/#var-any_read-bool-val","text":"[Source] true if every user can read the file.","title":"var any_read: Bool val"},{"location":"files-FileMode/#var-any_write-bool-val","text":"[Source] true if every user can write to the file.","title":"var any_write: Bool val"},{"location":"files-FileMode/#var-any_exec-bool-val","text":"[Source] `true if every user can execute the file.","title":"var any_exec: Bool val"},{"location":"files-FileMode/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileMode/#exec","text":"[Source] Set the executable flag for everyone. fun ref exec() : None val","title":"exec"},{"location":"files-FileMode/#returns_1","text":"None val","title":"Returns"},{"location":"files-FileMode/#shared","text":"[Source] Set the write flag for everyone to the same as owner_write. fun ref shared() : None val","title":"shared"},{"location":"files-FileMode/#returns_2","text":"None val","title":"Returns"},{"location":"files-FileMode/#group","text":"[Source] Clear all of the any-user flags. fun ref group() : None val","title":"group"},{"location":"files-FileMode/#returns_3","text":"None val","title":"Returns"},{"location":"files-FileMode/#private","text":"[Source] Clear all of the group and any-user flags. fun ref private() : None val","title":"private"},{"location":"files-FileMode/#returns_4","text":"None val","title":"Returns"},{"location":"files-FileMode/#private-functions","text":"","title":"Private Functions"},{"location":"files-FileMode/#_os","text":"[Source] Get the OS specific integer for a file mode. On Windows, if any read flag is set, the path is made readable, and if any write flag is set, the path is made writeable. fun box _os() : U32 val","title":"_os"},{"location":"files-FileMode/#returns_5","text":"U32 val","title":"Returns"},{"location":"files-FileOK/","text":"FileOK [Source] primitive val FileOK Constructors create [Source] new val create() : FileOK val^ Returns FileOK val^ Public Functions eq [Source] fun box eq( that: FileOK val) : Bool val Parameters that: FileOK val Returns Bool val ne [Source] fun box ne( that: FileOK val) : Bool val Parameters that: FileOK val Returns Bool val","title":"primitive FileOK"},{"location":"files-FileOK/#fileok","text":"[Source] primitive val FileOK","title":"FileOK"},{"location":"files-FileOK/#constructors","text":"","title":"Constructors"},{"location":"files-FileOK/#create","text":"[Source] new val create() : FileOK val^","title":"create"},{"location":"files-FileOK/#returns","text":"FileOK val^","title":"Returns"},{"location":"files-FileOK/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileOK/#eq","text":"[Source] fun box eq( that: FileOK val) : Bool val","title":"eq"},{"location":"files-FileOK/#parameters","text":"that: FileOK val","title":"Parameters"},{"location":"files-FileOK/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-FileOK/#ne","text":"[Source] fun box ne( that: FileOK val) : Bool val","title":"ne"},{"location":"files-FileOK/#parameters_1","text":"that: FileOK val","title":"Parameters"},{"location":"files-FileOK/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FilePath/","text":"FilePath [Source] A FilePath represents a capability to access a path. The path will be represented as an absolute path and a set of capabilities for operations on that path. class val FilePath Constructors create [Source] Create a new path. The caller must either provide the root capability or an existing FilePath. If the root capability is provided, path' will be relative to the program's working directory. Otherwise, it will be relative to the existing FilePath, and the existing FilePath must be a prefix of the resulting path. The resulting FilePath will have capabilities that are the intersection of the supplied capabilities and the capabilities on the parent. new val create( base: (FilePath val | AmbientAuth val), path': String val, caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq) : FilePath val^ ? Parameters base: ( FilePath val | AmbientAuth val) path': String val caps': Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq Returns FilePath val^ ? mkdtemp [Source] Create a temporary directory and returns a path to it. The directory's name will begin with prefix . The caller must either provide the root capability or an existing FilePath. If AmbientAuth is provided, pattern will be relative to the program's working directory. Otherwise, it will be relative to the existing FilePath, and the existing FilePath must be a prefix of the resulting path. The resulting FilePath will have capabilities that are the intersection of the supplied capabilities and the capabilities on the base. new val mkdtemp( base: (FilePath val | AmbientAuth val), prefix: String val = seq, caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq) : FilePath val^ ? Parameters base: ( FilePath val | AmbientAuth val) prefix: String val = seq caps': Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq Returns FilePath val^ ? _create [Source] Internal constructor. new val _create( path': String val, caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val) : FilePath val^ Parameters path': String val caps': Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val Returns FilePath val^ Public fields let path: String val [Source] Absolute filesystem path. let caps: Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref [Source] Set of capabilities for operations on path . Public Functions join [Source] Return a new path relative to this one. fun val join( path': String val, caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq) : FilePath val ? Parameters path': String val caps': Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq Returns FilePath val ? walk [Source] Walks a directory structure starting at this. handler(dir_path, dir_entries) will be called for each directory starting with this one. The handler can control which subdirectories are expanded by removing them from the dir_entries list. fun val walk( handler: WalkHandler ref, follow_links: Bool val = seq) : None val Parameters handler: WalkHandler ref follow_links: Bool val = seq Returns None val canonical [Source] Return the equivalent canonical absolute path. Raise an error if there isn't one. fun val canonical() : FilePath val ? Returns FilePath val ? exists [Source] Returns true if the path exists. Returns false for a broken symlink. fun val exists() : Bool val Returns Bool val mkdir [Source] Creates the directory. Will recursively create each element. Returns true if the directory exists when we're done, false if it does not. If we do not have the FileStat permission, this will return false even if the directory does exist. fun val mkdir( must_create: Bool val = seq) : Bool val Parameters must_create: Bool val = seq Returns Bool val remove [Source] Remove the file or directory. The directory contents will be removed as well, recursively. Symlinks will be removed but not traversed. fun val remove() : Bool val Returns Bool val rename [Source] Rename a file or directory. fun box rename( new_path: FilePath val) : Bool val Parameters new_path: FilePath val Returns Bool val symlink [Source] Create a symlink to a file or directory. fun box symlink( link_name: FilePath val) : Bool val Parameters link_name: FilePath val Returns Bool val chmod [Source] Set the FileMode for a path. fun box chmod( mode: FileMode box) : Bool val Parameters mode: FileMode box Returns Bool val chown [Source] Set the owner and group for a path. Does nothing on Windows. fun box chown( uid: U32 val, gid: U32 val) : Bool val Parameters uid: U32 val gid: U32 val Returns Bool val touch [Source] Set the last access and modification times of a path to now. fun box touch() : Bool val Returns Bool val set_time [Source] Set the last access and modification times of a path to the given values. fun box set_time( atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val Parameters atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val) Returns Bool val","title":"class FilePath"},{"location":"files-FilePath/#filepath","text":"[Source] A FilePath represents a capability to access a path. The path will be represented as an absolute path and a set of capabilities for operations on that path. class val FilePath","title":"FilePath"},{"location":"files-FilePath/#constructors","text":"","title":"Constructors"},{"location":"files-FilePath/#create","text":"[Source] Create a new path. The caller must either provide the root capability or an existing FilePath. If the root capability is provided, path' will be relative to the program's working directory. Otherwise, it will be relative to the existing FilePath, and the existing FilePath must be a prefix of the resulting path. The resulting FilePath will have capabilities that are the intersection of the supplied capabilities and the capabilities on the parent. new val create( base: (FilePath val | AmbientAuth val), path': String val, caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq) : FilePath val^ ?","title":"create"},{"location":"files-FilePath/#parameters","text":"base: ( FilePath val | AmbientAuth val) path': String val caps': Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq","title":"Parameters"},{"location":"files-FilePath/#returns","text":"FilePath val^ ?","title":"Returns"},{"location":"files-FilePath/#mkdtemp","text":"[Source] Create a temporary directory and returns a path to it. The directory's name will begin with prefix . The caller must either provide the root capability or an existing FilePath. If AmbientAuth is provided, pattern will be relative to the program's working directory. Otherwise, it will be relative to the existing FilePath, and the existing FilePath must be a prefix of the resulting path. The resulting FilePath will have capabilities that are the intersection of the supplied capabilities and the capabilities on the base. new val mkdtemp( base: (FilePath val | AmbientAuth val), prefix: String val = seq, caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq) : FilePath val^ ?","title":"mkdtemp"},{"location":"files-FilePath/#parameters_1","text":"base: ( FilePath val | AmbientAuth val) prefix: String val = seq caps': Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq","title":"Parameters"},{"location":"files-FilePath/#returns_1","text":"FilePath val^ ?","title":"Returns"},{"location":"files-FilePath/#_create","text":"[Source] Internal constructor. new val _create( path': String val, caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val) : FilePath val^","title":"_create"},{"location":"files-FilePath/#parameters_2","text":"path': String val caps': Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val","title":"Parameters"},{"location":"files-FilePath/#returns_2","text":"FilePath val^","title":"Returns"},{"location":"files-FilePath/#public-fields","text":"","title":"Public fields"},{"location":"files-FilePath/#let-path-string-val","text":"[Source] Absolute filesystem path.","title":"let path: String val"},{"location":"files-FilePath/#let-caps-flags91filecreate-val-filechmod-val-filechown-val-filelink-val-filelookup-val-filemkdir-val-fileread-val-fileremove-val-filerename-val-fileseek-val-filestat-val-filesync-val-filetime-val-filetruncate-val-filewrite-val-fileexec-val-u32-val93-ref","text":"[Source] Set of capabilities for operations on path .","title":"let caps: Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref"},{"location":"files-FilePath/#public-functions","text":"","title":"Public Functions"},{"location":"files-FilePath/#join","text":"[Source] Return a new path relative to this one. fun val join( path': String val, caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq) : FilePath val ?","title":"join"},{"location":"files-FilePath/#parameters_3","text":"path': String val caps': Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq","title":"Parameters"},{"location":"files-FilePath/#returns_3","text":"FilePath val ?","title":"Returns"},{"location":"files-FilePath/#walk","text":"[Source] Walks a directory structure starting at this. handler(dir_path, dir_entries) will be called for each directory starting with this one. The handler can control which subdirectories are expanded by removing them from the dir_entries list. fun val walk( handler: WalkHandler ref, follow_links: Bool val = seq) : None val","title":"walk"},{"location":"files-FilePath/#parameters_4","text":"handler: WalkHandler ref follow_links: Bool val = seq","title":"Parameters"},{"location":"files-FilePath/#returns_4","text":"None val","title":"Returns"},{"location":"files-FilePath/#canonical","text":"[Source] Return the equivalent canonical absolute path. Raise an error if there isn't one. fun val canonical() : FilePath val ?","title":"canonical"},{"location":"files-FilePath/#returns_5","text":"FilePath val ?","title":"Returns"},{"location":"files-FilePath/#exists","text":"[Source] Returns true if the path exists. Returns false for a broken symlink. fun val exists() : Bool val","title":"exists"},{"location":"files-FilePath/#returns_6","text":"Bool val","title":"Returns"},{"location":"files-FilePath/#mkdir","text":"[Source] Creates the directory. Will recursively create each element. Returns true if the directory exists when we're done, false if it does not. If we do not have the FileStat permission, this will return false even if the directory does exist. fun val mkdir( must_create: Bool val = seq) : Bool val","title":"mkdir"},{"location":"files-FilePath/#parameters_5","text":"must_create: Bool val = seq","title":"Parameters"},{"location":"files-FilePath/#returns_7","text":"Bool val","title":"Returns"},{"location":"files-FilePath/#remove","text":"[Source] Remove the file or directory. The directory contents will be removed as well, recursively. Symlinks will be removed but not traversed. fun val remove() : Bool val","title":"remove"},{"location":"files-FilePath/#returns_8","text":"Bool val","title":"Returns"},{"location":"files-FilePath/#rename","text":"[Source] Rename a file or directory. fun box rename( new_path: FilePath val) : Bool val","title":"rename"},{"location":"files-FilePath/#parameters_6","text":"new_path: FilePath val","title":"Parameters"},{"location":"files-FilePath/#returns_9","text":"Bool val","title":"Returns"},{"location":"files-FilePath/#symlink","text":"[Source] Create a symlink to a file or directory. fun box symlink( link_name: FilePath val) : Bool val","title":"symlink"},{"location":"files-FilePath/#parameters_7","text":"link_name: FilePath val","title":"Parameters"},{"location":"files-FilePath/#returns_10","text":"Bool val","title":"Returns"},{"location":"files-FilePath/#chmod","text":"[Source] Set the FileMode for a path. fun box chmod( mode: FileMode box) : Bool val","title":"chmod"},{"location":"files-FilePath/#parameters_8","text":"mode: FileMode box","title":"Parameters"},{"location":"files-FilePath/#returns_11","text":"Bool val","title":"Returns"},{"location":"files-FilePath/#chown","text":"[Source] Set the owner and group for a path. Does nothing on Windows. fun box chown( uid: U32 val, gid: U32 val) : Bool val","title":"chown"},{"location":"files-FilePath/#parameters_9","text":"uid: U32 val gid: U32 val","title":"Parameters"},{"location":"files-FilePath/#returns_12","text":"Bool val","title":"Returns"},{"location":"files-FilePath/#touch","text":"[Source] Set the last access and modification times of a path to now. fun box touch() : Bool val","title":"touch"},{"location":"files-FilePath/#returns_13","text":"Bool val","title":"Returns"},{"location":"files-FilePath/#set_time","text":"[Source] Set the last access and modification times of a path to the given values. fun box set_time( atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val","title":"set_time"},{"location":"files-FilePath/#parameters_10","text":"atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val)","title":"Parameters"},{"location":"files-FilePath/#returns_14","text":"Bool val","title":"Returns"},{"location":"files-FilePermissionDenied/","text":"FilePermissionDenied [Source] primitive val FilePermissionDenied Constructors create [Source] new val create() : FilePermissionDenied val^ Returns FilePermissionDenied val^ Public Functions eq [Source] fun box eq( that: FilePermissionDenied val) : Bool val Parameters that: FilePermissionDenied val Returns Bool val ne [Source] fun box ne( that: FilePermissionDenied val) : Bool val Parameters that: FilePermissionDenied val Returns Bool val","title":"primitive FilePermissionDenied"},{"location":"files-FilePermissionDenied/#filepermissiondenied","text":"[Source] primitive val FilePermissionDenied","title":"FilePermissionDenied"},{"location":"files-FilePermissionDenied/#constructors","text":"","title":"Constructors"},{"location":"files-FilePermissionDenied/#create","text":"[Source] new val create() : FilePermissionDenied val^","title":"create"},{"location":"files-FilePermissionDenied/#returns","text":"FilePermissionDenied val^","title":"Returns"},{"location":"files-FilePermissionDenied/#public-functions","text":"","title":"Public Functions"},{"location":"files-FilePermissionDenied/#eq","text":"[Source] fun box eq( that: FilePermissionDenied val) : Bool val","title":"eq"},{"location":"files-FilePermissionDenied/#parameters","text":"that: FilePermissionDenied val","title":"Parameters"},{"location":"files-FilePermissionDenied/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-FilePermissionDenied/#ne","text":"[Source] fun box ne( that: FilePermissionDenied val) : Bool val","title":"ne"},{"location":"files-FilePermissionDenied/#parameters_1","text":"that: FilePermissionDenied val","title":"Parameters"},{"location":"files-FilePermissionDenied/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileRead/","text":"FileRead [Source] primitive val FileRead Constructors create [Source] new val create() : FileRead val^ Returns FileRead val^ Public Functions value [Source] fun box value() : U32 val Returns U32 val eq [Source] fun box eq( that: FileRead val) : Bool val Parameters that: FileRead val Returns Bool val ne [Source] fun box ne( that: FileRead val) : Bool val Parameters that: FileRead val Returns Bool val","title":"primitive FileRead"},{"location":"files-FileRead/#fileread","text":"[Source] primitive val FileRead","title":"FileRead"},{"location":"files-FileRead/#constructors","text":"","title":"Constructors"},{"location":"files-FileRead/#create","text":"[Source] new val create() : FileRead val^","title":"create"},{"location":"files-FileRead/#returns","text":"FileRead val^","title":"Returns"},{"location":"files-FileRead/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileRead/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileRead/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileRead/#eq","text":"[Source] fun box eq( that: FileRead val) : Bool val","title":"eq"},{"location":"files-FileRead/#parameters","text":"that: FileRead val","title":"Parameters"},{"location":"files-FileRead/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileRead/#ne","text":"[Source] fun box ne( that: FileRead val) : Bool val","title":"ne"},{"location":"files-FileRead/#parameters_1","text":"that: FileRead val","title":"Parameters"},{"location":"files-FileRead/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileRemove/","text":"FileRemove [Source] primitive val FileRemove Constructors create [Source] new val create() : FileRemove val^ Returns FileRemove val^ Public Functions value [Source] fun box value() : U32 val Returns U32 val eq [Source] fun box eq( that: FileRemove val) : Bool val Parameters that: FileRemove val Returns Bool val ne [Source] fun box ne( that: FileRemove val) : Bool val Parameters that: FileRemove val Returns Bool val","title":"primitive FileRemove"},{"location":"files-FileRemove/#fileremove","text":"[Source] primitive val FileRemove","title":"FileRemove"},{"location":"files-FileRemove/#constructors","text":"","title":"Constructors"},{"location":"files-FileRemove/#create","text":"[Source] new val create() : FileRemove val^","title":"create"},{"location":"files-FileRemove/#returns","text":"FileRemove val^","title":"Returns"},{"location":"files-FileRemove/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileRemove/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileRemove/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileRemove/#eq","text":"[Source] fun box eq( that: FileRemove val) : Bool val","title":"eq"},{"location":"files-FileRemove/#parameters","text":"that: FileRemove val","title":"Parameters"},{"location":"files-FileRemove/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileRemove/#ne","text":"[Source] fun box ne( that: FileRemove val) : Bool val","title":"ne"},{"location":"files-FileRemove/#parameters_1","text":"that: FileRemove val","title":"Parameters"},{"location":"files-FileRemove/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileRename/","text":"FileRename [Source] primitive val FileRename Constructors create [Source] new val create() : FileRename val^ Returns FileRename val^ Public Functions value [Source] fun box value() : U32 val Returns U32 val eq [Source] fun box eq( that: FileRename val) : Bool val Parameters that: FileRename val Returns Bool val ne [Source] fun box ne( that: FileRename val) : Bool val Parameters that: FileRename val Returns Bool val","title":"primitive FileRename"},{"location":"files-FileRename/#filerename","text":"[Source] primitive val FileRename","title":"FileRename"},{"location":"files-FileRename/#constructors","text":"","title":"Constructors"},{"location":"files-FileRename/#create","text":"[Source] new val create() : FileRename val^","title":"create"},{"location":"files-FileRename/#returns","text":"FileRename val^","title":"Returns"},{"location":"files-FileRename/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileRename/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileRename/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileRename/#eq","text":"[Source] fun box eq( that: FileRename val) : Bool val","title":"eq"},{"location":"files-FileRename/#parameters","text":"that: FileRename val","title":"Parameters"},{"location":"files-FileRename/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileRename/#ne","text":"[Source] fun box ne( that: FileRename val) : Bool val","title":"ne"},{"location":"files-FileRename/#parameters_1","text":"that: FileRename val","title":"Parameters"},{"location":"files-FileRename/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileSeek/","text":"FileSeek [Source] primitive val FileSeek Constructors create [Source] new val create() : FileSeek val^ Returns FileSeek val^ Public Functions value [Source] fun box value() : U32 val Returns U32 val eq [Source] fun box eq( that: FileSeek val) : Bool val Parameters that: FileSeek val Returns Bool val ne [Source] fun box ne( that: FileSeek val) : Bool val Parameters that: FileSeek val Returns Bool val","title":"primitive FileSeek"},{"location":"files-FileSeek/#fileseek","text":"[Source] primitive val FileSeek","title":"FileSeek"},{"location":"files-FileSeek/#constructors","text":"","title":"Constructors"},{"location":"files-FileSeek/#create","text":"[Source] new val create() : FileSeek val^","title":"create"},{"location":"files-FileSeek/#returns","text":"FileSeek val^","title":"Returns"},{"location":"files-FileSeek/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileSeek/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileSeek/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileSeek/#eq","text":"[Source] fun box eq( that: FileSeek val) : Bool val","title":"eq"},{"location":"files-FileSeek/#parameters","text":"that: FileSeek val","title":"Parameters"},{"location":"files-FileSeek/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileSeek/#ne","text":"[Source] fun box ne( that: FileSeek val) : Bool val","title":"ne"},{"location":"files-FileSeek/#parameters_1","text":"that: FileSeek val","title":"Parameters"},{"location":"files-FileSeek/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileStat/","text":"FileStat [Source] primitive val FileStat Constructors create [Source] new val create() : FileStat val^ Returns FileStat val^ Public Functions value [Source] fun box value() : U32 val Returns U32 val eq [Source] fun box eq( that: FileStat val) : Bool val Parameters that: FileStat val Returns Bool val ne [Source] fun box ne( that: FileStat val) : Bool val Parameters that: FileStat val Returns Bool val","title":"primitive FileStat"},{"location":"files-FileStat/#filestat","text":"[Source] primitive val FileStat","title":"FileStat"},{"location":"files-FileStat/#constructors","text":"","title":"Constructors"},{"location":"files-FileStat/#create","text":"[Source] new val create() : FileStat val^","title":"create"},{"location":"files-FileStat/#returns","text":"FileStat val^","title":"Returns"},{"location":"files-FileStat/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileStat/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileStat/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileStat/#eq","text":"[Source] fun box eq( that: FileStat val) : Bool val","title":"eq"},{"location":"files-FileStat/#parameters","text":"that: FileStat val","title":"Parameters"},{"location":"files-FileStat/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileStat/#ne","text":"[Source] fun box ne( that: FileStat val) : Bool val","title":"ne"},{"location":"files-FileStat/#parameters_1","text":"that: FileStat val","title":"Parameters"},{"location":"files-FileStat/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileStream/","text":"FileStream [Source] Asynchronous access to a File object. Wraps file operations print, write, printv and writev. The File will be disposed through File._final. actor tag FileStream is OutStream tag Implements OutStream tag Constructors create [Source] new tag create( file: File iso) : FileStream tag^ Parameters file: File iso Returns FileStream tag^ Public Behaviours print [Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val)) Parameters data: ( String val | Array [ U8 val] val) write [Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val)) Parameters data: ( String val | Array [ U8 val] val) printv [Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val) Parameters data: ByteSeqIter val writev [Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val) Parameters data: ByteSeqIter val","title":"actor FileStream"},{"location":"files-FileStream/#filestream","text":"[Source] Asynchronous access to a File object. Wraps file operations print, write, printv and writev. The File will be disposed through File._final. actor tag FileStream is OutStream tag","title":"FileStream"},{"location":"files-FileStream/#implements","text":"OutStream tag","title":"Implements"},{"location":"files-FileStream/#constructors","text":"","title":"Constructors"},{"location":"files-FileStream/#create","text":"[Source] new tag create( file: File iso) : FileStream tag^","title":"create"},{"location":"files-FileStream/#parameters","text":"file: File iso","title":"Parameters"},{"location":"files-FileStream/#returns","text":"FileStream tag^","title":"Returns"},{"location":"files-FileStream/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"files-FileStream/#print","text":"[Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val))","title":"print"},{"location":"files-FileStream/#parameters_1","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"files-FileStream/#write","text":"[Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val))","title":"write"},{"location":"files-FileStream/#parameters_2","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"files-FileStream/#printv","text":"[Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val)","title":"printv"},{"location":"files-FileStream/#parameters_3","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"files-FileStream/#writev","text":"[Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val)","title":"writev"},{"location":"files-FileStream/#parameters_4","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"files-FileSync/","text":"FileSync [Source] primitive val FileSync Constructors create [Source] new val create() : FileSync val^ Returns FileSync val^ Public Functions value [Source] fun box value() : U32 val Returns U32 val eq [Source] fun box eq( that: FileSync val) : Bool val Parameters that: FileSync val Returns Bool val ne [Source] fun box ne( that: FileSync val) : Bool val Parameters that: FileSync val Returns Bool val","title":"primitive FileSync"},{"location":"files-FileSync/#filesync","text":"[Source] primitive val FileSync","title":"FileSync"},{"location":"files-FileSync/#constructors","text":"","title":"Constructors"},{"location":"files-FileSync/#create","text":"[Source] new val create() : FileSync val^","title":"create"},{"location":"files-FileSync/#returns","text":"FileSync val^","title":"Returns"},{"location":"files-FileSync/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileSync/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileSync/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileSync/#eq","text":"[Source] fun box eq( that: FileSync val) : Bool val","title":"eq"},{"location":"files-FileSync/#parameters","text":"that: FileSync val","title":"Parameters"},{"location":"files-FileSync/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileSync/#ne","text":"[Source] fun box ne( that: FileSync val) : Bool val","title":"ne"},{"location":"files-FileSync/#parameters_1","text":"that: FileSync val","title":"Parameters"},{"location":"files-FileSync/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileTime/","text":"FileTime [Source] primitive val FileTime Constructors create [Source] new val create() : FileTime val^ Returns FileTime val^ Public Functions value [Source] fun box value() : U32 val Returns U32 val eq [Source] fun box eq( that: FileTime val) : Bool val Parameters that: FileTime val Returns Bool val ne [Source] fun box ne( that: FileTime val) : Bool val Parameters that: FileTime val Returns Bool val","title":"primitive FileTime"},{"location":"files-FileTime/#filetime","text":"[Source] primitive val FileTime","title":"FileTime"},{"location":"files-FileTime/#constructors","text":"","title":"Constructors"},{"location":"files-FileTime/#create","text":"[Source] new val create() : FileTime val^","title":"create"},{"location":"files-FileTime/#returns","text":"FileTime val^","title":"Returns"},{"location":"files-FileTime/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileTime/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileTime/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileTime/#eq","text":"[Source] fun box eq( that: FileTime val) : Bool val","title":"eq"},{"location":"files-FileTime/#parameters","text":"that: FileTime val","title":"Parameters"},{"location":"files-FileTime/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileTime/#ne","text":"[Source] fun box ne( that: FileTime val) : Bool val","title":"ne"},{"location":"files-FileTime/#parameters_1","text":"that: FileTime val","title":"Parameters"},{"location":"files-FileTime/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileTruncate/","text":"FileTruncate [Source] primitive val FileTruncate Constructors create [Source] new val create() : FileTruncate val^ Returns FileTruncate val^ Public Functions value [Source] fun box value() : U32 val Returns U32 val eq [Source] fun box eq( that: FileTruncate val) : Bool val Parameters that: FileTruncate val Returns Bool val ne [Source] fun box ne( that: FileTruncate val) : Bool val Parameters that: FileTruncate val Returns Bool val","title":"primitive FileTruncate"},{"location":"files-FileTruncate/#filetruncate","text":"[Source] primitive val FileTruncate","title":"FileTruncate"},{"location":"files-FileTruncate/#constructors","text":"","title":"Constructors"},{"location":"files-FileTruncate/#create","text":"[Source] new val create() : FileTruncate val^","title":"create"},{"location":"files-FileTruncate/#returns","text":"FileTruncate val^","title":"Returns"},{"location":"files-FileTruncate/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileTruncate/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileTruncate/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileTruncate/#eq","text":"[Source] fun box eq( that: FileTruncate val) : Bool val","title":"eq"},{"location":"files-FileTruncate/#parameters","text":"that: FileTruncate val","title":"Parameters"},{"location":"files-FileTruncate/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileTruncate/#ne","text":"[Source] fun box ne( that: FileTruncate val) : Bool val","title":"ne"},{"location":"files-FileTruncate/#parameters_1","text":"that: FileTruncate val","title":"Parameters"},{"location":"files-FileTruncate/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileWrite/","text":"FileWrite [Source] primitive val FileWrite Constructors create [Source] new val create() : FileWrite val^ Returns FileWrite val^ Public Functions value [Source] fun box value() : U32 val Returns U32 val eq [Source] fun box eq( that: FileWrite val) : Bool val Parameters that: FileWrite val Returns Bool val ne [Source] fun box ne( that: FileWrite val) : Bool val Parameters that: FileWrite val Returns Bool val","title":"primitive FileWrite"},{"location":"files-FileWrite/#filewrite","text":"[Source] primitive val FileWrite","title":"FileWrite"},{"location":"files-FileWrite/#constructors","text":"","title":"Constructors"},{"location":"files-FileWrite/#create","text":"[Source] new val create() : FileWrite val^","title":"create"},{"location":"files-FileWrite/#returns","text":"FileWrite val^","title":"Returns"},{"location":"files-FileWrite/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileWrite/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileWrite/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileWrite/#eq","text":"[Source] fun box eq( that: FileWrite val) : Bool val","title":"eq"},{"location":"files-FileWrite/#parameters","text":"that: FileWrite val","title":"Parameters"},{"location":"files-FileWrite/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileWrite/#ne","text":"[Source] fun box ne( that: FileWrite val) : Bool val","title":"ne"},{"location":"files-FileWrite/#parameters_1","text":"that: FileWrite val","title":"Parameters"},{"location":"files-FileWrite/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-OpenFile/","text":"OpenFile [Source] Open a File for read only. primitive val OpenFile Constructors create [Source] new val create() : OpenFile val^ Returns OpenFile val^ Public Functions apply [Source] fun box apply( from: FilePath val) : (File ref | FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val) Parameters from: FilePath val Returns ( File ref | FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val) eq [Source] fun box eq( that: OpenFile val) : Bool val Parameters that: OpenFile val Returns Bool val ne [Source] fun box ne( that: OpenFile val) : Bool val Parameters that: OpenFile val Returns Bool val","title":"primitive OpenFile"},{"location":"files-OpenFile/#openfile","text":"[Source] Open a File for read only. primitive val OpenFile","title":"OpenFile"},{"location":"files-OpenFile/#constructors","text":"","title":"Constructors"},{"location":"files-OpenFile/#create","text":"[Source] new val create() : OpenFile val^","title":"create"},{"location":"files-OpenFile/#returns","text":"OpenFile val^","title":"Returns"},{"location":"files-OpenFile/#public-functions","text":"","title":"Public Functions"},{"location":"files-OpenFile/#apply","text":"[Source] fun box apply( from: FilePath val) : (File ref | FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"apply"},{"location":"files-OpenFile/#parameters","text":"from: FilePath val","title":"Parameters"},{"location":"files-OpenFile/#returns_1","text":"( File ref | FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"Returns"},{"location":"files-OpenFile/#eq","text":"[Source] fun box eq( that: OpenFile val) : Bool val","title":"eq"},{"location":"files-OpenFile/#parameters_1","text":"that: OpenFile val","title":"Parameters"},{"location":"files-OpenFile/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-OpenFile/#ne","text":"[Source] fun box ne( that: OpenFile val) : Bool val","title":"ne"},{"location":"files-OpenFile/#parameters_2","text":"that: OpenFile val","title":"Parameters"},{"location":"files-OpenFile/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-Path/","text":"Path [Source] Operations on paths that do not require a capability. The operations can be used to manipulate path names, but give no access to the resulting paths. primitive val Path Constructors create [Source] new val create() : Path val^ Returns Path val^ Public Functions is_sep [Source] Determine if a byte is a path separator. fun box is_sep( c: U8 val) : Bool val Parameters c: U8 val Returns Bool val sep [Source] Return the path separator as a string. fun tag sep() : String val Returns String val is_abs [Source] Return true if the path is an absolute path. fun box is_abs( path: String val) : Bool val Parameters path: String val Returns Bool val join [Source] Join two paths together. If the next_path is absolute, simply return it. The returned path will be cleaned. fun box join( path: String val, next_path: String val) : String val Parameters path: String val next_path: String val Returns String val clean [Source] Replace multiple separators with a single separator. Convert / to the OS separator. Remove instances of . from the path. Remove instances of .. and the preceding path element from the path. The result will have no trailing slash unless it is a root directory. If the result would be empty, \".\" will be returned instead. fun box clean( path: String val) : String val Parameters path: String val Returns String val normcase [Source] Normalizes the case of path for the runtime platform. fun box normcase( path: String val) : String val Parameters path: String val Returns String val cwd [Source] Returns the program's working directory. Setting the working directory is not supported, as it is not concurrency-safe. fun box cwd() : String val Returns String val abs [Source] Returns a cleaned, absolute path. fun box abs( path: String val) : String val Parameters path: String val Returns String val rel [Source] Returns a path such that Path.join(to, Path.rel(to, target)) == target. Raises an error if this isn't possible. fun box rel( to: String val, target: String val) : String val ? Parameters to: String val target: String val Returns String val ? split [Source] Splits the path into a pair, (head, tail) where tail is the last pathname component and head is everything leading up to that. The tail part will never contain a slash; if path ends in a slash, tail will be empty. If there is no slash in path, head will be empty. If path is empty, both head and tail are empty. The path in head will be cleaned before it is returned. In all cases, join(head, tail) returns a path to the same location as path (but the strings may differ). Also see the functions dir() and base(). fun box split( path: String val, separator: String val = seq) : (String val , String val) Parameters path: String val separator: String val = seq Returns ( String val , String val) base [Source] Return the path after the last separator, or the whole path if there is no separator. If with_ext is false , the extension as defined by the ext() method will be omitted from the result. fun box base( path: String val, with_ext: Bool val = seq) : String val Parameters path: String val with_ext: Bool val = seq Returns String val dir [Source] Return a cleaned path before the last separator, or the whole path if there is no separator. fun box dir( path: String val) : String val Parameters path: String val Returns String val ext [Source] Return the file extension, i.e. the part after the last dot as long as that dot is after all separators. Return an empty string for no extension. fun box ext( path: String val) : String val Parameters path: String val Returns String val volume [Source] On Windows, this returns the drive letter or UNC base at the beginning of the path, if there is one. Otherwise, this returns an empty string. fun box volume( path: String val) : String val Parameters path: String val Returns String val from_slash [Source] Changes each / in the path to the OS specific separator. fun box from_slash( path: String val) : String val Parameters path: String val Returns String val to_slash [Source] Changes each OS specific separator in the path to /. fun box to_slash( path: String val) : String val Parameters path: String val Returns String val canonical [Source] Return the equivalent canonical absolute path. Raise an error if there isn't one. fun box canonical( path: String val) : String val ? Parameters path: String val Returns String val ? is_list_sep [Source] Determine if a byte is a path list separator. fun box is_list_sep( c: U8 val) : Bool val Parameters c: U8 val Returns Bool val list_sep [Source] Return the path list separator as a string. fun box list_sep() : String val Returns String val split_list [Source] Separate a list of paths into an array of cleaned paths. fun box split_list( path: String val) : Array[String val] iso^ Parameters path: String val Returns Array [ String val] iso^ random [Source] Returns a pseudo-random base, suitable as a temporary file name or directory name, but not guaranteed to not already exist. fun box random( len: USize val = seq) : String val Parameters len: USize val = seq Returns String val eq [Source] fun box eq( that: Path val) : Bool val Parameters that: Path val Returns Bool val ne [Source] fun box ne( that: Path val) : Bool val Parameters that: Path val Returns Bool val Private Functions _drive_letter [Source] Look for a drive letter followed by a ':', returning true if we find it. fun box _drive_letter( path: String val, offset: ISize val = seq) : Bool val Parameters path: String val offset: ISize val = seq Returns Bool val _network_share [Source] Look for a host, a \\, and a resource. Return the path up to that point if we found one, otherwise an empty String. fun box _network_share( path: String val, offset: ISize val = seq) : String val Parameters path: String val offset: ISize val = seq Returns String val","title":"primitive Path"},{"location":"files-Path/#path","text":"[Source] Operations on paths that do not require a capability. The operations can be used to manipulate path names, but give no access to the resulting paths. primitive val Path","title":"Path"},{"location":"files-Path/#constructors","text":"","title":"Constructors"},{"location":"files-Path/#create","text":"[Source] new val create() : Path val^","title":"create"},{"location":"files-Path/#returns","text":"Path val^","title":"Returns"},{"location":"files-Path/#public-functions","text":"","title":"Public Functions"},{"location":"files-Path/#is_sep","text":"[Source] Determine if a byte is a path separator. fun box is_sep( c: U8 val) : Bool val","title":"is_sep"},{"location":"files-Path/#parameters","text":"c: U8 val","title":"Parameters"},{"location":"files-Path/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-Path/#sep","text":"[Source] Return the path separator as a string. fun tag sep() : String val","title":"sep"},{"location":"files-Path/#returns_2","text":"String val","title":"Returns"},{"location":"files-Path/#is_abs","text":"[Source] Return true if the path is an absolute path. fun box is_abs( path: String val) : Bool val","title":"is_abs"},{"location":"files-Path/#parameters_1","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-Path/#join","text":"[Source] Join two paths together. If the next_path is absolute, simply return it. The returned path will be cleaned. fun box join( path: String val, next_path: String val) : String val","title":"join"},{"location":"files-Path/#parameters_2","text":"path: String val next_path: String val","title":"Parameters"},{"location":"files-Path/#returns_4","text":"String val","title":"Returns"},{"location":"files-Path/#clean","text":"[Source] Replace multiple separators with a single separator. Convert / to the OS separator. Remove instances of . from the path. Remove instances of .. and the preceding path element from the path. The result will have no trailing slash unless it is a root directory. If the result would be empty, \".\" will be returned instead. fun box clean( path: String val) : String val","title":"clean"},{"location":"files-Path/#parameters_3","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_5","text":"String val","title":"Returns"},{"location":"files-Path/#normcase","text":"[Source] Normalizes the case of path for the runtime platform. fun box normcase( path: String val) : String val","title":"normcase"},{"location":"files-Path/#parameters_4","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_6","text":"String val","title":"Returns"},{"location":"files-Path/#cwd","text":"[Source] Returns the program's working directory. Setting the working directory is not supported, as it is not concurrency-safe. fun box cwd() : String val","title":"cwd"},{"location":"files-Path/#returns_7","text":"String val","title":"Returns"},{"location":"files-Path/#abs","text":"[Source] Returns a cleaned, absolute path. fun box abs( path: String val) : String val","title":"abs"},{"location":"files-Path/#parameters_5","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_8","text":"String val","title":"Returns"},{"location":"files-Path/#rel","text":"[Source] Returns a path such that Path.join(to, Path.rel(to, target)) == target. Raises an error if this isn't possible. fun box rel( to: String val, target: String val) : String val ?","title":"rel"},{"location":"files-Path/#parameters_6","text":"to: String val target: String val","title":"Parameters"},{"location":"files-Path/#returns_9","text":"String val ?","title":"Returns"},{"location":"files-Path/#split","text":"[Source] Splits the path into a pair, (head, tail) where tail is the last pathname component and head is everything leading up to that. The tail part will never contain a slash; if path ends in a slash, tail will be empty. If there is no slash in path, head will be empty. If path is empty, both head and tail are empty. The path in head will be cleaned before it is returned. In all cases, join(head, tail) returns a path to the same location as path (but the strings may differ). Also see the functions dir() and base(). fun box split( path: String val, separator: String val = seq) : (String val , String val)","title":"split"},{"location":"files-Path/#parameters_7","text":"path: String val separator: String val = seq","title":"Parameters"},{"location":"files-Path/#returns_10","text":"( String val , String val)","title":"Returns"},{"location":"files-Path/#base","text":"[Source] Return the path after the last separator, or the whole path if there is no separator. If with_ext is false , the extension as defined by the ext() method will be omitted from the result. fun box base( path: String val, with_ext: Bool val = seq) : String val","title":"base"},{"location":"files-Path/#parameters_8","text":"path: String val with_ext: Bool val = seq","title":"Parameters"},{"location":"files-Path/#returns_11","text":"String val","title":"Returns"},{"location":"files-Path/#dir","text":"[Source] Return a cleaned path before the last separator, or the whole path if there is no separator. fun box dir( path: String val) : String val","title":"dir"},{"location":"files-Path/#parameters_9","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_12","text":"String val","title":"Returns"},{"location":"files-Path/#ext","text":"[Source] Return the file extension, i.e. the part after the last dot as long as that dot is after all separators. Return an empty string for no extension. fun box ext( path: String val) : String val","title":"ext"},{"location":"files-Path/#parameters_10","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_13","text":"String val","title":"Returns"},{"location":"files-Path/#volume","text":"[Source] On Windows, this returns the drive letter or UNC base at the beginning of the path, if there is one. Otherwise, this returns an empty string. fun box volume( path: String val) : String val","title":"volume"},{"location":"files-Path/#parameters_11","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_14","text":"String val","title":"Returns"},{"location":"files-Path/#from_slash","text":"[Source] Changes each / in the path to the OS specific separator. fun box from_slash( path: String val) : String val","title":"from_slash"},{"location":"files-Path/#parameters_12","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_15","text":"String val","title":"Returns"},{"location":"files-Path/#to_slash","text":"[Source] Changes each OS specific separator in the path to /. fun box to_slash( path: String val) : String val","title":"to_slash"},{"location":"files-Path/#parameters_13","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_16","text":"String val","title":"Returns"},{"location":"files-Path/#canonical","text":"[Source] Return the equivalent canonical absolute path. Raise an error if there isn't one. fun box canonical( path: String val) : String val ?","title":"canonical"},{"location":"files-Path/#parameters_14","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_17","text":"String val ?","title":"Returns"},{"location":"files-Path/#is_list_sep","text":"[Source] Determine if a byte is a path list separator. fun box is_list_sep( c: U8 val) : Bool val","title":"is_list_sep"},{"location":"files-Path/#parameters_15","text":"c: U8 val","title":"Parameters"},{"location":"files-Path/#returns_18","text":"Bool val","title":"Returns"},{"location":"files-Path/#list_sep","text":"[Source] Return the path list separator as a string. fun box list_sep() : String val","title":"list_sep"},{"location":"files-Path/#returns_19","text":"String val","title":"Returns"},{"location":"files-Path/#split_list","text":"[Source] Separate a list of paths into an array of cleaned paths. fun box split_list( path: String val) : Array[String val] iso^","title":"split_list"},{"location":"files-Path/#parameters_16","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_20","text":"Array [ String val] iso^","title":"Returns"},{"location":"files-Path/#random","text":"[Source] Returns a pseudo-random base, suitable as a temporary file name or directory name, but not guaranteed to not already exist. fun box random( len: USize val = seq) : String val","title":"random"},{"location":"files-Path/#parameters_17","text":"len: USize val = seq","title":"Parameters"},{"location":"files-Path/#returns_21","text":"String val","title":"Returns"},{"location":"files-Path/#eq","text":"[Source] fun box eq( that: Path val) : Bool val","title":"eq"},{"location":"files-Path/#parameters_18","text":"that: Path val","title":"Parameters"},{"location":"files-Path/#returns_22","text":"Bool val","title":"Returns"},{"location":"files-Path/#ne","text":"[Source] fun box ne( that: Path val) : Bool val","title":"ne"},{"location":"files-Path/#parameters_19","text":"that: Path val","title":"Parameters"},{"location":"files-Path/#returns_23","text":"Bool val","title":"Returns"},{"location":"files-Path/#private-functions","text":"","title":"Private Functions"},{"location":"files-Path/#_drive_letter","text":"[Source] Look for a drive letter followed by a ':', returning true if we find it. fun box _drive_letter( path: String val, offset: ISize val = seq) : Bool val","title":"_drive_letter"},{"location":"files-Path/#parameters_20","text":"path: String val offset: ISize val = seq","title":"Parameters"},{"location":"files-Path/#returns_24","text":"Bool val","title":"Returns"},{"location":"files-Path/#_network_share","text":"[Source] Look for a host, a \\, and a resource. Return the path up to that point if we found one, otherwise an empty String. fun box _network_share( path: String val, offset: ISize val = seq) : String val","title":"_network_share"},{"location":"files-Path/#parameters_21","text":"path: String val offset: ISize val = seq","title":"Parameters"},{"location":"files-Path/#returns_25","text":"String val","title":"Returns"},{"location":"files-WalkHandler/","text":"WalkHandler [Source] A handler for FilePath.walk . interface ref WalkHandler Public Functions apply [Source] fun ref apply( dir_path: FilePath val, dir_entries: Array[String val] ref) : None val Parameters dir_path: FilePath val dir_entries: Array [ String val] ref Returns None val","title":"interface WalkHandler"},{"location":"files-WalkHandler/#walkhandler","text":"[Source] A handler for FilePath.walk . interface ref WalkHandler","title":"WalkHandler"},{"location":"files-WalkHandler/#public-functions","text":"","title":"Public Functions"},{"location":"files-WalkHandler/#apply","text":"[Source] fun ref apply( dir_path: FilePath val, dir_entries: Array[String val] ref) : None val","title":"apply"},{"location":"files-WalkHandler/#parameters","text":"dir_path: FilePath val dir_entries: Array [ String val] ref","title":"Parameters"},{"location":"files-WalkHandler/#returns","text":"None val","title":"Returns"},{"location":"files-_DirectoryEntry/","text":"_DirectoryEntry [Source] primitive val _DirectoryEntry Constructors create [Source] new val create() : _DirectoryEntry val^ Returns _DirectoryEntry val^ Public Functions eq [Source] fun box eq( that: _DirectoryEntry val) : Bool val Parameters that: _DirectoryEntry val Returns Bool val ne [Source] fun box ne( that: _DirectoryEntry val) : Bool val Parameters that: _DirectoryEntry val Returns Bool val","title":"primitive _DirectoryEntry"},{"location":"files-_DirectoryEntry/#_directoryentry","text":"[Source] primitive val _DirectoryEntry","title":"_DirectoryEntry"},{"location":"files-_DirectoryEntry/#constructors","text":"","title":"Constructors"},{"location":"files-_DirectoryEntry/#create","text":"[Source] new val create() : _DirectoryEntry val^","title":"create"},{"location":"files-_DirectoryEntry/#returns","text":"_DirectoryEntry val^","title":"Returns"},{"location":"files-_DirectoryEntry/#public-functions","text":"","title":"Public Functions"},{"location":"files-_DirectoryEntry/#eq","text":"[Source] fun box eq( that: _DirectoryEntry val) : Bool val","title":"eq"},{"location":"files-_DirectoryEntry/#parameters","text":"that: _DirectoryEntry val","title":"Parameters"},{"location":"files-_DirectoryEntry/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-_DirectoryEntry/#ne","text":"[Source] fun box ne( that: _DirectoryEntry val) : Bool val","title":"ne"},{"location":"files-_DirectoryEntry/#parameters_1","text":"that: _DirectoryEntry val","title":"Parameters"},{"location":"files-_DirectoryEntry/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_DirectoryHandle/","text":"_DirectoryHandle [Source] primitive val _DirectoryHandle Constructors create [Source] new val create() : _DirectoryHandle val^ Returns _DirectoryHandle val^ Public Functions eq [Source] fun box eq( that: _DirectoryHandle val) : Bool val Parameters that: _DirectoryHandle val Returns Bool val ne [Source] fun box ne( that: _DirectoryHandle val) : Bool val Parameters that: _DirectoryHandle val Returns Bool val","title":"primitive _DirectoryHandle"},{"location":"files-_DirectoryHandle/#_directoryhandle","text":"[Source] primitive val _DirectoryHandle","title":"_DirectoryHandle"},{"location":"files-_DirectoryHandle/#constructors","text":"","title":"Constructors"},{"location":"files-_DirectoryHandle/#create","text":"[Source] new val create() : _DirectoryHandle val^","title":"create"},{"location":"files-_DirectoryHandle/#returns","text":"_DirectoryHandle val^","title":"Returns"},{"location":"files-_DirectoryHandle/#public-functions","text":"","title":"Public Functions"},{"location":"files-_DirectoryHandle/#eq","text":"[Source] fun box eq( that: _DirectoryHandle val) : Bool val","title":"eq"},{"location":"files-_DirectoryHandle/#parameters","text":"that: _DirectoryHandle val","title":"Parameters"},{"location":"files-_DirectoryHandle/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-_DirectoryHandle/#ne","text":"[Source] fun box ne( that: _DirectoryHandle val) : Bool val","title":"ne"},{"location":"files-_DirectoryHandle/#parameters_1","text":"that: _DirectoryHandle val","title":"Parameters"},{"location":"files-_DirectoryHandle/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_EACCES/","text":"_EACCES [Source] primitive val _EACCES Constructors create [Source] new val create() : _EACCES val^ Returns _EACCES val^ Public Functions apply [Source] fun box apply() : I32 val Returns I32 val eq [Source] fun box eq( that: _EACCES val) : Bool val Parameters that: _EACCES val Returns Bool val ne [Source] fun box ne( that: _EACCES val) : Bool val Parameters that: _EACCES val Returns Bool val","title":"primitive _EACCES"},{"location":"files-_EACCES/#_eacces","text":"[Source] primitive val _EACCES","title":"_EACCES"},{"location":"files-_EACCES/#constructors","text":"","title":"Constructors"},{"location":"files-_EACCES/#create","text":"[Source] new val create() : _EACCES val^","title":"create"},{"location":"files-_EACCES/#returns","text":"_EACCES val^","title":"Returns"},{"location":"files-_EACCES/#public-functions","text":"","title":"Public Functions"},{"location":"files-_EACCES/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"files-_EACCES/#returns_1","text":"I32 val","title":"Returns"},{"location":"files-_EACCES/#eq","text":"[Source] fun box eq( that: _EACCES val) : Bool val","title":"eq"},{"location":"files-_EACCES/#parameters","text":"that: _EACCES val","title":"Parameters"},{"location":"files-_EACCES/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_EACCES/#ne","text":"[Source] fun box ne( that: _EACCES val) : Bool val","title":"ne"},{"location":"files-_EACCES/#parameters_1","text":"that: _EACCES val","title":"Parameters"},{"location":"files-_EACCES/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-_EBADF/","text":"_EBADF [Source] primitive val _EBADF Constructors create [Source] new val create() : _EBADF val^ Returns _EBADF val^ Public Functions apply [Source] fun box apply() : I32 val Returns I32 val eq [Source] fun box eq( that: _EBADF val) : Bool val Parameters that: _EBADF val Returns Bool val ne [Source] fun box ne( that: _EBADF val) : Bool val Parameters that: _EBADF val Returns Bool val","title":"primitive _EBADF"},{"location":"files-_EBADF/#_ebadf","text":"[Source] primitive val _EBADF","title":"_EBADF"},{"location":"files-_EBADF/#constructors","text":"","title":"Constructors"},{"location":"files-_EBADF/#create","text":"[Source] new val create() : _EBADF val^","title":"create"},{"location":"files-_EBADF/#returns","text":"_EBADF val^","title":"Returns"},{"location":"files-_EBADF/#public-functions","text":"","title":"Public Functions"},{"location":"files-_EBADF/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"files-_EBADF/#returns_1","text":"I32 val","title":"Returns"},{"location":"files-_EBADF/#eq","text":"[Source] fun box eq( that: _EBADF val) : Bool val","title":"eq"},{"location":"files-_EBADF/#parameters","text":"that: _EBADF val","title":"Parameters"},{"location":"files-_EBADF/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_EBADF/#ne","text":"[Source] fun box ne( that: _EBADF val) : Bool val","title":"ne"},{"location":"files-_EBADF/#parameters_1","text":"that: _EBADF val","title":"Parameters"},{"location":"files-_EBADF/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-_EEXIST/","text":"_EEXIST [Source] primitive val _EEXIST Constructors create [Source] new val create() : _EEXIST val^ Returns _EEXIST val^ Public Functions apply [Source] fun box apply() : I32 val Returns I32 val eq [Source] fun box eq( that: _EEXIST val) : Bool val Parameters that: _EEXIST val Returns Bool val ne [Source] fun box ne( that: _EEXIST val) : Bool val Parameters that: _EEXIST val Returns Bool val","title":"primitive _EEXIST"},{"location":"files-_EEXIST/#_eexist","text":"[Source] primitive val _EEXIST","title":"_EEXIST"},{"location":"files-_EEXIST/#constructors","text":"","title":"Constructors"},{"location":"files-_EEXIST/#create","text":"[Source] new val create() : _EEXIST val^","title":"create"},{"location":"files-_EEXIST/#returns","text":"_EEXIST val^","title":"Returns"},{"location":"files-_EEXIST/#public-functions","text":"","title":"Public Functions"},{"location":"files-_EEXIST/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"files-_EEXIST/#returns_1","text":"I32 val","title":"Returns"},{"location":"files-_EEXIST/#eq","text":"[Source] fun box eq( that: _EEXIST val) : Bool val","title":"eq"},{"location":"files-_EEXIST/#parameters","text":"that: _EEXIST val","title":"Parameters"},{"location":"files-_EEXIST/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_EEXIST/#ne","text":"[Source] fun box ne( that: _EEXIST val) : Bool val","title":"ne"},{"location":"files-_EEXIST/#parameters_1","text":"that: _EEXIST val","title":"Parameters"},{"location":"files-_EEXIST/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-_FileDes/","text":"_FileDes [Source] Convenience operations on file descriptors. primitive val _FileDes Constructors create [Source] new val create() : _FileDes val^ Returns _FileDes val^ Public Functions chmod [Source] Set the FileMode for this fd. fun box chmod( fd: I32 val, path: FilePath val, mode: FileMode box) : Bool val Parameters fd: I32 val path: FilePath val mode: FileMode box Returns Bool val chown [Source] Set the owner and group for this file. Does nothing on Windows. fun box chown( fd: I32 val, path: FilePath val, uid: U32 val, gid: U32 val) : Bool val Parameters fd: I32 val path: FilePath val uid: U32 val gid: U32 val Returns Bool val touch [Source] Set the last access and modification times of the file to now. fun box touch( fd: I32 val, path: FilePath val) : Bool val Parameters fd: I32 val path: FilePath val Returns Bool val set_time [Source] Set the last access and modification times of the file to the given values. fun box set_time( fd: I32 val, path: FilePath val, atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val Parameters fd: I32 val path: FilePath val atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val) Returns Bool val set_rights [Source] Set the Capsicum rights on the file descriptor. fun box set_rights( fd: I32 val, path: FilePath val, writeable: Bool val = seq) : None val ? Parameters fd: I32 val path: FilePath val writeable: Bool val = seq Returns None val ? eq [Source] fun box eq( that: _FileDes val) : Bool val Parameters that: _FileDes val Returns Bool val ne [Source] fun box ne( that: _FileDes val) : Bool val Parameters that: _FileDes val Returns Bool val","title":"primitive _FileDes"},{"location":"files-_FileDes/#_filedes","text":"[Source] Convenience operations on file descriptors. primitive val _FileDes","title":"_FileDes"},{"location":"files-_FileDes/#constructors","text":"","title":"Constructors"},{"location":"files-_FileDes/#create","text":"[Source] new val create() : _FileDes val^","title":"create"},{"location":"files-_FileDes/#returns","text":"_FileDes val^","title":"Returns"},{"location":"files-_FileDes/#public-functions","text":"","title":"Public Functions"},{"location":"files-_FileDes/#chmod","text":"[Source] Set the FileMode for this fd. fun box chmod( fd: I32 val, path: FilePath val, mode: FileMode box) : Bool val","title":"chmod"},{"location":"files-_FileDes/#parameters","text":"fd: I32 val path: FilePath val mode: FileMode box","title":"Parameters"},{"location":"files-_FileDes/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-_FileDes/#chown","text":"[Source] Set the owner and group for this file. Does nothing on Windows. fun box chown( fd: I32 val, path: FilePath val, uid: U32 val, gid: U32 val) : Bool val","title":"chown"},{"location":"files-_FileDes/#parameters_1","text":"fd: I32 val path: FilePath val uid: U32 val gid: U32 val","title":"Parameters"},{"location":"files-_FileDes/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_FileDes/#touch","text":"[Source] Set the last access and modification times of the file to now. fun box touch( fd: I32 val, path: FilePath val) : Bool val","title":"touch"},{"location":"files-_FileDes/#parameters_2","text":"fd: I32 val path: FilePath val","title":"Parameters"},{"location":"files-_FileDes/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-_FileDes/#set_time","text":"[Source] Set the last access and modification times of the file to the given values. fun box set_time( fd: I32 val, path: FilePath val, atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val","title":"set_time"},{"location":"files-_FileDes/#parameters_3","text":"fd: I32 val path: FilePath val atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val)","title":"Parameters"},{"location":"files-_FileDes/#returns_4","text":"Bool val","title":"Returns"},{"location":"files-_FileDes/#set_rights","text":"[Source] Set the Capsicum rights on the file descriptor. fun box set_rights( fd: I32 val, path: FilePath val, writeable: Bool val = seq) : None val ?","title":"set_rights"},{"location":"files-_FileDes/#parameters_4","text":"fd: I32 val path: FilePath val writeable: Bool val = seq","title":"Parameters"},{"location":"files-_FileDes/#returns_5","text":"None val ?","title":"Returns"},{"location":"files-_FileDes/#eq","text":"[Source] fun box eq( that: _FileDes val) : Bool val","title":"eq"},{"location":"files-_FileDes/#parameters_5","text":"that: _FileDes val","title":"Parameters"},{"location":"files-_FileDes/#returns_6","text":"Bool val","title":"Returns"},{"location":"files-_FileDes/#ne","text":"[Source] fun box ne( that: _FileDes val) : Bool val","title":"ne"},{"location":"files-_FileDes/#parameters_6","text":"that: _FileDes val","title":"Parameters"},{"location":"files-_FileDes/#returns_7","text":"Bool val","title":"Returns"},{"location":"files-_FileHelper/","text":"_FileHelper [Source] primitive val _FileHelper Constructors create [Source] new val create() : _FileHelper val^ Returns _FileHelper val^ Public Functions make_files [Source] fun box make_files( h: TestHelper val, files: Array[String val] ref) : FilePath val ? Parameters h: TestHelper val files: Array [ String val] ref Returns FilePath val ? eq [Source] fun box eq( that: _FileHelper val) : Bool val Parameters that: _FileHelper val Returns Bool val ne [Source] fun box ne( that: _FileHelper val) : Bool val Parameters that: _FileHelper val Returns Bool val","title":"primitive _FileHelper"},{"location":"files-_FileHelper/#_filehelper","text":"[Source] primitive val _FileHelper","title":"_FileHelper"},{"location":"files-_FileHelper/#constructors","text":"","title":"Constructors"},{"location":"files-_FileHelper/#create","text":"[Source] new val create() : _FileHelper val^","title":"create"},{"location":"files-_FileHelper/#returns","text":"_FileHelper val^","title":"Returns"},{"location":"files-_FileHelper/#public-functions","text":"","title":"Public Functions"},{"location":"files-_FileHelper/#make_files","text":"[Source] fun box make_files( h: TestHelper val, files: Array[String val] ref) : FilePath val ?","title":"make_files"},{"location":"files-_FileHelper/#parameters","text":"h: TestHelper val files: Array [ String val] ref","title":"Parameters"},{"location":"files-_FileHelper/#returns_1","text":"FilePath val ?","title":"Returns"},{"location":"files-_FileHelper/#eq","text":"[Source] fun box eq( that: _FileHelper val) : Bool val","title":"eq"},{"location":"files-_FileHelper/#parameters_1","text":"that: _FileHelper val","title":"Parameters"},{"location":"files-_FileHelper/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_FileHelper/#ne","text":"[Source] fun box ne( that: _FileHelper val) : Bool val","title":"ne"},{"location":"files-_FileHelper/#parameters_2","text":"that: _FileHelper val","title":"Parameters"},{"location":"files-_FileHelper/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-_PathDot/","text":"_PathDot [Source] primitive val _PathDot Constructors create [Source] new val create() : _PathDot val^ Returns _PathDot val^ Public Functions eq [Source] fun box eq( that: _PathDot val) : Bool val Parameters that: _PathDot val Returns Bool val ne [Source] fun box ne( that: _PathDot val) : Bool val Parameters that: _PathDot val Returns Bool val","title":"primitive _PathDot"},{"location":"files-_PathDot/#_pathdot","text":"[Source] primitive val _PathDot","title":"_PathDot"},{"location":"files-_PathDot/#constructors","text":"","title":"Constructors"},{"location":"files-_PathDot/#create","text":"[Source] new val create() : _PathDot val^","title":"create"},{"location":"files-_PathDot/#returns","text":"_PathDot val^","title":"Returns"},{"location":"files-_PathDot/#public-functions","text":"","title":"Public Functions"},{"location":"files-_PathDot/#eq","text":"[Source] fun box eq( that: _PathDot val) : Bool val","title":"eq"},{"location":"files-_PathDot/#parameters","text":"that: _PathDot val","title":"Parameters"},{"location":"files-_PathDot/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-_PathDot/#ne","text":"[Source] fun box ne( that: _PathDot val) : Bool val","title":"ne"},{"location":"files-_PathDot/#parameters_1","text":"that: _PathDot val","title":"Parameters"},{"location":"files-_PathDot/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_PathDot2/","text":"_PathDot2 [Source] primitive val _PathDot2 Constructors create [Source] new val create() : _PathDot2 val^ Returns _PathDot2 val^ Public Functions eq [Source] fun box eq( that: _PathDot2 val) : Bool val Parameters that: _PathDot2 val Returns Bool val ne [Source] fun box ne( that: _PathDot2 val) : Bool val Parameters that: _PathDot2 val Returns Bool val","title":"primitive _PathDot2"},{"location":"files-_PathDot2/#_pathdot2","text":"[Source] primitive val _PathDot2","title":"_PathDot2"},{"location":"files-_PathDot2/#constructors","text":"","title":"Constructors"},{"location":"files-_PathDot2/#create","text":"[Source] new val create() : _PathDot2 val^","title":"create"},{"location":"files-_PathDot2/#returns","text":"_PathDot2 val^","title":"Returns"},{"location":"files-_PathDot2/#public-functions","text":"","title":"Public Functions"},{"location":"files-_PathDot2/#eq","text":"[Source] fun box eq( that: _PathDot2 val) : Bool val","title":"eq"},{"location":"files-_PathDot2/#parameters","text":"that: _PathDot2 val","title":"Parameters"},{"location":"files-_PathDot2/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-_PathDot2/#ne","text":"[Source] fun box ne( that: _PathDot2 val) : Bool val","title":"ne"},{"location":"files-_PathDot2/#parameters_1","text":"that: _PathDot2 val","title":"Parameters"},{"location":"files-_PathDot2/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_PathOther/","text":"_PathOther [Source] primitive val _PathOther Constructors create [Source] new val create() : _PathOther val^ Returns _PathOther val^ Public Functions eq [Source] fun box eq( that: _PathOther val) : Bool val Parameters that: _PathOther val Returns Bool val ne [Source] fun box ne( that: _PathOther val) : Bool val Parameters that: _PathOther val Returns Bool val","title":"primitive _PathOther"},{"location":"files-_PathOther/#_pathother","text":"[Source] primitive val _PathOther","title":"_PathOther"},{"location":"files-_PathOther/#constructors","text":"","title":"Constructors"},{"location":"files-_PathOther/#create","text":"[Source] new val create() : _PathOther val^","title":"create"},{"location":"files-_PathOther/#returns","text":"_PathOther val^","title":"Returns"},{"location":"files-_PathOther/#public-functions","text":"","title":"Public Functions"},{"location":"files-_PathOther/#eq","text":"[Source] fun box eq( that: _PathOther val) : Bool val","title":"eq"},{"location":"files-_PathOther/#parameters","text":"that: _PathOther val","title":"Parameters"},{"location":"files-_PathOther/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-_PathOther/#ne","text":"[Source] fun box ne( that: _PathOther val) : Bool val","title":"ne"},{"location":"files-_PathOther/#parameters_1","text":"that: _PathOther val","title":"Parameters"},{"location":"files-_PathOther/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_PathSep/","text":"_PathSep [Source] primitive val _PathSep Constructors create [Source] new val create() : _PathSep val^ Returns _PathSep val^ Public Functions eq [Source] fun box eq( that: _PathSep val) : Bool val Parameters that: _PathSep val Returns Bool val ne [Source] fun box ne( that: _PathSep val) : Bool val Parameters that: _PathSep val Returns Bool val","title":"primitive _PathSep"},{"location":"files-_PathSep/#_pathsep","text":"[Source] primitive val _PathSep","title":"_PathSep"},{"location":"files-_PathSep/#constructors","text":"","title":"Constructors"},{"location":"files-_PathSep/#create","text":"[Source] new val create() : _PathSep val^","title":"create"},{"location":"files-_PathSep/#returns","text":"_PathSep val^","title":"Returns"},{"location":"files-_PathSep/#public-functions","text":"","title":"Public Functions"},{"location":"files-_PathSep/#eq","text":"[Source] fun box eq( that: _PathSep val) : Bool val","title":"eq"},{"location":"files-_PathSep/#parameters","text":"that: _PathSep val","title":"Parameters"},{"location":"files-_PathSep/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-_PathSep/#ne","text":"[Source] fun box ne( that: _PathSep val) : Bool val","title":"ne"},{"location":"files-_PathSep/#parameters_1","text":"that: _PathSep val","title":"Parameters"},{"location":"files-_PathSep/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_PathState/","text":"_PathState [Source] type _PathState is (_PathSep val | _PathDot val | _PathDot2 val | _PathOther val) Type Alias For ( _PathSep val | _PathDot val | _PathDot2 val | _PathOther val)","title":"type _PathState"},{"location":"files-_PathState/#_pathstate","text":"[Source] type _PathState is (_PathSep val | _PathDot val | _PathDot2 val | _PathOther val)","title":"_PathState"},{"location":"files-_PathState/#type-alias-for","text":"( _PathSep val | _PathDot val | _PathDot2 val | _PathOther val)","title":"Type Alias For"},{"location":"format--index/","text":"Format package The Format package provides support for formatting strings. It can be used to set things like width, padding and alignment, as well as controlling the way numbers are displayed (decimal, octal, hexadecimal). Example program use format actor Main fun disp(desc: String, v: I32, fmt: FormatInt = FormatDefault): String = Format(desc where width = 10) + : + Format.int[I32](v where width = 10, align = AlignRight, fmt = fmt) new create(env: Env) = try (let x, let y) = (env.args(1)?.i32()?, env.args(2)?.i32()?) env.out.print(disp( x , x)) env.out.print(disp( y , y)) env.out.print(disp( hex(x) , x, FormatHex)) env.out.print(disp( hex(y) , y, FormatHex)) env.out.print(disp( x * y , x * y)) else let exe = try env.args(0)? else fmt_example end env.err.print( Usage: + exe + NUMBER1 NUMBER2 ) end Public Types trait PrefixSpec primitive PrefixDefault primitive PrefixSpace primitive PrefixSign type PrefixNumber trait FormatSpec primitive FormatDefault primitive FormatUTF32 primitive FormatBinary primitive FormatBinaryBare primitive FormatOctal primitive FormatOctalBare primitive FormatHex primitive FormatHexBare primitive FormatHexSmall primitive FormatHexSmallBare type FormatInt primitive FormatExp primitive FormatExpLarge primitive FormatFix primitive FormatFixLarge primitive FormatGeneral primitive FormatGeneralLarge type FormatFloat primitive Format primitive AlignLeft primitive AlignRight primitive AlignCenter type Align Private Types primitive _FormatInt primitive _FormatFloat","title":"Package"},{"location":"format--index/#format-package","text":"The Format package provides support for formatting strings. It can be used to set things like width, padding and alignment, as well as controlling the way numbers are displayed (decimal, octal, hexadecimal).","title":"Format package"},{"location":"format--index/#example-program","text":"use format actor Main fun disp(desc: String, v: I32, fmt: FormatInt = FormatDefault): String = Format(desc where width = 10) + : + Format.int[I32](v where width = 10, align = AlignRight, fmt = fmt) new create(env: Env) = try (let x, let y) = (env.args(1)?.i32()?, env.args(2)?.i32()?) env.out.print(disp( x , x)) env.out.print(disp( y , y)) env.out.print(disp( hex(x) , x, FormatHex)) env.out.print(disp( hex(y) , y, FormatHex)) env.out.print(disp( x * y , x * y)) else let exe = try env.args(0)? else fmt_example end env.err.print( Usage: + exe + NUMBER1 NUMBER2 ) end","title":"Example program"},{"location":"format--index/#public-types","text":"trait PrefixSpec primitive PrefixDefault primitive PrefixSpace primitive PrefixSign type PrefixNumber trait FormatSpec primitive FormatDefault primitive FormatUTF32 primitive FormatBinary primitive FormatBinaryBare primitive FormatOctal primitive FormatOctalBare primitive FormatHex primitive FormatHexBare primitive FormatHexSmall primitive FormatHexSmallBare type FormatInt primitive FormatExp primitive FormatExpLarge primitive FormatFix primitive FormatFixLarge primitive FormatGeneral primitive FormatGeneralLarge type FormatFloat primitive Format primitive AlignLeft primitive AlignRight primitive AlignCenter type Align","title":"Public Types"},{"location":"format--index/#private-types","text":"primitive _FormatInt primitive _FormatFloat","title":"Private Types"},{"location":"format-Align/","text":"Align [Source] type Align is (AlignLeft val | AlignRight val | AlignCenter val) Type Alias For ( AlignLeft val | AlignRight val | AlignCenter val)","title":"type Align"},{"location":"format-Align/#align","text":"[Source] type Align is (AlignLeft val | AlignRight val | AlignCenter val)","title":"Align"},{"location":"format-Align/#type-alias-for","text":"( AlignLeft val | AlignRight val | AlignCenter val)","title":"Type Alias For"},{"location":"format-AlignCenter/","text":"AlignCenter [Source] primitive val AlignCenter Constructors create [Source] new val create() : AlignCenter val^ Returns AlignCenter val^ Public Functions eq [Source] fun box eq( that: AlignCenter val) : Bool val Parameters that: AlignCenter val Returns Bool val ne [Source] fun box ne( that: AlignCenter val) : Bool val Parameters that: AlignCenter val Returns Bool val","title":"primitive AlignCenter"},{"location":"format-AlignCenter/#aligncenter","text":"[Source] primitive val AlignCenter","title":"AlignCenter"},{"location":"format-AlignCenter/#constructors","text":"","title":"Constructors"},{"location":"format-AlignCenter/#create","text":"[Source] new val create() : AlignCenter val^","title":"create"},{"location":"format-AlignCenter/#returns","text":"AlignCenter val^","title":"Returns"},{"location":"format-AlignCenter/#public-functions","text":"","title":"Public Functions"},{"location":"format-AlignCenter/#eq","text":"[Source] fun box eq( that: AlignCenter val) : Bool val","title":"eq"},{"location":"format-AlignCenter/#parameters","text":"that: AlignCenter val","title":"Parameters"},{"location":"format-AlignCenter/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-AlignCenter/#ne","text":"[Source] fun box ne( that: AlignCenter val) : Bool val","title":"ne"},{"location":"format-AlignCenter/#parameters_1","text":"that: AlignCenter val","title":"Parameters"},{"location":"format-AlignCenter/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-AlignLeft/","text":"AlignLeft [Source] primitive val AlignLeft Constructors create [Source] new val create() : AlignLeft val^ Returns AlignLeft val^ Public Functions eq [Source] fun box eq( that: AlignLeft val) : Bool val Parameters that: AlignLeft val Returns Bool val ne [Source] fun box ne( that: AlignLeft val) : Bool val Parameters that: AlignLeft val Returns Bool val","title":"primitive AlignLeft"},{"location":"format-AlignLeft/#alignleft","text":"[Source] primitive val AlignLeft","title":"AlignLeft"},{"location":"format-AlignLeft/#constructors","text":"","title":"Constructors"},{"location":"format-AlignLeft/#create","text":"[Source] new val create() : AlignLeft val^","title":"create"},{"location":"format-AlignLeft/#returns","text":"AlignLeft val^","title":"Returns"},{"location":"format-AlignLeft/#public-functions","text":"","title":"Public Functions"},{"location":"format-AlignLeft/#eq","text":"[Source] fun box eq( that: AlignLeft val) : Bool val","title":"eq"},{"location":"format-AlignLeft/#parameters","text":"that: AlignLeft val","title":"Parameters"},{"location":"format-AlignLeft/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-AlignLeft/#ne","text":"[Source] fun box ne( that: AlignLeft val) : Bool val","title":"ne"},{"location":"format-AlignLeft/#parameters_1","text":"that: AlignLeft val","title":"Parameters"},{"location":"format-AlignLeft/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-AlignRight/","text":"AlignRight [Source] primitive val AlignRight Constructors create [Source] new val create() : AlignRight val^ Returns AlignRight val^ Public Functions eq [Source] fun box eq( that: AlignRight val) : Bool val Parameters that: AlignRight val Returns Bool val ne [Source] fun box ne( that: AlignRight val) : Bool val Parameters that: AlignRight val Returns Bool val","title":"primitive AlignRight"},{"location":"format-AlignRight/#alignright","text":"[Source] primitive val AlignRight","title":"AlignRight"},{"location":"format-AlignRight/#constructors","text":"","title":"Constructors"},{"location":"format-AlignRight/#create","text":"[Source] new val create() : AlignRight val^","title":"create"},{"location":"format-AlignRight/#returns","text":"AlignRight val^","title":"Returns"},{"location":"format-AlignRight/#public-functions","text":"","title":"Public Functions"},{"location":"format-AlignRight/#eq","text":"[Source] fun box eq( that: AlignRight val) : Bool val","title":"eq"},{"location":"format-AlignRight/#parameters","text":"that: AlignRight val","title":"Parameters"},{"location":"format-AlignRight/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-AlignRight/#ne","text":"[Source] fun box ne( that: AlignRight val) : Bool val","title":"ne"},{"location":"format-AlignRight/#parameters_1","text":"that: AlignRight val","title":"Parameters"},{"location":"format-AlignRight/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-Format/","text":"Format [Source] Provides functions for generating formatted strings. fmt. Format to use. prefix. Prefix to use. prec. Precision to use. The exact meaning of this depends on the type, but is generally the number of characters used for all, or part, of the string. A value of -1 indicates that the default for the type should be used. width. The minimum number of characters that will be in the produced string. If necessary the string will be padded with the fill character to make it long enough. align. Specify whether fill characters should be added at the beginning or end of the generated string, or both. fill: The character to pad a string with if is is shorter than width. primitive val Format Constructors create [Source] new val create() : Format val^ Returns Format val^ Public Functions apply [Source] fun box apply( str: String val, fmt: FormatDefault val = seq, prefix: PrefixDefault val = seq, prec: USize val = seq, width: USize val = seq, align: (AlignLeft val | AlignRight val | AlignCenter val) = seq, fill: U32 val = seq) : String iso^ Parameters str: String val fmt: FormatDefault val = seq prefix: PrefixDefault val = seq prec: USize val = seq width: USize val = seq align: ( AlignLeft val | AlignRight val | AlignCenter val) = seq fill: U32 val = seq Returns String iso^ int[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer [A])] [Source] fun box int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[A])]( x: A, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) = seq, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq, prec: USize val = seq, width: USize val = seq, align: (AlignLeft val | AlignRight val | AlignCenter val) = seq, fill: U32 val = seq) : String iso^ Parameters x: A fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) = seq prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) = seq prec: USize val = seq width: USize val = seq align: ( AlignLeft val | AlignRight val | AlignCenter val) = seq fill: U32 val = seq Returns String iso^ float[A: (( F32 val | F64 val) FloatingPoint [A])] [Source] fun box float[A: ((F32 val | F64 val) FloatingPoint[A])]( x: A, fmt: (FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val) = seq, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq, prec: USize val = seq, width: USize val = seq, align: (AlignLeft val | AlignRight val | AlignCenter val) = seq, fill: U32 val = seq) : String iso^ Parameters x: A fmt: ( FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val) = seq prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) = seq prec: USize val = seq width: USize val = seq align: ( AlignLeft val | AlignRight val | AlignCenter val) = seq fill: U32 val = seq Returns String iso^ eq [Source] fun box eq( that: Format val) : Bool val Parameters that: Format val Returns Bool val ne [Source] fun box ne( that: Format val) : Bool val Parameters that: Format val Returns Bool val","title":"primitive Format"},{"location":"format-Format/#format","text":"[Source] Provides functions for generating formatted strings. fmt. Format to use. prefix. Prefix to use. prec. Precision to use. The exact meaning of this depends on the type, but is generally the number of characters used for all, or part, of the string. A value of -1 indicates that the default for the type should be used. width. The minimum number of characters that will be in the produced string. If necessary the string will be padded with the fill character to make it long enough. align. Specify whether fill characters should be added at the beginning or end of the generated string, or both. fill: The character to pad a string with if is is shorter than width. primitive val Format","title":"Format"},{"location":"format-Format/#constructors","text":"","title":"Constructors"},{"location":"format-Format/#create","text":"[Source] new val create() : Format val^","title":"create"},{"location":"format-Format/#returns","text":"Format val^","title":"Returns"},{"location":"format-Format/#public-functions","text":"","title":"Public Functions"},{"location":"format-Format/#apply","text":"[Source] fun box apply( str: String val, fmt: FormatDefault val = seq, prefix: PrefixDefault val = seq, prec: USize val = seq, width: USize val = seq, align: (AlignLeft val | AlignRight val | AlignCenter val) = seq, fill: U32 val = seq) : String iso^","title":"apply"},{"location":"format-Format/#parameters","text":"str: String val fmt: FormatDefault val = seq prefix: PrefixDefault val = seq prec: USize val = seq width: USize val = seq align: ( AlignLeft val | AlignRight val | AlignCenter val) = seq fill: U32 val = seq","title":"Parameters"},{"location":"format-Format/#returns_1","text":"String iso^","title":"Returns"},{"location":"format-Format/#int91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a9393","text":"[Source] fun box int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[A])]( x: A, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) = seq, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq, prec: USize val = seq, width: USize val = seq, align: (AlignLeft val | AlignRight val | AlignCenter val) = seq, fill: U32 val = seq) : String iso^","title":"int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A])]"},{"location":"format-Format/#parameters_1","text":"x: A fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) = seq prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) = seq prec: USize val = seq width: USize val = seq align: ( AlignLeft val | AlignRight val | AlignCenter val) = seq fill: U32 val = seq","title":"Parameters"},{"location":"format-Format/#returns_2","text":"String iso^","title":"Returns"},{"location":"format-Format/#float91a-f32-val-f64-val-floatingpoint91a9393","text":"[Source] fun box float[A: ((F32 val | F64 val) FloatingPoint[A])]( x: A, fmt: (FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val) = seq, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq, prec: USize val = seq, width: USize val = seq, align: (AlignLeft val | AlignRight val | AlignCenter val) = seq, fill: U32 val = seq) : String iso^","title":"float[A: ((F32 val | F64 val) &amp; FloatingPoint[A])]"},{"location":"format-Format/#parameters_2","text":"x: A fmt: ( FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val) = seq prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) = seq prec: USize val = seq width: USize val = seq align: ( AlignLeft val | AlignRight val | AlignCenter val) = seq fill: U32 val = seq","title":"Parameters"},{"location":"format-Format/#returns_3","text":"String iso^","title":"Returns"},{"location":"format-Format/#eq","text":"[Source] fun box eq( that: Format val) : Bool val","title":"eq"},{"location":"format-Format/#parameters_3","text":"that: Format val","title":"Parameters"},{"location":"format-Format/#returns_4","text":"Bool val","title":"Returns"},{"location":"format-Format/#ne","text":"[Source] fun box ne( that: Format val) : Bool val","title":"ne"},{"location":"format-Format/#parameters_4","text":"that: Format val","title":"Parameters"},{"location":"format-Format/#returns_5","text":"Bool val","title":"Returns"},{"location":"format-FormatBinary/","text":"FormatBinary [Source] primitive val FormatBinary is FormatSpec val Implements FormatSpec val Constructors create [Source] new val create() : FormatBinary val^ Returns FormatBinary val^ Public Functions eq [Source] fun box eq( that: FormatBinary val) : Bool val Parameters that: FormatBinary val Returns Bool val ne [Source] fun box ne( that: FormatBinary val) : Bool val Parameters that: FormatBinary val Returns Bool val","title":"primitive FormatBinary"},{"location":"format-FormatBinary/#formatbinary","text":"[Source] primitive val FormatBinary is FormatSpec val","title":"FormatBinary"},{"location":"format-FormatBinary/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatBinary/#constructors","text":"","title":"Constructors"},{"location":"format-FormatBinary/#create","text":"[Source] new val create() : FormatBinary val^","title":"create"},{"location":"format-FormatBinary/#returns","text":"FormatBinary val^","title":"Returns"},{"location":"format-FormatBinary/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatBinary/#eq","text":"[Source] fun box eq( that: FormatBinary val) : Bool val","title":"eq"},{"location":"format-FormatBinary/#parameters","text":"that: FormatBinary val","title":"Parameters"},{"location":"format-FormatBinary/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatBinary/#ne","text":"[Source] fun box ne( that: FormatBinary val) : Bool val","title":"ne"},{"location":"format-FormatBinary/#parameters_1","text":"that: FormatBinary val","title":"Parameters"},{"location":"format-FormatBinary/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatBinaryBare/","text":"FormatBinaryBare [Source] primitive val FormatBinaryBare is FormatSpec val Implements FormatSpec val Constructors create [Source] new val create() : FormatBinaryBare val^ Returns FormatBinaryBare val^ Public Functions eq [Source] fun box eq( that: FormatBinaryBare val) : Bool val Parameters that: FormatBinaryBare val Returns Bool val ne [Source] fun box ne( that: FormatBinaryBare val) : Bool val Parameters that: FormatBinaryBare val Returns Bool val","title":"primitive FormatBinaryBare"},{"location":"format-FormatBinaryBare/#formatbinarybare","text":"[Source] primitive val FormatBinaryBare is FormatSpec val","title":"FormatBinaryBare"},{"location":"format-FormatBinaryBare/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatBinaryBare/#constructors","text":"","title":"Constructors"},{"location":"format-FormatBinaryBare/#create","text":"[Source] new val create() : FormatBinaryBare val^","title":"create"},{"location":"format-FormatBinaryBare/#returns","text":"FormatBinaryBare val^","title":"Returns"},{"location":"format-FormatBinaryBare/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatBinaryBare/#eq","text":"[Source] fun box eq( that: FormatBinaryBare val) : Bool val","title":"eq"},{"location":"format-FormatBinaryBare/#parameters","text":"that: FormatBinaryBare val","title":"Parameters"},{"location":"format-FormatBinaryBare/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatBinaryBare/#ne","text":"[Source] fun box ne( that: FormatBinaryBare val) : Bool val","title":"ne"},{"location":"format-FormatBinaryBare/#parameters_1","text":"that: FormatBinaryBare val","title":"Parameters"},{"location":"format-FormatBinaryBare/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatDefault/","text":"FormatDefault [Source] primitive val FormatDefault is FormatSpec val Implements FormatSpec val Constructors create [Source] new val create() : FormatDefault val^ Returns FormatDefault val^ Public Functions eq [Source] fun box eq( that: FormatDefault val) : Bool val Parameters that: FormatDefault val Returns Bool val ne [Source] fun box ne( that: FormatDefault val) : Bool val Parameters that: FormatDefault val Returns Bool val","title":"primitive FormatDefault"},{"location":"format-FormatDefault/#formatdefault","text":"[Source] primitive val FormatDefault is FormatSpec val","title":"FormatDefault"},{"location":"format-FormatDefault/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatDefault/#constructors","text":"","title":"Constructors"},{"location":"format-FormatDefault/#create","text":"[Source] new val create() : FormatDefault val^","title":"create"},{"location":"format-FormatDefault/#returns","text":"FormatDefault val^","title":"Returns"},{"location":"format-FormatDefault/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatDefault/#eq","text":"[Source] fun box eq( that: FormatDefault val) : Bool val","title":"eq"},{"location":"format-FormatDefault/#parameters","text":"that: FormatDefault val","title":"Parameters"},{"location":"format-FormatDefault/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatDefault/#ne","text":"[Source] fun box ne( that: FormatDefault val) : Bool val","title":"ne"},{"location":"format-FormatDefault/#parameters_1","text":"that: FormatDefault val","title":"Parameters"},{"location":"format-FormatDefault/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatExp/","text":"FormatExp [Source] primitive val FormatExp is FormatSpec val Implements FormatSpec val Constructors create [Source] new val create() : FormatExp val^ Returns FormatExp val^ Public Functions eq [Source] fun box eq( that: FormatExp val) : Bool val Parameters that: FormatExp val Returns Bool val ne [Source] fun box ne( that: FormatExp val) : Bool val Parameters that: FormatExp val Returns Bool val","title":"primitive FormatExp"},{"location":"format-FormatExp/#formatexp","text":"[Source] primitive val FormatExp is FormatSpec val","title":"FormatExp"},{"location":"format-FormatExp/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatExp/#constructors","text":"","title":"Constructors"},{"location":"format-FormatExp/#create","text":"[Source] new val create() : FormatExp val^","title":"create"},{"location":"format-FormatExp/#returns","text":"FormatExp val^","title":"Returns"},{"location":"format-FormatExp/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatExp/#eq","text":"[Source] fun box eq( that: FormatExp val) : Bool val","title":"eq"},{"location":"format-FormatExp/#parameters","text":"that: FormatExp val","title":"Parameters"},{"location":"format-FormatExp/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatExp/#ne","text":"[Source] fun box ne( that: FormatExp val) : Bool val","title":"ne"},{"location":"format-FormatExp/#parameters_1","text":"that: FormatExp val","title":"Parameters"},{"location":"format-FormatExp/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatExpLarge/","text":"FormatExpLarge [Source] primitive val FormatExpLarge is FormatSpec val Implements FormatSpec val Constructors create [Source] new val create() : FormatExpLarge val^ Returns FormatExpLarge val^ Public Functions eq [Source] fun box eq( that: FormatExpLarge val) : Bool val Parameters that: FormatExpLarge val Returns Bool val ne [Source] fun box ne( that: FormatExpLarge val) : Bool val Parameters that: FormatExpLarge val Returns Bool val","title":"primitive FormatExpLarge"},{"location":"format-FormatExpLarge/#formatexplarge","text":"[Source] primitive val FormatExpLarge is FormatSpec val","title":"FormatExpLarge"},{"location":"format-FormatExpLarge/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatExpLarge/#constructors","text":"","title":"Constructors"},{"location":"format-FormatExpLarge/#create","text":"[Source] new val create() : FormatExpLarge val^","title":"create"},{"location":"format-FormatExpLarge/#returns","text":"FormatExpLarge val^","title":"Returns"},{"location":"format-FormatExpLarge/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatExpLarge/#eq","text":"[Source] fun box eq( that: FormatExpLarge val) : Bool val","title":"eq"},{"location":"format-FormatExpLarge/#parameters","text":"that: FormatExpLarge val","title":"Parameters"},{"location":"format-FormatExpLarge/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatExpLarge/#ne","text":"[Source] fun box ne( that: FormatExpLarge val) : Bool val","title":"ne"},{"location":"format-FormatExpLarge/#parameters_1","text":"that: FormatExpLarge val","title":"Parameters"},{"location":"format-FormatExpLarge/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatFix/","text":"FormatFix [Source] primitive val FormatFix is FormatSpec val Implements FormatSpec val Constructors create [Source] new val create() : FormatFix val^ Returns FormatFix val^ Public Functions eq [Source] fun box eq( that: FormatFix val) : Bool val Parameters that: FormatFix val Returns Bool val ne [Source] fun box ne( that: FormatFix val) : Bool val Parameters that: FormatFix val Returns Bool val","title":"primitive FormatFix"},{"location":"format-FormatFix/#formatfix","text":"[Source] primitive val FormatFix is FormatSpec val","title":"FormatFix"},{"location":"format-FormatFix/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatFix/#constructors","text":"","title":"Constructors"},{"location":"format-FormatFix/#create","text":"[Source] new val create() : FormatFix val^","title":"create"},{"location":"format-FormatFix/#returns","text":"FormatFix val^","title":"Returns"},{"location":"format-FormatFix/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatFix/#eq","text":"[Source] fun box eq( that: FormatFix val) : Bool val","title":"eq"},{"location":"format-FormatFix/#parameters","text":"that: FormatFix val","title":"Parameters"},{"location":"format-FormatFix/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatFix/#ne","text":"[Source] fun box ne( that: FormatFix val) : Bool val","title":"ne"},{"location":"format-FormatFix/#parameters_1","text":"that: FormatFix val","title":"Parameters"},{"location":"format-FormatFix/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatFixLarge/","text":"FormatFixLarge [Source] primitive val FormatFixLarge is FormatSpec val Implements FormatSpec val Constructors create [Source] new val create() : FormatFixLarge val^ Returns FormatFixLarge val^ Public Functions eq [Source] fun box eq( that: FormatFixLarge val) : Bool val Parameters that: FormatFixLarge val Returns Bool val ne [Source] fun box ne( that: FormatFixLarge val) : Bool val Parameters that: FormatFixLarge val Returns Bool val","title":"primitive FormatFixLarge"},{"location":"format-FormatFixLarge/#formatfixlarge","text":"[Source] primitive val FormatFixLarge is FormatSpec val","title":"FormatFixLarge"},{"location":"format-FormatFixLarge/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatFixLarge/#constructors","text":"","title":"Constructors"},{"location":"format-FormatFixLarge/#create","text":"[Source] new val create() : FormatFixLarge val^","title":"create"},{"location":"format-FormatFixLarge/#returns","text":"FormatFixLarge val^","title":"Returns"},{"location":"format-FormatFixLarge/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatFixLarge/#eq","text":"[Source] fun box eq( that: FormatFixLarge val) : Bool val","title":"eq"},{"location":"format-FormatFixLarge/#parameters","text":"that: FormatFixLarge val","title":"Parameters"},{"location":"format-FormatFixLarge/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatFixLarge/#ne","text":"[Source] fun box ne( that: FormatFixLarge val) : Bool val","title":"ne"},{"location":"format-FormatFixLarge/#parameters_1","text":"that: FormatFixLarge val","title":"Parameters"},{"location":"format-FormatFixLarge/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatFloat/","text":"FormatFloat [Source] type FormatFloat is (FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val) Type Alias For ( FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val)","title":"type FormatFloat"},{"location":"format-FormatFloat/#formatfloat","text":"[Source] type FormatFloat is (FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val)","title":"FormatFloat"},{"location":"format-FormatFloat/#type-alias-for","text":"( FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val)","title":"Type Alias For"},{"location":"format-FormatGeneral/","text":"FormatGeneral [Source] primitive val FormatGeneral is FormatSpec val Implements FormatSpec val Constructors create [Source] new val create() : FormatGeneral val^ Returns FormatGeneral val^ Public Functions eq [Source] fun box eq( that: FormatGeneral val) : Bool val Parameters that: FormatGeneral val Returns Bool val ne [Source] fun box ne( that: FormatGeneral val) : Bool val Parameters that: FormatGeneral val Returns Bool val","title":"primitive FormatGeneral"},{"location":"format-FormatGeneral/#formatgeneral","text":"[Source] primitive val FormatGeneral is FormatSpec val","title":"FormatGeneral"},{"location":"format-FormatGeneral/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatGeneral/#constructors","text":"","title":"Constructors"},{"location":"format-FormatGeneral/#create","text":"[Source] new val create() : FormatGeneral val^","title":"create"},{"location":"format-FormatGeneral/#returns","text":"FormatGeneral val^","title":"Returns"},{"location":"format-FormatGeneral/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatGeneral/#eq","text":"[Source] fun box eq( that: FormatGeneral val) : Bool val","title":"eq"},{"location":"format-FormatGeneral/#parameters","text":"that: FormatGeneral val","title":"Parameters"},{"location":"format-FormatGeneral/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatGeneral/#ne","text":"[Source] fun box ne( that: FormatGeneral val) : Bool val","title":"ne"},{"location":"format-FormatGeneral/#parameters_1","text":"that: FormatGeneral val","title":"Parameters"},{"location":"format-FormatGeneral/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatGeneralLarge/","text":"FormatGeneralLarge [Source] primitive val FormatGeneralLarge is FormatSpec val Implements FormatSpec val Constructors create [Source] new val create() : FormatGeneralLarge val^ Returns FormatGeneralLarge val^ Public Functions eq [Source] fun box eq( that: FormatGeneralLarge val) : Bool val Parameters that: FormatGeneralLarge val Returns Bool val ne [Source] fun box ne( that: FormatGeneralLarge val) : Bool val Parameters that: FormatGeneralLarge val Returns Bool val","title":"primitive FormatGeneralLarge"},{"location":"format-FormatGeneralLarge/#formatgenerallarge","text":"[Source] primitive val FormatGeneralLarge is FormatSpec val","title":"FormatGeneralLarge"},{"location":"format-FormatGeneralLarge/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatGeneralLarge/#constructors","text":"","title":"Constructors"},{"location":"format-FormatGeneralLarge/#create","text":"[Source] new val create() : FormatGeneralLarge val^","title":"create"},{"location":"format-FormatGeneralLarge/#returns","text":"FormatGeneralLarge val^","title":"Returns"},{"location":"format-FormatGeneralLarge/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatGeneralLarge/#eq","text":"[Source] fun box eq( that: FormatGeneralLarge val) : Bool val","title":"eq"},{"location":"format-FormatGeneralLarge/#parameters","text":"that: FormatGeneralLarge val","title":"Parameters"},{"location":"format-FormatGeneralLarge/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatGeneralLarge/#ne","text":"[Source] fun box ne( that: FormatGeneralLarge val) : Bool val","title":"ne"},{"location":"format-FormatGeneralLarge/#parameters_1","text":"that: FormatGeneralLarge val","title":"Parameters"},{"location":"format-FormatGeneralLarge/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatHex/","text":"FormatHex [Source] primitive val FormatHex is FormatSpec val Implements FormatSpec val Constructors create [Source] new val create() : FormatHex val^ Returns FormatHex val^ Public Functions eq [Source] fun box eq( that: FormatHex val) : Bool val Parameters that: FormatHex val Returns Bool val ne [Source] fun box ne( that: FormatHex val) : Bool val Parameters that: FormatHex val Returns Bool val","title":"primitive FormatHex"},{"location":"format-FormatHex/#formathex","text":"[Source] primitive val FormatHex is FormatSpec val","title":"FormatHex"},{"location":"format-FormatHex/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatHex/#constructors","text":"","title":"Constructors"},{"location":"format-FormatHex/#create","text":"[Source] new val create() : FormatHex val^","title":"create"},{"location":"format-FormatHex/#returns","text":"FormatHex val^","title":"Returns"},{"location":"format-FormatHex/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatHex/#eq","text":"[Source] fun box eq( that: FormatHex val) : Bool val","title":"eq"},{"location":"format-FormatHex/#parameters","text":"that: FormatHex val","title":"Parameters"},{"location":"format-FormatHex/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatHex/#ne","text":"[Source] fun box ne( that: FormatHex val) : Bool val","title":"ne"},{"location":"format-FormatHex/#parameters_1","text":"that: FormatHex val","title":"Parameters"},{"location":"format-FormatHex/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatHexBare/","text":"FormatHexBare [Source] primitive val FormatHexBare is FormatSpec val Implements FormatSpec val Constructors create [Source] new val create() : FormatHexBare val^ Returns FormatHexBare val^ Public Functions eq [Source] fun box eq( that: FormatHexBare val) : Bool val Parameters that: FormatHexBare val Returns Bool val ne [Source] fun box ne( that: FormatHexBare val) : Bool val Parameters that: FormatHexBare val Returns Bool val","title":"primitive FormatHexBare"},{"location":"format-FormatHexBare/#formathexbare","text":"[Source] primitive val FormatHexBare is FormatSpec val","title":"FormatHexBare"},{"location":"format-FormatHexBare/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatHexBare/#constructors","text":"","title":"Constructors"},{"location":"format-FormatHexBare/#create","text":"[Source] new val create() : FormatHexBare val^","title":"create"},{"location":"format-FormatHexBare/#returns","text":"FormatHexBare val^","title":"Returns"},{"location":"format-FormatHexBare/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatHexBare/#eq","text":"[Source] fun box eq( that: FormatHexBare val) : Bool val","title":"eq"},{"location":"format-FormatHexBare/#parameters","text":"that: FormatHexBare val","title":"Parameters"},{"location":"format-FormatHexBare/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatHexBare/#ne","text":"[Source] fun box ne( that: FormatHexBare val) : Bool val","title":"ne"},{"location":"format-FormatHexBare/#parameters_1","text":"that: FormatHexBare val","title":"Parameters"},{"location":"format-FormatHexBare/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatHexSmall/","text":"FormatHexSmall [Source] primitive val FormatHexSmall is FormatSpec val Implements FormatSpec val Constructors create [Source] new val create() : FormatHexSmall val^ Returns FormatHexSmall val^ Public Functions eq [Source] fun box eq( that: FormatHexSmall val) : Bool val Parameters that: FormatHexSmall val Returns Bool val ne [Source] fun box ne( that: FormatHexSmall val) : Bool val Parameters that: FormatHexSmall val Returns Bool val","title":"primitive FormatHexSmall"},{"location":"format-FormatHexSmall/#formathexsmall","text":"[Source] primitive val FormatHexSmall is FormatSpec val","title":"FormatHexSmall"},{"location":"format-FormatHexSmall/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatHexSmall/#constructors","text":"","title":"Constructors"},{"location":"format-FormatHexSmall/#create","text":"[Source] new val create() : FormatHexSmall val^","title":"create"},{"location":"format-FormatHexSmall/#returns","text":"FormatHexSmall val^","title":"Returns"},{"location":"format-FormatHexSmall/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatHexSmall/#eq","text":"[Source] fun box eq( that: FormatHexSmall val) : Bool val","title":"eq"},{"location":"format-FormatHexSmall/#parameters","text":"that: FormatHexSmall val","title":"Parameters"},{"location":"format-FormatHexSmall/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatHexSmall/#ne","text":"[Source] fun box ne( that: FormatHexSmall val) : Bool val","title":"ne"},{"location":"format-FormatHexSmall/#parameters_1","text":"that: FormatHexSmall val","title":"Parameters"},{"location":"format-FormatHexSmall/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatHexSmallBare/","text":"FormatHexSmallBare [Source] primitive val FormatHexSmallBare is FormatSpec val Implements FormatSpec val Constructors create [Source] new val create() : FormatHexSmallBare val^ Returns FormatHexSmallBare val^ Public Functions eq [Source] fun box eq( that: FormatHexSmallBare val) : Bool val Parameters that: FormatHexSmallBare val Returns Bool val ne [Source] fun box ne( that: FormatHexSmallBare val) : Bool val Parameters that: FormatHexSmallBare val Returns Bool val","title":"primitive FormatHexSmallBare"},{"location":"format-FormatHexSmallBare/#formathexsmallbare","text":"[Source] primitive val FormatHexSmallBare is FormatSpec val","title":"FormatHexSmallBare"},{"location":"format-FormatHexSmallBare/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatHexSmallBare/#constructors","text":"","title":"Constructors"},{"location":"format-FormatHexSmallBare/#create","text":"[Source] new val create() : FormatHexSmallBare val^","title":"create"},{"location":"format-FormatHexSmallBare/#returns","text":"FormatHexSmallBare val^","title":"Returns"},{"location":"format-FormatHexSmallBare/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatHexSmallBare/#eq","text":"[Source] fun box eq( that: FormatHexSmallBare val) : Bool val","title":"eq"},{"location":"format-FormatHexSmallBare/#parameters","text":"that: FormatHexSmallBare val","title":"Parameters"},{"location":"format-FormatHexSmallBare/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatHexSmallBare/#ne","text":"[Source] fun box ne( that: FormatHexSmallBare val) : Bool val","title":"ne"},{"location":"format-FormatHexSmallBare/#parameters_1","text":"that: FormatHexSmallBare val","title":"Parameters"},{"location":"format-FormatHexSmallBare/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatInt/","text":"FormatInt [Source] type FormatInt is (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) Type Alias For ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)","title":"type FormatInt"},{"location":"format-FormatInt/#formatint","text":"[Source] type FormatInt is (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)","title":"FormatInt"},{"location":"format-FormatInt/#type-alias-for","text":"( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)","title":"Type Alias For"},{"location":"format-FormatOctal/","text":"FormatOctal [Source] primitive val FormatOctal is FormatSpec val Implements FormatSpec val Constructors create [Source] new val create() : FormatOctal val^ Returns FormatOctal val^ Public Functions eq [Source] fun box eq( that: FormatOctal val) : Bool val Parameters that: FormatOctal val Returns Bool val ne [Source] fun box ne( that: FormatOctal val) : Bool val Parameters that: FormatOctal val Returns Bool val","title":"primitive FormatOctal"},{"location":"format-FormatOctal/#formatoctal","text":"[Source] primitive val FormatOctal is FormatSpec val","title":"FormatOctal"},{"location":"format-FormatOctal/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatOctal/#constructors","text":"","title":"Constructors"},{"location":"format-FormatOctal/#create","text":"[Source] new val create() : FormatOctal val^","title":"create"},{"location":"format-FormatOctal/#returns","text":"FormatOctal val^","title":"Returns"},{"location":"format-FormatOctal/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatOctal/#eq","text":"[Source] fun box eq( that: FormatOctal val) : Bool val","title":"eq"},{"location":"format-FormatOctal/#parameters","text":"that: FormatOctal val","title":"Parameters"},{"location":"format-FormatOctal/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatOctal/#ne","text":"[Source] fun box ne( that: FormatOctal val) : Bool val","title":"ne"},{"location":"format-FormatOctal/#parameters_1","text":"that: FormatOctal val","title":"Parameters"},{"location":"format-FormatOctal/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatOctalBare/","text":"FormatOctalBare [Source] primitive val FormatOctalBare is FormatSpec val Implements FormatSpec val Constructors create [Source] new val create() : FormatOctalBare val^ Returns FormatOctalBare val^ Public Functions eq [Source] fun box eq( that: FormatOctalBare val) : Bool val Parameters that: FormatOctalBare val Returns Bool val ne [Source] fun box ne( that: FormatOctalBare val) : Bool val Parameters that: FormatOctalBare val Returns Bool val","title":"primitive FormatOctalBare"},{"location":"format-FormatOctalBare/#formatoctalbare","text":"[Source] primitive val FormatOctalBare is FormatSpec val","title":"FormatOctalBare"},{"location":"format-FormatOctalBare/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatOctalBare/#constructors","text":"","title":"Constructors"},{"location":"format-FormatOctalBare/#create","text":"[Source] new val create() : FormatOctalBare val^","title":"create"},{"location":"format-FormatOctalBare/#returns","text":"FormatOctalBare val^","title":"Returns"},{"location":"format-FormatOctalBare/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatOctalBare/#eq","text":"[Source] fun box eq( that: FormatOctalBare val) : Bool val","title":"eq"},{"location":"format-FormatOctalBare/#parameters","text":"that: FormatOctalBare val","title":"Parameters"},{"location":"format-FormatOctalBare/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatOctalBare/#ne","text":"[Source] fun box ne( that: FormatOctalBare val) : Bool val","title":"ne"},{"location":"format-FormatOctalBare/#parameters_1","text":"that: FormatOctalBare val","title":"Parameters"},{"location":"format-FormatOctalBare/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatSpec/","text":"FormatSpec [Source] trait val FormatSpec","title":"trait FormatSpec"},{"location":"format-FormatSpec/#formatspec","text":"[Source] trait val FormatSpec","title":"FormatSpec"},{"location":"format-FormatUTF32/","text":"FormatUTF32 [Source] primitive val FormatUTF32 is FormatSpec val Implements FormatSpec val Constructors create [Source] new val create() : FormatUTF32 val^ Returns FormatUTF32 val^ Public Functions eq [Source] fun box eq( that: FormatUTF32 val) : Bool val Parameters that: FormatUTF32 val Returns Bool val ne [Source] fun box ne( that: FormatUTF32 val) : Bool val Parameters that: FormatUTF32 val Returns Bool val","title":"primitive FormatUTF32"},{"location":"format-FormatUTF32/#formatutf32","text":"[Source] primitive val FormatUTF32 is FormatSpec val","title":"FormatUTF32"},{"location":"format-FormatUTF32/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatUTF32/#constructors","text":"","title":"Constructors"},{"location":"format-FormatUTF32/#create","text":"[Source] new val create() : FormatUTF32 val^","title":"create"},{"location":"format-FormatUTF32/#returns","text":"FormatUTF32 val^","title":"Returns"},{"location":"format-FormatUTF32/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatUTF32/#eq","text":"[Source] fun box eq( that: FormatUTF32 val) : Bool val","title":"eq"},{"location":"format-FormatUTF32/#parameters","text":"that: FormatUTF32 val","title":"Parameters"},{"location":"format-FormatUTF32/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatUTF32/#ne","text":"[Source] fun box ne( that: FormatUTF32 val) : Bool val","title":"ne"},{"location":"format-FormatUTF32/#parameters_1","text":"that: FormatUTF32 val","title":"Parameters"},{"location":"format-FormatUTF32/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-PrefixDefault/","text":"PrefixDefault [Source] primitive val PrefixDefault is PrefixSpec val Implements PrefixSpec val Constructors create [Source] new val create() : PrefixDefault val^ Returns PrefixDefault val^ Public Functions eq [Source] fun box eq( that: PrefixDefault val) : Bool val Parameters that: PrefixDefault val Returns Bool val ne [Source] fun box ne( that: PrefixDefault val) : Bool val Parameters that: PrefixDefault val Returns Bool val","title":"primitive PrefixDefault"},{"location":"format-PrefixDefault/#prefixdefault","text":"[Source] primitive val PrefixDefault is PrefixSpec val","title":"PrefixDefault"},{"location":"format-PrefixDefault/#implements","text":"PrefixSpec val","title":"Implements"},{"location":"format-PrefixDefault/#constructors","text":"","title":"Constructors"},{"location":"format-PrefixDefault/#create","text":"[Source] new val create() : PrefixDefault val^","title":"create"},{"location":"format-PrefixDefault/#returns","text":"PrefixDefault val^","title":"Returns"},{"location":"format-PrefixDefault/#public-functions","text":"","title":"Public Functions"},{"location":"format-PrefixDefault/#eq","text":"[Source] fun box eq( that: PrefixDefault val) : Bool val","title":"eq"},{"location":"format-PrefixDefault/#parameters","text":"that: PrefixDefault val","title":"Parameters"},{"location":"format-PrefixDefault/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-PrefixDefault/#ne","text":"[Source] fun box ne( that: PrefixDefault val) : Bool val","title":"ne"},{"location":"format-PrefixDefault/#parameters_1","text":"that: PrefixDefault val","title":"Parameters"},{"location":"format-PrefixDefault/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-PrefixNumber/","text":"PrefixNumber [Source] type PrefixNumber is (PrefixDefault val | PrefixSpace val | PrefixSign val) Type Alias For ( PrefixDefault val | PrefixSpace val | PrefixSign val)","title":"type PrefixNumber"},{"location":"format-PrefixNumber/#prefixnumber","text":"[Source] type PrefixNumber is (PrefixDefault val | PrefixSpace val | PrefixSign val)","title":"PrefixNumber"},{"location":"format-PrefixNumber/#type-alias-for","text":"( PrefixDefault val | PrefixSpace val | PrefixSign val)","title":"Type Alias For"},{"location":"format-PrefixSign/","text":"PrefixSign [Source] primitive val PrefixSign is PrefixSpec val Implements PrefixSpec val Constructors create [Source] new val create() : PrefixSign val^ Returns PrefixSign val^ Public Functions eq [Source] fun box eq( that: PrefixSign val) : Bool val Parameters that: PrefixSign val Returns Bool val ne [Source] fun box ne( that: PrefixSign val) : Bool val Parameters that: PrefixSign val Returns Bool val","title":"primitive PrefixSign"},{"location":"format-PrefixSign/#prefixsign","text":"[Source] primitive val PrefixSign is PrefixSpec val","title":"PrefixSign"},{"location":"format-PrefixSign/#implements","text":"PrefixSpec val","title":"Implements"},{"location":"format-PrefixSign/#constructors","text":"","title":"Constructors"},{"location":"format-PrefixSign/#create","text":"[Source] new val create() : PrefixSign val^","title":"create"},{"location":"format-PrefixSign/#returns","text":"PrefixSign val^","title":"Returns"},{"location":"format-PrefixSign/#public-functions","text":"","title":"Public Functions"},{"location":"format-PrefixSign/#eq","text":"[Source] fun box eq( that: PrefixSign val) : Bool val","title":"eq"},{"location":"format-PrefixSign/#parameters","text":"that: PrefixSign val","title":"Parameters"},{"location":"format-PrefixSign/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-PrefixSign/#ne","text":"[Source] fun box ne( that: PrefixSign val) : Bool val","title":"ne"},{"location":"format-PrefixSign/#parameters_1","text":"that: PrefixSign val","title":"Parameters"},{"location":"format-PrefixSign/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-PrefixSpace/","text":"PrefixSpace [Source] primitive val PrefixSpace is PrefixSpec val Implements PrefixSpec val Constructors create [Source] new val create() : PrefixSpace val^ Returns PrefixSpace val^ Public Functions eq [Source] fun box eq( that: PrefixSpace val) : Bool val Parameters that: PrefixSpace val Returns Bool val ne [Source] fun box ne( that: PrefixSpace val) : Bool val Parameters that: PrefixSpace val Returns Bool val","title":"primitive PrefixSpace"},{"location":"format-PrefixSpace/#prefixspace","text":"[Source] primitive val PrefixSpace is PrefixSpec val","title":"PrefixSpace"},{"location":"format-PrefixSpace/#implements","text":"PrefixSpec val","title":"Implements"},{"location":"format-PrefixSpace/#constructors","text":"","title":"Constructors"},{"location":"format-PrefixSpace/#create","text":"[Source] new val create() : PrefixSpace val^","title":"create"},{"location":"format-PrefixSpace/#returns","text":"PrefixSpace val^","title":"Returns"},{"location":"format-PrefixSpace/#public-functions","text":"","title":"Public Functions"},{"location":"format-PrefixSpace/#eq","text":"[Source] fun box eq( that: PrefixSpace val) : Bool val","title":"eq"},{"location":"format-PrefixSpace/#parameters","text":"that: PrefixSpace val","title":"Parameters"},{"location":"format-PrefixSpace/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-PrefixSpace/#ne","text":"[Source] fun box ne( that: PrefixSpace val) : Bool val","title":"ne"},{"location":"format-PrefixSpace/#parameters_1","text":"that: PrefixSpace val","title":"Parameters"},{"location":"format-PrefixSpace/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-PrefixSpec/","text":"PrefixSpec [Source] trait val PrefixSpec","title":"trait PrefixSpec"},{"location":"format-PrefixSpec/#prefixspec","text":"[Source] trait val PrefixSpec","title":"PrefixSpec"},{"location":"format-_FormatFloat/","text":"_FormatFloat [Source] Worker type providing to string conversions for floats. primitive val _FormatFloat Constructors create [Source] new val create() : _FormatFloat val^ Returns _FormatFloat val^ Public Functions f64 [Source] fun box f64( x: F64 val, fmt: (FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val) = seq, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq, prec: USize val = seq, width: USize val = seq, align: (AlignLeft val | AlignRight val | AlignCenter val) = seq, fill: U32 val = seq) : String iso^ Parameters x: F64 val fmt: ( FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val) = seq prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) = seq prec: USize val = seq width: USize val = seq align: ( AlignLeft val | AlignRight val | AlignCenter val) = seq fill: U32 val = seq Returns String iso^ eq [Source] fun box eq( that: _FormatFloat val) : Bool val Parameters that: _FormatFloat val Returns Bool val ne [Source] fun box ne( that: _FormatFloat val) : Bool val Parameters that: _FormatFloat val Returns Bool val","title":"primitive _FormatFloat"},{"location":"format-_FormatFloat/#_formatfloat","text":"[Source] Worker type providing to string conversions for floats. primitive val _FormatFloat","title":"_FormatFloat"},{"location":"format-_FormatFloat/#constructors","text":"","title":"Constructors"},{"location":"format-_FormatFloat/#create","text":"[Source] new val create() : _FormatFloat val^","title":"create"},{"location":"format-_FormatFloat/#returns","text":"_FormatFloat val^","title":"Returns"},{"location":"format-_FormatFloat/#public-functions","text":"","title":"Public Functions"},{"location":"format-_FormatFloat/#f64","text":"[Source] fun box f64( x: F64 val, fmt: (FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val) = seq, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq, prec: USize val = seq, width: USize val = seq, align: (AlignLeft val | AlignRight val | AlignCenter val) = seq, fill: U32 val = seq) : String iso^","title":"f64"},{"location":"format-_FormatFloat/#parameters","text":"x: F64 val fmt: ( FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val) = seq prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) = seq prec: USize val = seq width: USize val = seq align: ( AlignLeft val | AlignRight val | AlignCenter val) = seq fill: U32 val = seq","title":"Parameters"},{"location":"format-_FormatFloat/#returns_1","text":"String iso^","title":"Returns"},{"location":"format-_FormatFloat/#eq","text":"[Source] fun box eq( that: _FormatFloat val) : Bool val","title":"eq"},{"location":"format-_FormatFloat/#parameters_1","text":"that: _FormatFloat val","title":"Parameters"},{"location":"format-_FormatFloat/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-_FormatFloat/#ne","text":"[Source] fun box ne( that: _FormatFloat val) : Bool val","title":"ne"},{"location":"format-_FormatFloat/#parameters_2","text":"that: _FormatFloat val","title":"Parameters"},{"location":"format-_FormatFloat/#returns_3","text":"Bool val","title":"Returns"},{"location":"format-_FormatInt/","text":"_FormatInt [Source] Worker type providing to string conversions for integers. primitive val _FormatInt Constructors create [Source] new val create() : _FormatInt val^ Returns _FormatInt val^ Public Functions u8 [Source] fun box u8( x: U8 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val), prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val), prec: USize val, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : String iso^ Parameters x: U8 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) prec: USize val width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val Returns String iso^ u16 [Source] fun box u16( x: U16 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val), prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val), prec: USize val, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : String iso^ Parameters x: U16 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) prec: USize val width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val Returns String iso^ u32 [Source] fun box u32( x: U32 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val), prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val), prec: USize val, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : String iso^ Parameters x: U32 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) prec: USize val width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val Returns String iso^ u64 [Source] fun box u64( x: U64 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val), prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val), prec: USize val, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : String iso^ Parameters x: U64 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) prec: USize val width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val Returns String iso^ u128 [Source] fun box u128( x: U128 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) = seq, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq, prec: USize val = seq, width: USize val = seq, align: (AlignLeft val | AlignRight val | AlignCenter val) = seq, fill: U32 val = seq) : String iso^ Parameters x: U128 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) = seq prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) = seq prec: USize val = seq width: USize val = seq align: ( AlignLeft val | AlignRight val | AlignCenter val) = seq fill: U32 val = seq Returns String iso^ eq [Source] fun box eq( that: _FormatInt val) : Bool val Parameters that: _FormatInt val Returns Bool val ne [Source] fun box ne( that: _FormatInt val) : Bool val Parameters that: _FormatInt val Returns Bool val Private Functions _large [Source] fun box _large() : String val Returns String val _small [Source] fun box _small() : String val Returns String val _fmt_int [Source] fun box _fmt_int( fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)) : (U32 val , String val , String val) Parameters fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) Returns ( U32 val , String val , String val) _prefix [Source] fun box _prefix( neg: Bool val, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val)) : String val Parameters neg: Bool val prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) Returns String val _extend_digits [Source] fun box _extend_digits( s: String ref, digits: USize val) : None val Parameters s: String ref digits: USize val Returns None val _pad [Source] fun box _pad( s: String ref, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : None val Parameters s: String ref width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val Returns None val","title":"primitive _FormatInt"},{"location":"format-_FormatInt/#_formatint","text":"[Source] Worker type providing to string conversions for integers. primitive val _FormatInt","title":"_FormatInt"},{"location":"format-_FormatInt/#constructors","text":"","title":"Constructors"},{"location":"format-_FormatInt/#create","text":"[Source] new val create() : _FormatInt val^","title":"create"},{"location":"format-_FormatInt/#returns","text":"_FormatInt val^","title":"Returns"},{"location":"format-_FormatInt/#public-functions","text":"","title":"Public Functions"},{"location":"format-_FormatInt/#u8","text":"[Source] fun box u8( x: U8 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val), prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val), prec: USize val, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : String iso^","title":"u8"},{"location":"format-_FormatInt/#parameters","text":"x: U8 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) prec: USize val width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val","title":"Parameters"},{"location":"format-_FormatInt/#returns_1","text":"String iso^","title":"Returns"},{"location":"format-_FormatInt/#u16","text":"[Source] fun box u16( x: U16 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val), prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val), prec: USize val, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : String iso^","title":"u16"},{"location":"format-_FormatInt/#parameters_1","text":"x: U16 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) prec: USize val width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val","title":"Parameters"},{"location":"format-_FormatInt/#returns_2","text":"String iso^","title":"Returns"},{"location":"format-_FormatInt/#u32","text":"[Source] fun box u32( x: U32 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val), prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val), prec: USize val, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : String iso^","title":"u32"},{"location":"format-_FormatInt/#parameters_2","text":"x: U32 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) prec: USize val width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val","title":"Parameters"},{"location":"format-_FormatInt/#returns_3","text":"String iso^","title":"Returns"},{"location":"format-_FormatInt/#u64","text":"[Source] fun box u64( x: U64 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val), prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val), prec: USize val, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : String iso^","title":"u64"},{"location":"format-_FormatInt/#parameters_3","text":"x: U64 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) prec: USize val width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val","title":"Parameters"},{"location":"format-_FormatInt/#returns_4","text":"String iso^","title":"Returns"},{"location":"format-_FormatInt/#u128","text":"[Source] fun box u128( x: U128 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) = seq, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq, prec: USize val = seq, width: USize val = seq, align: (AlignLeft val | AlignRight val | AlignCenter val) = seq, fill: U32 val = seq) : String iso^","title":"u128"},{"location":"format-_FormatInt/#parameters_4","text":"x: U128 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) = seq prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) = seq prec: USize val = seq width: USize val = seq align: ( AlignLeft val | AlignRight val | AlignCenter val) = seq fill: U32 val = seq","title":"Parameters"},{"location":"format-_FormatInt/#returns_5","text":"String iso^","title":"Returns"},{"location":"format-_FormatInt/#eq","text":"[Source] fun box eq( that: _FormatInt val) : Bool val","title":"eq"},{"location":"format-_FormatInt/#parameters_5","text":"that: _FormatInt val","title":"Parameters"},{"location":"format-_FormatInt/#returns_6","text":"Bool val","title":"Returns"},{"location":"format-_FormatInt/#ne","text":"[Source] fun box ne( that: _FormatInt val) : Bool val","title":"ne"},{"location":"format-_FormatInt/#parameters_6","text":"that: _FormatInt val","title":"Parameters"},{"location":"format-_FormatInt/#returns_7","text":"Bool val","title":"Returns"},{"location":"format-_FormatInt/#private-functions","text":"","title":"Private Functions"},{"location":"format-_FormatInt/#_large","text":"[Source] fun box _large() : String val","title":"_large"},{"location":"format-_FormatInt/#returns_8","text":"String val","title":"Returns"},{"location":"format-_FormatInt/#_small","text":"[Source] fun box _small() : String val","title":"_small"},{"location":"format-_FormatInt/#returns_9","text":"String val","title":"Returns"},{"location":"format-_FormatInt/#_fmt_int","text":"[Source] fun box _fmt_int( fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)) : (U32 val , String val , String val)","title":"_fmt_int"},{"location":"format-_FormatInt/#parameters_7","text":"fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)","title":"Parameters"},{"location":"format-_FormatInt/#returns_10","text":"( U32 val , String val , String val)","title":"Returns"},{"location":"format-_FormatInt/#_prefix","text":"[Source] fun box _prefix( neg: Bool val, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val)) : String val","title":"_prefix"},{"location":"format-_FormatInt/#parameters_8","text":"neg: Bool val prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val)","title":"Parameters"},{"location":"format-_FormatInt/#returns_11","text":"String val","title":"Returns"},{"location":"format-_FormatInt/#_extend_digits","text":"[Source] fun box _extend_digits( s: String ref, digits: USize val) : None val","title":"_extend_digits"},{"location":"format-_FormatInt/#parameters_9","text":"s: String ref digits: USize val","title":"Parameters"},{"location":"format-_FormatInt/#returns_12","text":"None val","title":"Returns"},{"location":"format-_FormatInt/#_pad","text":"[Source] fun box _pad( s: String ref, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : None val","title":"_pad"},{"location":"format-_FormatInt/#parameters_10","text":"s: String ref width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val","title":"Parameters"},{"location":"format-_FormatInt/#returns_13","text":"None val","title":"Returns"},{"location":"itertools--index/","text":"Itertools Package The itertools package provides the Iter class for doing useful things with iterators. It is Inspired by Python's itertools library, Rust's Iterator, and Elixir's Enum and Stream. Iter The Iter class wraps iterators so that additional methods may be applied to it. Some methods, such as fold and collect, run through the underlying iterator in order to return a result. Others, such as map and filter, are lazy. This means that they return another Iter so that the resulting values are computed one by one as needed. Lazy methods return Iter types. For example, the following code creates an Iter from the values of an array containing the numbers 1 through 5, increments each number by one, filters out any odd numbers, and prints the rest. let xs = Iter[I64]([1; 2; 3; 4; 5].values()) .map[I64]({(x) = x + 1 }) .filter({(x) = (x % 2) == 0 }) .map[None]({(x) = env.out.print(x.string()) }) This will result in an iterator that prints the numbers 2, 4, and 6. However, due to the lazy nature of the map and filter, no iteration has actually occurred and nothing will be printed. One solution to this would be to loop over the resulting Iter as so: for x in xs do None end This will trigger the iteration and print out the values 2, 4, and 6. This is where the run method comes in handy by doing the iteration without the need for a loop. So the final code would be as follows: Iter[I64]([1; 2; 3; 4; 5].values()) .map[I64]({(x) = x + 1 }) .filter({(x) = (x % 2) == 0 }) .map[None]({(x) = env.out.print(x.string()) }) .run() Output: 2 4 6 Public Types class Iter Private Types primitive _None class _EmptyIter","title":"Package"},{"location":"itertools--index/#itertools-package","text":"The itertools package provides the Iter class for doing useful things with iterators. It is Inspired by Python's itertools library, Rust's Iterator, and Elixir's Enum and Stream.","title":"Itertools Package"},{"location":"itertools--index/#iter","text":"The Iter class wraps iterators so that additional methods may be applied to it. Some methods, such as fold and collect, run through the underlying iterator in order to return a result. Others, such as map and filter, are lazy. This means that they return another Iter so that the resulting values are computed one by one as needed. Lazy methods return Iter types. For example, the following code creates an Iter from the values of an array containing the numbers 1 through 5, increments each number by one, filters out any odd numbers, and prints the rest. let xs = Iter[I64]([1; 2; 3; 4; 5].values()) .map[I64]({(x) = x + 1 }) .filter({(x) = (x % 2) == 0 }) .map[None]({(x) = env.out.print(x.string()) }) This will result in an iterator that prints the numbers 2, 4, and 6. However, due to the lazy nature of the map and filter, no iteration has actually occurred and nothing will be printed. One solution to this would be to loop over the resulting Iter as so: for x in xs do None end This will trigger the iteration and print out the values 2, 4, and 6. This is where the run method comes in handy by doing the iteration without the need for a loop. So the final code would be as follows: Iter[I64]([1; 2; 3; 4; 5].values()) .map[I64]({(x) = x + 1 }) .filter({(x) = (x % 2) == 0 }) .map[None]({(x) = env.out.print(x.string()) }) .run() Output: 2 4 6","title":"Iter"},{"location":"itertools--index/#public-types","text":"class Iter","title":"Public Types"},{"location":"itertools--index/#private-types","text":"primitive _None class _EmptyIter","title":"Private Types"},{"location":"itertools-Iter/","text":"Iter[A: A] [Source] Wrapper class containing methods to modify iterators. class ref Iter[A: A] is Iterator[A] ref Implements Iterator [A] ref Constructors create [Source] new ref create( iter: Iterator[A] ref) : Iter[A] ref^ Parameters iter: Iterator [A] ref Returns Iter [A] ref^ chain [Source] Take an iterator of iterators and return an Iter containing the items of the first one, then the second one, and so on. Example let xs = [as I64: 1; 2].values() let ys = [as I64: 3; 4].values() Iter[I64].chain([xs; ys].values()) 1 2 3 4 new ref chain( outer_iterator: Iterator[Iterator[A] ref] ref) : Iter[A] ref^ Parameters outer_iterator: Iterator [ Iterator [A] ref] ref Returns Iter [A] ref^ repeat_value [Source] Create an iterator that returns the given value forever. Example Iter[U32].repeat_value(7) 7 7 7 7 7 7 7 7 7 ... new ref repeat_value( value: A) : Iter[A] ref^ Parameters value: A Returns Iter [A] ref^ Public Functions has_next [Source] fun ref has_next() : Bool val Returns Bool val next [Source] fun ref next() : A ? Returns A ? map_stateful[B: B] [Source] Allows stateful transformaion of each element from the iterator, similar to map . fun ref map_stateful[B: B]( f: {ref(A!): B ?}[A, B] ref) : Iter[B] ref^ Parameters f: {ref(A!): B ?}[A, B] ref Returns Iter [B] ref^ filter_stateful [Source] Allows filtering of elements based on a stateful adapter, similar to filter . fun ref filter_stateful( f: {ref(A!): Bool ?}[A] ref) : Iter[A] ref^ Parameters f: {ref(A!): Bool ?}[A] ref Returns Iter [A] ref^ filter_map_stateful[B: B] [Source] Allows stateful modification to the stream of elements from an iterator, similar to filter_map . fun ref filter_map_stateful[B: B]( f: {ref(A!): (B | None) ?}[A, B] ref) : Iter[B] ref^ Parameters f: {ref(A!): (B | None) ?}[A, B] ref Returns Iter [B] ref^ all [Source] Return false if at least one value of the iterator fails to match the predicate f . This method short-circuits at the first value where the predicate returns false, otherwise true is returned. Examples Iter[I64]([2; 4; 6].values()) .all({(x) = (x % 2) == 0 }) true Iter[I64]([2; 3; 4].values()) .all({(x) = (x % 2) == 0 }) false fun ref all( f: {(A!): Bool ?}[A] box) : Bool val Parameters f: {(A!): Bool ?}[A] box Returns Bool val any [Source] Return true if at least one value of the iterator matches the predicate f . This method short-circuits at the first value where the predicate returns true, otherwise false is returned. Examples Iter[I64]([2; 4; 6].values()) .any({(I64) = (x % 2) == 1 }) false Iter[I64]([2; 3; 4].values()) .any({(I64) = (x % 2) == 1 }) true fun ref any( f: {(A!): Bool ?}[A] box) : Bool val Parameters f: {(A!): Bool ?}[A] box Returns Bool val collect[optional B: Seq [A!] ref] [Source] Push each value from the iterator into the collection coll . Example Iter[I64]([1; 2; 3].values()) .collect(Array[I64](3)) [1, 2, 3] fun ref collect[optional B: Seq[A!] ref]( coll: B) : B^ Parameters coll: B Returns B^ count [Source] Return the number of values in the iterator. Example Iter[I64]([1; 2; 3].values()) .count() 3 fun ref count() : USize val Returns USize val cycle [Source] Repeatedly cycle through the values from the iterator. WARNING: The values returned by the original iterator are cached, so the input iterator should be finite. Example Iter[I64]([1; 2; 3].values()) .cycle() 1 2 3 1 2 3 1 2 3 ... fun ref cycle() : Iter[A!] ref^ Returns Iter [A!] ref^ enum[optional B: ( Real [B] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] [Source] An iterator which yields the current iteration count as well as the next value from the iterator. Example Iter[I64]([1; 2; 3].values()) .enum() (0, 1) (1, 2) (2, 3) fun ref enum[optional B: (Real[B] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]() : Iter[(B , A)] ref^ Returns Iter [(B , A)] ref^ filter [Source] Return an iterator that only returns items that match the predicate f . Example Iter[I64]([1; 2; 3; 4; 5; 6].values()) .filter({(x) = (x % 2) == 0 }) 2 4 6 fun ref filter( f: {(A!): Bool ?}[A] box) : Iter[A] ref^ Parameters f: {(A!): Bool ?}[A] box Returns Iter [A] ref^ find [Source] Return the nth value in the iterator that satisfies the predicate f . Examples Iter[I64]([1; 2; 3].values()) .find({(x) = (x % 2) == 0 }) 2 Iter[I64]([1; 2; 3; 4].values()) .find({(x) = (x % 2) == 0 }, 2) 4 fun ref find( f: {(A!): Bool ?}[A] box, n: USize val = seq) : A! ? Parameters f: {(A!): Bool ?}[A] box n: USize val = seq Returns A! ? filter_map[B: B] [Source] Return an iterator which applies f to each element. If None is returned, then the iterator will try again by applying f to the next element. Otherwise, the value of type B is returned. Example Iter[I64]([as I64: 1; -2; 4; 7; -5]) .filter_map[USize]( {(i: I64): (USize | None) = if i = 0 then i.usize() end }) 1 4 7 ```pony fun ref filter_map[B: B]( f: {(A!): (B | None) ?}[A, B] box) : Iter[B] ref^ Parameters f: {(A!): (B | None) ?}[A, B] box Returns Iter [B] ref^ flat_map[B: B] [Source] Return an iterator over the values of the iterators produced from the application of the given function. Example Iter[String]([ alpha ; beta ; gamma ]) .flat_map[U8]({(s: String): Iterator[U8] = s.values() }) a l p h a b e t a g a m m a fun ref flat_map[B: B]( f: {(A!): Iterator[B] ?}[A, B] box) : Iter[B] ref^ Parameters f: {(A!): Iterator[B] ?}[A, B] box Returns Iter [B] ref^ fold[B: B] [Source] Apply a function to every element, producing an accumulated value. Example Iter[I64]([1; 2; 3].values()) .fold[I64](0, {(sum, x) = sum + x }) 6 fun ref fold[B: B]( acc: B, f: {(B, A!): B^}[A, B] box) : B^ Parameters acc: B f: {(B, A!): B^}[A, B] box Returns B^ fold_partial[B: B] [Source] A partial version of fold . fun ref fold_partial[B: B]( acc: B, f: {(B, A!): B^ ?}[A, B] box) : B^ ? Parameters acc: B f: {(B, A!): B^ ?}[A, B] box Returns B^ ? last [Source] Return the last value of the iterator. Example Iter[I64]([1; 2; 3].values()) .last() 3 fun ref last() : A ? Returns A ? map[B: B] [Source] Return an iterator where each item's value is the application of the given function to the value in the original iterator. Example Iter[I64]([1; 2; 3].values()) .map[I64]({(x) = x * x }) 1 4 9 fun ref map[B: B]( f: {(A!): B ?}[A, B] box) : Iter[B] ref^ Parameters f: {(A!): B ?}[A, B] box Returns Iter [B] ref^ nth [Source] Return the nth value of the iterator. Example Iter[I64]([1; 2; 3].values()) .nth(2) 2 fun ref nth( n: USize val) : A ? Parameters n: USize val Returns A ? run [Source] Iterate through the values of the iterator without a for loop. The function on_error will be called if the iterator's has_next method returns true but its next method throws an error. Example Iter[I64]([1; 2; 3].values()) .map[None]({(x) = env.out.print(x.string()) }) .run() 1 2 3 fun ref run( on_error: {ref()}[A] ref = seq) : None val Parameters on_error: {ref()}[A] ref = seq Returns None val skip [Source] Skip the first n values of the iterator. Example Iter[I64]([1; 2; 3; 4; 5; 6].values()) .skip(3) 4 5 6 Iter[I64]([1; 2; 3].values()) .skip(3) .has_next() false fun ref skip( n: USize val) : Iter[A] ref^ Parameters n: USize val Returns Iter [A] ref^ skip_while [Source] Skip values of the iterator while the predicate f returns true. Example Iter[I64]([1; 2; 3; 4; 5; 6].values()) .skip_while({(x) = x 4 }) 4 5 6 fun ref skip_while( f: {(A!): Bool ?}[A] box) : Iter[A] ref^ Parameters f: {(A!): Bool ?}[A] box Returns Iter [A] ref^ take [Source] Return an iterator for the first n elements. Example Iter[I64]([1; 2; 3; 4; 5; 6].values()) .take(3) 1 2 3 fun ref take( n: USize val) : Iter[A] ref^ Parameters n: USize val Returns Iter [A] ref^ take_while [Source] Return an iterator that returns values while the predicate f returns true. This iterator short-circuits the first time that f returns false or raises an error. Example Iter[I64]([1; 2; 3; 4; 5; 6].values()) .take_while({(x) = x 4 }) 1 2 3 fun ref take_while( f: {(A!): Bool ?}[A] box) : Iter[A] ref^ Parameters f: {(A!): Bool ?}[A] box Returns Iter [A] ref^ zip[B: B] [Source] Zip two iterators together so that each call to next() results in a tuple with the next value of the first iterator and the next value of the second iterator. The number of items returned is the minimum of the number of items returned by the two iterators. Example Iter[I64]([1; 2].values()) .zip[I64]([3; 4].values()) (1, 3) (2, 4) fun ref zip[B: B]( i2: Iterator[B] ref) : Iter[(A , B)] ref^ Parameters i2: Iterator [B] ref Returns Iter [(A , B)] ref^ zip2[B: B, C: C] [Source] Zip three iterators together so that each call to next() results in a tuple with the next value of the first iterator, the next value of the second iterator, and the value of the third iterator. The number of items returned is the minimum of the number of items returned by the three iterators. fun ref zip2[B: B, C: C]( i2: Iterator[B] ref, i3: Iterator[C] ref) : Iter[(A , B , C)] ref^ Parameters i2: Iterator [B] ref i3: Iterator [C] ref Returns Iter [(A , B , C)] ref^ zip3[B: B, C: C, D: D] [Source] Zip four iterators together so that each call to next() results in a tuple with the next value of each of the iterators. The number of items returned is the minimum of the number of items returned by the iterators. fun ref zip3[B: B, C: C, D: D]( i2: Iterator[B] ref, i3: Iterator[C] ref, i4: Iterator[D] ref) : Iter[(A , B , C , D)] ref^ Parameters i2: Iterator [B] ref i3: Iterator [C] ref i4: Iterator [D] ref Returns Iter [(A , B , C , D)] ref^ zip4[B: B, C: C, D: D, E: E] [Source] Zip five iterators together so that each call to next() results in a tuple with the next value of each of the iterators. The number of items returned is the minimum of the number of items returned by the iterators. fun ref zip4[B: B, C: C, D: D, E: E]( i2: Iterator[B] ref, i3: Iterator[C] ref, i4: Iterator[D] ref, i5: Iterator[E] ref) : Iter[(A , B , C , D , E)] ref^ Parameters i2: Iterator [B] ref i3: Iterator [C] ref i4: Iterator [D] ref i5: Iterator [E] ref Returns Iter [(A , B , C , D , E)] ref^","title":"class Iter"},{"location":"itertools-Iter/#iter91a-a93","text":"[Source] Wrapper class containing methods to modify iterators. class ref Iter[A: A] is Iterator[A] ref","title":"Iter[A: A]"},{"location":"itertools-Iter/#implements","text":"Iterator [A] ref","title":"Implements"},{"location":"itertools-Iter/#constructors","text":"","title":"Constructors"},{"location":"itertools-Iter/#create","text":"[Source] new ref create( iter: Iterator[A] ref) : Iter[A] ref^","title":"create"},{"location":"itertools-Iter/#parameters","text":"iter: Iterator [A] ref","title":"Parameters"},{"location":"itertools-Iter/#returns","text":"Iter [A] ref^","title":"Returns"},{"location":"itertools-Iter/#chain","text":"[Source] Take an iterator of iterators and return an Iter containing the items of the first one, then the second one, and so on.","title":"chain"},{"location":"itertools-Iter/#example","text":"let xs = [as I64: 1; 2].values() let ys = [as I64: 3; 4].values() Iter[I64].chain([xs; ys].values()) 1 2 3 4 new ref chain( outer_iterator: Iterator[Iterator[A] ref] ref) : Iter[A] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_1","text":"outer_iterator: Iterator [ Iterator [A] ref] ref","title":"Parameters"},{"location":"itertools-Iter/#returns_1","text":"Iter [A] ref^","title":"Returns"},{"location":"itertools-Iter/#repeat_value","text":"[Source] Create an iterator that returns the given value forever.","title":"repeat_value"},{"location":"itertools-Iter/#example_1","text":"Iter[U32].repeat_value(7) 7 7 7 7 7 7 7 7 7 ... new ref repeat_value( value: A) : Iter[A] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_2","text":"value: A","title":"Parameters"},{"location":"itertools-Iter/#returns_2","text":"Iter [A] ref^","title":"Returns"},{"location":"itertools-Iter/#public-functions","text":"","title":"Public Functions"},{"location":"itertools-Iter/#has_next","text":"[Source] fun ref has_next() : Bool val","title":"has_next"},{"location":"itertools-Iter/#returns_3","text":"Bool val","title":"Returns"},{"location":"itertools-Iter/#next","text":"[Source] fun ref next() : A ?","title":"next"},{"location":"itertools-Iter/#returns_4","text":"A ?","title":"Returns"},{"location":"itertools-Iter/#map_stateful91b-b93","text":"[Source] Allows stateful transformaion of each element from the iterator, similar to map . fun ref map_stateful[B: B]( f: {ref(A!): B ?}[A, B] ref) : Iter[B] ref^","title":"map_stateful[B: B]"},{"location":"itertools-Iter/#parameters_3","text":"f: {ref(A!): B ?}[A, B] ref","title":"Parameters"},{"location":"itertools-Iter/#returns_5","text":"Iter [B] ref^","title":"Returns"},{"location":"itertools-Iter/#filter_stateful","text":"[Source] Allows filtering of elements based on a stateful adapter, similar to filter . fun ref filter_stateful( f: {ref(A!): Bool ?}[A] ref) : Iter[A] ref^","title":"filter_stateful"},{"location":"itertools-Iter/#parameters_4","text":"f: {ref(A!): Bool ?}[A] ref","title":"Parameters"},{"location":"itertools-Iter/#returns_6","text":"Iter [A] ref^","title":"Returns"},{"location":"itertools-Iter/#filter_map_stateful91b-b93","text":"[Source] Allows stateful modification to the stream of elements from an iterator, similar to filter_map . fun ref filter_map_stateful[B: B]( f: {ref(A!): (B | None) ?}[A, B] ref) : Iter[B] ref^","title":"filter_map_stateful[B: B]"},{"location":"itertools-Iter/#parameters_5","text":"f: {ref(A!): (B | None) ?}[A, B] ref","title":"Parameters"},{"location":"itertools-Iter/#returns_7","text":"Iter [B] ref^","title":"Returns"},{"location":"itertools-Iter/#all","text":"[Source] Return false if at least one value of the iterator fails to match the predicate f . This method short-circuits at the first value where the predicate returns false, otherwise true is returned.","title":"all"},{"location":"itertools-Iter/#examples","text":"Iter[I64]([2; 4; 6].values()) .all({(x) = (x % 2) == 0 }) true Iter[I64]([2; 3; 4].values()) .all({(x) = (x % 2) == 0 }) false fun ref all( f: {(A!): Bool ?}[A] box) : Bool val","title":"Examples"},{"location":"itertools-Iter/#parameters_6","text":"f: {(A!): Bool ?}[A] box","title":"Parameters"},{"location":"itertools-Iter/#returns_8","text":"Bool val","title":"Returns"},{"location":"itertools-Iter/#any","text":"[Source] Return true if at least one value of the iterator matches the predicate f . This method short-circuits at the first value where the predicate returns true, otherwise false is returned.","title":"any"},{"location":"itertools-Iter/#examples_1","text":"Iter[I64]([2; 4; 6].values()) .any({(I64) = (x % 2) == 1 }) false Iter[I64]([2; 3; 4].values()) .any({(I64) = (x % 2) == 1 }) true fun ref any( f: {(A!): Bool ?}[A] box) : Bool val","title":"Examples"},{"location":"itertools-Iter/#parameters_7","text":"f: {(A!): Bool ?}[A] box","title":"Parameters"},{"location":"itertools-Iter/#returns_9","text":"Bool val","title":"Returns"},{"location":"itertools-Iter/#collect91optional-b-seq91a93-ref93","text":"[Source] Push each value from the iterator into the collection coll .","title":"collect[optional B: Seq[A!] ref]"},{"location":"itertools-Iter/#example_2","text":"Iter[I64]([1; 2; 3].values()) .collect(Array[I64](3)) [1, 2, 3] fun ref collect[optional B: Seq[A!] ref]( coll: B) : B^","title":"Example"},{"location":"itertools-Iter/#parameters_8","text":"coll: B","title":"Parameters"},{"location":"itertools-Iter/#returns_10","text":"B^","title":"Returns"},{"location":"itertools-Iter/#count","text":"[Source] Return the number of values in the iterator.","title":"count"},{"location":"itertools-Iter/#example_3","text":"Iter[I64]([1; 2; 3].values()) .count() 3 fun ref count() : USize val","title":"Example"},{"location":"itertools-Iter/#returns_11","text":"USize val","title":"Returns"},{"location":"itertools-Iter/#cycle","text":"[Source] Repeatedly cycle through the values from the iterator. WARNING: The values returned by the original iterator are cached, so the input iterator should be finite.","title":"cycle"},{"location":"itertools-Iter/#example_4","text":"Iter[I64]([1; 2; 3].values()) .cycle() 1 2 3 1 2 3 1 2 3 ... fun ref cycle() : Iter[A!] ref^","title":"Example"},{"location":"itertools-Iter/#returns_12","text":"Iter [A!] ref^","title":"Returns"},{"location":"itertools-Iter/#enum91optional-b-real91b93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93","text":"[Source] An iterator which yields the current iteration count as well as the next value from the iterator.","title":"enum[optional B: (Real[B] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"},{"location":"itertools-Iter/#example_5","text":"Iter[I64]([1; 2; 3].values()) .enum() (0, 1) (1, 2) (2, 3) fun ref enum[optional B: (Real[B] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]() : Iter[(B , A)] ref^","title":"Example"},{"location":"itertools-Iter/#returns_13","text":"Iter [(B , A)] ref^","title":"Returns"},{"location":"itertools-Iter/#filter","text":"[Source] Return an iterator that only returns items that match the predicate f .","title":"filter"},{"location":"itertools-Iter/#example_6","text":"Iter[I64]([1; 2; 3; 4; 5; 6].values()) .filter({(x) = (x % 2) == 0 }) 2 4 6 fun ref filter( f: {(A!): Bool ?}[A] box) : Iter[A] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_9","text":"f: {(A!): Bool ?}[A] box","title":"Parameters"},{"location":"itertools-Iter/#returns_14","text":"Iter [A] ref^","title":"Returns"},{"location":"itertools-Iter/#find","text":"[Source] Return the nth value in the iterator that satisfies the predicate f .","title":"find"},{"location":"itertools-Iter/#examples_2","text":"Iter[I64]([1; 2; 3].values()) .find({(x) = (x % 2) == 0 }) 2 Iter[I64]([1; 2; 3; 4].values()) .find({(x) = (x % 2) == 0 }, 2) 4 fun ref find( f: {(A!): Bool ?}[A] box, n: USize val = seq) : A! ?","title":"Examples"},{"location":"itertools-Iter/#parameters_10","text":"f: {(A!): Bool ?}[A] box n: USize val = seq","title":"Parameters"},{"location":"itertools-Iter/#returns_15","text":"A! ?","title":"Returns"},{"location":"itertools-Iter/#filter_map91b-b93","text":"[Source] Return an iterator which applies f to each element. If None is returned, then the iterator will try again by applying f to the next element. Otherwise, the value of type B is returned.","title":"filter_map[B: B]"},{"location":"itertools-Iter/#example_7","text":"Iter[I64]([as I64: 1; -2; 4; 7; -5]) .filter_map[USize]( {(i: I64): (USize | None) = if i = 0 then i.usize() end }) 1 4 7 ```pony fun ref filter_map[B: B]( f: {(A!): (B | None) ?}[A, B] box) : Iter[B] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_11","text":"f: {(A!): (B | None) ?}[A, B] box","title":"Parameters"},{"location":"itertools-Iter/#returns_16","text":"Iter [B] ref^","title":"Returns"},{"location":"itertools-Iter/#flat_map91b-b93","text":"[Source] Return an iterator over the values of the iterators produced from the application of the given function.","title":"flat_map[B: B]"},{"location":"itertools-Iter/#example_8","text":"Iter[String]([ alpha ; beta ; gamma ]) .flat_map[U8]({(s: String): Iterator[U8] = s.values() }) a l p h a b e t a g a m m a fun ref flat_map[B: B]( f: {(A!): Iterator[B] ?}[A, B] box) : Iter[B] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_12","text":"f: {(A!): Iterator[B] ?}[A, B] box","title":"Parameters"},{"location":"itertools-Iter/#returns_17","text":"Iter [B] ref^","title":"Returns"},{"location":"itertools-Iter/#fold91b-b93","text":"[Source] Apply a function to every element, producing an accumulated value.","title":"fold[B: B]"},{"location":"itertools-Iter/#example_9","text":"Iter[I64]([1; 2; 3].values()) .fold[I64](0, {(sum, x) = sum + x }) 6 fun ref fold[B: B]( acc: B, f: {(B, A!): B^}[A, B] box) : B^","title":"Example"},{"location":"itertools-Iter/#parameters_13","text":"acc: B f: {(B, A!): B^}[A, B] box","title":"Parameters"},{"location":"itertools-Iter/#returns_18","text":"B^","title":"Returns"},{"location":"itertools-Iter/#fold_partial91b-b93","text":"[Source] A partial version of fold . fun ref fold_partial[B: B]( acc: B, f: {(B, A!): B^ ?}[A, B] box) : B^ ?","title":"fold_partial[B: B]"},{"location":"itertools-Iter/#parameters_14","text":"acc: B f: {(B, A!): B^ ?}[A, B] box","title":"Parameters"},{"location":"itertools-Iter/#returns_19","text":"B^ ?","title":"Returns"},{"location":"itertools-Iter/#last","text":"[Source] Return the last value of the iterator.","title":"last"},{"location":"itertools-Iter/#example_10","text":"Iter[I64]([1; 2; 3].values()) .last() 3 fun ref last() : A ?","title":"Example"},{"location":"itertools-Iter/#returns_20","text":"A ?","title":"Returns"},{"location":"itertools-Iter/#map91b-b93","text":"[Source] Return an iterator where each item's value is the application of the given function to the value in the original iterator.","title":"map[B: B]"},{"location":"itertools-Iter/#example_11","text":"Iter[I64]([1; 2; 3].values()) .map[I64]({(x) = x * x }) 1 4 9 fun ref map[B: B]( f: {(A!): B ?}[A, B] box) : Iter[B] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_15","text":"f: {(A!): B ?}[A, B] box","title":"Parameters"},{"location":"itertools-Iter/#returns_21","text":"Iter [B] ref^","title":"Returns"},{"location":"itertools-Iter/#nth","text":"[Source] Return the nth value of the iterator.","title":"nth"},{"location":"itertools-Iter/#example_12","text":"Iter[I64]([1; 2; 3].values()) .nth(2) 2 fun ref nth( n: USize val) : A ?","title":"Example"},{"location":"itertools-Iter/#parameters_16","text":"n: USize val","title":"Parameters"},{"location":"itertools-Iter/#returns_22","text":"A ?","title":"Returns"},{"location":"itertools-Iter/#run","text":"[Source] Iterate through the values of the iterator without a for loop. The function on_error will be called if the iterator's has_next method returns true but its next method throws an error.","title":"run"},{"location":"itertools-Iter/#example_13","text":"Iter[I64]([1; 2; 3].values()) .map[None]({(x) = env.out.print(x.string()) }) .run() 1 2 3 fun ref run( on_error: {ref()}[A] ref = seq) : None val","title":"Example"},{"location":"itertools-Iter/#parameters_17","text":"on_error: {ref()}[A] ref = seq","title":"Parameters"},{"location":"itertools-Iter/#returns_23","text":"None val","title":"Returns"},{"location":"itertools-Iter/#skip","text":"[Source] Skip the first n values of the iterator.","title":"skip"},{"location":"itertools-Iter/#example_14","text":"Iter[I64]([1; 2; 3; 4; 5; 6].values()) .skip(3) 4 5 6 Iter[I64]([1; 2; 3].values()) .skip(3) .has_next() false fun ref skip( n: USize val) : Iter[A] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_18","text":"n: USize val","title":"Parameters"},{"location":"itertools-Iter/#returns_24","text":"Iter [A] ref^","title":"Returns"},{"location":"itertools-Iter/#skip_while","text":"[Source] Skip values of the iterator while the predicate f returns true.","title":"skip_while"},{"location":"itertools-Iter/#example_15","text":"Iter[I64]([1; 2; 3; 4; 5; 6].values()) .skip_while({(x) = x 4 }) 4 5 6 fun ref skip_while( f: {(A!): Bool ?}[A] box) : Iter[A] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_19","text":"f: {(A!): Bool ?}[A] box","title":"Parameters"},{"location":"itertools-Iter/#returns_25","text":"Iter [A] ref^","title":"Returns"},{"location":"itertools-Iter/#take","text":"[Source] Return an iterator for the first n elements.","title":"take"},{"location":"itertools-Iter/#example_16","text":"Iter[I64]([1; 2; 3; 4; 5; 6].values()) .take(3) 1 2 3 fun ref take( n: USize val) : Iter[A] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_20","text":"n: USize val","title":"Parameters"},{"location":"itertools-Iter/#returns_26","text":"Iter [A] ref^","title":"Returns"},{"location":"itertools-Iter/#take_while","text":"[Source] Return an iterator that returns values while the predicate f returns true. This iterator short-circuits the first time that f returns false or raises an error.","title":"take_while"},{"location":"itertools-Iter/#example_17","text":"Iter[I64]([1; 2; 3; 4; 5; 6].values()) .take_while({(x) = x 4 }) 1 2 3 fun ref take_while( f: {(A!): Bool ?}[A] box) : Iter[A] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_21","text":"f: {(A!): Bool ?}[A] box","title":"Parameters"},{"location":"itertools-Iter/#returns_27","text":"Iter [A] ref^","title":"Returns"},{"location":"itertools-Iter/#zip91b-b93","text":"[Source] Zip two iterators together so that each call to next() results in a tuple with the next value of the first iterator and the next value of the second iterator. The number of items returned is the minimum of the number of items returned by the two iterators.","title":"zip[B: B]"},{"location":"itertools-Iter/#example_18","text":"Iter[I64]([1; 2].values()) .zip[I64]([3; 4].values()) (1, 3) (2, 4) fun ref zip[B: B]( i2: Iterator[B] ref) : Iter[(A , B)] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_22","text":"i2: Iterator [B] ref","title":"Parameters"},{"location":"itertools-Iter/#returns_28","text":"Iter [(A , B)] ref^","title":"Returns"},{"location":"itertools-Iter/#zip291b-b-c-c93","text":"[Source] Zip three iterators together so that each call to next() results in a tuple with the next value of the first iterator, the next value of the second iterator, and the value of the third iterator. The number of items returned is the minimum of the number of items returned by the three iterators. fun ref zip2[B: B, C: C]( i2: Iterator[B] ref, i3: Iterator[C] ref) : Iter[(A , B , C)] ref^","title":"zip2[B: B, C: C]"},{"location":"itertools-Iter/#parameters_23","text":"i2: Iterator [B] ref i3: Iterator [C] ref","title":"Parameters"},{"location":"itertools-Iter/#returns_29","text":"Iter [(A , B , C)] ref^","title":"Returns"},{"location":"itertools-Iter/#zip391b-b-c-c-d-d93","text":"[Source] Zip four iterators together so that each call to next() results in a tuple with the next value of each of the iterators. The number of items returned is the minimum of the number of items returned by the iterators. fun ref zip3[B: B, C: C, D: D]( i2: Iterator[B] ref, i3: Iterator[C] ref, i4: Iterator[D] ref) : Iter[(A , B , C , D)] ref^","title":"zip3[B: B, C: C, D: D]"},{"location":"itertools-Iter/#parameters_24","text":"i2: Iterator [B] ref i3: Iterator [C] ref i4: Iterator [D] ref","title":"Parameters"},{"location":"itertools-Iter/#returns_30","text":"Iter [(A , B , C , D)] ref^","title":"Returns"},{"location":"itertools-Iter/#zip491b-b-c-c-d-d-e-e93","text":"[Source] Zip five iterators together so that each call to next() results in a tuple with the next value of each of the iterators. The number of items returned is the minimum of the number of items returned by the iterators. fun ref zip4[B: B, C: C, D: D, E: E]( i2: Iterator[B] ref, i3: Iterator[C] ref, i4: Iterator[D] ref, i5: Iterator[E] ref) : Iter[(A , B , C , D , E)] ref^","title":"zip4[B: B, C: C, D: D, E: E]"},{"location":"itertools-Iter/#parameters_25","text":"i2: Iterator [B] ref i3: Iterator [C] ref i4: Iterator [D] ref i5: Iterator [E] ref","title":"Parameters"},{"location":"itertools-Iter/#returns_31","text":"Iter [(A , B , C , D , E)] ref^","title":"Returns"},{"location":"itertools-_EmptyIter/","text":"_EmptyIter[A: A] [Source] class ref _EmptyIter[A: A] Constructors create [Source] new iso create() : _EmptyIter[A] iso^ Returns _EmptyIter [A] iso^ Public Functions has_next [Source] fun ref has_next() : Bool val Returns Bool val next [Source] fun ref next() : A ? Returns A ?","title":"class _EmptyIter"},{"location":"itertools-_EmptyIter/#_emptyiter91a-a93","text":"[Source] class ref _EmptyIter[A: A]","title":"_EmptyIter[A: A]"},{"location":"itertools-_EmptyIter/#constructors","text":"","title":"Constructors"},{"location":"itertools-_EmptyIter/#create","text":"[Source] new iso create() : _EmptyIter[A] iso^","title":"create"},{"location":"itertools-_EmptyIter/#returns","text":"_EmptyIter [A] iso^","title":"Returns"},{"location":"itertools-_EmptyIter/#public-functions","text":"","title":"Public Functions"},{"location":"itertools-_EmptyIter/#has_next","text":"[Source] fun ref has_next() : Bool val","title":"has_next"},{"location":"itertools-_EmptyIter/#returns_1","text":"Bool val","title":"Returns"},{"location":"itertools-_EmptyIter/#next","text":"[Source] fun ref next() : A ?","title":"next"},{"location":"itertools-_EmptyIter/#returns_2","text":"A ?","title":"Returns"},{"location":"itertools-_None/","text":"_None [Source] primitive val _None Constructors create [Source] new val create() : _None val^ Returns _None val^ Public Functions eq [Source] fun box eq( that: _None val) : Bool val Parameters that: _None val Returns Bool val ne [Source] fun box ne( that: _None val) : Bool val Parameters that: _None val Returns Bool val","title":"primitive _None"},{"location":"itertools-_None/#_none","text":"[Source] primitive val _None","title":"_None"},{"location":"itertools-_None/#constructors","text":"","title":"Constructors"},{"location":"itertools-_None/#create","text":"[Source] new val create() : _None val^","title":"create"},{"location":"itertools-_None/#returns","text":"_None val^","title":"Returns"},{"location":"itertools-_None/#public-functions","text":"","title":"Public Functions"},{"location":"itertools-_None/#eq","text":"[Source] fun box eq( that: _None val) : Bool val","title":"eq"},{"location":"itertools-_None/#parameters","text":"that: _None val","title":"Parameters"},{"location":"itertools-_None/#returns_1","text":"Bool val","title":"Returns"},{"location":"itertools-_None/#ne","text":"[Source] fun box ne( that: _None val) : Bool val","title":"ne"},{"location":"itertools-_None/#parameters_1","text":"that: _None val","title":"Parameters"},{"location":"itertools-_None/#returns_2","text":"Bool val","title":"Returns"},{"location":"net--index/","text":"Net package The Net package provides support for creating UDP and TCP clients and servers, reading and writing network data, and establishing UDP and TCP connections. Public Types type UDPSocketAuth actor UDPSocket interface UDPNotify type TCPListenerAuth actor TCPListener interface TCPListenNotify interface TCPConnectionNotify type TCPConnectionAuth actor TCPConnection primitive OSSockOpt class NetAddress type DNSLookupAuth primitive DNS primitive NetAuth primitive DNSAuth primitive UDPAuth primitive TCPAuth primitive TCPListenAuth primitive TCPConnectAuth Private Types primitive _OSSocket","title":"Package"},{"location":"net--index/#net-package","text":"The Net package provides support for creating UDP and TCP clients and servers, reading and writing network data, and establishing UDP and TCP connections.","title":"Net package"},{"location":"net--index/#public-types","text":"type UDPSocketAuth actor UDPSocket interface UDPNotify type TCPListenerAuth actor TCPListener interface TCPListenNotify interface TCPConnectionNotify type TCPConnectionAuth actor TCPConnection primitive OSSockOpt class NetAddress type DNSLookupAuth primitive DNS primitive NetAuth primitive DNSAuth primitive UDPAuth primitive TCPAuth primitive TCPListenAuth primitive TCPConnectAuth","title":"Public Types"},{"location":"net--index/#private-types","text":"primitive _OSSocket","title":"Private Types"},{"location":"net-DNS/","text":"DNS [Source] Helper functions for resolving DNS queries. primitive val DNS Constructors create [Source] new val create() : DNS val^ Returns DNS val^ Public Functions apply [Source] Gets all IPv4 and IPv6 addresses for a host and service. fun box apply( auth: (AmbientAuth val | NetAuth val | DNSAuth val), host: String val, service: String val) : Array[NetAddress val] iso^ Parameters auth: ( AmbientAuth val | NetAuth val | DNSAuth val) host: String val service: String val Returns Array [ NetAddress val] iso^ ip4 [Source] Gets all IPv4 addresses for a host and service. fun box ip4( auth: (AmbientAuth val | NetAuth val | DNSAuth val), host: String val, service: String val) : Array[NetAddress val] iso^ Parameters auth: ( AmbientAuth val | NetAuth val | DNSAuth val) host: String val service: String val Returns Array [ NetAddress val] iso^ ip6 [Source] Gets all IPv6 addresses for a host and service. fun box ip6( auth: (AmbientAuth val | NetAuth val | DNSAuth val), host: String val, service: String val) : Array[NetAddress val] iso^ Parameters auth: ( AmbientAuth val | NetAuth val | DNSAuth val) host: String val service: String val Returns Array [ NetAddress val] iso^ broadcast_ip4 [Source] Link-local IP4 broadcast address. fun box broadcast_ip4( auth: (AmbientAuth val | NetAuth val | DNSAuth val), service: String val) : Array[NetAddress val] iso^ Parameters auth: ( AmbientAuth val | NetAuth val | DNSAuth val) service: String val Returns Array [ NetAddress val] iso^ broadcast_ip6 [Source] Link-local IP6 broadcast address. fun box broadcast_ip6( auth: (AmbientAuth val | NetAuth val | DNSAuth val), service: String val) : Array[NetAddress val] iso^ Parameters auth: ( AmbientAuth val | NetAuth val | DNSAuth val) service: String val Returns Array [ NetAddress val] iso^ is_ip4 [Source] Returns true if the host is a literal IPv4 address. fun box is_ip4( host: String val) : Bool val Parameters host: String val Returns Bool val is_ip6 [Source] Returns true if the host is a literal IPv6 address. fun box is_ip6( host: String val) : Bool val Parameters host: String val Returns Bool val eq [Source] fun box eq( that: DNS val) : Bool val Parameters that: DNS val Returns Bool val ne [Source] fun box ne( that: DNS val) : Bool val Parameters that: DNS val Returns Bool val Private Functions _resolve [Source] Turns an addrinfo pointer into an array of addresses. fun box _resolve( auth: (AmbientAuth val | NetAuth val | DNSAuth val), family: U32 val, host: String val, service: String val) : Array[NetAddress val] iso^ Parameters auth: ( AmbientAuth val | NetAuth val | DNSAuth val) family: U32 val host: String val service: String val Returns Array [ NetAddress val] iso^","title":"primitive DNS"},{"location":"net-DNS/#dns","text":"[Source] Helper functions for resolving DNS queries. primitive val DNS","title":"DNS"},{"location":"net-DNS/#constructors","text":"","title":"Constructors"},{"location":"net-DNS/#create","text":"[Source] new val create() : DNS val^","title":"create"},{"location":"net-DNS/#returns","text":"DNS val^","title":"Returns"},{"location":"net-DNS/#public-functions","text":"","title":"Public Functions"},{"location":"net-DNS/#apply","text":"[Source] Gets all IPv4 and IPv6 addresses for a host and service. fun box apply( auth: (AmbientAuth val | NetAuth val | DNSAuth val), host: String val, service: String val) : Array[NetAddress val] iso^","title":"apply"},{"location":"net-DNS/#parameters","text":"auth: ( AmbientAuth val | NetAuth val | DNSAuth val) host: String val service: String val","title":"Parameters"},{"location":"net-DNS/#returns_1","text":"Array [ NetAddress val] iso^","title":"Returns"},{"location":"net-DNS/#ip4","text":"[Source] Gets all IPv4 addresses for a host and service. fun box ip4( auth: (AmbientAuth val | NetAuth val | DNSAuth val), host: String val, service: String val) : Array[NetAddress val] iso^","title":"ip4"},{"location":"net-DNS/#parameters_1","text":"auth: ( AmbientAuth val | NetAuth val | DNSAuth val) host: String val service: String val","title":"Parameters"},{"location":"net-DNS/#returns_2","text":"Array [ NetAddress val] iso^","title":"Returns"},{"location":"net-DNS/#ip6","text":"[Source] Gets all IPv6 addresses for a host and service. fun box ip6( auth: (AmbientAuth val | NetAuth val | DNSAuth val), host: String val, service: String val) : Array[NetAddress val] iso^","title":"ip6"},{"location":"net-DNS/#parameters_2","text":"auth: ( AmbientAuth val | NetAuth val | DNSAuth val) host: String val service: String val","title":"Parameters"},{"location":"net-DNS/#returns_3","text":"Array [ NetAddress val] iso^","title":"Returns"},{"location":"net-DNS/#broadcast_ip4","text":"[Source] Link-local IP4 broadcast address. fun box broadcast_ip4( auth: (AmbientAuth val | NetAuth val | DNSAuth val), service: String val) : Array[NetAddress val] iso^","title":"broadcast_ip4"},{"location":"net-DNS/#parameters_3","text":"auth: ( AmbientAuth val | NetAuth val | DNSAuth val) service: String val","title":"Parameters"},{"location":"net-DNS/#returns_4","text":"Array [ NetAddress val] iso^","title":"Returns"},{"location":"net-DNS/#broadcast_ip6","text":"[Source] Link-local IP6 broadcast address. fun box broadcast_ip6( auth: (AmbientAuth val | NetAuth val | DNSAuth val), service: String val) : Array[NetAddress val] iso^","title":"broadcast_ip6"},{"location":"net-DNS/#parameters_4","text":"auth: ( AmbientAuth val | NetAuth val | DNSAuth val) service: String val","title":"Parameters"},{"location":"net-DNS/#returns_5","text":"Array [ NetAddress val] iso^","title":"Returns"},{"location":"net-DNS/#is_ip4","text":"[Source] Returns true if the host is a literal IPv4 address. fun box is_ip4( host: String val) : Bool val","title":"is_ip4"},{"location":"net-DNS/#parameters_5","text":"host: String val","title":"Parameters"},{"location":"net-DNS/#returns_6","text":"Bool val","title":"Returns"},{"location":"net-DNS/#is_ip6","text":"[Source] Returns true if the host is a literal IPv6 address. fun box is_ip6( host: String val) : Bool val","title":"is_ip6"},{"location":"net-DNS/#parameters_6","text":"host: String val","title":"Parameters"},{"location":"net-DNS/#returns_7","text":"Bool val","title":"Returns"},{"location":"net-DNS/#eq","text":"[Source] fun box eq( that: DNS val) : Bool val","title":"eq"},{"location":"net-DNS/#parameters_7","text":"that: DNS val","title":"Parameters"},{"location":"net-DNS/#returns_8","text":"Bool val","title":"Returns"},{"location":"net-DNS/#ne","text":"[Source] fun box ne( that: DNS val) : Bool val","title":"ne"},{"location":"net-DNS/#parameters_8","text":"that: DNS val","title":"Parameters"},{"location":"net-DNS/#returns_9","text":"Bool val","title":"Returns"},{"location":"net-DNS/#private-functions","text":"","title":"Private Functions"},{"location":"net-DNS/#_resolve","text":"[Source] Turns an addrinfo pointer into an array of addresses. fun box _resolve( auth: (AmbientAuth val | NetAuth val | DNSAuth val), family: U32 val, host: String val, service: String val) : Array[NetAddress val] iso^","title":"_resolve"},{"location":"net-DNS/#parameters_9","text":"auth: ( AmbientAuth val | NetAuth val | DNSAuth val) family: U32 val host: String val service: String val","title":"Parameters"},{"location":"net-DNS/#returns_10","text":"Array [ NetAddress val] iso^","title":"Returns"},{"location":"net-DNSAuth/","text":"DNSAuth [Source] primitive val DNSAuth Constructors create [Source] new val create( from: (AmbientAuth val | NetAuth val)) : DNSAuth val^ Parameters from: ( AmbientAuth val | NetAuth val) Returns DNSAuth val^ Public Functions eq [Source] fun box eq( that: DNSAuth val) : Bool val Parameters that: DNSAuth val Returns Bool val ne [Source] fun box ne( that: DNSAuth val) : Bool val Parameters that: DNSAuth val Returns Bool val","title":"primitive DNSAuth"},{"location":"net-DNSAuth/#dnsauth","text":"[Source] primitive val DNSAuth","title":"DNSAuth"},{"location":"net-DNSAuth/#constructors","text":"","title":"Constructors"},{"location":"net-DNSAuth/#create","text":"[Source] new val create( from: (AmbientAuth val | NetAuth val)) : DNSAuth val^","title":"create"},{"location":"net-DNSAuth/#parameters","text":"from: ( AmbientAuth val | NetAuth val)","title":"Parameters"},{"location":"net-DNSAuth/#returns","text":"DNSAuth val^","title":"Returns"},{"location":"net-DNSAuth/#public-functions","text":"","title":"Public Functions"},{"location":"net-DNSAuth/#eq","text":"[Source] fun box eq( that: DNSAuth val) : Bool val","title":"eq"},{"location":"net-DNSAuth/#parameters_1","text":"that: DNSAuth val","title":"Parameters"},{"location":"net-DNSAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-DNSAuth/#ne","text":"[Source] fun box ne( that: DNSAuth val) : Bool val","title":"ne"},{"location":"net-DNSAuth/#parameters_2","text":"that: DNSAuth val","title":"Parameters"},{"location":"net-DNSAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-DNSLookupAuth/","text":"DNSLookupAuth [Source] type DNSLookupAuth is (AmbientAuth val | NetAuth val | DNSAuth val) Type Alias For ( AmbientAuth val | NetAuth val | DNSAuth val)","title":"type DNSLookupAuth"},{"location":"net-DNSLookupAuth/#dnslookupauth","text":"[Source] type DNSLookupAuth is (AmbientAuth val | NetAuth val | DNSAuth val)","title":"DNSLookupAuth"},{"location":"net-DNSLookupAuth/#type-alias-for","text":"( AmbientAuth val | NetAuth val | DNSAuth val)","title":"Type Alias For"},{"location":"net-NetAddress/","text":"NetAddress [Source] Represents an IPv4 or IPv6 address. The family field indicates the address type. The addr field is either the IPv4 address or the IPv6 flow info. The addr1-4 fields are the IPv6 address, or invalid for an IPv4 address. The scope field is the IPv6 scope, or invalid for an IPv4 address. This class is modelled after the C data structure for holding socket addresses for both IPv4 and IPv6 sockaddr_storage . Use the name method to obtain address/hostname and port/service as Strings. class val NetAddress is Equatable[NetAddress val] ref Implements Equatable [ NetAddress val] ref Constructors create [Source] new iso create() : NetAddress iso^ Returns NetAddress iso^ Public Functions ip4 [Source] Returns true for an IPv4 address. fun box ip4() : Bool val Returns Bool val ip6 [Source] Returns true for an IPv6 address. fun box ip6() : Bool val Returns Bool val name [Source] Returns the host and service name. If reversedns is an instance of DNSLookupAuth a DNS lookup will be executed and the hostname for this address is returned as first element of the result tuple. If no hostname could be found, an error is raised. If reversedns is None the plain IP address is given and no DNS lookup is executed. If servicename is false the numeric port is returned as second element of the result tuple. If it is true the port is translated into its corresponding servicename (e.g. port 80 is returned as \"http\" ). Internally this method uses the POSIX C function getnameinfo . fun box name( reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | None val) = seq, servicename: Bool val = seq) : (String val , String val) ? Parameters reversedns: ( AmbientAuth val | NetAuth val | DNSAuth val | None val) = seq servicename: Bool val = seq Returns ( String val , String val) ? eq [Source] fun box eq( that: NetAddress box) : Bool val Parameters that: NetAddress box Returns Bool val host_eq [Source] fun box host_eq( that: NetAddress box) : Bool val Parameters that: NetAddress box Returns Bool val length [Source] For platforms (OSX/FreeBSD) with length field as part of its struct sockaddr definition, returns the length . Else (Linux/Windows) returns the size of sockaddr_in or sockaddr_in6 . fun box length() : U8 val Returns U8 val family [Source] Returns the family . fun box family() : U8 val Returns U8 val port [Source] Returns port number in host byte order. fun box port() : U16 val Returns U16 val scope [Source] Returns IPv6 scope identifier: Unicast, Anycast, Multicast and unassigned scopes. fun box scope() : U32 val Returns U32 val ipv4_addr [Source] Returns IPV4 address ( _addr field in the class) if ip4() is True . If ip4() is False then the contents are invalid. fun box ipv4_addr() : U32 val Returns U32 val ipv6_addr [Source] Returns IPV6 address as the 4-tuple (say a ). a._1 = _addr1 // Bits 0-32 of the IPv6 address in host byte order. a._2 = _addr2 // Bits 33-64 of the IPv6 address in host byte order. a._3 = _addr3 // Bits 65-96 of the IPv6 address in host byte order. `a._4 = _addr4 // Bits 97-128 of the IPv6 address in host byte order. The contents of the 4-tuple returned are valid only if ip6() is True . fun box ipv6_addr() : (U32 val , U32 val , U32 val , U32 val) Returns ( U32 val , U32 val , U32 val , U32 val) ne [Source] fun box ne( that: NetAddress val) : Bool val Parameters that: NetAddress val Returns Bool val","title":"class NetAddress"},{"location":"net-NetAddress/#netaddress","text":"[Source] Represents an IPv4 or IPv6 address. The family field indicates the address type. The addr field is either the IPv4 address or the IPv6 flow info. The addr1-4 fields are the IPv6 address, or invalid for an IPv4 address. The scope field is the IPv6 scope, or invalid for an IPv4 address. This class is modelled after the C data structure for holding socket addresses for both IPv4 and IPv6 sockaddr_storage . Use the name method to obtain address/hostname and port/service as Strings. class val NetAddress is Equatable[NetAddress val] ref","title":"NetAddress"},{"location":"net-NetAddress/#implements","text":"Equatable [ NetAddress val] ref","title":"Implements"},{"location":"net-NetAddress/#constructors","text":"","title":"Constructors"},{"location":"net-NetAddress/#create","text":"[Source] new iso create() : NetAddress iso^","title":"create"},{"location":"net-NetAddress/#returns","text":"NetAddress iso^","title":"Returns"},{"location":"net-NetAddress/#public-functions","text":"","title":"Public Functions"},{"location":"net-NetAddress/#ip4","text":"[Source] Returns true for an IPv4 address. fun box ip4() : Bool val","title":"ip4"},{"location":"net-NetAddress/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-NetAddress/#ip6","text":"[Source] Returns true for an IPv6 address. fun box ip6() : Bool val","title":"ip6"},{"location":"net-NetAddress/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-NetAddress/#name","text":"[Source] Returns the host and service name. If reversedns is an instance of DNSLookupAuth a DNS lookup will be executed and the hostname for this address is returned as first element of the result tuple. If no hostname could be found, an error is raised. If reversedns is None the plain IP address is given and no DNS lookup is executed. If servicename is false the numeric port is returned as second element of the result tuple. If it is true the port is translated into its corresponding servicename (e.g. port 80 is returned as \"http\" ). Internally this method uses the POSIX C function getnameinfo . fun box name( reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | None val) = seq, servicename: Bool val = seq) : (String val , String val) ?","title":"name"},{"location":"net-NetAddress/#parameters","text":"reversedns: ( AmbientAuth val | NetAuth val | DNSAuth val | None val) = seq servicename: Bool val = seq","title":"Parameters"},{"location":"net-NetAddress/#returns_3","text":"( String val , String val) ?","title":"Returns"},{"location":"net-NetAddress/#eq","text":"[Source] fun box eq( that: NetAddress box) : Bool val","title":"eq"},{"location":"net-NetAddress/#parameters_1","text":"that: NetAddress box","title":"Parameters"},{"location":"net-NetAddress/#returns_4","text":"Bool val","title":"Returns"},{"location":"net-NetAddress/#host_eq","text":"[Source] fun box host_eq( that: NetAddress box) : Bool val","title":"host_eq"},{"location":"net-NetAddress/#parameters_2","text":"that: NetAddress box","title":"Parameters"},{"location":"net-NetAddress/#returns_5","text":"Bool val","title":"Returns"},{"location":"net-NetAddress/#length","text":"[Source] For platforms (OSX/FreeBSD) with length field as part of its struct sockaddr definition, returns the length . Else (Linux/Windows) returns the size of sockaddr_in or sockaddr_in6 . fun box length() : U8 val","title":"length"},{"location":"net-NetAddress/#returns_6","text":"U8 val","title":"Returns"},{"location":"net-NetAddress/#family","text":"[Source] Returns the family . fun box family() : U8 val","title":"family"},{"location":"net-NetAddress/#returns_7","text":"U8 val","title":"Returns"},{"location":"net-NetAddress/#port","text":"[Source] Returns port number in host byte order. fun box port() : U16 val","title":"port"},{"location":"net-NetAddress/#returns_8","text":"U16 val","title":"Returns"},{"location":"net-NetAddress/#scope","text":"[Source] Returns IPv6 scope identifier: Unicast, Anycast, Multicast and unassigned scopes. fun box scope() : U32 val","title":"scope"},{"location":"net-NetAddress/#returns_9","text":"U32 val","title":"Returns"},{"location":"net-NetAddress/#ipv4_addr","text":"[Source] Returns IPV4 address ( _addr field in the class) if ip4() is True . If ip4() is False then the contents are invalid. fun box ipv4_addr() : U32 val","title":"ipv4_addr"},{"location":"net-NetAddress/#returns_10","text":"U32 val","title":"Returns"},{"location":"net-NetAddress/#ipv6_addr","text":"[Source] Returns IPV6 address as the 4-tuple (say a ). a._1 = _addr1 // Bits 0-32 of the IPv6 address in host byte order. a._2 = _addr2 // Bits 33-64 of the IPv6 address in host byte order. a._3 = _addr3 // Bits 65-96 of the IPv6 address in host byte order. `a._4 = _addr4 // Bits 97-128 of the IPv6 address in host byte order. The contents of the 4-tuple returned are valid only if ip6() is True . fun box ipv6_addr() : (U32 val , U32 val , U32 val , U32 val)","title":"ipv6_addr"},{"location":"net-NetAddress/#returns_11","text":"( U32 val , U32 val , U32 val , U32 val)","title":"Returns"},{"location":"net-NetAddress/#ne","text":"[Source] fun box ne( that: NetAddress val) : Bool val","title":"ne"},{"location":"net-NetAddress/#parameters_3","text":"that: NetAddress val","title":"Parameters"},{"location":"net-NetAddress/#returns_12","text":"Bool val","title":"Returns"},{"location":"net-NetAuth/","text":"NetAuth [Source] primitive val NetAuth Constructors create [Source] new val create( from: AmbientAuth val) : NetAuth val^ Parameters from: AmbientAuth val Returns NetAuth val^ Public Functions eq [Source] fun box eq( that: NetAuth val) : Bool val Parameters that: NetAuth val Returns Bool val ne [Source] fun box ne( that: NetAuth val) : Bool val Parameters that: NetAuth val Returns Bool val","title":"primitive NetAuth"},{"location":"net-NetAuth/#netauth","text":"[Source] primitive val NetAuth","title":"NetAuth"},{"location":"net-NetAuth/#constructors","text":"","title":"Constructors"},{"location":"net-NetAuth/#create","text":"[Source] new val create( from: AmbientAuth val) : NetAuth val^","title":"create"},{"location":"net-NetAuth/#parameters","text":"from: AmbientAuth val","title":"Parameters"},{"location":"net-NetAuth/#returns","text":"NetAuth val^","title":"Returns"},{"location":"net-NetAuth/#public-functions","text":"","title":"Public Functions"},{"location":"net-NetAuth/#eq","text":"[Source] fun box eq( that: NetAuth val) : Bool val","title":"eq"},{"location":"net-NetAuth/#parameters_1","text":"that: NetAuth val","title":"Parameters"},{"location":"net-NetAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-NetAuth/#ne","text":"[Source] fun box ne( that: NetAuth val) : Bool val","title":"ne"},{"location":"net-NetAuth/#parameters_2","text":"that: NetAuth val","title":"Parameters"},{"location":"net-NetAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-OSSockOpt/","text":"OSSockOpt [Source] Convenience functions to fetch the option level and option name constants (arguments #2 and #3) for the getsockopt(2) and setsockopt(2) operating system calls. The values of the option level and option name constants are typically C preprocessor macros, e.g., #define SOMETHING 42 . These macro names are upper case and may contain multiple consecutive underscore characters (though this is rare, for example, IP_NAT__XXX ). The function names in this primitive are derived by the C macro name and then: converted to lower case any double underscore ( __ ) is converted to a single underscore ( _ ). These constants are not stable between Pony releases. Values returned by this function may be held by long-lived variables by the calling process: values cannot change while the process runs. Programmers must not cache any of these values for purposes of sharing them for use by any other Pony program (for example, sharing via serialization deserialization or via direct shared memory). Many functions may return -1 , which means that the constant's value could not be determined at the Pony runtime library compile time. One cause may be that the option truly isn't available, for example, the option level constant IPPROTO_3PC is available on MacOS 10.x but not on Linux 4.4. Another cause may be the Pony runtime library's compilation did not include the correct header file(s) for the target OS platform. A third cause of error is due to the regular expression-based approach used to harvest desirable constants. It is not fool-proof. The regexp used is too broad and finds some macros that are not supposed to be used with getsockopt(2) and setsockopt(2) . Please consult your platform's documentation to verify the names of the option level and option name macros. The following code fragments are equivalent: set the socket receive buffer size for the file descriptor fd to 4455 . /* In C */ int option_value = 4455; setsockopt(fd, SOL_SOCKET, SO_RCVBUF, option_value, 4); /* In Pony */ var option: I32 = 4455; @pony_os_setsockopt[I32](fd, OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), addressof option, I32(4)) primitive val OSSockOpt Constructors create [Source] new val create() : OSSockOpt val^ Returns OSSockOpt val^ Public Functions ipproto_3pc [Source] fun box ipproto_3pc() : I32 val Returns I32 val ipproto_adfs [Source] fun box ipproto_adfs() : I32 val Returns I32 val ipproto_ah [Source] fun box ipproto_ah() : I32 val Returns I32 val ipproto_ahip [Source] fun box ipproto_ahip() : I32 val Returns I32 val ipproto_apes [Source] fun box ipproto_apes() : I32 val Returns I32 val ipproto_argus [Source] fun box ipproto_argus() : I32 val Returns I32 val ipproto_ax25 [Source] fun box ipproto_ax25() : I32 val Returns I32 val ipproto_beetph [Source] fun box ipproto_beetph() : I32 val Returns I32 val ipproto_bha [Source] fun box ipproto_bha() : I32 val Returns I32 val ipproto_blt [Source] fun box ipproto_blt() : I32 val Returns I32 val ipproto_brsatmon [Source] fun box ipproto_brsatmon() : I32 val Returns I32 val ipproto_carp [Source] fun box ipproto_carp() : I32 val Returns I32 val ipproto_cftp [Source] fun box ipproto_cftp() : I32 val Returns I32 val ipproto_chaos [Source] fun box ipproto_chaos() : I32 val Returns I32 val ipproto_cmtp [Source] fun box ipproto_cmtp() : I32 val Returns I32 val ipproto_comp [Source] fun box ipproto_comp() : I32 val Returns I32 val ipproto_cphb [Source] fun box ipproto_cphb() : I32 val Returns I32 val ipproto_cpnx [Source] fun box ipproto_cpnx() : I32 val Returns I32 val ipproto_dccp [Source] fun box ipproto_dccp() : I32 val Returns I32 val ipproto_ddp [Source] fun box ipproto_ddp() : I32 val Returns I32 val ipproto_dgp [Source] fun box ipproto_dgp() : I32 val Returns I32 val ipproto_divert [Source] fun box ipproto_divert() : I32 val Returns I32 val ipproto_done [Source] fun box ipproto_done() : I32 val Returns I32 val ipproto_dstopts [Source] fun box ipproto_dstopts() : I32 val Returns I32 val ipproto_egp [Source] fun box ipproto_egp() : I32 val Returns I32 val ipproto_emcon [Source] fun box ipproto_emcon() : I32 val Returns I32 val ipproto_encap [Source] fun box ipproto_encap() : I32 val Returns I32 val ipproto_eon [Source] fun box ipproto_eon() : I32 val Returns I32 val ipproto_esp [Source] fun box ipproto_esp() : I32 val Returns I32 val ipproto_etherip [Source] fun box ipproto_etherip() : I32 val Returns I32 val ipproto_fragment [Source] fun box ipproto_fragment() : I32 val Returns I32 val ipproto_ggp [Source] fun box ipproto_ggp() : I32 val Returns I32 val ipproto_gmtp [Source] fun box ipproto_gmtp() : I32 val Returns I32 val ipproto_gre [Source] fun box ipproto_gre() : I32 val Returns I32 val ipproto_hello [Source] fun box ipproto_hello() : I32 val Returns I32 val ipproto_hip [Source] fun box ipproto_hip() : I32 val Returns I32 val ipproto_hmp [Source] fun box ipproto_hmp() : I32 val Returns I32 val ipproto_hopopts [Source] fun box ipproto_hopopts() : I32 val Returns I32 val ipproto_icmp [Source] fun box ipproto_icmp() : I32 val Returns I32 val ipproto_icmpv6 [Source] fun box ipproto_icmpv6() : I32 val Returns I32 val ipproto_idp [Source] fun box ipproto_idp() : I32 val Returns I32 val ipproto_idpr [Source] fun box ipproto_idpr() : I32 val Returns I32 val ipproto_idrp [Source] fun box ipproto_idrp() : I32 val Returns I32 val ipproto_igmp [Source] fun box ipproto_igmp() : I32 val Returns I32 val ipproto_igp [Source] fun box ipproto_igp() : I32 val Returns I32 val ipproto_igrp [Source] fun box ipproto_igrp() : I32 val Returns I32 val ipproto_il [Source] fun box ipproto_il() : I32 val Returns I32 val ipproto_inlsp [Source] fun box ipproto_inlsp() : I32 val Returns I32 val ipproto_inp [Source] fun box ipproto_inp() : I32 val Returns I32 val ipproto_ip [Source] fun box ipproto_ip() : I32 val Returns I32 val ipproto_ipcomp [Source] fun box ipproto_ipcomp() : I32 val Returns I32 val ipproto_ipcv [Source] fun box ipproto_ipcv() : I32 val Returns I32 val ipproto_ipeip [Source] fun box ipproto_ipeip() : I32 val Returns I32 val ipproto_ipip [Source] fun box ipproto_ipip() : I32 val Returns I32 val ipproto_ippc [Source] fun box ipproto_ippc() : I32 val Returns I32 val ipproto_ipv4 [Source] fun box ipproto_ipv4() : I32 val Returns I32 val ipproto_ipv6 [Source] fun box ipproto_ipv6() : I32 val Returns I32 val ipproto_irtp [Source] fun box ipproto_irtp() : I32 val Returns I32 val ipproto_kryptolan [Source] fun box ipproto_kryptolan() : I32 val Returns I32 val ipproto_larp [Source] fun box ipproto_larp() : I32 val Returns I32 val ipproto_leaf1 [Source] fun box ipproto_leaf1() : I32 val Returns I32 val ipproto_leaf2 [Source] fun box ipproto_leaf2() : I32 val Returns I32 val ipproto_max [Source] fun box ipproto_max() : I32 val Returns I32 val ipproto_maxid [Source] fun box ipproto_maxid() : I32 val Returns I32 val ipproto_meas [Source] fun box ipproto_meas() : I32 val Returns I32 val ipproto_mh [Source] fun box ipproto_mh() : I32 val Returns I32 val ipproto_mhrp [Source] fun box ipproto_mhrp() : I32 val Returns I32 val ipproto_micp [Source] fun box ipproto_micp() : I32 val Returns I32 val ipproto_mobile [Source] fun box ipproto_mobile() : I32 val Returns I32 val ipproto_mpls [Source] fun box ipproto_mpls() : I32 val Returns I32 val ipproto_mtp [Source] fun box ipproto_mtp() : I32 val Returns I32 val ipproto_mux [Source] fun box ipproto_mux() : I32 val Returns I32 val ipproto_nd [Source] fun box ipproto_nd() : I32 val Returns I32 val ipproto_nhrp [Source] fun box ipproto_nhrp() : I32 val Returns I32 val ipproto_none [Source] fun box ipproto_none() : I32 val Returns I32 val ipproto_nsp [Source] fun box ipproto_nsp() : I32 val Returns I32 val ipproto_nvpii [Source] fun box ipproto_nvpii() : I32 val Returns I32 val ipproto_old_divert [Source] fun box ipproto_old_divert() : I32 val Returns I32 val ipproto_ospfigp [Source] fun box ipproto_ospfigp() : I32 val Returns I32 val ipproto_pfsync [Source] fun box ipproto_pfsync() : I32 val Returns I32 val ipproto_pgm [Source] fun box ipproto_pgm() : I32 val Returns I32 val ipproto_pigp [Source] fun box ipproto_pigp() : I32 val Returns I32 val ipproto_pim [Source] fun box ipproto_pim() : I32 val Returns I32 val ipproto_prm [Source] fun box ipproto_prm() : I32 val Returns I32 val ipproto_pup [Source] fun box ipproto_pup() : I32 val Returns I32 val ipproto_pvp [Source] fun box ipproto_pvp() : I32 val Returns I32 val ipproto_raw [Source] fun box ipproto_raw() : I32 val Returns I32 val ipproto_rccmon [Source] fun box ipproto_rccmon() : I32 val Returns I32 val ipproto_rdp [Source] fun box ipproto_rdp() : I32 val Returns I32 val ipproto_reserved_253 [Source] fun box ipproto_reserved_253() : I32 val Returns I32 val ipproto_reserved_254 [Source] fun box ipproto_reserved_254() : I32 val Returns I32 val ipproto_routing [Source] fun box ipproto_routing() : I32 val Returns I32 val ipproto_rsvp [Source] fun box ipproto_rsvp() : I32 val Returns I32 val ipproto_rvd [Source] fun box ipproto_rvd() : I32 val Returns I32 val ipproto_satexpak [Source] fun box ipproto_satexpak() : I32 val Returns I32 val ipproto_satmon [Source] fun box ipproto_satmon() : I32 val Returns I32 val ipproto_sccsp [Source] fun box ipproto_sccsp() : I32 val Returns I32 val ipproto_sctp [Source] fun box ipproto_sctp() : I32 val Returns I32 val ipproto_sdrp [Source] fun box ipproto_sdrp() : I32 val Returns I32 val ipproto_send [Source] fun box ipproto_send() : I32 val Returns I32 val ipproto_sep [Source] fun box ipproto_sep() : I32 val Returns I32 val ipproto_shim6 [Source] fun box ipproto_shim6() : I32 val Returns I32 val ipproto_skip [Source] fun box ipproto_skip() : I32 val Returns I32 val ipproto_spacer [Source] fun box ipproto_spacer() : I32 val Returns I32 val ipproto_srpc [Source] fun box ipproto_srpc() : I32 val Returns I32 val ipproto_st [Source] fun box ipproto_st() : I32 val Returns I32 val ipproto_svmtp [Source] fun box ipproto_svmtp() : I32 val Returns I32 val ipproto_swipe [Source] fun box ipproto_swipe() : I32 val Returns I32 val ipproto_tcf [Source] fun box ipproto_tcf() : I32 val Returns I32 val ipproto_tcp [Source] fun box ipproto_tcp() : I32 val Returns I32 val ipproto_tlsp [Source] fun box ipproto_tlsp() : I32 val Returns I32 val ipproto_tp [Source] fun box ipproto_tp() : I32 val Returns I32 val ipproto_tpxx [Source] fun box ipproto_tpxx() : I32 val Returns I32 val ipproto_trunk1 [Source] fun box ipproto_trunk1() : I32 val Returns I32 val ipproto_trunk2 [Source] fun box ipproto_trunk2() : I32 val Returns I32 val ipproto_ttp [Source] fun box ipproto_ttp() : I32 val Returns I32 val ipproto_udp [Source] fun box ipproto_udp() : I32 val Returns I32 val ipproto_udplite [Source] fun box ipproto_udplite() : I32 val Returns I32 val ipproto_vines [Source] fun box ipproto_vines() : I32 val Returns I32 val ipproto_visa [Source] fun box ipproto_visa() : I32 val Returns I32 val ipproto_vmtp [Source] fun box ipproto_vmtp() : I32 val Returns I32 val ipproto_wbexpak [Source] fun box ipproto_wbexpak() : I32 val Returns I32 val ipproto_wbmon [Source] fun box ipproto_wbmon() : I32 val Returns I32 val ipproto_wsn [Source] fun box ipproto_wsn() : I32 val Returns I32 val ipproto_xnet [Source] fun box ipproto_xnet() : I32 val Returns I32 val ipproto_xtp [Source] fun box ipproto_xtp() : I32 val Returns I32 val sol_atalk [Source] fun box sol_atalk() : I32 val Returns I32 val sol_ax25 [Source] fun box sol_ax25() : I32 val Returns I32 val sol_hci_raw [Source] fun box sol_hci_raw() : I32 val Returns I32 val sol_ipx [Source] fun box sol_ipx() : I32 val Returns I32 val sol_l2cap [Source] fun box sol_l2cap() : I32 val Returns I32 val sol_local [Source] fun box sol_local() : I32 val Returns I32 val sol_ndrvproto [Source] fun box sol_ndrvproto() : I32 val Returns I32 val sol_netrom [Source] fun box sol_netrom() : I32 val Returns I32 val sol_rds [Source] fun box sol_rds() : I32 val Returns I32 val sol_rfcomm [Source] fun box sol_rfcomm() : I32 val Returns I32 val sol_rose [Source] fun box sol_rose() : I32 val Returns I32 val sol_sco [Source] fun box sol_sco() : I32 val Returns I32 val sol_socket [Source] fun box sol_socket() : I32 val Returns I32 val sol_tipc [Source] fun box sol_tipc() : I32 val Returns I32 val sol_udp [Source] fun box sol_udp() : I32 val Returns I32 val af_coip [Source] fun box af_coip() : I32 val Returns I32 val af_inet [Source] fun box af_inet() : I32 val Returns I32 val af_inet6 [Source] fun box af_inet6() : I32 val Returns I32 val bluetooth_proto_sco [Source] fun box bluetooth_proto_sco() : I32 val Returns I32 val dccp_nr_pkt_types [Source] fun box dccp_nr_pkt_types() : I32 val Returns I32 val dccp_service_list_max_len [Source] fun box dccp_service_list_max_len() : I32 val Returns I32 val dccp_single_opt_maxlen [Source] fun box dccp_single_opt_maxlen() : I32 val Returns I32 val dccp_sockopt_available_ccids [Source] fun box dccp_sockopt_available_ccids() : I32 val Returns I32 val dccp_sockopt_ccid [Source] fun box dccp_sockopt_ccid() : I32 val Returns I32 val dccp_sockopt_ccid_rx_info [Source] fun box dccp_sockopt_ccid_rx_info() : I32 val Returns I32 val dccp_sockopt_ccid_tx_info [Source] fun box dccp_sockopt_ccid_tx_info() : I32 val Returns I32 val dccp_sockopt_change_l [Source] fun box dccp_sockopt_change_l() : I32 val Returns I32 val dccp_sockopt_change_r [Source] fun box dccp_sockopt_change_r() : I32 val Returns I32 val dccp_sockopt_get_cur_mps [Source] fun box dccp_sockopt_get_cur_mps() : I32 val Returns I32 val dccp_sockopt_packet_size [Source] fun box dccp_sockopt_packet_size() : I32 val Returns I32 val dccp_sockopt_qpolicy_id [Source] fun box dccp_sockopt_qpolicy_id() : I32 val Returns I32 val dccp_sockopt_qpolicy_txqlen [Source] fun box dccp_sockopt_qpolicy_txqlen() : I32 val Returns I32 val dccp_sockopt_recv_cscov [Source] fun box dccp_sockopt_recv_cscov() : I32 val Returns I32 val dccp_sockopt_rx_ccid [Source] fun box dccp_sockopt_rx_ccid() : I32 val Returns I32 val dccp_sockopt_send_cscov [Source] fun box dccp_sockopt_send_cscov() : I32 val Returns I32 val dccp_sockopt_server_timewait [Source] fun box dccp_sockopt_server_timewait() : I32 val Returns I32 val dccp_sockopt_service [Source] fun box dccp_sockopt_service() : I32 val Returns I32 val dccp_sockopt_tx_ccid [Source] fun box dccp_sockopt_tx_ccid() : I32 val Returns I32 val dso_acceptmode [Source] fun box dso_acceptmode() : I32 val Returns I32 val dso_conaccept [Source] fun box dso_conaccept() : I32 val Returns I32 val dso_conaccess [Source] fun box dso_conaccess() : I32 val Returns I32 val dso_condata [Source] fun box dso_condata() : I32 val Returns I32 val dso_conreject [Source] fun box dso_conreject() : I32 val Returns I32 val dso_cork [Source] fun box dso_cork() : I32 val Returns I32 val dso_disdata [Source] fun box dso_disdata() : I32 val Returns I32 val dso_info [Source] fun box dso_info() : I32 val Returns I32 val dso_linkinfo [Source] fun box dso_linkinfo() : I32 val Returns I32 val dso_max [Source] fun box dso_max() : I32 val Returns I32 val dso_maxwindow [Source] fun box dso_maxwindow() : I32 val Returns I32 val dso_nodelay [Source] fun box dso_nodelay() : I32 val Returns I32 val dso_seqpacket [Source] fun box dso_seqpacket() : I32 val Returns I32 val dso_services [Source] fun box dso_services() : I32 val Returns I32 val dso_stream [Source] fun box dso_stream() : I32 val Returns I32 val icmp_address [Source] fun box icmp_address() : I32 val Returns I32 val icmp_addressreply [Source] fun box icmp_addressreply() : I32 val Returns I32 val icmp_dest_unreach [Source] fun box icmp_dest_unreach() : I32 val Returns I32 val icmp_echo [Source] fun box icmp_echo() : I32 val Returns I32 val icmp_echoreply [Source] fun box icmp_echoreply() : I32 val Returns I32 val icmp_exc_fragtime [Source] fun box icmp_exc_fragtime() : I32 val Returns I32 val icmp_exc_ttl [Source] fun box icmp_exc_ttl() : I32 val Returns I32 val icmp_filter [Source] fun box icmp_filter() : I32 val Returns I32 val icmp_frag_needed [Source] fun box icmp_frag_needed() : I32 val Returns I32 val icmp_host_ano [Source] fun box icmp_host_ano() : I32 val Returns I32 val icmp_host_isolated [Source] fun box icmp_host_isolated() : I32 val Returns I32 val icmp_host_unknown [Source] fun box icmp_host_unknown() : I32 val Returns I32 val icmp_host_unreach [Source] fun box icmp_host_unreach() : I32 val Returns I32 val icmp_host_unr_tos [Source] fun box icmp_host_unr_tos() : I32 val Returns I32 val icmp_info_reply [Source] fun box icmp_info_reply() : I32 val Returns I32 val icmp_info_request [Source] fun box icmp_info_request() : I32 val Returns I32 val icmp_net_ano [Source] fun box icmp_net_ano() : I32 val Returns I32 val icmp_net_unknown [Source] fun box icmp_net_unknown() : I32 val Returns I32 val icmp_net_unreach [Source] fun box icmp_net_unreach() : I32 val Returns I32 val icmp_net_unr_tos [Source] fun box icmp_net_unr_tos() : I32 val Returns I32 val icmp_parameterprob [Source] fun box icmp_parameterprob() : I32 val Returns I32 val icmp_pkt_filtered [Source] fun box icmp_pkt_filtered() : I32 val Returns I32 val icmp_port_unreach [Source] fun box icmp_port_unreach() : I32 val Returns I32 val icmp_prec_cutoff [Source] fun box icmp_prec_cutoff() : I32 val Returns I32 val icmp_prec_violation [Source] fun box icmp_prec_violation() : I32 val Returns I32 val icmp_prot_unreach [Source] fun box icmp_prot_unreach() : I32 val Returns I32 val icmp_redirect [Source] fun box icmp_redirect() : I32 val Returns I32 val icmp_redir_host [Source] fun box icmp_redir_host() : I32 val Returns I32 val icmp_redir_hosttos [Source] fun box icmp_redir_hosttos() : I32 val Returns I32 val icmp_redir_net [Source] fun box icmp_redir_net() : I32 val Returns I32 val icmp_redir_nettos [Source] fun box icmp_redir_nettos() : I32 val Returns I32 val icmp_source_quench [Source] fun box icmp_source_quench() : I32 val Returns I32 val icmp_sr_failed [Source] fun box icmp_sr_failed() : I32 val Returns I32 val icmp_timestamp [Source] fun box icmp_timestamp() : I32 val Returns I32 val icmp_timestampreply [Source] fun box icmp_timestampreply() : I32 val Returns I32 val icmp_time_exceeded [Source] fun box icmp_time_exceeded() : I32 val Returns I32 val ipctl_acceptsourceroute [Source] fun box ipctl_acceptsourceroute() : I32 val Returns I32 val ipctl_defmtu [Source] fun box ipctl_defmtu() : I32 val Returns I32 val ipctl_defttl [Source] fun box ipctl_defttl() : I32 val Returns I32 val ipctl_directedbroadcast [Source] fun box ipctl_directedbroadcast() : I32 val Returns I32 val ipctl_fastforwarding [Source] fun box ipctl_fastforwarding() : I32 val Returns I32 val ipctl_forwarding [Source] fun box ipctl_forwarding() : I32 val Returns I32 val ipctl_gif_ttl [Source] fun box ipctl_gif_ttl() : I32 val Returns I32 val ipctl_intrdqdrops [Source] fun box ipctl_intrdqdrops() : I32 val Returns I32 val ipctl_intrdqmaxlen [Source] fun box ipctl_intrdqmaxlen() : I32 val Returns I32 val ipctl_intrqdrops [Source] fun box ipctl_intrqdrops() : I32 val Returns I32 val ipctl_intrqmaxlen [Source] fun box ipctl_intrqmaxlen() : I32 val Returns I32 val ipctl_keepfaith [Source] fun box ipctl_keepfaith() : I32 val Returns I32 val ipctl_maxid [Source] fun box ipctl_maxid() : I32 val Returns I32 val ipctl_rtexpire [Source] fun box ipctl_rtexpire() : I32 val Returns I32 val ipctl_rtmaxcache [Source] fun box ipctl_rtmaxcache() : I32 val Returns I32 val ipctl_rtminexpire [Source] fun box ipctl_rtminexpire() : I32 val Returns I32 val ipctl_sendredirects [Source] fun box ipctl_sendredirects() : I32 val Returns I32 val ipctl_sourceroute [Source] fun box ipctl_sourceroute() : I32 val Returns I32 val ipctl_stats [Source] fun box ipctl_stats() : I32 val Returns I32 val ipport_ephemeralfirst [Source] fun box ipport_ephemeralfirst() : I32 val Returns I32 val ipport_ephemerallast [Source] fun box ipport_ephemerallast() : I32 val Returns I32 val ipport_hifirstauto [Source] fun box ipport_hifirstauto() : I32 val Returns I32 val ipport_hilastauto [Source] fun box ipport_hilastauto() : I32 val Returns I32 val ipport_max [Source] fun box ipport_max() : I32 val Returns I32 val ipport_reserved [Source] fun box ipport_reserved() : I32 val Returns I32 val ipport_reservedstart [Source] fun box ipport_reservedstart() : I32 val Returns I32 val ipport_userreserved [Source] fun box ipport_userreserved() : I32 val Returns I32 val ipv6_2292dstopts [Source] fun box ipv6_2292dstopts() : I32 val Returns I32 val ipv6_2292hoplimit [Source] fun box ipv6_2292hoplimit() : I32 val Returns I32 val ipv6_2292hopopts [Source] fun box ipv6_2292hopopts() : I32 val Returns I32 val ipv6_2292pktinfo [Source] fun box ipv6_2292pktinfo() : I32 val Returns I32 val ipv6_2292pktoptions [Source] fun box ipv6_2292pktoptions() : I32 val Returns I32 val ipv6_2292rthdr [Source] fun box ipv6_2292rthdr() : I32 val Returns I32 val ipv6_addrform [Source] fun box ipv6_addrform() : I32 val Returns I32 val ipv6_addr_preferences [Source] fun box ipv6_addr_preferences() : I32 val Returns I32 val ipv6_add_membership [Source] fun box ipv6_add_membership() : I32 val Returns I32 val ipv6_authhdr [Source] fun box ipv6_authhdr() : I32 val Returns I32 val ipv6_autoflowlabel [Source] fun box ipv6_autoflowlabel() : I32 val Returns I32 val ipv6_checksum [Source] fun box ipv6_checksum() : I32 val Returns I32 val ipv6_dontfrag [Source] fun box ipv6_dontfrag() : I32 val Returns I32 val ipv6_drop_membership [Source] fun box ipv6_drop_membership() : I32 val Returns I32 val ipv6_dstopts [Source] fun box ipv6_dstopts() : I32 val Returns I32 val ipv6_flowinfo [Source] fun box ipv6_flowinfo() : I32 val Returns I32 val ipv6_flowinfo_flowlabel [Source] fun box ipv6_flowinfo_flowlabel() : I32 val Returns I32 val ipv6_flowinfo_priority [Source] fun box ipv6_flowinfo_priority() : I32 val Returns I32 val ipv6_flowinfo_send [Source] fun box ipv6_flowinfo_send() : I32 val Returns I32 val ipv6_flowlabel_mgr [Source] fun box ipv6_flowlabel_mgr() : I32 val Returns I32 val ipv6_fl_a_get [Source] fun box ipv6_fl_a_get() : I32 val Returns I32 val ipv6_fl_a_put [Source] fun box ipv6_fl_a_put() : I32 val Returns I32 val ipv6_fl_a_renew [Source] fun box ipv6_fl_a_renew() : I32 val Returns I32 val ipv6_fl_f_create [Source] fun box ipv6_fl_f_create() : I32 val Returns I32 val ipv6_fl_f_excl [Source] fun box ipv6_fl_f_excl() : I32 val Returns I32 val ipv6_fl_f_reflect [Source] fun box ipv6_fl_f_reflect() : I32 val Returns I32 val ipv6_fl_f_remote [Source] fun box ipv6_fl_f_remote() : I32 val Returns I32 val ipv6_fl_s_any [Source] fun box ipv6_fl_s_any() : I32 val Returns I32 val ipv6_fl_s_excl [Source] fun box ipv6_fl_s_excl() : I32 val Returns I32 val ipv6_fl_s_none [Source] fun box ipv6_fl_s_none() : I32 val Returns I32 val ipv6_fl_s_process [Source] fun box ipv6_fl_s_process() : I32 val Returns I32 val ipv6_fl_s_user [Source] fun box ipv6_fl_s_user() : I32 val Returns I32 val ipv6_hoplimit [Source] fun box ipv6_hoplimit() : I32 val Returns I32 val ipv6_hopopts [Source] fun box ipv6_hopopts() : I32 val Returns I32 val ipv6_ipsec_policy [Source] fun box ipv6_ipsec_policy() : I32 val Returns I32 val ipv6_join_anycast [Source] fun box ipv6_join_anycast() : I32 val Returns I32 val ipv6_leave_anycast [Source] fun box ipv6_leave_anycast() : I32 val Returns I32 val ipv6_minhopcount [Source] fun box ipv6_minhopcount() : I32 val Returns I32 val ipv6_mtu [Source] fun box ipv6_mtu() : I32 val Returns I32 val ipv6_mtu_discover [Source] fun box ipv6_mtu_discover() : I32 val Returns I32 val ipv6_multicast_hops [Source] fun box ipv6_multicast_hops() : I32 val Returns I32 val ipv6_multicast_if [Source] fun box ipv6_multicast_if() : I32 val Returns I32 val ipv6_multicast_loop [Source] fun box ipv6_multicast_loop() : I32 val Returns I32 val ipv6_nexthop [Source] fun box ipv6_nexthop() : I32 val Returns I32 val ipv6_origdstaddr [Source] fun box ipv6_origdstaddr() : I32 val Returns I32 val ipv6_pathmtu [Source] fun box ipv6_pathmtu() : I32 val Returns I32 val ipv6_pktinfo [Source] fun box ipv6_pktinfo() : I32 val Returns I32 val ipv6_pmtudisc_do [Source] fun box ipv6_pmtudisc_do() : I32 val Returns I32 val ipv6_pmtudisc_dont [Source] fun box ipv6_pmtudisc_dont() : I32 val Returns I32 val ipv6_pmtudisc_interface [Source] fun box ipv6_pmtudisc_interface() : I32 val Returns I32 val ipv6_pmtudisc_omit [Source] fun box ipv6_pmtudisc_omit() : I32 val Returns I32 val ipv6_pmtudisc_probe [Source] fun box ipv6_pmtudisc_probe() : I32 val Returns I32 val ipv6_pmtudisc_want [Source] fun box ipv6_pmtudisc_want() : I32 val Returns I32 val ipv6_prefer_src_cga [Source] fun box ipv6_prefer_src_cga() : I32 val Returns I32 val ipv6_prefer_src_coa [Source] fun box ipv6_prefer_src_coa() : I32 val Returns I32 val ipv6_prefer_src_home [Source] fun box ipv6_prefer_src_home() : I32 val Returns I32 val ipv6_prefer_src_noncga [Source] fun box ipv6_prefer_src_noncga() : I32 val Returns I32 val ipv6_prefer_src_public [Source] fun box ipv6_prefer_src_public() : I32 val Returns I32 val ipv6_prefer_src_pubtmp_default [Source] fun box ipv6_prefer_src_pubtmp_default() : I32 val Returns I32 val ipv6_prefer_src_tmp [Source] fun box ipv6_prefer_src_tmp() : I32 val Returns I32 val ipv6_priority_10 [Source] fun box ipv6_priority_10() : I32 val Returns I32 val ipv6_priority_11 [Source] fun box ipv6_priority_11() : I32 val Returns I32 val ipv6_priority_12 [Source] fun box ipv6_priority_12() : I32 val Returns I32 val ipv6_priority_13 [Source] fun box ipv6_priority_13() : I32 val Returns I32 val ipv6_priority_14 [Source] fun box ipv6_priority_14() : I32 val Returns I32 val ipv6_priority_15 [Source] fun box ipv6_priority_15() : I32 val Returns I32 val ipv6_priority_8 [Source] fun box ipv6_priority_8() : I32 val Returns I32 val ipv6_priority_9 [Source] fun box ipv6_priority_9() : I32 val Returns I32 val ipv6_priority_bulk [Source] fun box ipv6_priority_bulk() : I32 val Returns I32 val ipv6_priority_control [Source] fun box ipv6_priority_control() : I32 val Returns I32 val ipv6_priority_filler [Source] fun box ipv6_priority_filler() : I32 val Returns I32 val ipv6_priority_interactive [Source] fun box ipv6_priority_interactive() : I32 val Returns I32 val ipv6_priority_reserved1 [Source] fun box ipv6_priority_reserved1() : I32 val Returns I32 val ipv6_priority_reserved2 [Source] fun box ipv6_priority_reserved2() : I32 val Returns I32 val ipv6_priority_unattended [Source] fun box ipv6_priority_unattended() : I32 val Returns I32 val ipv6_priority_uncharacterized [Source] fun box ipv6_priority_uncharacterized() : I32 val Returns I32 val ipv6_recvdstopts [Source] fun box ipv6_recvdstopts() : I32 val Returns I32 val ipv6_recverr [Source] fun box ipv6_recverr() : I32 val Returns I32 val ipv6_recvhoplimit [Source] fun box ipv6_recvhoplimit() : I32 val Returns I32 val ipv6_recvhopopts [Source] fun box ipv6_recvhopopts() : I32 val Returns I32 val ipv6_recvorigdstaddr [Source] fun box ipv6_recvorigdstaddr() : I32 val Returns I32 val ipv6_recvpathmtu [Source] fun box ipv6_recvpathmtu() : I32 val Returns I32 val ipv6_recvpktinfo [Source] fun box ipv6_recvpktinfo() : I32 val Returns I32 val ipv6_recvrthdr [Source] fun box ipv6_recvrthdr() : I32 val Returns I32 val ipv6_recvtclass [Source] fun box ipv6_recvtclass() : I32 val Returns I32 val ipv6_router_alert [Source] fun box ipv6_router_alert() : I32 val Returns I32 val ipv6_rthdr [Source] fun box ipv6_rthdr() : I32 val Returns I32 val ipv6_rthdrdstopts [Source] fun box ipv6_rthdrdstopts() : I32 val Returns I32 val ipv6_tclass [Source] fun box ipv6_tclass() : I32 val Returns I32 val ipv6_tlv_hao [Source] fun box ipv6_tlv_hao() : I32 val Returns I32 val ipv6_tlv_jumbo [Source] fun box ipv6_tlv_jumbo() : I32 val Returns I32 val ipv6_tlv_pad1 [Source] fun box ipv6_tlv_pad1() : I32 val Returns I32 val ipv6_tlv_padn [Source] fun box ipv6_tlv_padn() : I32 val Returns I32 val ipv6_tlv_routeralert [Source] fun box ipv6_tlv_routeralert() : I32 val Returns I32 val ipv6_transparent [Source] fun box ipv6_transparent() : I32 val Returns I32 val ipv6_unicast_hops [Source] fun box ipv6_unicast_hops() : I32 val Returns I32 val ipv6_unicast_if [Source] fun box ipv6_unicast_if() : I32 val Returns I32 val ipv6_use_min_mtu [Source] fun box ipv6_use_min_mtu() : I32 val Returns I32 val ipv6_v6only [Source] fun box ipv6_v6only() : I32 val Returns I32 val ipv6_xfrm_policy [Source] fun box ipv6_xfrm_policy() : I32 val Returns I32 val ipx_address [Source] fun box ipx_address() : I32 val Returns I32 val ipx_address_notify [Source] fun box ipx_address_notify() : I32 val Returns I32 val ipx_crtitf [Source] fun box ipx_crtitf() : I32 val Returns I32 val ipx_dltitf [Source] fun box ipx_dltitf() : I32 val Returns I32 val ipx_dstype [Source] fun box ipx_dstype() : I32 val Returns I32 val ipx_extended_address [Source] fun box ipx_extended_address() : I32 val Returns I32 val ipx_filterptype [Source] fun box ipx_filterptype() : I32 val Returns I32 val ipx_frame_8022 [Source] fun box ipx_frame_8022() : I32 val Returns I32 val ipx_frame_8023 [Source] fun box ipx_frame_8023() : I32 val Returns I32 val ipx_frame_etherii [Source] fun box ipx_frame_etherii() : I32 val Returns I32 val ipx_frame_none [Source] fun box ipx_frame_none() : I32 val Returns I32 val ipx_frame_snap [Source] fun box ipx_frame_snap() : I32 val Returns I32 val ipx_frame_tr_8022 [Source] fun box ipx_frame_tr_8022() : I32 val Returns I32 val ipx_getnetinfo [Source] fun box ipx_getnetinfo() : I32 val Returns I32 val ipx_getnetinfo_norip [Source] fun box ipx_getnetinfo_norip() : I32 val Returns I32 val ipx_immediatespxack [Source] fun box ipx_immediatespxack() : I32 val Returns I32 val ipx_internal [Source] fun box ipx_internal() : I32 val Returns I32 val ipx_maxsize [Source] fun box ipx_maxsize() : I32 val Returns I32 val ipx_max_adapter_num [Source] fun box ipx_max_adapter_num() : I32 val Returns I32 val ipx_mtu [Source] fun box ipx_mtu() : I32 val Returns I32 val ipx_node_len [Source] fun box ipx_node_len() : I32 val Returns I32 val ipx_primary [Source] fun box ipx_primary() : I32 val Returns I32 val ipx_ptype [Source] fun box ipx_ptype() : I32 val Returns I32 val ipx_receive_broadcast [Source] fun box ipx_receive_broadcast() : I32 val Returns I32 val ipx_recvhdr [Source] fun box ipx_recvhdr() : I32 val Returns I32 val ipx_reripnetnumber [Source] fun box ipx_reripnetnumber() : I32 val Returns I32 val ipx_route_no_router [Source] fun box ipx_route_no_router() : I32 val Returns I32 val ipx_rt_8022 [Source] fun box ipx_rt_8022() : I32 val Returns I32 val ipx_rt_bluebook [Source] fun box ipx_rt_bluebook() : I32 val Returns I32 val ipx_rt_routed [Source] fun box ipx_rt_routed() : I32 val Returns I32 val ipx_rt_snap [Source] fun box ipx_rt_snap() : I32 val Returns I32 val ipx_special_none [Source] fun box ipx_special_none() : I32 val Returns I32 val ipx_spxgetconnectionstatus [Source] fun box ipx_spxgetconnectionstatus() : I32 val Returns I32 val ipx_stopfilterptype [Source] fun box ipx_stopfilterptype() : I32 val Returns I32 val ipx_type [Source] fun box ipx_type() : I32 val Returns I32 val ip_add_membership [Source] fun box ip_add_membership() : I32 val Returns I32 val ip_add_source_membership [Source] fun box ip_add_source_membership() : I32 val Returns I32 val ip_bindany [Source] fun box ip_bindany() : I32 val Returns I32 val ip_bindmulti [Source] fun box ip_bindmulti() : I32 val Returns I32 val ip_bind_address_no_port [Source] fun box ip_bind_address_no_port() : I32 val Returns I32 val ip_block_source [Source] fun box ip_block_source() : I32 val Returns I32 val ip_bound_if [Source] fun box ip_bound_if() : I32 val Returns I32 val ip_checksum [Source] fun box ip_checksum() : I32 val Returns I32 val ip_default_multicast_loop [Source] fun box ip_default_multicast_loop() : I32 val Returns I32 val ip_default_multicast_ttl [Source] fun box ip_default_multicast_ttl() : I32 val Returns I32 val ip_dontfrag [Source] fun box ip_dontfrag() : I32 val Returns I32 val ip_drop_membership [Source] fun box ip_drop_membership() : I32 val Returns I32 val ip_drop_source_membership [Source] fun box ip_drop_source_membership() : I32 val Returns I32 val ip_dummynet3 [Source] fun box ip_dummynet3() : I32 val Returns I32 val ip_dummynet_configure [Source] fun box ip_dummynet_configure() : I32 val Returns I32 val ip_dummynet_del [Source] fun box ip_dummynet_del() : I32 val Returns I32 val ip_dummynet_flush [Source] fun box ip_dummynet_flush() : I32 val Returns I32 val ip_dummynet_get [Source] fun box ip_dummynet_get() : I32 val Returns I32 val ip_faith [Source] fun box ip_faith() : I32 val Returns I32 val ip_flowid [Source] fun box ip_flowid() : I32 val Returns I32 val ip_flowtype [Source] fun box ip_flowtype() : I32 val Returns I32 val ip_freebind [Source] fun box ip_freebind() : I32 val Returns I32 val ip_fw3 [Source] fun box ip_fw3() : I32 val Returns I32 val ip_fw_add [Source] fun box ip_fw_add() : I32 val Returns I32 val ip_fw_del [Source] fun box ip_fw_del() : I32 val Returns I32 val ip_fw_flush [Source] fun box ip_fw_flush() : I32 val Returns I32 val ip_fw_get [Source] fun box ip_fw_get() : I32 val Returns I32 val ip_fw_nat_cfg [Source] fun box ip_fw_nat_cfg() : I32 val Returns I32 val ip_fw_nat_del [Source] fun box ip_fw_nat_del() : I32 val Returns I32 val ip_fw_nat_get_config [Source] fun box ip_fw_nat_get_config() : I32 val Returns I32 val ip_fw_nat_get_log [Source] fun box ip_fw_nat_get_log() : I32 val Returns I32 val ip_fw_resetlog [Source] fun box ip_fw_resetlog() : I32 val Returns I32 val ip_fw_table_add [Source] fun box ip_fw_table_add() : I32 val Returns I32 val ip_fw_table_del [Source] fun box ip_fw_table_del() : I32 val Returns I32 val ip_fw_table_flush [Source] fun box ip_fw_table_flush() : I32 val Returns I32 val ip_fw_table_getsize [Source] fun box ip_fw_table_getsize() : I32 val Returns I32 val ip_fw_table_list [Source] fun box ip_fw_table_list() : I32 val Returns I32 val ip_fw_zero [Source] fun box ip_fw_zero() : I32 val Returns I32 val ip_hdrincl [Source] fun box ip_hdrincl() : I32 val Returns I32 val ip_ipsec_policy [Source] fun box ip_ipsec_policy() : I32 val Returns I32 val ip_max_group_src_filter [Source] fun box ip_max_group_src_filter() : I32 val Returns I32 val ip_max_memberships [Source] fun box ip_max_memberships() : I32 val Returns I32 val ip_max_sock_mute_filter [Source] fun box ip_max_sock_mute_filter() : I32 val Returns I32 val ip_max_sock_src_filter [Source] fun box ip_max_sock_src_filter() : I32 val Returns I32 val ip_max_source_filter [Source] fun box ip_max_source_filter() : I32 val Returns I32 val ip_minttl [Source] fun box ip_minttl() : I32 val Returns I32 val ip_min_memberships [Source] fun box ip_min_memberships() : I32 val Returns I32 val ip_msfilter [Source] fun box ip_msfilter() : I32 val Returns I32 val ip_mtu [Source] fun box ip_mtu() : I32 val Returns I32 val ip_mtu_discover [Source] fun box ip_mtu_discover() : I32 val Returns I32 val ip_multicast_all [Source] fun box ip_multicast_all() : I32 val Returns I32 val ip_multicast_if [Source] fun box ip_multicast_if() : I32 val Returns I32 val ip_multicast_ifindex [Source] fun box ip_multicast_ifindex() : I32 val Returns I32 val ip_multicast_loop [Source] fun box ip_multicast_loop() : I32 val Returns I32 val ip_multicast_ttl [Source] fun box ip_multicast_ttl() : I32 val Returns I32 val ip_multicast_vif [Source] fun box ip_multicast_vif() : I32 val Returns I32 val ip_nat_xxx [Source] fun box ip_nat_xxx() : I32 val Returns I32 val ip_nodefrag [Source] fun box ip_nodefrag() : I32 val Returns I32 val ip_old_fw_add [Source] fun box ip_old_fw_add() : I32 val Returns I32 val ip_old_fw_del [Source] fun box ip_old_fw_del() : I32 val Returns I32 val ip_old_fw_flush [Source] fun box ip_old_fw_flush() : I32 val Returns I32 val ip_old_fw_get [Source] fun box ip_old_fw_get() : I32 val Returns I32 val ip_old_fw_resetlog [Source] fun box ip_old_fw_resetlog() : I32 val Returns I32 val ip_old_fw_zero [Source] fun box ip_old_fw_zero() : I32 val Returns I32 val ip_onesbcast [Source] fun box ip_onesbcast() : I32 val Returns I32 val ip_options [Source] fun box ip_options() : I32 val Returns I32 val ip_origdstaddr [Source] fun box ip_origdstaddr() : I32 val Returns I32 val ip_passsec [Source] fun box ip_passsec() : I32 val Returns I32 val ip_pktinfo [Source] fun box ip_pktinfo() : I32 val Returns I32 val ip_pktoptions [Source] fun box ip_pktoptions() : I32 val Returns I32 val ip_pmtudisc_do [Source] fun box ip_pmtudisc_do() : I32 val Returns I32 val ip_pmtudisc_dont [Source] fun box ip_pmtudisc_dont() : I32 val Returns I32 val ip_pmtudisc_interface [Source] fun box ip_pmtudisc_interface() : I32 val Returns I32 val ip_pmtudisc_omit [Source] fun box ip_pmtudisc_omit() : I32 val Returns I32 val ip_pmtudisc_probe [Source] fun box ip_pmtudisc_probe() : I32 val Returns I32 val ip_pmtudisc_want [Source] fun box ip_pmtudisc_want() : I32 val Returns I32 val ip_portrange [Source] fun box ip_portrange() : I32 val Returns I32 val ip_portrange_default [Source] fun box ip_portrange_default() : I32 val Returns I32 val ip_portrange_high [Source] fun box ip_portrange_high() : I32 val Returns I32 val ip_portrange_low [Source] fun box ip_portrange_low() : I32 val Returns I32 val ip_recvdstaddr [Source] fun box ip_recvdstaddr() : I32 val Returns I32 val ip_recverr [Source] fun box ip_recverr() : I32 val Returns I32 val ip_recvflowid [Source] fun box ip_recvflowid() : I32 val Returns I32 val ip_recvif [Source] fun box ip_recvif() : I32 val Returns I32 val ip_recvopts [Source] fun box ip_recvopts() : I32 val Returns I32 val ip_recvorigdstaddr [Source] fun box ip_recvorigdstaddr() : I32 val Returns I32 val ip_recvpktinfo [Source] fun box ip_recvpktinfo() : I32 val Returns I32 val ip_recvretopts [Source] fun box ip_recvretopts() : I32 val Returns I32 val ip_recvrssbucketid [Source] fun box ip_recvrssbucketid() : I32 val Returns I32 val ip_recvtos [Source] fun box ip_recvtos() : I32 val Returns I32 val ip_recvttl [Source] fun box ip_recvttl() : I32 val Returns I32 val ip_retopts [Source] fun box ip_retopts() : I32 val Returns I32 val ip_router_alert [Source] fun box ip_router_alert() : I32 val Returns I32 val ip_rssbucketid [Source] fun box ip_rssbucketid() : I32 val Returns I32 val ip_rss_listen_bucket [Source] fun box ip_rss_listen_bucket() : I32 val Returns I32 val ip_rsvp_off [Source] fun box ip_rsvp_off() : I32 val Returns I32 val ip_rsvp_on [Source] fun box ip_rsvp_on() : I32 val Returns I32 val ip_rsvp_vif_off [Source] fun box ip_rsvp_vif_off() : I32 val Returns I32 val ip_rsvp_vif_on [Source] fun box ip_rsvp_vif_on() : I32 val Returns I32 val ip_sendsrcaddr [Source] fun box ip_sendsrcaddr() : I32 val Returns I32 val ip_striphdr [Source] fun box ip_striphdr() : I32 val Returns I32 val ip_tos [Source] fun box ip_tos() : I32 val Returns I32 val ip_traffic_mgt_background [Source] fun box ip_traffic_mgt_background() : I32 val Returns I32 val ip_transparent [Source] fun box ip_transparent() : I32 val Returns I32 val ip_ttl [Source] fun box ip_ttl() : I32 val Returns I32 val ip_unblock_source [Source] fun box ip_unblock_source() : I32 val Returns I32 val ip_unicast_if [Source] fun box ip_unicast_if() : I32 val Returns I32 val ip_xfrm_policy [Source] fun box ip_xfrm_policy() : I32 val Returns I32 val local_connwait [Source] fun box local_connwait() : I32 val Returns I32 val local_creds [Source] fun box local_creds() : I32 val Returns I32 val local_peercred [Source] fun box local_peercred() : I32 val Returns I32 val local_peerepid [Source] fun box local_peerepid() : I32 val Returns I32 val local_peereuuid [Source] fun box local_peereuuid() : I32 val Returns I32 val local_peerpid [Source] fun box local_peerpid() : I32 val Returns I32 val local_peeruuid [Source] fun box local_peeruuid() : I32 val Returns I32 val local_vendor [Source] fun box local_vendor() : I32 val Returns I32 val max_tcpoptlen [Source] fun box max_tcpoptlen() : I32 val Returns I32 val mcast_block_source [Source] fun box mcast_block_source() : I32 val Returns I32 val mcast_exclude [Source] fun box mcast_exclude() : I32 val Returns I32 val mcast_include [Source] fun box mcast_include() : I32 val Returns I32 val mcast_join_group [Source] fun box mcast_join_group() : I32 val Returns I32 val mcast_join_source_group [Source] fun box mcast_join_source_group() : I32 val Returns I32 val mcast_leave_group [Source] fun box mcast_leave_group() : I32 val Returns I32 val mcast_leave_source_group [Source] fun box mcast_leave_source_group() : I32 val Returns I32 val mcast_msfilter [Source] fun box mcast_msfilter() : I32 val Returns I32 val mcast_unblock_source [Source] fun box mcast_unblock_source() : I32 val Returns I32 val mcast_undefined [Source] fun box mcast_undefined() : I32 val Returns I32 val mrt_add_bw_upcall [Source] fun box mrt_add_bw_upcall() : I32 val Returns I32 val mrt_add_mfc [Source] fun box mrt_add_mfc() : I32 val Returns I32 val mrt_add_vif [Source] fun box mrt_add_vif() : I32 val Returns I32 val mrt_api_config [Source] fun box mrt_api_config() : I32 val Returns I32 val mrt_api_flags_all [Source] fun box mrt_api_flags_all() : I32 val Returns I32 val mrt_api_support [Source] fun box mrt_api_support() : I32 val Returns I32 val mrt_assert [Source] fun box mrt_assert() : I32 val Returns I32 val mrt_del_bw_upcall [Source] fun box mrt_del_bw_upcall() : I32 val Returns I32 val mrt_del_mfc [Source] fun box mrt_del_mfc() : I32 val Returns I32 val mrt_del_vif [Source] fun box mrt_del_vif() : I32 val Returns I32 val mrt_done [Source] fun box mrt_done() : I32 val Returns I32 val mrt_init [Source] fun box mrt_init() : I32 val Returns I32 val mrt_mfc_bw_upcall [Source] fun box mrt_mfc_bw_upcall() : I32 val Returns I32 val mrt_mfc_flags_all [Source] fun box mrt_mfc_flags_all() : I32 val Returns I32 val mrt_mfc_flags_border_vif [Source] fun box mrt_mfc_flags_border_vif() : I32 val Returns I32 val mrt_mfc_flags_disable_wrongvif [Source] fun box mrt_mfc_flags_disable_wrongvif() : I32 val Returns I32 val mrt_mfc_rp [Source] fun box mrt_mfc_rp() : I32 val Returns I32 val mrt_pim [Source] fun box mrt_pim() : I32 val Returns I32 val mrt_version [Source] fun box mrt_version() : I32 val Returns I32 val msg_notification [Source] fun box msg_notification() : I32 val Returns I32 val msg_socallbck [Source] fun box msg_socallbck() : I32 val Returns I32 val ndrvproto_ndrv [Source] fun box ndrvproto_ndrv() : I32 val Returns I32 val ndrv_addmulticast [Source] fun box ndrv_addmulticast() : I32 val Returns I32 val ndrv_deldmxspec [Source] fun box ndrv_deldmxspec() : I32 val Returns I32 val ndrv_delmulticast [Source] fun box ndrv_delmulticast() : I32 val Returns I32 val ndrv_demuxtype_ethertype [Source] fun box ndrv_demuxtype_ethertype() : I32 val Returns I32 val ndrv_demuxtype_sap [Source] fun box ndrv_demuxtype_sap() : I32 val Returns I32 val ndrv_demuxtype_snap [Source] fun box ndrv_demuxtype_snap() : I32 val Returns I32 val ndrv_dmux_max_descr [Source] fun box ndrv_dmux_max_descr() : I32 val Returns I32 val ndrv_protocol_desc_vers [Source] fun box ndrv_protocol_desc_vers() : I32 val Returns I32 val ndrv_setdmxspec [Source] fun box ndrv_setdmxspec() : I32 val Returns I32 val netlink_add_membership [Source] fun box netlink_add_membership() : I32 val Returns I32 val netlink_audit [Source] fun box netlink_audit() : I32 val Returns I32 val netlink_broadcast_error [Source] fun box netlink_broadcast_error() : I32 val Returns I32 val netlink_cap_ack [Source] fun box netlink_cap_ack() : I32 val Returns I32 val netlink_connector [Source] fun box netlink_connector() : I32 val Returns I32 val netlink_crypto [Source] fun box netlink_crypto() : I32 val Returns I32 val netlink_dnrtmsg [Source] fun box netlink_dnrtmsg() : I32 val Returns I32 val netlink_drop_membership [Source] fun box netlink_drop_membership() : I32 val Returns I32 val netlink_ecryptfs [Source] fun box netlink_ecryptfs() : I32 val Returns I32 val netlink_fib_lookup [Source] fun box netlink_fib_lookup() : I32 val Returns I32 val netlink_firewall [Source] fun box netlink_firewall() : I32 val Returns I32 val netlink_generic [Source] fun box netlink_generic() : I32 val Returns I32 val netlink_inet_diag [Source] fun box netlink_inet_diag() : I32 val Returns I32 val netlink_ip6_fw [Source] fun box netlink_ip6_fw() : I32 val Returns I32 val netlink_iscsi [Source] fun box netlink_iscsi() : I32 val Returns I32 val netlink_kobject_uevent [Source] fun box netlink_kobject_uevent() : I32 val Returns I32 val netlink_listen_all_nsid [Source] fun box netlink_listen_all_nsid() : I32 val Returns I32 val netlink_list_memberships [Source] fun box netlink_list_memberships() : I32 val Returns I32 val netlink_netfilter [Source] fun box netlink_netfilter() : I32 val Returns I32 val netlink_nflog [Source] fun box netlink_nflog() : I32 val Returns I32 val netlink_no_enobufs [Source] fun box netlink_no_enobufs() : I32 val Returns I32 val netlink_pktinfo [Source] fun box netlink_pktinfo() : I32 val Returns I32 val netlink_rdma [Source] fun box netlink_rdma() : I32 val Returns I32 val netlink_route [Source] fun box netlink_route() : I32 val Returns I32 val netlink_rx_ring [Source] fun box netlink_rx_ring() : I32 val Returns I32 val netlink_scsitransport [Source] fun box netlink_scsitransport() : I32 val Returns I32 val netlink_selinux [Source] fun box netlink_selinux() : I32 val Returns I32 val netlink_sock_diag [Source] fun box netlink_sock_diag() : I32 val Returns I32 val netlink_tx_ring [Source] fun box netlink_tx_ring() : I32 val Returns I32 val netlink_unused [Source] fun box netlink_unused() : I32 val Returns I32 val netlink_usersock [Source] fun box netlink_usersock() : I32 val Returns I32 val netlink_xfrm [Source] fun box netlink_xfrm() : I32 val Returns I32 val netrom_idle [Source] fun box netrom_idle() : I32 val Returns I32 val netrom_kill [Source] fun box netrom_kill() : I32 val Returns I32 val netrom_n2 [Source] fun box netrom_n2() : I32 val Returns I32 val netrom_neigh [Source] fun box netrom_neigh() : I32 val Returns I32 val netrom_node [Source] fun box netrom_node() : I32 val Returns I32 val netrom_paclen [Source] fun box netrom_paclen() : I32 val Returns I32 val netrom_t1 [Source] fun box netrom_t1() : I32 val Returns I32 val netrom_t2 [Source] fun box netrom_t2() : I32 val Returns I32 val netrom_t4 [Source] fun box netrom_t4() : I32 val Returns I32 val nrdv_multicast_addrs_per_sock [Source] fun box nrdv_multicast_addrs_per_sock() : I32 val Returns I32 val pvd_config [Source] fun box pvd_config() : I32 val Returns I32 val rds_cancel_sent_to [Source] fun box rds_cancel_sent_to() : I32 val Returns I32 val rds_cmsg_atomic_cswp [Source] fun box rds_cmsg_atomic_cswp() : I32 val Returns I32 val rds_cmsg_atomic_fadd [Source] fun box rds_cmsg_atomic_fadd() : I32 val Returns I32 val rds_cmsg_cong_update [Source] fun box rds_cmsg_cong_update() : I32 val Returns I32 val rds_cmsg_masked_atomic_cswp [Source] fun box rds_cmsg_masked_atomic_cswp() : I32 val Returns I32 val rds_cmsg_masked_atomic_fadd [Source] fun box rds_cmsg_masked_atomic_fadd() : I32 val Returns I32 val rds_cmsg_rdma_args [Source] fun box rds_cmsg_rdma_args() : I32 val Returns I32 val rds_cmsg_rdma_dest [Source] fun box rds_cmsg_rdma_dest() : I32 val Returns I32 val rds_cmsg_rdma_map [Source] fun box rds_cmsg_rdma_map() : I32 val Returns I32 val rds_cmsg_rdma_status [Source] fun box rds_cmsg_rdma_status() : I32 val Returns I32 val rds_cong_monitor [Source] fun box rds_cong_monitor() : I32 val Returns I32 val rds_cong_monitor_size [Source] fun box rds_cong_monitor_size() : I32 val Returns I32 val rds_free_mr [Source] fun box rds_free_mr() : I32 val Returns I32 val rds_get_mr [Source] fun box rds_get_mr() : I32 val Returns I32 val rds_get_mr_for_dest [Source] fun box rds_get_mr_for_dest() : I32 val Returns I32 val rds_ib_abi_version [Source] fun box rds_ib_abi_version() : I32 val Returns I32 val rds_ib_gid_len [Source] fun box rds_ib_gid_len() : I32 val Returns I32 val rds_info_connections [Source] fun box rds_info_connections() : I32 val Returns I32 val rds_info_connection_flag_connected [Source] fun box rds_info_connection_flag_connected() : I32 val Returns I32 val rds_info_connection_flag_connecting [Source] fun box rds_info_connection_flag_connecting() : I32 val Returns I32 val rds_info_connection_flag_sending [Source] fun box rds_info_connection_flag_sending() : I32 val Returns I32 val rds_info_connection_stats [Source] fun box rds_info_connection_stats() : I32 val Returns I32 val rds_info_counters [Source] fun box rds_info_counters() : I32 val Returns I32 val rds_info_first [Source] fun box rds_info_first() : I32 val Returns I32 val rds_info_ib_connections [Source] fun box rds_info_ib_connections() : I32 val Returns I32 val rds_info_iwarp_connections [Source] fun box rds_info_iwarp_connections() : I32 val Returns I32 val rds_info_last [Source] fun box rds_info_last() : I32 val Returns I32 val rds_info_message_flag_ack [Source] fun box rds_info_message_flag_ack() : I32 val Returns I32 val rds_info_message_flag_fast_ack [Source] fun box rds_info_message_flag_fast_ack() : I32 val Returns I32 val rds_info_recv_messages [Source] fun box rds_info_recv_messages() : I32 val Returns I32 val rds_info_retrans_messages [Source] fun box rds_info_retrans_messages() : I32 val Returns I32 val rds_info_send_messages [Source] fun box rds_info_send_messages() : I32 val Returns I32 val rds_info_sockets [Source] fun box rds_info_sockets() : I32 val Returns I32 val rds_info_tcp_sockets [Source] fun box rds_info_tcp_sockets() : I32 val Returns I32 val rds_rdma_canceled [Source] fun box rds_rdma_canceled() : I32 val Returns I32 val rds_rdma_dontwait [Source] fun box rds_rdma_dontwait() : I32 val Returns I32 val rds_rdma_dropped [Source] fun box rds_rdma_dropped() : I32 val Returns I32 val rds_rdma_fence [Source] fun box rds_rdma_fence() : I32 val Returns I32 val rds_rdma_invalidate [Source] fun box rds_rdma_invalidate() : I32 val Returns I32 val rds_rdma_notify_me [Source] fun box rds_rdma_notify_me() : I32 val Returns I32 val rds_rdma_other_error [Source] fun box rds_rdma_other_error() : I32 val Returns I32 val rds_rdma_readwrite [Source] fun box rds_rdma_readwrite() : I32 val Returns I32 val rds_rdma_remote_error [Source] fun box rds_rdma_remote_error() : I32 val Returns I32 val rds_rdma_silent [Source] fun box rds_rdma_silent() : I32 val Returns I32 val rds_rdma_success [Source] fun box rds_rdma_success() : I32 val Returns I32 val rds_rdma_use_once [Source] fun box rds_rdma_use_once() : I32 val Returns I32 val rds_recverr [Source] fun box rds_recverr() : I32 val Returns I32 val rds_trans_count [Source] fun box rds_trans_count() : I32 val Returns I32 val rds_trans_ib [Source] fun box rds_trans_ib() : I32 val Returns I32 val rds_trans_iwarp [Source] fun box rds_trans_iwarp() : I32 val Returns I32 val rds_trans_none [Source] fun box rds_trans_none() : I32 val Returns I32 val rds_trans_tcp [Source] fun box rds_trans_tcp() : I32 val Returns I32 val rose_access_barred [Source] fun box rose_access_barred() : I32 val Returns I32 val rose_defer [Source] fun box rose_defer() : I32 val Returns I32 val rose_dte_originated [Source] fun box rose_dte_originated() : I32 val Returns I32 val rose_holdback [Source] fun box rose_holdback() : I32 val Returns I32 val rose_idle [Source] fun box rose_idle() : I32 val Returns I32 val rose_invalid_facility [Source] fun box rose_invalid_facility() : I32 val Returns I32 val rose_local_procedure [Source] fun box rose_local_procedure() : I32 val Returns I32 val rose_max_digis [Source] fun box rose_max_digis() : I32 val Returns I32 val rose_mtu [Source] fun box rose_mtu() : I32 val Returns I32 val rose_network_congestion [Source] fun box rose_network_congestion() : I32 val Returns I32 val rose_not_obtainable [Source] fun box rose_not_obtainable() : I32 val Returns I32 val rose_number_busy [Source] fun box rose_number_busy() : I32 val Returns I32 val rose_out_of_order [Source] fun box rose_out_of_order() : I32 val Returns I32 val rose_qbitincl [Source] fun box rose_qbitincl() : I32 val Returns I32 val rose_remote_procedure [Source] fun box rose_remote_procedure() : I32 val Returns I32 val rose_ship_absent [Source] fun box rose_ship_absent() : I32 val Returns I32 val rose_t1 [Source] fun box rose_t1() : I32 val Returns I32 val rose_t2 [Source] fun box rose_t2() : I32 val Returns I32 val rose_t3 [Source] fun box rose_t3() : I32 val Returns I32 val scm_hci_raw_direction [Source] fun box scm_hci_raw_direction() : I32 val Returns I32 val scm_timestamp [Source] fun box scm_timestamp() : I32 val Returns I32 val scm_timestamping [Source] fun box scm_timestamping() : I32 val Returns I32 val scm_timestampns [Source] fun box scm_timestampns() : I32 val Returns I32 val scm_wifi_status [Source] fun box scm_wifi_status() : I32 val Returns I32 val sctp_abort_association [Source] fun box sctp_abort_association() : I32 val Returns I32 val sctp_adaptation_layer [Source] fun box sctp_adaptation_layer() : I32 val Returns I32 val sctp_adaption_layer [Source] fun box sctp_adaption_layer() : I32 val Returns I32 val sctp_add_streams [Source] fun box sctp_add_streams() : I32 val Returns I32 val sctp_add_vrf_id [Source] fun box sctp_add_vrf_id() : I32 val Returns I32 val sctp_asconf [Source] fun box sctp_asconf() : I32 val Returns I32 val sctp_asconf_ack [Source] fun box sctp_asconf_ack() : I32 val Returns I32 val sctp_asconf_supported [Source] fun box sctp_asconf_supported() : I32 val Returns I32 val sctp_associnfo [Source] fun box sctp_associnfo() : I32 val Returns I32 val sctp_authentication [Source] fun box sctp_authentication() : I32 val Returns I32 val sctp_auth_active_key [Source] fun box sctp_auth_active_key() : I32 val Returns I32 val sctp_auth_chunk [Source] fun box sctp_auth_chunk() : I32 val Returns I32 val sctp_auth_deactivate_key [Source] fun box sctp_auth_deactivate_key() : I32 val Returns I32 val sctp_auth_delete_key [Source] fun box sctp_auth_delete_key() : I32 val Returns I32 val sctp_auth_key [Source] fun box sctp_auth_key() : I32 val Returns I32 val sctp_auth_supported [Source] fun box sctp_auth_supported() : I32 val Returns I32 val sctp_autoclose [Source] fun box sctp_autoclose() : I32 val Returns I32 val sctp_auto_asconf [Source] fun box sctp_auto_asconf() : I32 val Returns I32 val sctp_badcrc [Source] fun box sctp_badcrc() : I32 val Returns I32 val sctp_bindx_add_addr [Source] fun box sctp_bindx_add_addr() : I32 val Returns I32 val sctp_bindx_rem_addr [Source] fun box sctp_bindx_rem_addr() : I32 val Returns I32 val sctp_blk_logging_enable [Source] fun box sctp_blk_logging_enable() : I32 val Returns I32 val sctp_bound [Source] fun box sctp_bound() : I32 val Returns I32 val sctp_cause_cookie_in_shutdown [Source] fun box sctp_cause_cookie_in_shutdown() : I32 val Returns I32 val sctp_cause_deleting_last_addr [Source] fun box sctp_cause_deleting_last_addr() : I32 val Returns I32 val sctp_cause_deleting_src_addr [Source] fun box sctp_cause_deleting_src_addr() : I32 val Returns I32 val sctp_cause_illegal_asconf_ack [Source] fun box sctp_cause_illegal_asconf_ack() : I32 val Returns I32 val sctp_cause_invalid_param [Source] fun box sctp_cause_invalid_param() : I32 val Returns I32 val sctp_cause_invalid_stream [Source] fun box sctp_cause_invalid_stream() : I32 val Returns I32 val sctp_cause_missing_param [Source] fun box sctp_cause_missing_param() : I32 val Returns I32 val sctp_cause_nat_colliding_state [Source] fun box sctp_cause_nat_colliding_state() : I32 val Returns I32 val sctp_cause_nat_missing_state [Source] fun box sctp_cause_nat_missing_state() : I32 val Returns I32 val sctp_cause_no_error [Source] fun box sctp_cause_no_error() : I32 val Returns I32 val sctp_cause_no_user_data [Source] fun box sctp_cause_no_user_data() : I32 val Returns I32 val sctp_cause_out_of_resc [Source] fun box sctp_cause_out_of_resc() : I32 val Returns I32 val sctp_cause_protocol_violation [Source] fun box sctp_cause_protocol_violation() : I32 val Returns I32 val sctp_cause_request_refused [Source] fun box sctp_cause_request_refused() : I32 val Returns I32 val sctp_cause_resource_shortage [Source] fun box sctp_cause_resource_shortage() : I32 val Returns I32 val sctp_cause_restart_w_newaddr [Source] fun box sctp_cause_restart_w_newaddr() : I32 val Returns I32 val sctp_cause_stale_cookie [Source] fun box sctp_cause_stale_cookie() : I32 val Returns I32 val sctp_cause_unrecog_chunk [Source] fun box sctp_cause_unrecog_chunk() : I32 val Returns I32 val sctp_cause_unrecog_param [Source] fun box sctp_cause_unrecog_param() : I32 val Returns I32 val sctp_cause_unresolvable_addr [Source] fun box sctp_cause_unresolvable_addr() : I32 val Returns I32 val sctp_cause_unsupported_hmacid [Source] fun box sctp_cause_unsupported_hmacid() : I32 val Returns I32 val sctp_cause_user_initiated_abt [Source] fun box sctp_cause_user_initiated_abt() : I32 val Returns I32 val sctp_cc_hstcp [Source] fun box sctp_cc_hstcp() : I32 val Returns I32 val sctp_cc_htcp [Source] fun box sctp_cc_htcp() : I32 val Returns I32 val sctp_cc_option [Source] fun box sctp_cc_option() : I32 val Returns I32 val sctp_cc_opt_rtcc_setmode [Source] fun box sctp_cc_opt_rtcc_setmode() : I32 val Returns I32 val sctp_cc_opt_steady_step [Source] fun box sctp_cc_opt_steady_step() : I32 val Returns I32 val sctp_cc_opt_use_dccc_ecn [Source] fun box sctp_cc_opt_use_dccc_ecn() : I32 val Returns I32 val sctp_cc_rfc2581 [Source] fun box sctp_cc_rfc2581() : I32 val Returns I32 val sctp_cc_rtcc [Source] fun box sctp_cc_rtcc() : I32 val Returns I32 val sctp_closed [Source] fun box sctp_closed() : I32 val Returns I32 val sctp_clr_stat_log [Source] fun box sctp_clr_stat_log() : I32 val Returns I32 val sctp_cmt_base [Source] fun box sctp_cmt_base() : I32 val Returns I32 val sctp_cmt_max [Source] fun box sctp_cmt_max() : I32 val Returns I32 val sctp_cmt_mptcp [Source] fun box sctp_cmt_mptcp() : I32 val Returns I32 val sctp_cmt_off [Source] fun box sctp_cmt_off() : I32 val Returns I32 val sctp_cmt_on_off [Source] fun box sctp_cmt_on_off() : I32 val Returns I32 val sctp_cmt_rpv1 [Source] fun box sctp_cmt_rpv1() : I32 val Returns I32 val sctp_cmt_rpv2 [Source] fun box sctp_cmt_rpv2() : I32 val Returns I32 val sctp_cmt_use_dac [Source] fun box sctp_cmt_use_dac() : I32 val Returns I32 val sctp_connect_x [Source] fun box sctp_connect_x() : I32 val Returns I32 val sctp_connect_x_complete [Source] fun box sctp_connect_x_complete() : I32 val Returns I32 val sctp_connect_x_delayed [Source] fun box sctp_connect_x_delayed() : I32 val Returns I32 val sctp_context [Source] fun box sctp_context() : I32 val Returns I32 val sctp_cookie_ack [Source] fun box sctp_cookie_ack() : I32 val Returns I32 val sctp_cookie_echo [Source] fun box sctp_cookie_echo() : I32 val Returns I32 val sctp_cookie_echoed [Source] fun box sctp_cookie_echoed() : I32 val Returns I32 val sctp_cookie_wait [Source] fun box sctp_cookie_wait() : I32 val Returns I32 val sctp_cwnd_logging_enable [Source] fun box sctp_cwnd_logging_enable() : I32 val Returns I32 val sctp_cwnd_monitor_enable [Source] fun box sctp_cwnd_monitor_enable() : I32 val Returns I32 val sctp_cwr_in_same_window [Source] fun box sctp_cwr_in_same_window() : I32 val Returns I32 val sctp_cwr_reduce_override [Source] fun box sctp_cwr_reduce_override() : I32 val Returns I32 val sctp_data [Source] fun box sctp_data() : I32 val Returns I32 val sctp_data_first_frag [Source] fun box sctp_data_first_frag() : I32 val Returns I32 val sctp_data_frag_mask [Source] fun box sctp_data_frag_mask() : I32 val Returns I32 val sctp_data_last_frag [Source] fun box sctp_data_last_frag() : I32 val Returns I32 val sctp_data_middle_frag [Source] fun box sctp_data_middle_frag() : I32 val Returns I32 val sctp_data_not_frag [Source] fun box sctp_data_not_frag() : I32 val Returns I32 val sctp_data_sack_immediately [Source] fun box sctp_data_sack_immediately() : I32 val Returns I32 val sctp_data_unordered [Source] fun box sctp_data_unordered() : I32 val Returns I32 val sctp_default_prinfo [Source] fun box sctp_default_prinfo() : I32 val Returns I32 val sctp_default_send_param [Source] fun box sctp_default_send_param() : I32 val Returns I32 val sctp_default_sndinfo [Source] fun box sctp_default_sndinfo() : I32 val Returns I32 val sctp_delayed_sack [Source] fun box sctp_delayed_sack() : I32 val Returns I32 val sctp_del_vrf_id [Source] fun box sctp_del_vrf_id() : I32 val Returns I32 val sctp_disable_fragments [Source] fun box sctp_disable_fragments() : I32 val Returns I32 val sctp_ecn_cwr [Source] fun box sctp_ecn_cwr() : I32 val Returns I32 val sctp_ecn_echo [Source] fun box sctp_ecn_echo() : I32 val Returns I32 val sctp_ecn_supported [Source] fun box sctp_ecn_supported() : I32 val Returns I32 val sctp_enable_change_assoc_req [Source] fun box sctp_enable_change_assoc_req() : I32 val Returns I32 val sctp_enable_reset_assoc_req [Source] fun box sctp_enable_reset_assoc_req() : I32 val Returns I32 val sctp_enable_reset_stream_req [Source] fun box sctp_enable_reset_stream_req() : I32 val Returns I32 val sctp_enable_stream_reset [Source] fun box sctp_enable_stream_reset() : I32 val Returns I32 val sctp_enable_value_mask [Source] fun box sctp_enable_value_mask() : I32 val Returns I32 val sctp_established [Source] fun box sctp_established() : I32 val Returns I32 val sctp_event [Source] fun box sctp_event() : I32 val Returns I32 val sctp_events [Source] fun box sctp_events() : I32 val Returns I32 val sctp_explicit_eor [Source] fun box sctp_explicit_eor() : I32 val Returns I32 val sctp_flight_logging_enable [Source] fun box sctp_flight_logging_enable() : I32 val Returns I32 val sctp_forward_cum_tsn [Source] fun box sctp_forward_cum_tsn() : I32 val Returns I32 val sctp_fragment_interleave [Source] fun box sctp_fragment_interleave() : I32 val Returns I32 val sctp_frag_level_0 [Source] fun box sctp_frag_level_0() : I32 val Returns I32 val sctp_frag_level_1 [Source] fun box sctp_frag_level_1() : I32 val Returns I32 val sctp_frag_level_2 [Source] fun box sctp_frag_level_2() : I32 val Returns I32 val sctp_from_middle_box [Source] fun box sctp_from_middle_box() : I32 val Returns I32 val sctp_fr_logging_enable [Source] fun box sctp_fr_logging_enable() : I32 val Returns I32 val sctp_get_addr_len [Source] fun box sctp_get_addr_len() : I32 val Returns I32 val sctp_get_asoc_vrf [Source] fun box sctp_get_asoc_vrf() : I32 val Returns I32 val sctp_get_assoc_id_list [Source] fun box sctp_get_assoc_id_list() : I32 val Returns I32 val sctp_get_assoc_number [Source] fun box sctp_get_assoc_number() : I32 val Returns I32 val sctp_get_local_addresses [Source] fun box sctp_get_local_addresses() : I32 val Returns I32 val sctp_get_local_addr_size [Source] fun box sctp_get_local_addr_size() : I32 val Returns I32 val sctp_get_nonce_values [Source] fun box sctp_get_nonce_values() : I32 val Returns I32 val sctp_get_packet_log [Source] fun box sctp_get_packet_log() : I32 val Returns I32 val sctp_get_peer_addresses [Source] fun box sctp_get_peer_addresses() : I32 val Returns I32 val sctp_get_peer_addr_info [Source] fun box sctp_get_peer_addr_info() : I32 val Returns I32 val sctp_get_remote_addr_size [Source] fun box sctp_get_remote_addr_size() : I32 val Returns I32 val sctp_get_sndbuf_use [Source] fun box sctp_get_sndbuf_use() : I32 val Returns I32 val sctp_get_stat_log [Source] fun box sctp_get_stat_log() : I32 val Returns I32 val sctp_get_vrf_ids [Source] fun box sctp_get_vrf_ids() : I32 val Returns I32 val sctp_had_no_tcb [Source] fun box sctp_had_no_tcb() : I32 val Returns I32 val sctp_heartbeat_ack [Source] fun box sctp_heartbeat_ack() : I32 val Returns I32 val sctp_heartbeat_request [Source] fun box sctp_heartbeat_request() : I32 val Returns I32 val sctp_hmac_ident [Source] fun box sctp_hmac_ident() : I32 val Returns I32 val sctp_idata [Source] fun box sctp_idata() : I32 val Returns I32 val sctp_iforward_cum_tsn [Source] fun box sctp_iforward_cum_tsn() : I32 val Returns I32 val sctp_initiation [Source] fun box sctp_initiation() : I32 val Returns I32 val sctp_initiation_ack [Source] fun box sctp_initiation_ack() : I32 val Returns I32 val sctp_initmsg [Source] fun box sctp_initmsg() : I32 val Returns I32 val sctp_interleaving_supported [Source] fun box sctp_interleaving_supported() : I32 val Returns I32 val sctp_i_want_mapped_v4_addr [Source] fun box sctp_i_want_mapped_v4_addr() : I32 val Returns I32 val sctp_last_packet_tracing [Source] fun box sctp_last_packet_tracing() : I32 val Returns I32 val sctp_listen [Source] fun box sctp_listen() : I32 val Returns I32 val sctp_local_auth_chunks [Source] fun box sctp_local_auth_chunks() : I32 val Returns I32 val sctp_lock_logging_enable [Source] fun box sctp_lock_logging_enable() : I32 val Returns I32 val sctp_log_at_send_2_outq [Source] fun box sctp_log_at_send_2_outq() : I32 val Returns I32 val sctp_log_at_send_2_sctp [Source] fun box sctp_log_at_send_2_sctp() : I32 val Returns I32 val sctp_log_maxburst_enable [Source] fun box sctp_log_maxburst_enable() : I32 val Returns I32 val sctp_log_rwnd_enable [Source] fun box sctp_log_rwnd_enable() : I32 val Returns I32 val sctp_log_sack_arrivals_enable [Source] fun box sctp_log_sack_arrivals_enable() : I32 val Returns I32 val sctp_log_try_advance [Source] fun box sctp_log_try_advance() : I32 val Returns I32 val sctp_ltrace_chunk_enable [Source] fun box sctp_ltrace_chunk_enable() : I32 val Returns I32 val sctp_ltrace_error_enable [Source] fun box sctp_ltrace_error_enable() : I32 val Returns I32 val sctp_map_logging_enable [Source] fun box sctp_map_logging_enable() : I32 val Returns I32 val sctp_maxburst [Source] fun box sctp_maxburst() : I32 val Returns I32 val sctp_maxseg [Source] fun box sctp_maxseg() : I32 val Returns I32 val sctp_max_burst [Source] fun box sctp_max_burst() : I32 val Returns I32 val sctp_max_cookie_life [Source] fun box sctp_max_cookie_life() : I32 val Returns I32 val sctp_max_cwnd [Source] fun box sctp_max_cwnd() : I32 val Returns I32 val sctp_max_hb_interval [Source] fun box sctp_max_hb_interval() : I32 val Returns I32 val sctp_max_sack_delay [Source] fun box sctp_max_sack_delay() : I32 val Returns I32 val sctp_mbcnt_logging_enable [Source] fun box sctp_mbcnt_logging_enable() : I32 val Returns I32 val sctp_mbuf_logging_enable [Source] fun box sctp_mbuf_logging_enable() : I32 val Returns I32 val sctp_mobility_base [Source] fun box sctp_mobility_base() : I32 val Returns I32 val sctp_mobility_fasthandoff [Source] fun box sctp_mobility_fasthandoff() : I32 val Returns I32 val sctp_mobility_prim_deleted [Source] fun box sctp_mobility_prim_deleted() : I32 val Returns I32 val sctp_nagle_logging_enable [Source] fun box sctp_nagle_logging_enable() : I32 val Returns I32 val sctp_nodelay [Source] fun box sctp_nodelay() : I32 val Returns I32 val sctp_nrsack_supported [Source] fun box sctp_nrsack_supported() : I32 val Returns I32 val sctp_nr_selective_ack [Source] fun box sctp_nr_selective_ack() : I32 val Returns I32 val sctp_operation_error [Source] fun box sctp_operation_error() : I32 val Returns I32 val sctp_packed [Source] fun box sctp_packed() : I32 val Returns I32 val sctp_packet_dropped [Source] fun box sctp_packet_dropped() : I32 val Returns I32 val sctp_packet_log_size [Source] fun box sctp_packet_log_size() : I32 val Returns I32 val sctp_packet_truncated [Source] fun box sctp_packet_truncated() : I32 val Returns I32 val sctp_pad_chunk [Source] fun box sctp_pad_chunk() : I32 val Returns I32 val sctp_partial_delivery_point [Source] fun box sctp_partial_delivery_point() : I32 val Returns I32 val sctp_pcb_copy_flags [Source] fun box sctp_pcb_copy_flags() : I32 val Returns I32 val sctp_pcb_flags_accepting [Source] fun box sctp_pcb_flags_accepting() : I32 val Returns I32 val sctp_pcb_flags_adaptationevnt [Source] fun box sctp_pcb_flags_adaptationevnt() : I32 val Returns I32 val sctp_pcb_flags_assoc_resetevnt [Source] fun box sctp_pcb_flags_assoc_resetevnt() : I32 val Returns I32 val sctp_pcb_flags_authevnt [Source] fun box sctp_pcb_flags_authevnt() : I32 val Returns I32 val sctp_pcb_flags_autoclose [Source] fun box sctp_pcb_flags_autoclose() : I32 val Returns I32 val sctp_pcb_flags_auto_asconf [Source] fun box sctp_pcb_flags_auto_asconf() : I32 val Returns I32 val sctp_pcb_flags_blocking_io [Source] fun box sctp_pcb_flags_blocking_io() : I32 val Returns I32 val sctp_pcb_flags_boundall [Source] fun box sctp_pcb_flags_boundall() : I32 val Returns I32 val sctp_pcb_flags_bound_v6 [Source] fun box sctp_pcb_flags_bound_v6() : I32 val Returns I32 val sctp_pcb_flags_close_ip [Source] fun box sctp_pcb_flags_close_ip() : I32 val Returns I32 val sctp_pcb_flags_connected [Source] fun box sctp_pcb_flags_connected() : I32 val Returns I32 val sctp_pcb_flags_donot_heartbeat [Source] fun box sctp_pcb_flags_donot_heartbeat() : I32 val Returns I32 val sctp_pcb_flags_dont_wake [Source] fun box sctp_pcb_flags_dont_wake() : I32 val Returns I32 val sctp_pcb_flags_do_asconf [Source] fun box sctp_pcb_flags_do_asconf() : I32 val Returns I32 val sctp_pcb_flags_do_not_pmtud [Source] fun box sctp_pcb_flags_do_not_pmtud() : I32 val Returns I32 val sctp_pcb_flags_dryevnt [Source] fun box sctp_pcb_flags_dryevnt() : I32 val Returns I32 val sctp_pcb_flags_explicit_eor [Source] fun box sctp_pcb_flags_explicit_eor() : I32 val Returns I32 val sctp_pcb_flags_ext_rcvinfo [Source] fun box sctp_pcb_flags_ext_rcvinfo() : I32 val Returns I32 val sctp_pcb_flags_frag_interleave [Source] fun box sctp_pcb_flags_frag_interleave() : I32 val Returns I32 val sctp_pcb_flags_interleave_strms [Source] fun box sctp_pcb_flags_interleave_strms() : I32 val Returns I32 val sctp_pcb_flags_in_tcppool [Source] fun box sctp_pcb_flags_in_tcppool() : I32 val Returns I32 val sctp_pcb_flags_multiple_asconfs [Source] fun box sctp_pcb_flags_multiple_asconfs() : I32 val Returns I32 val sctp_pcb_flags_needs_mapped_v4 [Source] fun box sctp_pcb_flags_needs_mapped_v4() : I32 val Returns I32 val sctp_pcb_flags_nodelay [Source] fun box sctp_pcb_flags_nodelay() : I32 val Returns I32 val sctp_pcb_flags_no_fragment [Source] fun box sctp_pcb_flags_no_fragment() : I32 val Returns I32 val sctp_pcb_flags_pdapievnt [Source] fun box sctp_pcb_flags_pdapievnt() : I32 val Returns I32 val sctp_pcb_flags_portreuse [Source] fun box sctp_pcb_flags_portreuse() : I32 val Returns I32 val sctp_pcb_flags_recvassocevnt [Source] fun box sctp_pcb_flags_recvassocevnt() : I32 val Returns I32 val sctp_pcb_flags_recvdataioevnt [Source] fun box sctp_pcb_flags_recvdataioevnt() : I32 val Returns I32 val sctp_pcb_flags_recvnsendfailevnt [Source] fun box sctp_pcb_flags_recvnsendfailevnt() : I32 val Returns I32 val sctp_pcb_flags_recvnxtinfo [Source] fun box sctp_pcb_flags_recvnxtinfo() : I32 val Returns I32 val sctp_pcb_flags_recvpaddrevnt [Source] fun box sctp_pcb_flags_recvpaddrevnt() : I32 val Returns I32 val sctp_pcb_flags_recvpeererr [Source] fun box sctp_pcb_flags_recvpeererr() : I32 val Returns I32 val sctp_pcb_flags_recvrcvinfo [Source] fun box sctp_pcb_flags_recvrcvinfo() : I32 val Returns I32 val sctp_pcb_flags_recvsendfailevnt [Source] fun box sctp_pcb_flags_recvsendfailevnt() : I32 val Returns I32 val sctp_pcb_flags_recvshutdownevnt [Source] fun box sctp_pcb_flags_recvshutdownevnt() : I32 val Returns I32 val sctp_pcb_flags_socket_allgone [Source] fun box sctp_pcb_flags_socket_allgone() : I32 val Returns I32 val sctp_pcb_flags_socket_cant_read [Source] fun box sctp_pcb_flags_socket_cant_read() : I32 val Returns I32 val sctp_pcb_flags_socket_gone [Source] fun box sctp_pcb_flags_socket_gone() : I32 val Returns I32 val sctp_pcb_flags_stream_changeevnt [Source] fun box sctp_pcb_flags_stream_changeevnt() : I32 val Returns I32 val sctp_pcb_flags_stream_resetevnt [Source] fun box sctp_pcb_flags_stream_resetevnt() : I32 val Returns I32 val sctp_pcb_flags_tcptype [Source] fun box sctp_pcb_flags_tcptype() : I32 val Returns I32 val sctp_pcb_flags_udptype [Source] fun box sctp_pcb_flags_udptype() : I32 val Returns I32 val sctp_pcb_flags_unbound [Source] fun box sctp_pcb_flags_unbound() : I32 val Returns I32 val sctp_pcb_flags_wakeinput [Source] fun box sctp_pcb_flags_wakeinput() : I32 val Returns I32 val sctp_pcb_flags_wakeoutput [Source] fun box sctp_pcb_flags_wakeoutput() : I32 val Returns I32 val sctp_pcb_flags_was_aborted [Source] fun box sctp_pcb_flags_was_aborted() : I32 val Returns I32 val sctp_pcb_flags_was_connected [Source] fun box sctp_pcb_flags_was_connected() : I32 val Returns I32 val sctp_pcb_flags_zero_copy_active [Source] fun box sctp_pcb_flags_zero_copy_active() : I32 val Returns I32 val sctp_pcb_status [Source] fun box sctp_pcb_status() : I32 val Returns I32 val sctp_peeloff [Source] fun box sctp_peeloff() : I32 val Returns I32 val sctp_peer_addr_params [Source] fun box sctp_peer_addr_params() : I32 val Returns I32 val sctp_peer_addr_thlds [Source] fun box sctp_peer_addr_thlds() : I32 val Returns I32 val sctp_peer_auth_chunks [Source] fun box sctp_peer_auth_chunks() : I32 val Returns I32 val sctp_pktdrop_supported [Source] fun box sctp_pktdrop_supported() : I32 val Returns I32 val sctp_pluggable_cc [Source] fun box sctp_pluggable_cc() : I32 val Returns I32 val sctp_pluggable_ss [Source] fun box sctp_pluggable_ss() : I32 val Returns I32 val sctp_primary_addr [Source] fun box sctp_primary_addr() : I32 val Returns I32 val sctp_pr_assoc_status [Source] fun box sctp_pr_assoc_status() : I32 val Returns I32 val sctp_pr_stream_status [Source] fun box sctp_pr_stream_status() : I32 val Returns I32 val sctp_pr_supported [Source] fun box sctp_pr_supported() : I32 val Returns I32 val sctp_reconfig_supported [Source] fun box sctp_reconfig_supported() : I32 val Returns I32 val sctp_recvnxtinfo [Source] fun box sctp_recvnxtinfo() : I32 val Returns I32 val sctp_recvrcvinfo [Source] fun box sctp_recvrcvinfo() : I32 val Returns I32 val sctp_recv_rwnd_logging_enable [Source] fun box sctp_recv_rwnd_logging_enable() : I32 val Returns I32 val sctp_remote_udp_encaps_port [Source] fun box sctp_remote_udp_encaps_port() : I32 val Returns I32 val sctp_reset_assoc [Source] fun box sctp_reset_assoc() : I32 val Returns I32 val sctp_reset_streams [Source] fun box sctp_reset_streams() : I32 val Returns I32 val sctp_reuse_port [Source] fun box sctp_reuse_port() : I32 val Returns I32 val sctp_rtoinfo [Source] fun box sctp_rtoinfo() : I32 val Returns I32 val sctp_rttvar_logging_enable [Source] fun box sctp_rttvar_logging_enable() : I32 val Returns I32 val sctp_sack_cmt_dac [Source] fun box sctp_sack_cmt_dac() : I32 val Returns I32 val sctp_sack_logging_enable [Source] fun box sctp_sack_logging_enable() : I32 val Returns I32 val sctp_sack_nonce_sum [Source] fun box sctp_sack_nonce_sum() : I32 val Returns I32 val sctp_sack_rwnd_logging_enable [Source] fun box sctp_sack_rwnd_logging_enable() : I32 val Returns I32 val sctp_sat_network_burst_incr [Source] fun box sctp_sat_network_burst_incr() : I32 val Returns I32 val sctp_sat_network_min [Source] fun box sctp_sat_network_min() : I32 val Returns I32 val sctp_sb_logging_enable [Source] fun box sctp_sb_logging_enable() : I32 val Returns I32 val sctp_selective_ack [Source] fun box sctp_selective_ack() : I32 val Returns I32 val sctp_set_debug_level [Source] fun box sctp_set_debug_level() : I32 val Returns I32 val sctp_set_dynamic_primary [Source] fun box sctp_set_dynamic_primary() : I32 val Returns I32 val sctp_set_initial_dbg_seq [Source] fun box sctp_set_initial_dbg_seq() : I32 val Returns I32 val sctp_set_peer_primary_addr [Source] fun box sctp_set_peer_primary_addr() : I32 val Returns I32 val sctp_shutdown [Source] fun box sctp_shutdown() : I32 val Returns I32 val sctp_shutdown_ack [Source] fun box sctp_shutdown_ack() : I32 val Returns I32 val sctp_shutdown_ack_sent [Source] fun box sctp_shutdown_ack_sent() : I32 val Returns I32 val sctp_shutdown_complete [Source] fun box sctp_shutdown_complete() : I32 val Returns I32 val sctp_shutdown_pending [Source] fun box sctp_shutdown_pending() : I32 val Returns I32 val sctp_shutdown_received [Source] fun box sctp_shutdown_received() : I32 val Returns I32 val sctp_shutdown_sent [Source] fun box sctp_shutdown_sent() : I32 val Returns I32 val sctp_smallest_pmtu [Source] fun box sctp_smallest_pmtu() : I32 val Returns I32 val sctp_ss_default [Source] fun box sctp_ss_default() : I32 val Returns I32 val sctp_ss_fair_bandwith [Source] fun box sctp_ss_fair_bandwith() : I32 val Returns I32 val sctp_ss_first_come [Source] fun box sctp_ss_first_come() : I32 val Returns I32 val sctp_ss_priority [Source] fun box sctp_ss_priority() : I32 val Returns I32 val sctp_ss_round_robin [Source] fun box sctp_ss_round_robin() : I32 val Returns I32 val sctp_ss_round_robin_packet [Source] fun box sctp_ss_round_robin_packet() : I32 val Returns I32 val sctp_ss_value [Source] fun box sctp_ss_value() : I32 val Returns I32 val sctp_status [Source] fun box sctp_status() : I32 val Returns I32 val sctp_stream_reset [Source] fun box sctp_stream_reset() : I32 val Returns I32 val sctp_stream_reset_incoming [Source] fun box sctp_stream_reset_incoming() : I32 val Returns I32 val sctp_stream_reset_outgoing [Source] fun box sctp_stream_reset_outgoing() : I32 val Returns I32 val sctp_str_logging_enable [Source] fun box sctp_str_logging_enable() : I32 val Returns I32 val sctp_threshold_logging [Source] fun box sctp_threshold_logging() : I32 val Returns I32 val sctp_timeouts [Source] fun box sctp_timeouts() : I32 val Returns I32 val sctp_use_ext_rcvinfo [Source] fun box sctp_use_ext_rcvinfo() : I32 val Returns I32 val sctp_vrf_id [Source] fun box sctp_vrf_id() : I32 val Returns I32 val sctp_wake_logging_enable [Source] fun box sctp_wake_logging_enable() : I32 val Returns I32 val sock_cloexec [Source] fun box sock_cloexec() : I32 val Returns I32 val sock_dgram [Source] fun box sock_dgram() : I32 val Returns I32 val sock_maxaddrlen [Source] fun box sock_maxaddrlen() : I32 val Returns I32 val sock_nonblock [Source] fun box sock_nonblock() : I32 val Returns I32 val sock_raw [Source] fun box sock_raw() : I32 val Returns I32 val sock_rdm [Source] fun box sock_rdm() : I32 val Returns I32 val sock_seqpacket [Source] fun box sock_seqpacket() : I32 val Returns I32 val sock_stream [Source] fun box sock_stream() : I32 val Returns I32 val somaxconn [Source] fun box somaxconn() : I32 val Returns I32 val sonpx_setoptshut [Source] fun box sonpx_setoptshut() : I32 val Returns I32 val so_acceptconn [Source] fun box so_acceptconn() : I32 val Returns I32 val so_acceptfilter [Source] fun box so_acceptfilter() : I32 val Returns I32 val so_atmpvc [Source] fun box so_atmpvc() : I32 val Returns I32 val so_atmqos [Source] fun box so_atmqos() : I32 val Returns I32 val so_atmsap [Source] fun box so_atmsap() : I32 val Returns I32 val so_attach_bpf [Source] fun box so_attach_bpf() : I32 val Returns I32 val so_attach_filter [Source] fun box so_attach_filter() : I32 val Returns I32 val so_bindtodevice [Source] fun box so_bindtodevice() : I32 val Returns I32 val so_bintime [Source] fun box so_bintime() : I32 val Returns I32 val so_bpf_extensions [Source] fun box so_bpf_extensions() : I32 val Returns I32 val so_broadcast [Source] fun box so_broadcast() : I32 val Returns I32 val so_bsdcompat [Source] fun box so_bsdcompat() : I32 val Returns I32 val so_bsp_state [Source] fun box so_bsp_state() : I32 val Returns I32 val so_busy_poll [Source] fun box so_busy_poll() : I32 val Returns I32 val so_conaccess [Source] fun box so_conaccess() : I32 val Returns I32 val so_condata [Source] fun box so_condata() : I32 val Returns I32 val so_conditional_accept [Source] fun box so_conditional_accept() : I32 val Returns I32 val so_connect_time [Source] fun box so_connect_time() : I32 val Returns I32 val so_debug [Source] fun box so_debug() : I32 val Returns I32 val so_detach_bpf [Source] fun box so_detach_bpf() : I32 val Returns I32 val so_detach_filter [Source] fun box so_detach_filter() : I32 val Returns I32 val so_domain [Source] fun box so_domain() : I32 val Returns I32 val so_dontlinger [Source] fun box so_dontlinger() : I32 val Returns I32 val so_dontroute [Source] fun box so_dontroute() : I32 val Returns I32 val so_donttrunc [Source] fun box so_donttrunc() : I32 val Returns I32 val so_error [Source] fun box so_error() : I32 val Returns I32 val so_exclusiveaddruse [Source] fun box so_exclusiveaddruse() : I32 val Returns I32 val so_get_filter [Source] fun box so_get_filter() : I32 val Returns I32 val so_group_id [Source] fun box so_group_id() : I32 val Returns I32 val so_group_priority [Source] fun box so_group_priority() : I32 val Returns I32 val so_hci_raw_direction [Source] fun box so_hci_raw_direction() : I32 val Returns I32 val so_hci_raw_filter [Source] fun box so_hci_raw_filter() : I32 val Returns I32 val so_incoming_cpu [Source] fun box so_incoming_cpu() : I32 val Returns I32 val so_keepalive [Source] fun box so_keepalive() : I32 val Returns I32 val so_l2cap_encrypted [Source] fun box so_l2cap_encrypted() : I32 val Returns I32 val so_l2cap_flush [Source] fun box so_l2cap_flush() : I32 val Returns I32 val so_l2cap_iflow [Source] fun box so_l2cap_iflow() : I32 val Returns I32 val so_l2cap_imtu [Source] fun box so_l2cap_imtu() : I32 val Returns I32 val so_l2cap_oflow [Source] fun box so_l2cap_oflow() : I32 val Returns I32 val so_l2cap_omtu [Source] fun box so_l2cap_omtu() : I32 val Returns I32 val so_label [Source] fun box so_label() : I32 val Returns I32 val so_linger [Source] fun box so_linger() : I32 val Returns I32 val so_linger_sec [Source] fun box so_linger_sec() : I32 val Returns I32 val so_linkinfo [Source] fun box so_linkinfo() : I32 val Returns I32 val so_listenincqlen [Source] fun box so_listenincqlen() : I32 val Returns I32 val so_listenqlen [Source] fun box so_listenqlen() : I32 val Returns I32 val so_listenqlimit [Source] fun box so_listenqlimit() : I32 val Returns I32 val so_lock_filter [Source] fun box so_lock_filter() : I32 val Returns I32 val so_mark [Source] fun box so_mark() : I32 val Returns I32 val so_max_msg_size [Source] fun box so_max_msg_size() : I32 val Returns I32 val so_max_pacing_rate [Source] fun box so_max_pacing_rate() : I32 val Returns I32 val so_multipoint [Source] fun box so_multipoint() : I32 val Returns I32 val so_netsvc_marking_level [Source] fun box so_netsvc_marking_level() : I32 val Returns I32 val so_net_service_type [Source] fun box so_net_service_type() : I32 val Returns I32 val so_nke [Source] fun box so_nke() : I32 val Returns I32 val so_noaddrerr [Source] fun box so_noaddrerr() : I32 val Returns I32 val so_nofcs [Source] fun box so_nofcs() : I32 val Returns I32 val so_nosigpipe [Source] fun box so_nosigpipe() : I32 val Returns I32 val so_notifyconflict [Source] fun box so_notifyconflict() : I32 val Returns I32 val so_no_check [Source] fun box so_no_check() : I32 val Returns I32 val so_no_ddp [Source] fun box so_no_ddp() : I32 val Returns I32 val so_no_offload [Source] fun box so_no_offload() : I32 val Returns I32 val so_np_extensions [Source] fun box so_np_extensions() : I32 val Returns I32 val so_nread [Source] fun box so_nread() : I32 val Returns I32 val so_numrcvpkt [Source] fun box so_numrcvpkt() : I32 val Returns I32 val so_nwrite [Source] fun box so_nwrite() : I32 val Returns I32 val so_oobinline [Source] fun box so_oobinline() : I32 val Returns I32 val so_original_dst [Source] fun box so_original_dst() : I32 val Returns I32 val so_passcred [Source] fun box so_passcred() : I32 val Returns I32 val so_passsec [Source] fun box so_passsec() : I32 val Returns I32 val so_peek_off [Source] fun box so_peek_off() : I32 val Returns I32 val so_peercred [Source] fun box so_peercred() : I32 val Returns I32 val so_peerlabel [Source] fun box so_peerlabel() : I32 val Returns I32 val so_peername [Source] fun box so_peername() : I32 val Returns I32 val so_peersec [Source] fun box so_peersec() : I32 val Returns I32 val so_port_scalability [Source] fun box so_port_scalability() : I32 val Returns I32 val so_priority [Source] fun box so_priority() : I32 val Returns I32 val so_protocol [Source] fun box so_protocol() : I32 val Returns I32 val so_protocol_info [Source] fun box so_protocol_info() : I32 val Returns I32 val so_prototype [Source] fun box so_prototype() : I32 val Returns I32 val so_proxyusr [Source] fun box so_proxyusr() : I32 val Returns I32 val so_randomport [Source] fun box so_randomport() : I32 val Returns I32 val so_rcvbuf [Source] fun box so_rcvbuf() : I32 val Returns I32 val so_rcvbufforce [Source] fun box so_rcvbufforce() : I32 val Returns I32 val so_rcvlowat [Source] fun box so_rcvlowat() : I32 val Returns I32 val so_rcvtimeo [Source] fun box so_rcvtimeo() : I32 val Returns I32 val so_rds_transport [Source] fun box so_rds_transport() : I32 val Returns I32 val so_reuseaddr [Source] fun box so_reuseaddr() : I32 val Returns I32 val so_reuseport [Source] fun box so_reuseport() : I32 val Returns I32 val so_reuseshareuid [Source] fun box so_reuseshareuid() : I32 val Returns I32 val so_rfcomm_fc_info [Source] fun box so_rfcomm_fc_info() : I32 val Returns I32 val so_rfcomm_mtu [Source] fun box so_rfcomm_mtu() : I32 val Returns I32 val so_rxq_ovfl [Source] fun box so_rxq_ovfl() : I32 val Returns I32 val so_sco_conninfo [Source] fun box so_sco_conninfo() : I32 val Returns I32 val so_sco_mtu [Source] fun box so_sco_mtu() : I32 val Returns I32 val so_security_authentication [Source] fun box so_security_authentication() : I32 val Returns I32 val so_security_encryption_network [Source] fun box so_security_encryption_network() : I32 val Returns I32 val so_security_encryption_transport [Source] fun box so_security_encryption_transport() : I32 val Returns I32 val so_select_err_queue [Source] fun box so_select_err_queue() : I32 val Returns I32 val so_setclp [Source] fun box so_setclp() : I32 val Returns I32 val so_setfib [Source] fun box so_setfib() : I32 val Returns I32 val so_sndbuf [Source] fun box so_sndbuf() : I32 val Returns I32 val so_sndbufforce [Source] fun box so_sndbufforce() : I32 val Returns I32 val so_sndlowat [Source] fun box so_sndlowat() : I32 val Returns I32 val so_sndtimeo [Source] fun box so_sndtimeo() : I32 val Returns I32 val so_timestamp [Source] fun box so_timestamp() : I32 val Returns I32 val so_timestamping [Source] fun box so_timestamping() : I32 val Returns I32 val so_timestampns [Source] fun box so_timestampns() : I32 val Returns I32 val so_timestamp_monotonic [Source] fun box so_timestamp_monotonic() : I32 val Returns I32 val so_type [Source] fun box so_type() : I32 val Returns I32 val so_upcallclosewait [Source] fun box so_upcallclosewait() : I32 val Returns I32 val so_update_accept_context [Source] fun box so_update_accept_context() : I32 val Returns I32 val so_useloopback [Source] fun box so_useloopback() : I32 val Returns I32 val so_user_cookie [Source] fun box so_user_cookie() : I32 val Returns I32 val so_vendor [Source] fun box so_vendor() : I32 val Returns I32 val so_vm_sockets_buffer_max_size [Source] fun box so_vm_sockets_buffer_max_size() : I32 val Returns I32 val so_vm_sockets_buffer_min_size [Source] fun box so_vm_sockets_buffer_min_size() : I32 val Returns I32 val so_vm_sockets_buffer_size [Source] fun box so_vm_sockets_buffer_size() : I32 val Returns I32 val so_vm_sockets_connect_timeout [Source] fun box so_vm_sockets_connect_timeout() : I32 val Returns I32 val so_vm_sockets_nonblock_txrx [Source] fun box so_vm_sockets_nonblock_txrx() : I32 val Returns I32 val so_vm_sockets_peer_host_vm_id [Source] fun box so_vm_sockets_peer_host_vm_id() : I32 val Returns I32 val so_vm_sockets_trusted [Source] fun box so_vm_sockets_trusted() : I32 val Returns I32 val so_wantmore [Source] fun box so_wantmore() : I32 val Returns I32 val so_wantoobflag [Source] fun box so_wantoobflag() : I32 val Returns I32 val so_wifi_status [Source] fun box so_wifi_status() : I32 val Returns I32 val tcp6_mss [Source] fun box tcp6_mss() : I32 val Returns I32 val tcpci_flag_lossrecovery [Source] fun box tcpci_flag_lossrecovery() : I32 val Returns I32 val tcpci_flag_reordering_detected [Source] fun box tcpci_flag_reordering_detected() : I32 val Returns I32 val tcpci_opt_ecn [Source] fun box tcpci_opt_ecn() : I32 val Returns I32 val tcpci_opt_sack [Source] fun box tcpci_opt_sack() : I32 val Returns I32 val tcpci_opt_timestamps [Source] fun box tcpci_opt_timestamps() : I32 val Returns I32 val tcpci_opt_wscale [Source] fun box tcpci_opt_wscale() : I32 val Returns I32 val tcpf_ca_cwr [Source] fun box tcpf_ca_cwr() : I32 val Returns I32 val tcpf_ca_disorder [Source] fun box tcpf_ca_disorder() : I32 val Returns I32 val tcpf_ca_loss [Source] fun box tcpf_ca_loss() : I32 val Returns I32 val tcpf_ca_open [Source] fun box tcpf_ca_open() : I32 val Returns I32 val tcpf_ca_recovery [Source] fun box tcpf_ca_recovery() : I32 val Returns I32 val tcpi_opt_ecn [Source] fun box tcpi_opt_ecn() : I32 val Returns I32 val tcpi_opt_ecn_seen [Source] fun box tcpi_opt_ecn_seen() : I32 val Returns I32 val tcpi_opt_sack [Source] fun box tcpi_opt_sack() : I32 val Returns I32 val tcpi_opt_syn_data [Source] fun box tcpi_opt_syn_data() : I32 val Returns I32 val tcpi_opt_timestamps [Source] fun box tcpi_opt_timestamps() : I32 val Returns I32 val tcpi_opt_toe [Source] fun box tcpi_opt_toe() : I32 val Returns I32 val tcpi_opt_wscale [Source] fun box tcpi_opt_wscale() : I32 val Returns I32 val tcpolen_cc [Source] fun box tcpolen_cc() : I32 val Returns I32 val tcpolen_cc_appa [Source] fun box tcpolen_cc_appa() : I32 val Returns I32 val tcpolen_eol [Source] fun box tcpolen_eol() : I32 val Returns I32 val tcpolen_fastopen_req [Source] fun box tcpolen_fastopen_req() : I32 val Returns I32 val tcpolen_fast_open_empty [Source] fun box tcpolen_fast_open_empty() : I32 val Returns I32 val tcpolen_fast_open_max [Source] fun box tcpolen_fast_open_max() : I32 val Returns I32 val tcpolen_fast_open_min [Source] fun box tcpolen_fast_open_min() : I32 val Returns I32 val tcpolen_maxseg [Source] fun box tcpolen_maxseg() : I32 val Returns I32 val tcpolen_nop [Source] fun box tcpolen_nop() : I32 val Returns I32 val tcpolen_pad [Source] fun box tcpolen_pad() : I32 val Returns I32 val tcpolen_sack [Source] fun box tcpolen_sack() : I32 val Returns I32 val tcpolen_sackhdr [Source] fun box tcpolen_sackhdr() : I32 val Returns I32 val tcpolen_sack_permitted [Source] fun box tcpolen_sack_permitted() : I32 val Returns I32 val tcpolen_signature [Source] fun box tcpolen_signature() : I32 val Returns I32 val tcpolen_timestamp [Source] fun box tcpolen_timestamp() : I32 val Returns I32 val tcpolen_tstamp_appa [Source] fun box tcpolen_tstamp_appa() : I32 val Returns I32 val tcpolen_window [Source] fun box tcpolen_window() : I32 val Returns I32 val tcpopt_cc [Source] fun box tcpopt_cc() : I32 val Returns I32 val tcpopt_ccecho [Source] fun box tcpopt_ccecho() : I32 val Returns I32 val tcpopt_ccnew [Source] fun box tcpopt_ccnew() : I32 val Returns I32 val tcpopt_eol [Source] fun box tcpopt_eol() : I32 val Returns I32 val tcpopt_fastopen [Source] fun box tcpopt_fastopen() : I32 val Returns I32 val tcpopt_fast_open [Source] fun box tcpopt_fast_open() : I32 val Returns I32 val tcpopt_maxseg [Source] fun box tcpopt_maxseg() : I32 val Returns I32 val tcpopt_multipath [Source] fun box tcpopt_multipath() : I32 val Returns I32 val tcpopt_nop [Source] fun box tcpopt_nop() : I32 val Returns I32 val tcpopt_pad [Source] fun box tcpopt_pad() : I32 val Returns I32 val tcpopt_sack [Source] fun box tcpopt_sack() : I32 val Returns I32 val tcpopt_sack_hdr [Source] fun box tcpopt_sack_hdr() : I32 val Returns I32 val tcpopt_sack_permitted [Source] fun box tcpopt_sack_permitted() : I32 val Returns I32 val tcpopt_sack_permit_hdr [Source] fun box tcpopt_sack_permit_hdr() : I32 val Returns I32 val tcpopt_signature [Source] fun box tcpopt_signature() : I32 val Returns I32 val tcpopt_timestamp [Source] fun box tcpopt_timestamp() : I32 val Returns I32 val tcpopt_tstamp_hdr [Source] fun box tcpopt_tstamp_hdr() : I32 val Returns I32 val tcpopt_window [Source] fun box tcpopt_window() : I32 val Returns I32 val tcp_ca_name_max [Source] fun box tcp_ca_name_max() : I32 val Returns I32 val tcp_ccalgoopt [Source] fun box tcp_ccalgoopt() : I32 val Returns I32 val tcp_cc_info [Source] fun box tcp_cc_info() : I32 val Returns I32 val tcp_congestion [Source] fun box tcp_congestion() : I32 val Returns I32 val tcp_connectiontimeout [Source] fun box tcp_connectiontimeout() : I32 val Returns I32 val tcp_connection_info [Source] fun box tcp_connection_info() : I32 val Returns I32 val tcp_cookie_in_always [Source] fun box tcp_cookie_in_always() : I32 val Returns I32 val tcp_cookie_max [Source] fun box tcp_cookie_max() : I32 val Returns I32 val tcp_cookie_min [Source] fun box tcp_cookie_min() : I32 val Returns I32 val tcp_cookie_out_never [Source] fun box tcp_cookie_out_never() : I32 val Returns I32 val tcp_cookie_pair_size [Source] fun box tcp_cookie_pair_size() : I32 val Returns I32 val tcp_cookie_transactions [Source] fun box tcp_cookie_transactions() : I32 val Returns I32 val tcp_cork [Source] fun box tcp_cork() : I32 val Returns I32 val tcp_defer_accept [Source] fun box tcp_defer_accept() : I32 val Returns I32 val tcp_enable_ecn [Source] fun box tcp_enable_ecn() : I32 val Returns I32 val tcp_fastopen [Source] fun box tcp_fastopen() : I32 val Returns I32 val tcp_function_blk [Source] fun box tcp_function_blk() : I32 val Returns I32 val tcp_function_name_len_max [Source] fun box tcp_function_name_len_max() : I32 val Returns I32 val tcp_info [Source] fun box tcp_info() : I32 val Returns I32 val tcp_keepalive [Source] fun box tcp_keepalive() : I32 val Returns I32 val tcp_keepcnt [Source] fun box tcp_keepcnt() : I32 val Returns I32 val tcp_keepidle [Source] fun box tcp_keepidle() : I32 val Returns I32 val tcp_keepinit [Source] fun box tcp_keepinit() : I32 val Returns I32 val tcp_keepintvl [Source] fun box tcp_keepintvl() : I32 val Returns I32 val tcp_linger2 [Source] fun box tcp_linger2() : I32 val Returns I32 val tcp_maxburst [Source] fun box tcp_maxburst() : I32 val Returns I32 val tcp_maxhlen [Source] fun box tcp_maxhlen() : I32 val Returns I32 val tcp_maxolen [Source] fun box tcp_maxolen() : I32 val Returns I32 val tcp_maxseg [Source] fun box tcp_maxseg() : I32 val Returns I32 val tcp_maxwin [Source] fun box tcp_maxwin() : I32 val Returns I32 val tcp_max_sack [Source] fun box tcp_max_sack() : I32 val Returns I32 val tcp_max_winshift [Source] fun box tcp_max_winshift() : I32 val Returns I32 val tcp_md5sig [Source] fun box tcp_md5sig() : I32 val Returns I32 val tcp_md5sig_maxkeylen [Source] fun box tcp_md5sig_maxkeylen() : I32 val Returns I32 val tcp_minmss [Source] fun box tcp_minmss() : I32 val Returns I32 val tcp_mss [Source] fun box tcp_mss() : I32 val Returns I32 val tcp_mss_default [Source] fun box tcp_mss_default() : I32 val Returns I32 val tcp_mss_desired [Source] fun box tcp_mss_desired() : I32 val Returns I32 val tcp_nodelay [Source] fun box tcp_nodelay() : I32 val Returns I32 val tcp_noopt [Source] fun box tcp_noopt() : I32 val Returns I32 val tcp_nopush [Source] fun box tcp_nopush() : I32 val Returns I32 val tcp_notsent_lowat [Source] fun box tcp_notsent_lowat() : I32 val Returns I32 val tcp_pcap_in [Source] fun box tcp_pcap_in() : I32 val Returns I32 val tcp_pcap_out [Source] fun box tcp_pcap_out() : I32 val Returns I32 val tcp_queue_seq [Source] fun box tcp_queue_seq() : I32 val Returns I32 val tcp_quickack [Source] fun box tcp_quickack() : I32 val Returns I32 val tcp_repair [Source] fun box tcp_repair() : I32 val Returns I32 val tcp_repair_options [Source] fun box tcp_repair_options() : I32 val Returns I32 val tcp_repair_queue [Source] fun box tcp_repair_queue() : I32 val Returns I32 val tcp_rxt_conndroptime [Source] fun box tcp_rxt_conndroptime() : I32 val Returns I32 val tcp_rxt_findrop [Source] fun box tcp_rxt_findrop() : I32 val Returns I32 val tcp_saved_syn [Source] fun box tcp_saved_syn() : I32 val Returns I32 val tcp_save_syn [Source] fun box tcp_save_syn() : I32 val Returns I32 val tcp_sendmoreacks [Source] fun box tcp_sendmoreacks() : I32 val Returns I32 val tcp_syncnt [Source] fun box tcp_syncnt() : I32 val Returns I32 val tcp_s_data_in [Source] fun box tcp_s_data_in() : I32 val Returns I32 val tcp_s_data_out [Source] fun box tcp_s_data_out() : I32 val Returns I32 val tcp_thin_dupack [Source] fun box tcp_thin_dupack() : I32 val Returns I32 val tcp_thin_linear_timeouts [Source] fun box tcp_thin_linear_timeouts() : I32 val Returns I32 val tcp_timestamp [Source] fun box tcp_timestamp() : I32 val Returns I32 val tcp_user_timeout [Source] fun box tcp_user_timeout() : I32 val Returns I32 val tcp_vendor [Source] fun box tcp_vendor() : I32 val Returns I32 val tcp_window_clamp [Source] fun box tcp_window_clamp() : I32 val Returns I32 val tipc_addr_id [Source] fun box tipc_addr_id() : I32 val Returns I32 val tipc_addr_mcast [Source] fun box tipc_addr_mcast() : I32 val Returns I32 val tipc_addr_name [Source] fun box tipc_addr_name() : I32 val Returns I32 val tipc_addr_nameseq [Source] fun box tipc_addr_nameseq() : I32 val Returns I32 val tipc_cfg_srv [Source] fun box tipc_cfg_srv() : I32 val Returns I32 val tipc_cluster_scope [Source] fun box tipc_cluster_scope() : I32 val Returns I32 val tipc_conn_shutdown [Source] fun box tipc_conn_shutdown() : I32 val Returns I32 val tipc_conn_timeout [Source] fun box tipc_conn_timeout() : I32 val Returns I32 val tipc_critical_importance [Source] fun box tipc_critical_importance() : I32 val Returns I32 val tipc_destname [Source] fun box tipc_destname() : I32 val Returns I32 val tipc_dest_droppable [Source] fun box tipc_dest_droppable() : I32 val Returns I32 val tipc_errinfo [Source] fun box tipc_errinfo() : I32 val Returns I32 val tipc_err_no_name [Source] fun box tipc_err_no_name() : I32 val Returns I32 val tipc_err_no_node [Source] fun box tipc_err_no_node() : I32 val Returns I32 val tipc_err_no_port [Source] fun box tipc_err_no_port() : I32 val Returns I32 val tipc_err_overload [Source] fun box tipc_err_overload() : I32 val Returns I32 val tipc_high_importance [Source] fun box tipc_high_importance() : I32 val Returns I32 val tipc_importance [Source] fun box tipc_importance() : I32 val Returns I32 val tipc_link_state [Source] fun box tipc_link_state() : I32 val Returns I32 val tipc_low_importance [Source] fun box tipc_low_importance() : I32 val Returns I32 val tipc_max_bearer_name [Source] fun box tipc_max_bearer_name() : I32 val Returns I32 val tipc_max_if_name [Source] fun box tipc_max_if_name() : I32 val Returns I32 val tipc_max_link_name [Source] fun box tipc_max_link_name() : I32 val Returns I32 val tipc_max_media_name [Source] fun box tipc_max_media_name() : I32 val Returns I32 val tipc_max_user_msg_size [Source] fun box tipc_max_user_msg_size() : I32 val Returns I32 val tipc_medium_importance [Source] fun box tipc_medium_importance() : I32 val Returns I32 val tipc_node_recvq_depth [Source] fun box tipc_node_recvq_depth() : I32 val Returns I32 val tipc_node_scope [Source] fun box tipc_node_scope() : I32 val Returns I32 val tipc_ok [Source] fun box tipc_ok() : I32 val Returns I32 val tipc_published [Source] fun box tipc_published() : I32 val Returns I32 val tipc_reserved_types [Source] fun box tipc_reserved_types() : I32 val Returns I32 val tipc_retdata [Source] fun box tipc_retdata() : I32 val Returns I32 val tipc_sock_recvq_depth [Source] fun box tipc_sock_recvq_depth() : I32 val Returns I32 val tipc_src_droppable [Source] fun box tipc_src_droppable() : I32 val Returns I32 val tipc_subscr_timeout [Source] fun box tipc_subscr_timeout() : I32 val Returns I32 val tipc_sub_cancel [Source] fun box tipc_sub_cancel() : I32 val Returns I32 val tipc_sub_ports [Source] fun box tipc_sub_ports() : I32 val Returns I32 val tipc_sub_service [Source] fun box tipc_sub_service() : I32 val Returns I32 val tipc_top_srv [Source] fun box tipc_top_srv() : I32 val Returns I32 val tipc_wait_forever [Source] fun box tipc_wait_forever() : I32 val Returns I32 val tipc_withdrawn [Source] fun box tipc_withdrawn() : I32 val Returns I32 val tipc_zone_scope [Source] fun box tipc_zone_scope() : I32 val Returns I32 val ttcp_client_snd_wnd [Source] fun box ttcp_client_snd_wnd() : I32 val Returns I32 val udp_cork [Source] fun box udp_cork() : I32 val Returns I32 val udp_encap [Source] fun box udp_encap() : I32 val Returns I32 val udp_encap_espinudp [Source] fun box udp_encap_espinudp() : I32 val Returns I32 val udp_encap_espinudp_maxfraglen [Source] fun box udp_encap_espinudp_maxfraglen() : I32 val Returns I32 val udp_encap_espinudp_non_ike [Source] fun box udp_encap_espinudp_non_ike() : I32 val Returns I32 val udp_encap_espinudp_port [Source] fun box udp_encap_espinudp_port() : I32 val Returns I32 val udp_encap_l2tpinudp [Source] fun box udp_encap_l2tpinudp() : I32 val Returns I32 val udp_nocksum [Source] fun box udp_nocksum() : I32 val Returns I32 val udp_no_check6_rx [Source] fun box udp_no_check6_rx() : I32 val Returns I32 val udp_no_check6_tx [Source] fun box udp_no_check6_tx() : I32 val Returns I32 val udp_vendor [Source] fun box udp_vendor() : I32 val Returns I32 val eq [Source] fun box eq( that: OSSockOpt val) : Bool val Parameters that: OSSockOpt val Returns Bool val ne [Source] fun box ne( that: OSSockOpt val) : Bool val Parameters that: OSSockOpt val Returns Bool val","title":"primitive OSSockOpt"},{"location":"net-OSSockOpt/#ossockopt","text":"[Source] Convenience functions to fetch the option level and option name constants (arguments #2 and #3) for the getsockopt(2) and setsockopt(2) operating system calls. The values of the option level and option name constants are typically C preprocessor macros, e.g., #define SOMETHING 42 . These macro names are upper case and may contain multiple consecutive underscore characters (though this is rare, for example, IP_NAT__XXX ). The function names in this primitive are derived by the C macro name and then: converted to lower case any double underscore ( __ ) is converted to a single underscore ( _ ). These constants are not stable between Pony releases. Values returned by this function may be held by long-lived variables by the calling process: values cannot change while the process runs. Programmers must not cache any of these values for purposes of sharing them for use by any other Pony program (for example, sharing via serialization deserialization or via direct shared memory). Many functions may return -1 , which means that the constant's value could not be determined at the Pony runtime library compile time. One cause may be that the option truly isn't available, for example, the option level constant IPPROTO_3PC is available on MacOS 10.x but not on Linux 4.4. Another cause may be the Pony runtime library's compilation did not include the correct header file(s) for the target OS platform. A third cause of error is due to the regular expression-based approach used to harvest desirable constants. It is not fool-proof. The regexp used is too broad and finds some macros that are not supposed to be used with getsockopt(2) and setsockopt(2) . Please consult your platform's documentation to verify the names of the option level and option name macros. The following code fragments are equivalent: set the socket receive buffer size for the file descriptor fd to 4455 . /* In C */ int option_value = 4455; setsockopt(fd, SOL_SOCKET, SO_RCVBUF, option_value, 4); /* In Pony */ var option: I32 = 4455; @pony_os_setsockopt[I32](fd, OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), addressof option, I32(4)) primitive val OSSockOpt","title":"OSSockOpt"},{"location":"net-OSSockOpt/#constructors","text":"","title":"Constructors"},{"location":"net-OSSockOpt/#create","text":"[Source] new val create() : OSSockOpt val^","title":"create"},{"location":"net-OSSockOpt/#returns","text":"OSSockOpt val^","title":"Returns"},{"location":"net-OSSockOpt/#public-functions","text":"","title":"Public Functions"},{"location":"net-OSSockOpt/#ipproto_3pc","text":"[Source] fun box ipproto_3pc() : I32 val","title":"ipproto_3pc"},{"location":"net-OSSockOpt/#returns_1","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_adfs","text":"[Source] fun box ipproto_adfs() : I32 val","title":"ipproto_adfs"},{"location":"net-OSSockOpt/#returns_2","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ah","text":"[Source] fun box ipproto_ah() : I32 val","title":"ipproto_ah"},{"location":"net-OSSockOpt/#returns_3","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ahip","text":"[Source] fun box ipproto_ahip() : I32 val","title":"ipproto_ahip"},{"location":"net-OSSockOpt/#returns_4","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_apes","text":"[Source] fun box ipproto_apes() : I32 val","title":"ipproto_apes"},{"location":"net-OSSockOpt/#returns_5","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_argus","text":"[Source] fun box ipproto_argus() : I32 val","title":"ipproto_argus"},{"location":"net-OSSockOpt/#returns_6","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ax25","text":"[Source] fun box ipproto_ax25() : I32 val","title":"ipproto_ax25"},{"location":"net-OSSockOpt/#returns_7","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_beetph","text":"[Source] fun box ipproto_beetph() : I32 val","title":"ipproto_beetph"},{"location":"net-OSSockOpt/#returns_8","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_bha","text":"[Source] fun box ipproto_bha() : I32 val","title":"ipproto_bha"},{"location":"net-OSSockOpt/#returns_9","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_blt","text":"[Source] fun box ipproto_blt() : I32 val","title":"ipproto_blt"},{"location":"net-OSSockOpt/#returns_10","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_brsatmon","text":"[Source] fun box ipproto_brsatmon() : I32 val","title":"ipproto_brsatmon"},{"location":"net-OSSockOpt/#returns_11","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_carp","text":"[Source] fun box ipproto_carp() : I32 val","title":"ipproto_carp"},{"location":"net-OSSockOpt/#returns_12","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_cftp","text":"[Source] fun box ipproto_cftp() : I32 val","title":"ipproto_cftp"},{"location":"net-OSSockOpt/#returns_13","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_chaos","text":"[Source] fun box ipproto_chaos() : I32 val","title":"ipproto_chaos"},{"location":"net-OSSockOpt/#returns_14","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_cmtp","text":"[Source] fun box ipproto_cmtp() : I32 val","title":"ipproto_cmtp"},{"location":"net-OSSockOpt/#returns_15","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_comp","text":"[Source] fun box ipproto_comp() : I32 val","title":"ipproto_comp"},{"location":"net-OSSockOpt/#returns_16","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_cphb","text":"[Source] fun box ipproto_cphb() : I32 val","title":"ipproto_cphb"},{"location":"net-OSSockOpt/#returns_17","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_cpnx","text":"[Source] fun box ipproto_cpnx() : I32 val","title":"ipproto_cpnx"},{"location":"net-OSSockOpt/#returns_18","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_dccp","text":"[Source] fun box ipproto_dccp() : I32 val","title":"ipproto_dccp"},{"location":"net-OSSockOpt/#returns_19","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ddp","text":"[Source] fun box ipproto_ddp() : I32 val","title":"ipproto_ddp"},{"location":"net-OSSockOpt/#returns_20","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_dgp","text":"[Source] fun box ipproto_dgp() : I32 val","title":"ipproto_dgp"},{"location":"net-OSSockOpt/#returns_21","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_divert","text":"[Source] fun box ipproto_divert() : I32 val","title":"ipproto_divert"},{"location":"net-OSSockOpt/#returns_22","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_done","text":"[Source] fun box ipproto_done() : I32 val","title":"ipproto_done"},{"location":"net-OSSockOpt/#returns_23","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_dstopts","text":"[Source] fun box ipproto_dstopts() : I32 val","title":"ipproto_dstopts"},{"location":"net-OSSockOpt/#returns_24","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_egp","text":"[Source] fun box ipproto_egp() : I32 val","title":"ipproto_egp"},{"location":"net-OSSockOpt/#returns_25","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_emcon","text":"[Source] fun box ipproto_emcon() : I32 val","title":"ipproto_emcon"},{"location":"net-OSSockOpt/#returns_26","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_encap","text":"[Source] fun box ipproto_encap() : I32 val","title":"ipproto_encap"},{"location":"net-OSSockOpt/#returns_27","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_eon","text":"[Source] fun box ipproto_eon() : I32 val","title":"ipproto_eon"},{"location":"net-OSSockOpt/#returns_28","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_esp","text":"[Source] fun box ipproto_esp() : I32 val","title":"ipproto_esp"},{"location":"net-OSSockOpt/#returns_29","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_etherip","text":"[Source] fun box ipproto_etherip() : I32 val","title":"ipproto_etherip"},{"location":"net-OSSockOpt/#returns_30","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_fragment","text":"[Source] fun box ipproto_fragment() : I32 val","title":"ipproto_fragment"},{"location":"net-OSSockOpt/#returns_31","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ggp","text":"[Source] fun box ipproto_ggp() : I32 val","title":"ipproto_ggp"},{"location":"net-OSSockOpt/#returns_32","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_gmtp","text":"[Source] fun box ipproto_gmtp() : I32 val","title":"ipproto_gmtp"},{"location":"net-OSSockOpt/#returns_33","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_gre","text":"[Source] fun box ipproto_gre() : I32 val","title":"ipproto_gre"},{"location":"net-OSSockOpt/#returns_34","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_hello","text":"[Source] fun box ipproto_hello() : I32 val","title":"ipproto_hello"},{"location":"net-OSSockOpt/#returns_35","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_hip","text":"[Source] fun box ipproto_hip() : I32 val","title":"ipproto_hip"},{"location":"net-OSSockOpt/#returns_36","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_hmp","text":"[Source] fun box ipproto_hmp() : I32 val","title":"ipproto_hmp"},{"location":"net-OSSockOpt/#returns_37","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_hopopts","text":"[Source] fun box ipproto_hopopts() : I32 val","title":"ipproto_hopopts"},{"location":"net-OSSockOpt/#returns_38","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_icmp","text":"[Source] fun box ipproto_icmp() : I32 val","title":"ipproto_icmp"},{"location":"net-OSSockOpt/#returns_39","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_icmpv6","text":"[Source] fun box ipproto_icmpv6() : I32 val","title":"ipproto_icmpv6"},{"location":"net-OSSockOpt/#returns_40","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_idp","text":"[Source] fun box ipproto_idp() : I32 val","title":"ipproto_idp"},{"location":"net-OSSockOpt/#returns_41","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_idpr","text":"[Source] fun box ipproto_idpr() : I32 val","title":"ipproto_idpr"},{"location":"net-OSSockOpt/#returns_42","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_idrp","text":"[Source] fun box ipproto_idrp() : I32 val","title":"ipproto_idrp"},{"location":"net-OSSockOpt/#returns_43","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_igmp","text":"[Source] fun box ipproto_igmp() : I32 val","title":"ipproto_igmp"},{"location":"net-OSSockOpt/#returns_44","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_igp","text":"[Source] fun box ipproto_igp() : I32 val","title":"ipproto_igp"},{"location":"net-OSSockOpt/#returns_45","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_igrp","text":"[Source] fun box ipproto_igrp() : I32 val","title":"ipproto_igrp"},{"location":"net-OSSockOpt/#returns_46","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_il","text":"[Source] fun box ipproto_il() : I32 val","title":"ipproto_il"},{"location":"net-OSSockOpt/#returns_47","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_inlsp","text":"[Source] fun box ipproto_inlsp() : I32 val","title":"ipproto_inlsp"},{"location":"net-OSSockOpt/#returns_48","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_inp","text":"[Source] fun box ipproto_inp() : I32 val","title":"ipproto_inp"},{"location":"net-OSSockOpt/#returns_49","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ip","text":"[Source] fun box ipproto_ip() : I32 val","title":"ipproto_ip"},{"location":"net-OSSockOpt/#returns_50","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ipcomp","text":"[Source] fun box ipproto_ipcomp() : I32 val","title":"ipproto_ipcomp"},{"location":"net-OSSockOpt/#returns_51","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ipcv","text":"[Source] fun box ipproto_ipcv() : I32 val","title":"ipproto_ipcv"},{"location":"net-OSSockOpt/#returns_52","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ipeip","text":"[Source] fun box ipproto_ipeip() : I32 val","title":"ipproto_ipeip"},{"location":"net-OSSockOpt/#returns_53","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ipip","text":"[Source] fun box ipproto_ipip() : I32 val","title":"ipproto_ipip"},{"location":"net-OSSockOpt/#returns_54","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ippc","text":"[Source] fun box ipproto_ippc() : I32 val","title":"ipproto_ippc"},{"location":"net-OSSockOpt/#returns_55","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ipv4","text":"[Source] fun box ipproto_ipv4() : I32 val","title":"ipproto_ipv4"},{"location":"net-OSSockOpt/#returns_56","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ipv6","text":"[Source] fun box ipproto_ipv6() : I32 val","title":"ipproto_ipv6"},{"location":"net-OSSockOpt/#returns_57","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_irtp","text":"[Source] fun box ipproto_irtp() : I32 val","title":"ipproto_irtp"},{"location":"net-OSSockOpt/#returns_58","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_kryptolan","text":"[Source] fun box ipproto_kryptolan() : I32 val","title":"ipproto_kryptolan"},{"location":"net-OSSockOpt/#returns_59","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_larp","text":"[Source] fun box ipproto_larp() : I32 val","title":"ipproto_larp"},{"location":"net-OSSockOpt/#returns_60","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_leaf1","text":"[Source] fun box ipproto_leaf1() : I32 val","title":"ipproto_leaf1"},{"location":"net-OSSockOpt/#returns_61","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_leaf2","text":"[Source] fun box ipproto_leaf2() : I32 val","title":"ipproto_leaf2"},{"location":"net-OSSockOpt/#returns_62","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_max","text":"[Source] fun box ipproto_max() : I32 val","title":"ipproto_max"},{"location":"net-OSSockOpt/#returns_63","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_maxid","text":"[Source] fun box ipproto_maxid() : I32 val","title":"ipproto_maxid"},{"location":"net-OSSockOpt/#returns_64","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_meas","text":"[Source] fun box ipproto_meas() : I32 val","title":"ipproto_meas"},{"location":"net-OSSockOpt/#returns_65","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_mh","text":"[Source] fun box ipproto_mh() : I32 val","title":"ipproto_mh"},{"location":"net-OSSockOpt/#returns_66","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_mhrp","text":"[Source] fun box ipproto_mhrp() : I32 val","title":"ipproto_mhrp"},{"location":"net-OSSockOpt/#returns_67","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_micp","text":"[Source] fun box ipproto_micp() : I32 val","title":"ipproto_micp"},{"location":"net-OSSockOpt/#returns_68","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_mobile","text":"[Source] fun box ipproto_mobile() : I32 val","title":"ipproto_mobile"},{"location":"net-OSSockOpt/#returns_69","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_mpls","text":"[Source] fun box ipproto_mpls() : I32 val","title":"ipproto_mpls"},{"location":"net-OSSockOpt/#returns_70","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_mtp","text":"[Source] fun box ipproto_mtp() : I32 val","title":"ipproto_mtp"},{"location":"net-OSSockOpt/#returns_71","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_mux","text":"[Source] fun box ipproto_mux() : I32 val","title":"ipproto_mux"},{"location":"net-OSSockOpt/#returns_72","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_nd","text":"[Source] fun box ipproto_nd() : I32 val","title":"ipproto_nd"},{"location":"net-OSSockOpt/#returns_73","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_nhrp","text":"[Source] fun box ipproto_nhrp() : I32 val","title":"ipproto_nhrp"},{"location":"net-OSSockOpt/#returns_74","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_none","text":"[Source] fun box ipproto_none() : I32 val","title":"ipproto_none"},{"location":"net-OSSockOpt/#returns_75","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_nsp","text":"[Source] fun box ipproto_nsp() : I32 val","title":"ipproto_nsp"},{"location":"net-OSSockOpt/#returns_76","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_nvpii","text":"[Source] fun box ipproto_nvpii() : I32 val","title":"ipproto_nvpii"},{"location":"net-OSSockOpt/#returns_77","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_old_divert","text":"[Source] fun box ipproto_old_divert() : I32 val","title":"ipproto_old_divert"},{"location":"net-OSSockOpt/#returns_78","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ospfigp","text":"[Source] fun box ipproto_ospfigp() : I32 val","title":"ipproto_ospfigp"},{"location":"net-OSSockOpt/#returns_79","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_pfsync","text":"[Source] fun box ipproto_pfsync() : I32 val","title":"ipproto_pfsync"},{"location":"net-OSSockOpt/#returns_80","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_pgm","text":"[Source] fun box ipproto_pgm() : I32 val","title":"ipproto_pgm"},{"location":"net-OSSockOpt/#returns_81","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_pigp","text":"[Source] fun box ipproto_pigp() : I32 val","title":"ipproto_pigp"},{"location":"net-OSSockOpt/#returns_82","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_pim","text":"[Source] fun box ipproto_pim() : I32 val","title":"ipproto_pim"},{"location":"net-OSSockOpt/#returns_83","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_prm","text":"[Source] fun box ipproto_prm() : I32 val","title":"ipproto_prm"},{"location":"net-OSSockOpt/#returns_84","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_pup","text":"[Source] fun box ipproto_pup() : I32 val","title":"ipproto_pup"},{"location":"net-OSSockOpt/#returns_85","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_pvp","text":"[Source] fun box ipproto_pvp() : I32 val","title":"ipproto_pvp"},{"location":"net-OSSockOpt/#returns_86","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_raw","text":"[Source] fun box ipproto_raw() : I32 val","title":"ipproto_raw"},{"location":"net-OSSockOpt/#returns_87","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_rccmon","text":"[Source] fun box ipproto_rccmon() : I32 val","title":"ipproto_rccmon"},{"location":"net-OSSockOpt/#returns_88","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_rdp","text":"[Source] fun box ipproto_rdp() : I32 val","title":"ipproto_rdp"},{"location":"net-OSSockOpt/#returns_89","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_reserved_253","text":"[Source] fun box ipproto_reserved_253() : I32 val","title":"ipproto_reserved_253"},{"location":"net-OSSockOpt/#returns_90","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_reserved_254","text":"[Source] fun box ipproto_reserved_254() : I32 val","title":"ipproto_reserved_254"},{"location":"net-OSSockOpt/#returns_91","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_routing","text":"[Source] fun box ipproto_routing() : I32 val","title":"ipproto_routing"},{"location":"net-OSSockOpt/#returns_92","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_rsvp","text":"[Source] fun box ipproto_rsvp() : I32 val","title":"ipproto_rsvp"},{"location":"net-OSSockOpt/#returns_93","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_rvd","text":"[Source] fun box ipproto_rvd() : I32 val","title":"ipproto_rvd"},{"location":"net-OSSockOpt/#returns_94","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_satexpak","text":"[Source] fun box ipproto_satexpak() : I32 val","title":"ipproto_satexpak"},{"location":"net-OSSockOpt/#returns_95","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_satmon","text":"[Source] fun box ipproto_satmon() : I32 val","title":"ipproto_satmon"},{"location":"net-OSSockOpt/#returns_96","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_sccsp","text":"[Source] fun box ipproto_sccsp() : I32 val","title":"ipproto_sccsp"},{"location":"net-OSSockOpt/#returns_97","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_sctp","text":"[Source] fun box ipproto_sctp() : I32 val","title":"ipproto_sctp"},{"location":"net-OSSockOpt/#returns_98","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_sdrp","text":"[Source] fun box ipproto_sdrp() : I32 val","title":"ipproto_sdrp"},{"location":"net-OSSockOpt/#returns_99","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_send","text":"[Source] fun box ipproto_send() : I32 val","title":"ipproto_send"},{"location":"net-OSSockOpt/#returns_100","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_sep","text":"[Source] fun box ipproto_sep() : I32 val","title":"ipproto_sep"},{"location":"net-OSSockOpt/#returns_101","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_shim6","text":"[Source] fun box ipproto_shim6() : I32 val","title":"ipproto_shim6"},{"location":"net-OSSockOpt/#returns_102","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_skip","text":"[Source] fun box ipproto_skip() : I32 val","title":"ipproto_skip"},{"location":"net-OSSockOpt/#returns_103","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_spacer","text":"[Source] fun box ipproto_spacer() : I32 val","title":"ipproto_spacer"},{"location":"net-OSSockOpt/#returns_104","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_srpc","text":"[Source] fun box ipproto_srpc() : I32 val","title":"ipproto_srpc"},{"location":"net-OSSockOpt/#returns_105","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_st","text":"[Source] fun box ipproto_st() : I32 val","title":"ipproto_st"},{"location":"net-OSSockOpt/#returns_106","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_svmtp","text":"[Source] fun box ipproto_svmtp() : I32 val","title":"ipproto_svmtp"},{"location":"net-OSSockOpt/#returns_107","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_swipe","text":"[Source] fun box ipproto_swipe() : I32 val","title":"ipproto_swipe"},{"location":"net-OSSockOpt/#returns_108","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_tcf","text":"[Source] fun box ipproto_tcf() : I32 val","title":"ipproto_tcf"},{"location":"net-OSSockOpt/#returns_109","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_tcp","text":"[Source] fun box ipproto_tcp() : I32 val","title":"ipproto_tcp"},{"location":"net-OSSockOpt/#returns_110","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_tlsp","text":"[Source] fun box ipproto_tlsp() : I32 val","title":"ipproto_tlsp"},{"location":"net-OSSockOpt/#returns_111","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_tp","text":"[Source] fun box ipproto_tp() : I32 val","title":"ipproto_tp"},{"location":"net-OSSockOpt/#returns_112","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_tpxx","text":"[Source] fun box ipproto_tpxx() : I32 val","title":"ipproto_tpxx"},{"location":"net-OSSockOpt/#returns_113","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_trunk1","text":"[Source] fun box ipproto_trunk1() : I32 val","title":"ipproto_trunk1"},{"location":"net-OSSockOpt/#returns_114","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_trunk2","text":"[Source] fun box ipproto_trunk2() : I32 val","title":"ipproto_trunk2"},{"location":"net-OSSockOpt/#returns_115","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ttp","text":"[Source] fun box ipproto_ttp() : I32 val","title":"ipproto_ttp"},{"location":"net-OSSockOpt/#returns_116","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_udp","text":"[Source] fun box ipproto_udp() : I32 val","title":"ipproto_udp"},{"location":"net-OSSockOpt/#returns_117","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_udplite","text":"[Source] fun box ipproto_udplite() : I32 val","title":"ipproto_udplite"},{"location":"net-OSSockOpt/#returns_118","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_vines","text":"[Source] fun box ipproto_vines() : I32 val","title":"ipproto_vines"},{"location":"net-OSSockOpt/#returns_119","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_visa","text":"[Source] fun box ipproto_visa() : I32 val","title":"ipproto_visa"},{"location":"net-OSSockOpt/#returns_120","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_vmtp","text":"[Source] fun box ipproto_vmtp() : I32 val","title":"ipproto_vmtp"},{"location":"net-OSSockOpt/#returns_121","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_wbexpak","text":"[Source] fun box ipproto_wbexpak() : I32 val","title":"ipproto_wbexpak"},{"location":"net-OSSockOpt/#returns_122","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_wbmon","text":"[Source] fun box ipproto_wbmon() : I32 val","title":"ipproto_wbmon"},{"location":"net-OSSockOpt/#returns_123","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_wsn","text":"[Source] fun box ipproto_wsn() : I32 val","title":"ipproto_wsn"},{"location":"net-OSSockOpt/#returns_124","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_xnet","text":"[Source] fun box ipproto_xnet() : I32 val","title":"ipproto_xnet"},{"location":"net-OSSockOpt/#returns_125","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_xtp","text":"[Source] fun box ipproto_xtp() : I32 val","title":"ipproto_xtp"},{"location":"net-OSSockOpt/#returns_126","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_atalk","text":"[Source] fun box sol_atalk() : I32 val","title":"sol_atalk"},{"location":"net-OSSockOpt/#returns_127","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_ax25","text":"[Source] fun box sol_ax25() : I32 val","title":"sol_ax25"},{"location":"net-OSSockOpt/#returns_128","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_hci_raw","text":"[Source] fun box sol_hci_raw() : I32 val","title":"sol_hci_raw"},{"location":"net-OSSockOpt/#returns_129","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_ipx","text":"[Source] fun box sol_ipx() : I32 val","title":"sol_ipx"},{"location":"net-OSSockOpt/#returns_130","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_l2cap","text":"[Source] fun box sol_l2cap() : I32 val","title":"sol_l2cap"},{"location":"net-OSSockOpt/#returns_131","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_local","text":"[Source] fun box sol_local() : I32 val","title":"sol_local"},{"location":"net-OSSockOpt/#returns_132","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_ndrvproto","text":"[Source] fun box sol_ndrvproto() : I32 val","title":"sol_ndrvproto"},{"location":"net-OSSockOpt/#returns_133","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_netrom","text":"[Source] fun box sol_netrom() : I32 val","title":"sol_netrom"},{"location":"net-OSSockOpt/#returns_134","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_rds","text":"[Source] fun box sol_rds() : I32 val","title":"sol_rds"},{"location":"net-OSSockOpt/#returns_135","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_rfcomm","text":"[Source] fun box sol_rfcomm() : I32 val","title":"sol_rfcomm"},{"location":"net-OSSockOpt/#returns_136","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_rose","text":"[Source] fun box sol_rose() : I32 val","title":"sol_rose"},{"location":"net-OSSockOpt/#returns_137","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_sco","text":"[Source] fun box sol_sco() : I32 val","title":"sol_sco"},{"location":"net-OSSockOpt/#returns_138","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_socket","text":"[Source] fun box sol_socket() : I32 val","title":"sol_socket"},{"location":"net-OSSockOpt/#returns_139","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_tipc","text":"[Source] fun box sol_tipc() : I32 val","title":"sol_tipc"},{"location":"net-OSSockOpt/#returns_140","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_udp","text":"[Source] fun box sol_udp() : I32 val","title":"sol_udp"},{"location":"net-OSSockOpt/#returns_141","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#af_coip","text":"[Source] fun box af_coip() : I32 val","title":"af_coip"},{"location":"net-OSSockOpt/#returns_142","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#af_inet","text":"[Source] fun box af_inet() : I32 val","title":"af_inet"},{"location":"net-OSSockOpt/#returns_143","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#af_inet6","text":"[Source] fun box af_inet6() : I32 val","title":"af_inet6"},{"location":"net-OSSockOpt/#returns_144","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#bluetooth_proto_sco","text":"[Source] fun box bluetooth_proto_sco() : I32 val","title":"bluetooth_proto_sco"},{"location":"net-OSSockOpt/#returns_145","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_nr_pkt_types","text":"[Source] fun box dccp_nr_pkt_types() : I32 val","title":"dccp_nr_pkt_types"},{"location":"net-OSSockOpt/#returns_146","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_service_list_max_len","text":"[Source] fun box dccp_service_list_max_len() : I32 val","title":"dccp_service_list_max_len"},{"location":"net-OSSockOpt/#returns_147","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_single_opt_maxlen","text":"[Source] fun box dccp_single_opt_maxlen() : I32 val","title":"dccp_single_opt_maxlen"},{"location":"net-OSSockOpt/#returns_148","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_available_ccids","text":"[Source] fun box dccp_sockopt_available_ccids() : I32 val","title":"dccp_sockopt_available_ccids"},{"location":"net-OSSockOpt/#returns_149","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_ccid","text":"[Source] fun box dccp_sockopt_ccid() : I32 val","title":"dccp_sockopt_ccid"},{"location":"net-OSSockOpt/#returns_150","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_ccid_rx_info","text":"[Source] fun box dccp_sockopt_ccid_rx_info() : I32 val","title":"dccp_sockopt_ccid_rx_info"},{"location":"net-OSSockOpt/#returns_151","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_ccid_tx_info","text":"[Source] fun box dccp_sockopt_ccid_tx_info() : I32 val","title":"dccp_sockopt_ccid_tx_info"},{"location":"net-OSSockOpt/#returns_152","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_change_l","text":"[Source] fun box dccp_sockopt_change_l() : I32 val","title":"dccp_sockopt_change_l"},{"location":"net-OSSockOpt/#returns_153","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_change_r","text":"[Source] fun box dccp_sockopt_change_r() : I32 val","title":"dccp_sockopt_change_r"},{"location":"net-OSSockOpt/#returns_154","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_get_cur_mps","text":"[Source] fun box dccp_sockopt_get_cur_mps() : I32 val","title":"dccp_sockopt_get_cur_mps"},{"location":"net-OSSockOpt/#returns_155","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_packet_size","text":"[Source] fun box dccp_sockopt_packet_size() : I32 val","title":"dccp_sockopt_packet_size"},{"location":"net-OSSockOpt/#returns_156","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_qpolicy_id","text":"[Source] fun box dccp_sockopt_qpolicy_id() : I32 val","title":"dccp_sockopt_qpolicy_id"},{"location":"net-OSSockOpt/#returns_157","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_qpolicy_txqlen","text":"[Source] fun box dccp_sockopt_qpolicy_txqlen() : I32 val","title":"dccp_sockopt_qpolicy_txqlen"},{"location":"net-OSSockOpt/#returns_158","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_recv_cscov","text":"[Source] fun box dccp_sockopt_recv_cscov() : I32 val","title":"dccp_sockopt_recv_cscov"},{"location":"net-OSSockOpt/#returns_159","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_rx_ccid","text":"[Source] fun box dccp_sockopt_rx_ccid() : I32 val","title":"dccp_sockopt_rx_ccid"},{"location":"net-OSSockOpt/#returns_160","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_send_cscov","text":"[Source] fun box dccp_sockopt_send_cscov() : I32 val","title":"dccp_sockopt_send_cscov"},{"location":"net-OSSockOpt/#returns_161","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_server_timewait","text":"[Source] fun box dccp_sockopt_server_timewait() : I32 val","title":"dccp_sockopt_server_timewait"},{"location":"net-OSSockOpt/#returns_162","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_service","text":"[Source] fun box dccp_sockopt_service() : I32 val","title":"dccp_sockopt_service"},{"location":"net-OSSockOpt/#returns_163","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_tx_ccid","text":"[Source] fun box dccp_sockopt_tx_ccid() : I32 val","title":"dccp_sockopt_tx_ccid"},{"location":"net-OSSockOpt/#returns_164","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_acceptmode","text":"[Source] fun box dso_acceptmode() : I32 val","title":"dso_acceptmode"},{"location":"net-OSSockOpt/#returns_165","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_conaccept","text":"[Source] fun box dso_conaccept() : I32 val","title":"dso_conaccept"},{"location":"net-OSSockOpt/#returns_166","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_conaccess","text":"[Source] fun box dso_conaccess() : I32 val","title":"dso_conaccess"},{"location":"net-OSSockOpt/#returns_167","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_condata","text":"[Source] fun box dso_condata() : I32 val","title":"dso_condata"},{"location":"net-OSSockOpt/#returns_168","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_conreject","text":"[Source] fun box dso_conreject() : I32 val","title":"dso_conreject"},{"location":"net-OSSockOpt/#returns_169","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_cork","text":"[Source] fun box dso_cork() : I32 val","title":"dso_cork"},{"location":"net-OSSockOpt/#returns_170","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_disdata","text":"[Source] fun box dso_disdata() : I32 val","title":"dso_disdata"},{"location":"net-OSSockOpt/#returns_171","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_info","text":"[Source] fun box dso_info() : I32 val","title":"dso_info"},{"location":"net-OSSockOpt/#returns_172","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_linkinfo","text":"[Source] fun box dso_linkinfo() : I32 val","title":"dso_linkinfo"},{"location":"net-OSSockOpt/#returns_173","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_max","text":"[Source] fun box dso_max() : I32 val","title":"dso_max"},{"location":"net-OSSockOpt/#returns_174","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_maxwindow","text":"[Source] fun box dso_maxwindow() : I32 val","title":"dso_maxwindow"},{"location":"net-OSSockOpt/#returns_175","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_nodelay","text":"[Source] fun box dso_nodelay() : I32 val","title":"dso_nodelay"},{"location":"net-OSSockOpt/#returns_176","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_seqpacket","text":"[Source] fun box dso_seqpacket() : I32 val","title":"dso_seqpacket"},{"location":"net-OSSockOpt/#returns_177","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_services","text":"[Source] fun box dso_services() : I32 val","title":"dso_services"},{"location":"net-OSSockOpt/#returns_178","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_stream","text":"[Source] fun box dso_stream() : I32 val","title":"dso_stream"},{"location":"net-OSSockOpt/#returns_179","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_address","text":"[Source] fun box icmp_address() : I32 val","title":"icmp_address"},{"location":"net-OSSockOpt/#returns_180","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_addressreply","text":"[Source] fun box icmp_addressreply() : I32 val","title":"icmp_addressreply"},{"location":"net-OSSockOpt/#returns_181","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_dest_unreach","text":"[Source] fun box icmp_dest_unreach() : I32 val","title":"icmp_dest_unreach"},{"location":"net-OSSockOpt/#returns_182","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_echo","text":"[Source] fun box icmp_echo() : I32 val","title":"icmp_echo"},{"location":"net-OSSockOpt/#returns_183","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_echoreply","text":"[Source] fun box icmp_echoreply() : I32 val","title":"icmp_echoreply"},{"location":"net-OSSockOpt/#returns_184","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_exc_fragtime","text":"[Source] fun box icmp_exc_fragtime() : I32 val","title":"icmp_exc_fragtime"},{"location":"net-OSSockOpt/#returns_185","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_exc_ttl","text":"[Source] fun box icmp_exc_ttl() : I32 val","title":"icmp_exc_ttl"},{"location":"net-OSSockOpt/#returns_186","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_filter","text":"[Source] fun box icmp_filter() : I32 val","title":"icmp_filter"},{"location":"net-OSSockOpt/#returns_187","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_frag_needed","text":"[Source] fun box icmp_frag_needed() : I32 val","title":"icmp_frag_needed"},{"location":"net-OSSockOpt/#returns_188","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_host_ano","text":"[Source] fun box icmp_host_ano() : I32 val","title":"icmp_host_ano"},{"location":"net-OSSockOpt/#returns_189","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_host_isolated","text":"[Source] fun box icmp_host_isolated() : I32 val","title":"icmp_host_isolated"},{"location":"net-OSSockOpt/#returns_190","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_host_unknown","text":"[Source] fun box icmp_host_unknown() : I32 val","title":"icmp_host_unknown"},{"location":"net-OSSockOpt/#returns_191","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_host_unreach","text":"[Source] fun box icmp_host_unreach() : I32 val","title":"icmp_host_unreach"},{"location":"net-OSSockOpt/#returns_192","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_host_unr_tos","text":"[Source] fun box icmp_host_unr_tos() : I32 val","title":"icmp_host_unr_tos"},{"location":"net-OSSockOpt/#returns_193","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_info_reply","text":"[Source] fun box icmp_info_reply() : I32 val","title":"icmp_info_reply"},{"location":"net-OSSockOpt/#returns_194","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_info_request","text":"[Source] fun box icmp_info_request() : I32 val","title":"icmp_info_request"},{"location":"net-OSSockOpt/#returns_195","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_net_ano","text":"[Source] fun box icmp_net_ano() : I32 val","title":"icmp_net_ano"},{"location":"net-OSSockOpt/#returns_196","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_net_unknown","text":"[Source] fun box icmp_net_unknown() : I32 val","title":"icmp_net_unknown"},{"location":"net-OSSockOpt/#returns_197","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_net_unreach","text":"[Source] fun box icmp_net_unreach() : I32 val","title":"icmp_net_unreach"},{"location":"net-OSSockOpt/#returns_198","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_net_unr_tos","text":"[Source] fun box icmp_net_unr_tos() : I32 val","title":"icmp_net_unr_tos"},{"location":"net-OSSockOpt/#returns_199","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_parameterprob","text":"[Source] fun box icmp_parameterprob() : I32 val","title":"icmp_parameterprob"},{"location":"net-OSSockOpt/#returns_200","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_pkt_filtered","text":"[Source] fun box icmp_pkt_filtered() : I32 val","title":"icmp_pkt_filtered"},{"location":"net-OSSockOpt/#returns_201","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_port_unreach","text":"[Source] fun box icmp_port_unreach() : I32 val","title":"icmp_port_unreach"},{"location":"net-OSSockOpt/#returns_202","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_prec_cutoff","text":"[Source] fun box icmp_prec_cutoff() : I32 val","title":"icmp_prec_cutoff"},{"location":"net-OSSockOpt/#returns_203","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_prec_violation","text":"[Source] fun box icmp_prec_violation() : I32 val","title":"icmp_prec_violation"},{"location":"net-OSSockOpt/#returns_204","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_prot_unreach","text":"[Source] fun box icmp_prot_unreach() : I32 val","title":"icmp_prot_unreach"},{"location":"net-OSSockOpt/#returns_205","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_redirect","text":"[Source] fun box icmp_redirect() : I32 val","title":"icmp_redirect"},{"location":"net-OSSockOpt/#returns_206","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_redir_host","text":"[Source] fun box icmp_redir_host() : I32 val","title":"icmp_redir_host"},{"location":"net-OSSockOpt/#returns_207","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_redir_hosttos","text":"[Source] fun box icmp_redir_hosttos() : I32 val","title":"icmp_redir_hosttos"},{"location":"net-OSSockOpt/#returns_208","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_redir_net","text":"[Source] fun box icmp_redir_net() : I32 val","title":"icmp_redir_net"},{"location":"net-OSSockOpt/#returns_209","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_redir_nettos","text":"[Source] fun box icmp_redir_nettos() : I32 val","title":"icmp_redir_nettos"},{"location":"net-OSSockOpt/#returns_210","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_source_quench","text":"[Source] fun box icmp_source_quench() : I32 val","title":"icmp_source_quench"},{"location":"net-OSSockOpt/#returns_211","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_sr_failed","text":"[Source] fun box icmp_sr_failed() : I32 val","title":"icmp_sr_failed"},{"location":"net-OSSockOpt/#returns_212","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_timestamp","text":"[Source] fun box icmp_timestamp() : I32 val","title":"icmp_timestamp"},{"location":"net-OSSockOpt/#returns_213","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_timestampreply","text":"[Source] fun box icmp_timestampreply() : I32 val","title":"icmp_timestampreply"},{"location":"net-OSSockOpt/#returns_214","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_time_exceeded","text":"[Source] fun box icmp_time_exceeded() : I32 val","title":"icmp_time_exceeded"},{"location":"net-OSSockOpt/#returns_215","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_acceptsourceroute","text":"[Source] fun box ipctl_acceptsourceroute() : I32 val","title":"ipctl_acceptsourceroute"},{"location":"net-OSSockOpt/#returns_216","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_defmtu","text":"[Source] fun box ipctl_defmtu() : I32 val","title":"ipctl_defmtu"},{"location":"net-OSSockOpt/#returns_217","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_defttl","text":"[Source] fun box ipctl_defttl() : I32 val","title":"ipctl_defttl"},{"location":"net-OSSockOpt/#returns_218","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_directedbroadcast","text":"[Source] fun box ipctl_directedbroadcast() : I32 val","title":"ipctl_directedbroadcast"},{"location":"net-OSSockOpt/#returns_219","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_fastforwarding","text":"[Source] fun box ipctl_fastforwarding() : I32 val","title":"ipctl_fastforwarding"},{"location":"net-OSSockOpt/#returns_220","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_forwarding","text":"[Source] fun box ipctl_forwarding() : I32 val","title":"ipctl_forwarding"},{"location":"net-OSSockOpt/#returns_221","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_gif_ttl","text":"[Source] fun box ipctl_gif_ttl() : I32 val","title":"ipctl_gif_ttl"},{"location":"net-OSSockOpt/#returns_222","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_intrdqdrops","text":"[Source] fun box ipctl_intrdqdrops() : I32 val","title":"ipctl_intrdqdrops"},{"location":"net-OSSockOpt/#returns_223","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_intrdqmaxlen","text":"[Source] fun box ipctl_intrdqmaxlen() : I32 val","title":"ipctl_intrdqmaxlen"},{"location":"net-OSSockOpt/#returns_224","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_intrqdrops","text":"[Source] fun box ipctl_intrqdrops() : I32 val","title":"ipctl_intrqdrops"},{"location":"net-OSSockOpt/#returns_225","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_intrqmaxlen","text":"[Source] fun box ipctl_intrqmaxlen() : I32 val","title":"ipctl_intrqmaxlen"},{"location":"net-OSSockOpt/#returns_226","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_keepfaith","text":"[Source] fun box ipctl_keepfaith() : I32 val","title":"ipctl_keepfaith"},{"location":"net-OSSockOpt/#returns_227","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_maxid","text":"[Source] fun box ipctl_maxid() : I32 val","title":"ipctl_maxid"},{"location":"net-OSSockOpt/#returns_228","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_rtexpire","text":"[Source] fun box ipctl_rtexpire() : I32 val","title":"ipctl_rtexpire"},{"location":"net-OSSockOpt/#returns_229","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_rtmaxcache","text":"[Source] fun box ipctl_rtmaxcache() : I32 val","title":"ipctl_rtmaxcache"},{"location":"net-OSSockOpt/#returns_230","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_rtminexpire","text":"[Source] fun box ipctl_rtminexpire() : I32 val","title":"ipctl_rtminexpire"},{"location":"net-OSSockOpt/#returns_231","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_sendredirects","text":"[Source] fun box ipctl_sendredirects() : I32 val","title":"ipctl_sendredirects"},{"location":"net-OSSockOpt/#returns_232","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_sourceroute","text":"[Source] fun box ipctl_sourceroute() : I32 val","title":"ipctl_sourceroute"},{"location":"net-OSSockOpt/#returns_233","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_stats","text":"[Source] fun box ipctl_stats() : I32 val","title":"ipctl_stats"},{"location":"net-OSSockOpt/#returns_234","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipport_ephemeralfirst","text":"[Source] fun box ipport_ephemeralfirst() : I32 val","title":"ipport_ephemeralfirst"},{"location":"net-OSSockOpt/#returns_235","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipport_ephemerallast","text":"[Source] fun box ipport_ephemerallast() : I32 val","title":"ipport_ephemerallast"},{"location":"net-OSSockOpt/#returns_236","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipport_hifirstauto","text":"[Source] fun box ipport_hifirstauto() : I32 val","title":"ipport_hifirstauto"},{"location":"net-OSSockOpt/#returns_237","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipport_hilastauto","text":"[Source] fun box ipport_hilastauto() : I32 val","title":"ipport_hilastauto"},{"location":"net-OSSockOpt/#returns_238","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipport_max","text":"[Source] fun box ipport_max() : I32 val","title":"ipport_max"},{"location":"net-OSSockOpt/#returns_239","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipport_reserved","text":"[Source] fun box ipport_reserved() : I32 val","title":"ipport_reserved"},{"location":"net-OSSockOpt/#returns_240","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipport_reservedstart","text":"[Source] fun box ipport_reservedstart() : I32 val","title":"ipport_reservedstart"},{"location":"net-OSSockOpt/#returns_241","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipport_userreserved","text":"[Source] fun box ipport_userreserved() : I32 val","title":"ipport_userreserved"},{"location":"net-OSSockOpt/#returns_242","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_2292dstopts","text":"[Source] fun box ipv6_2292dstopts() : I32 val","title":"ipv6_2292dstopts"},{"location":"net-OSSockOpt/#returns_243","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_2292hoplimit","text":"[Source] fun box ipv6_2292hoplimit() : I32 val","title":"ipv6_2292hoplimit"},{"location":"net-OSSockOpt/#returns_244","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_2292hopopts","text":"[Source] fun box ipv6_2292hopopts() : I32 val","title":"ipv6_2292hopopts"},{"location":"net-OSSockOpt/#returns_245","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_2292pktinfo","text":"[Source] fun box ipv6_2292pktinfo() : I32 val","title":"ipv6_2292pktinfo"},{"location":"net-OSSockOpt/#returns_246","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_2292pktoptions","text":"[Source] fun box ipv6_2292pktoptions() : I32 val","title":"ipv6_2292pktoptions"},{"location":"net-OSSockOpt/#returns_247","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_2292rthdr","text":"[Source] fun box ipv6_2292rthdr() : I32 val","title":"ipv6_2292rthdr"},{"location":"net-OSSockOpt/#returns_248","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_addrform","text":"[Source] fun box ipv6_addrform() : I32 val","title":"ipv6_addrform"},{"location":"net-OSSockOpt/#returns_249","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_addr_preferences","text":"[Source] fun box ipv6_addr_preferences() : I32 val","title":"ipv6_addr_preferences"},{"location":"net-OSSockOpt/#returns_250","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_add_membership","text":"[Source] fun box ipv6_add_membership() : I32 val","title":"ipv6_add_membership"},{"location":"net-OSSockOpt/#returns_251","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_authhdr","text":"[Source] fun box ipv6_authhdr() : I32 val","title":"ipv6_authhdr"},{"location":"net-OSSockOpt/#returns_252","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_autoflowlabel","text":"[Source] fun box ipv6_autoflowlabel() : I32 val","title":"ipv6_autoflowlabel"},{"location":"net-OSSockOpt/#returns_253","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_checksum","text":"[Source] fun box ipv6_checksum() : I32 val","title":"ipv6_checksum"},{"location":"net-OSSockOpt/#returns_254","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_dontfrag","text":"[Source] fun box ipv6_dontfrag() : I32 val","title":"ipv6_dontfrag"},{"location":"net-OSSockOpt/#returns_255","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_drop_membership","text":"[Source] fun box ipv6_drop_membership() : I32 val","title":"ipv6_drop_membership"},{"location":"net-OSSockOpt/#returns_256","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_dstopts","text":"[Source] fun box ipv6_dstopts() : I32 val","title":"ipv6_dstopts"},{"location":"net-OSSockOpt/#returns_257","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_flowinfo","text":"[Source] fun box ipv6_flowinfo() : I32 val","title":"ipv6_flowinfo"},{"location":"net-OSSockOpt/#returns_258","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_flowinfo_flowlabel","text":"[Source] fun box ipv6_flowinfo_flowlabel() : I32 val","title":"ipv6_flowinfo_flowlabel"},{"location":"net-OSSockOpt/#returns_259","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_flowinfo_priority","text":"[Source] fun box ipv6_flowinfo_priority() : I32 val","title":"ipv6_flowinfo_priority"},{"location":"net-OSSockOpt/#returns_260","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_flowinfo_send","text":"[Source] fun box ipv6_flowinfo_send() : I32 val","title":"ipv6_flowinfo_send"},{"location":"net-OSSockOpt/#returns_261","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_flowlabel_mgr","text":"[Source] fun box ipv6_flowlabel_mgr() : I32 val","title":"ipv6_flowlabel_mgr"},{"location":"net-OSSockOpt/#returns_262","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_a_get","text":"[Source] fun box ipv6_fl_a_get() : I32 val","title":"ipv6_fl_a_get"},{"location":"net-OSSockOpt/#returns_263","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_a_put","text":"[Source] fun box ipv6_fl_a_put() : I32 val","title":"ipv6_fl_a_put"},{"location":"net-OSSockOpt/#returns_264","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_a_renew","text":"[Source] fun box ipv6_fl_a_renew() : I32 val","title":"ipv6_fl_a_renew"},{"location":"net-OSSockOpt/#returns_265","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_f_create","text":"[Source] fun box ipv6_fl_f_create() : I32 val","title":"ipv6_fl_f_create"},{"location":"net-OSSockOpt/#returns_266","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_f_excl","text":"[Source] fun box ipv6_fl_f_excl() : I32 val","title":"ipv6_fl_f_excl"},{"location":"net-OSSockOpt/#returns_267","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_f_reflect","text":"[Source] fun box ipv6_fl_f_reflect() : I32 val","title":"ipv6_fl_f_reflect"},{"location":"net-OSSockOpt/#returns_268","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_f_remote","text":"[Source] fun box ipv6_fl_f_remote() : I32 val","title":"ipv6_fl_f_remote"},{"location":"net-OSSockOpt/#returns_269","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_s_any","text":"[Source] fun box ipv6_fl_s_any() : I32 val","title":"ipv6_fl_s_any"},{"location":"net-OSSockOpt/#returns_270","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_s_excl","text":"[Source] fun box ipv6_fl_s_excl() : I32 val","title":"ipv6_fl_s_excl"},{"location":"net-OSSockOpt/#returns_271","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_s_none","text":"[Source] fun box ipv6_fl_s_none() : I32 val","title":"ipv6_fl_s_none"},{"location":"net-OSSockOpt/#returns_272","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_s_process","text":"[Source] fun box ipv6_fl_s_process() : I32 val","title":"ipv6_fl_s_process"},{"location":"net-OSSockOpt/#returns_273","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_s_user","text":"[Source] fun box ipv6_fl_s_user() : I32 val","title":"ipv6_fl_s_user"},{"location":"net-OSSockOpt/#returns_274","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_hoplimit","text":"[Source] fun box ipv6_hoplimit() : I32 val","title":"ipv6_hoplimit"},{"location":"net-OSSockOpt/#returns_275","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_hopopts","text":"[Source] fun box ipv6_hopopts() : I32 val","title":"ipv6_hopopts"},{"location":"net-OSSockOpt/#returns_276","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_ipsec_policy","text":"[Source] fun box ipv6_ipsec_policy() : I32 val","title":"ipv6_ipsec_policy"},{"location":"net-OSSockOpt/#returns_277","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_join_anycast","text":"[Source] fun box ipv6_join_anycast() : I32 val","title":"ipv6_join_anycast"},{"location":"net-OSSockOpt/#returns_278","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_leave_anycast","text":"[Source] fun box ipv6_leave_anycast() : I32 val","title":"ipv6_leave_anycast"},{"location":"net-OSSockOpt/#returns_279","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_minhopcount","text":"[Source] fun box ipv6_minhopcount() : I32 val","title":"ipv6_minhopcount"},{"location":"net-OSSockOpt/#returns_280","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_mtu","text":"[Source] fun box ipv6_mtu() : I32 val","title":"ipv6_mtu"},{"location":"net-OSSockOpt/#returns_281","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_mtu_discover","text":"[Source] fun box ipv6_mtu_discover() : I32 val","title":"ipv6_mtu_discover"},{"location":"net-OSSockOpt/#returns_282","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_multicast_hops","text":"[Source] fun box ipv6_multicast_hops() : I32 val","title":"ipv6_multicast_hops"},{"location":"net-OSSockOpt/#returns_283","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_multicast_if","text":"[Source] fun box ipv6_multicast_if() : I32 val","title":"ipv6_multicast_if"},{"location":"net-OSSockOpt/#returns_284","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_multicast_loop","text":"[Source] fun box ipv6_multicast_loop() : I32 val","title":"ipv6_multicast_loop"},{"location":"net-OSSockOpt/#returns_285","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_nexthop","text":"[Source] fun box ipv6_nexthop() : I32 val","title":"ipv6_nexthop"},{"location":"net-OSSockOpt/#returns_286","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_origdstaddr","text":"[Source] fun box ipv6_origdstaddr() : I32 val","title":"ipv6_origdstaddr"},{"location":"net-OSSockOpt/#returns_287","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_pathmtu","text":"[Source] fun box ipv6_pathmtu() : I32 val","title":"ipv6_pathmtu"},{"location":"net-OSSockOpt/#returns_288","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_pktinfo","text":"[Source] fun box ipv6_pktinfo() : I32 val","title":"ipv6_pktinfo"},{"location":"net-OSSockOpt/#returns_289","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_do","text":"[Source] fun box ipv6_pmtudisc_do() : I32 val","title":"ipv6_pmtudisc_do"},{"location":"net-OSSockOpt/#returns_290","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_dont","text":"[Source] fun box ipv6_pmtudisc_dont() : I32 val","title":"ipv6_pmtudisc_dont"},{"location":"net-OSSockOpt/#returns_291","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_interface","text":"[Source] fun box ipv6_pmtudisc_interface() : I32 val","title":"ipv6_pmtudisc_interface"},{"location":"net-OSSockOpt/#returns_292","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_omit","text":"[Source] fun box ipv6_pmtudisc_omit() : I32 val","title":"ipv6_pmtudisc_omit"},{"location":"net-OSSockOpt/#returns_293","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_probe","text":"[Source] fun box ipv6_pmtudisc_probe() : I32 val","title":"ipv6_pmtudisc_probe"},{"location":"net-OSSockOpt/#returns_294","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_want","text":"[Source] fun box ipv6_pmtudisc_want() : I32 val","title":"ipv6_pmtudisc_want"},{"location":"net-OSSockOpt/#returns_295","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_prefer_src_cga","text":"[Source] fun box ipv6_prefer_src_cga() : I32 val","title":"ipv6_prefer_src_cga"},{"location":"net-OSSockOpt/#returns_296","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_prefer_src_coa","text":"[Source] fun box ipv6_prefer_src_coa() : I32 val","title":"ipv6_prefer_src_coa"},{"location":"net-OSSockOpt/#returns_297","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_prefer_src_home","text":"[Source] fun box ipv6_prefer_src_home() : I32 val","title":"ipv6_prefer_src_home"},{"location":"net-OSSockOpt/#returns_298","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_prefer_src_noncga","text":"[Source] fun box ipv6_prefer_src_noncga() : I32 val","title":"ipv6_prefer_src_noncga"},{"location":"net-OSSockOpt/#returns_299","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_prefer_src_public","text":"[Source] fun box ipv6_prefer_src_public() : I32 val","title":"ipv6_prefer_src_public"},{"location":"net-OSSockOpt/#returns_300","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_prefer_src_pubtmp_default","text":"[Source] fun box ipv6_prefer_src_pubtmp_default() : I32 val","title":"ipv6_prefer_src_pubtmp_default"},{"location":"net-OSSockOpt/#returns_301","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_prefer_src_tmp","text":"[Source] fun box ipv6_prefer_src_tmp() : I32 val","title":"ipv6_prefer_src_tmp"},{"location":"net-OSSockOpt/#returns_302","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_10","text":"[Source] fun box ipv6_priority_10() : I32 val","title":"ipv6_priority_10"},{"location":"net-OSSockOpt/#returns_303","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_11","text":"[Source] fun box ipv6_priority_11() : I32 val","title":"ipv6_priority_11"},{"location":"net-OSSockOpt/#returns_304","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_12","text":"[Source] fun box ipv6_priority_12() : I32 val","title":"ipv6_priority_12"},{"location":"net-OSSockOpt/#returns_305","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_13","text":"[Source] fun box ipv6_priority_13() : I32 val","title":"ipv6_priority_13"},{"location":"net-OSSockOpt/#returns_306","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_14","text":"[Source] fun box ipv6_priority_14() : I32 val","title":"ipv6_priority_14"},{"location":"net-OSSockOpt/#returns_307","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_15","text":"[Source] fun box ipv6_priority_15() : I32 val","title":"ipv6_priority_15"},{"location":"net-OSSockOpt/#returns_308","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_8","text":"[Source] fun box ipv6_priority_8() : I32 val","title":"ipv6_priority_8"},{"location":"net-OSSockOpt/#returns_309","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_9","text":"[Source] fun box ipv6_priority_9() : I32 val","title":"ipv6_priority_9"},{"location":"net-OSSockOpt/#returns_310","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_bulk","text":"[Source] fun box ipv6_priority_bulk() : I32 val","title":"ipv6_priority_bulk"},{"location":"net-OSSockOpt/#returns_311","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_control","text":"[Source] fun box ipv6_priority_control() : I32 val","title":"ipv6_priority_control"},{"location":"net-OSSockOpt/#returns_312","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_filler","text":"[Source] fun box ipv6_priority_filler() : I32 val","title":"ipv6_priority_filler"},{"location":"net-OSSockOpt/#returns_313","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_interactive","text":"[Source] fun box ipv6_priority_interactive() : I32 val","title":"ipv6_priority_interactive"},{"location":"net-OSSockOpt/#returns_314","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_reserved1","text":"[Source] fun box ipv6_priority_reserved1() : I32 val","title":"ipv6_priority_reserved1"},{"location":"net-OSSockOpt/#returns_315","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_reserved2","text":"[Source] fun box ipv6_priority_reserved2() : I32 val","title":"ipv6_priority_reserved2"},{"location":"net-OSSockOpt/#returns_316","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_unattended","text":"[Source] fun box ipv6_priority_unattended() : I32 val","title":"ipv6_priority_unattended"},{"location":"net-OSSockOpt/#returns_317","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_uncharacterized","text":"[Source] fun box ipv6_priority_uncharacterized() : I32 val","title":"ipv6_priority_uncharacterized"},{"location":"net-OSSockOpt/#returns_318","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_recvdstopts","text":"[Source] fun box ipv6_recvdstopts() : I32 val","title":"ipv6_recvdstopts"},{"location":"net-OSSockOpt/#returns_319","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_recverr","text":"[Source] fun box ipv6_recverr() : I32 val","title":"ipv6_recverr"},{"location":"net-OSSockOpt/#returns_320","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_recvhoplimit","text":"[Source] fun box ipv6_recvhoplimit() : I32 val","title":"ipv6_recvhoplimit"},{"location":"net-OSSockOpt/#returns_321","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_recvhopopts","text":"[Source] fun box ipv6_recvhopopts() : I32 val","title":"ipv6_recvhopopts"},{"location":"net-OSSockOpt/#returns_322","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_recvorigdstaddr","text":"[Source] fun box ipv6_recvorigdstaddr() : I32 val","title":"ipv6_recvorigdstaddr"},{"location":"net-OSSockOpt/#returns_323","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_recvpathmtu","text":"[Source] fun box ipv6_recvpathmtu() : I32 val","title":"ipv6_recvpathmtu"},{"location":"net-OSSockOpt/#returns_324","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_recvpktinfo","text":"[Source] fun box ipv6_recvpktinfo() : I32 val","title":"ipv6_recvpktinfo"},{"location":"net-OSSockOpt/#returns_325","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_recvrthdr","text":"[Source] fun box ipv6_recvrthdr() : I32 val","title":"ipv6_recvrthdr"},{"location":"net-OSSockOpt/#returns_326","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_recvtclass","text":"[Source] fun box ipv6_recvtclass() : I32 val","title":"ipv6_recvtclass"},{"location":"net-OSSockOpt/#returns_327","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_router_alert","text":"[Source] fun box ipv6_router_alert() : I32 val","title":"ipv6_router_alert"},{"location":"net-OSSockOpt/#returns_328","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_rthdr","text":"[Source] fun box ipv6_rthdr() : I32 val","title":"ipv6_rthdr"},{"location":"net-OSSockOpt/#returns_329","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_rthdrdstopts","text":"[Source] fun box ipv6_rthdrdstopts() : I32 val","title":"ipv6_rthdrdstopts"},{"location":"net-OSSockOpt/#returns_330","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_tclass","text":"[Source] fun box ipv6_tclass() : I32 val","title":"ipv6_tclass"},{"location":"net-OSSockOpt/#returns_331","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_tlv_hao","text":"[Source] fun box ipv6_tlv_hao() : I32 val","title":"ipv6_tlv_hao"},{"location":"net-OSSockOpt/#returns_332","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_tlv_jumbo","text":"[Source] fun box ipv6_tlv_jumbo() : I32 val","title":"ipv6_tlv_jumbo"},{"location":"net-OSSockOpt/#returns_333","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_tlv_pad1","text":"[Source] fun box ipv6_tlv_pad1() : I32 val","title":"ipv6_tlv_pad1"},{"location":"net-OSSockOpt/#returns_334","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_tlv_padn","text":"[Source] fun box ipv6_tlv_padn() : I32 val","title":"ipv6_tlv_padn"},{"location":"net-OSSockOpt/#returns_335","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_tlv_routeralert","text":"[Source] fun box ipv6_tlv_routeralert() : I32 val","title":"ipv6_tlv_routeralert"},{"location":"net-OSSockOpt/#returns_336","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_transparent","text":"[Source] fun box ipv6_transparent() : I32 val","title":"ipv6_transparent"},{"location":"net-OSSockOpt/#returns_337","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_unicast_hops","text":"[Source] fun box ipv6_unicast_hops() : I32 val","title":"ipv6_unicast_hops"},{"location":"net-OSSockOpt/#returns_338","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_unicast_if","text":"[Source] fun box ipv6_unicast_if() : I32 val","title":"ipv6_unicast_if"},{"location":"net-OSSockOpt/#returns_339","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_use_min_mtu","text":"[Source] fun box ipv6_use_min_mtu() : I32 val","title":"ipv6_use_min_mtu"},{"location":"net-OSSockOpt/#returns_340","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_v6only","text":"[Source] fun box ipv6_v6only() : I32 val","title":"ipv6_v6only"},{"location":"net-OSSockOpt/#returns_341","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_xfrm_policy","text":"[Source] fun box ipv6_xfrm_policy() : I32 val","title":"ipv6_xfrm_policy"},{"location":"net-OSSockOpt/#returns_342","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_address","text":"[Source] fun box ipx_address() : I32 val","title":"ipx_address"},{"location":"net-OSSockOpt/#returns_343","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_address_notify","text":"[Source] fun box ipx_address_notify() : I32 val","title":"ipx_address_notify"},{"location":"net-OSSockOpt/#returns_344","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_crtitf","text":"[Source] fun box ipx_crtitf() : I32 val","title":"ipx_crtitf"},{"location":"net-OSSockOpt/#returns_345","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_dltitf","text":"[Source] fun box ipx_dltitf() : I32 val","title":"ipx_dltitf"},{"location":"net-OSSockOpt/#returns_346","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_dstype","text":"[Source] fun box ipx_dstype() : I32 val","title":"ipx_dstype"},{"location":"net-OSSockOpt/#returns_347","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_extended_address","text":"[Source] fun box ipx_extended_address() : I32 val","title":"ipx_extended_address"},{"location":"net-OSSockOpt/#returns_348","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_filterptype","text":"[Source] fun box ipx_filterptype() : I32 val","title":"ipx_filterptype"},{"location":"net-OSSockOpt/#returns_349","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_frame_8022","text":"[Source] fun box ipx_frame_8022() : I32 val","title":"ipx_frame_8022"},{"location":"net-OSSockOpt/#returns_350","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_frame_8023","text":"[Source] fun box ipx_frame_8023() : I32 val","title":"ipx_frame_8023"},{"location":"net-OSSockOpt/#returns_351","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_frame_etherii","text":"[Source] fun box ipx_frame_etherii() : I32 val","title":"ipx_frame_etherii"},{"location":"net-OSSockOpt/#returns_352","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_frame_none","text":"[Source] fun box ipx_frame_none() : I32 val","title":"ipx_frame_none"},{"location":"net-OSSockOpt/#returns_353","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_frame_snap","text":"[Source] fun box ipx_frame_snap() : I32 val","title":"ipx_frame_snap"},{"location":"net-OSSockOpt/#returns_354","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_frame_tr_8022","text":"[Source] fun box ipx_frame_tr_8022() : I32 val","title":"ipx_frame_tr_8022"},{"location":"net-OSSockOpt/#returns_355","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_getnetinfo","text":"[Source] fun box ipx_getnetinfo() : I32 val","title":"ipx_getnetinfo"},{"location":"net-OSSockOpt/#returns_356","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_getnetinfo_norip","text":"[Source] fun box ipx_getnetinfo_norip() : I32 val","title":"ipx_getnetinfo_norip"},{"location":"net-OSSockOpt/#returns_357","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_immediatespxack","text":"[Source] fun box ipx_immediatespxack() : I32 val","title":"ipx_immediatespxack"},{"location":"net-OSSockOpt/#returns_358","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_internal","text":"[Source] fun box ipx_internal() : I32 val","title":"ipx_internal"},{"location":"net-OSSockOpt/#returns_359","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_maxsize","text":"[Source] fun box ipx_maxsize() : I32 val","title":"ipx_maxsize"},{"location":"net-OSSockOpt/#returns_360","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_max_adapter_num","text":"[Source] fun box ipx_max_adapter_num() : I32 val","title":"ipx_max_adapter_num"},{"location":"net-OSSockOpt/#returns_361","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_mtu","text":"[Source] fun box ipx_mtu() : I32 val","title":"ipx_mtu"},{"location":"net-OSSockOpt/#returns_362","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_node_len","text":"[Source] fun box ipx_node_len() : I32 val","title":"ipx_node_len"},{"location":"net-OSSockOpt/#returns_363","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_primary","text":"[Source] fun box ipx_primary() : I32 val","title":"ipx_primary"},{"location":"net-OSSockOpt/#returns_364","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_ptype","text":"[Source] fun box ipx_ptype() : I32 val","title":"ipx_ptype"},{"location":"net-OSSockOpt/#returns_365","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_receive_broadcast","text":"[Source] fun box ipx_receive_broadcast() : I32 val","title":"ipx_receive_broadcast"},{"location":"net-OSSockOpt/#returns_366","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_recvhdr","text":"[Source] fun box ipx_recvhdr() : I32 val","title":"ipx_recvhdr"},{"location":"net-OSSockOpt/#returns_367","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_reripnetnumber","text":"[Source] fun box ipx_reripnetnumber() : I32 val","title":"ipx_reripnetnumber"},{"location":"net-OSSockOpt/#returns_368","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_route_no_router","text":"[Source] fun box ipx_route_no_router() : I32 val","title":"ipx_route_no_router"},{"location":"net-OSSockOpt/#returns_369","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_rt_8022","text":"[Source] fun box ipx_rt_8022() : I32 val","title":"ipx_rt_8022"},{"location":"net-OSSockOpt/#returns_370","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_rt_bluebook","text":"[Source] fun box ipx_rt_bluebook() : I32 val","title":"ipx_rt_bluebook"},{"location":"net-OSSockOpt/#returns_371","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_rt_routed","text":"[Source] fun box ipx_rt_routed() : I32 val","title":"ipx_rt_routed"},{"location":"net-OSSockOpt/#returns_372","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_rt_snap","text":"[Source] fun box ipx_rt_snap() : I32 val","title":"ipx_rt_snap"},{"location":"net-OSSockOpt/#returns_373","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_special_none","text":"[Source] fun box ipx_special_none() : I32 val","title":"ipx_special_none"},{"location":"net-OSSockOpt/#returns_374","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_spxgetconnectionstatus","text":"[Source] fun box ipx_spxgetconnectionstatus() : I32 val","title":"ipx_spxgetconnectionstatus"},{"location":"net-OSSockOpt/#returns_375","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_stopfilterptype","text":"[Source] fun box ipx_stopfilterptype() : I32 val","title":"ipx_stopfilterptype"},{"location":"net-OSSockOpt/#returns_376","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_type","text":"[Source] fun box ipx_type() : I32 val","title":"ipx_type"},{"location":"net-OSSockOpt/#returns_377","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_add_membership","text":"[Source] fun box ip_add_membership() : I32 val","title":"ip_add_membership"},{"location":"net-OSSockOpt/#returns_378","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_add_source_membership","text":"[Source] fun box ip_add_source_membership() : I32 val","title":"ip_add_source_membership"},{"location":"net-OSSockOpt/#returns_379","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_bindany","text":"[Source] fun box ip_bindany() : I32 val","title":"ip_bindany"},{"location":"net-OSSockOpt/#returns_380","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_bindmulti","text":"[Source] fun box ip_bindmulti() : I32 val","title":"ip_bindmulti"},{"location":"net-OSSockOpt/#returns_381","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_bind_address_no_port","text":"[Source] fun box ip_bind_address_no_port() : I32 val","title":"ip_bind_address_no_port"},{"location":"net-OSSockOpt/#returns_382","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_block_source","text":"[Source] fun box ip_block_source() : I32 val","title":"ip_block_source"},{"location":"net-OSSockOpt/#returns_383","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_bound_if","text":"[Source] fun box ip_bound_if() : I32 val","title":"ip_bound_if"},{"location":"net-OSSockOpt/#returns_384","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_checksum","text":"[Source] fun box ip_checksum() : I32 val","title":"ip_checksum"},{"location":"net-OSSockOpt/#returns_385","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_default_multicast_loop","text":"[Source] fun box ip_default_multicast_loop() : I32 val","title":"ip_default_multicast_loop"},{"location":"net-OSSockOpt/#returns_386","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_default_multicast_ttl","text":"[Source] fun box ip_default_multicast_ttl() : I32 val","title":"ip_default_multicast_ttl"},{"location":"net-OSSockOpt/#returns_387","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_dontfrag","text":"[Source] fun box ip_dontfrag() : I32 val","title":"ip_dontfrag"},{"location":"net-OSSockOpt/#returns_388","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_drop_membership","text":"[Source] fun box ip_drop_membership() : I32 val","title":"ip_drop_membership"},{"location":"net-OSSockOpt/#returns_389","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_drop_source_membership","text":"[Source] fun box ip_drop_source_membership() : I32 val","title":"ip_drop_source_membership"},{"location":"net-OSSockOpt/#returns_390","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_dummynet3","text":"[Source] fun box ip_dummynet3() : I32 val","title":"ip_dummynet3"},{"location":"net-OSSockOpt/#returns_391","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_dummynet_configure","text":"[Source] fun box ip_dummynet_configure() : I32 val","title":"ip_dummynet_configure"},{"location":"net-OSSockOpt/#returns_392","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_dummynet_del","text":"[Source] fun box ip_dummynet_del() : I32 val","title":"ip_dummynet_del"},{"location":"net-OSSockOpt/#returns_393","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_dummynet_flush","text":"[Source] fun box ip_dummynet_flush() : I32 val","title":"ip_dummynet_flush"},{"location":"net-OSSockOpt/#returns_394","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_dummynet_get","text":"[Source] fun box ip_dummynet_get() : I32 val","title":"ip_dummynet_get"},{"location":"net-OSSockOpt/#returns_395","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_faith","text":"[Source] fun box ip_faith() : I32 val","title":"ip_faith"},{"location":"net-OSSockOpt/#returns_396","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_flowid","text":"[Source] fun box ip_flowid() : I32 val","title":"ip_flowid"},{"location":"net-OSSockOpt/#returns_397","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_flowtype","text":"[Source] fun box ip_flowtype() : I32 val","title":"ip_flowtype"},{"location":"net-OSSockOpt/#returns_398","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_freebind","text":"[Source] fun box ip_freebind() : I32 val","title":"ip_freebind"},{"location":"net-OSSockOpt/#returns_399","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw3","text":"[Source] fun box ip_fw3() : I32 val","title":"ip_fw3"},{"location":"net-OSSockOpt/#returns_400","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_add","text":"[Source] fun box ip_fw_add() : I32 val","title":"ip_fw_add"},{"location":"net-OSSockOpt/#returns_401","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_del","text":"[Source] fun box ip_fw_del() : I32 val","title":"ip_fw_del"},{"location":"net-OSSockOpt/#returns_402","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_flush","text":"[Source] fun box ip_fw_flush() : I32 val","title":"ip_fw_flush"},{"location":"net-OSSockOpt/#returns_403","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_get","text":"[Source] fun box ip_fw_get() : I32 val","title":"ip_fw_get"},{"location":"net-OSSockOpt/#returns_404","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_nat_cfg","text":"[Source] fun box ip_fw_nat_cfg() : I32 val","title":"ip_fw_nat_cfg"},{"location":"net-OSSockOpt/#returns_405","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_nat_del","text":"[Source] fun box ip_fw_nat_del() : I32 val","title":"ip_fw_nat_del"},{"location":"net-OSSockOpt/#returns_406","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_nat_get_config","text":"[Source] fun box ip_fw_nat_get_config() : I32 val","title":"ip_fw_nat_get_config"},{"location":"net-OSSockOpt/#returns_407","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_nat_get_log","text":"[Source] fun box ip_fw_nat_get_log() : I32 val","title":"ip_fw_nat_get_log"},{"location":"net-OSSockOpt/#returns_408","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_resetlog","text":"[Source] fun box ip_fw_resetlog() : I32 val","title":"ip_fw_resetlog"},{"location":"net-OSSockOpt/#returns_409","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_table_add","text":"[Source] fun box ip_fw_table_add() : I32 val","title":"ip_fw_table_add"},{"location":"net-OSSockOpt/#returns_410","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_table_del","text":"[Source] fun box ip_fw_table_del() : I32 val","title":"ip_fw_table_del"},{"location":"net-OSSockOpt/#returns_411","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_table_flush","text":"[Source] fun box ip_fw_table_flush() : I32 val","title":"ip_fw_table_flush"},{"location":"net-OSSockOpt/#returns_412","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_table_getsize","text":"[Source] fun box ip_fw_table_getsize() : I32 val","title":"ip_fw_table_getsize"},{"location":"net-OSSockOpt/#returns_413","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_table_list","text":"[Source] fun box ip_fw_table_list() : I32 val","title":"ip_fw_table_list"},{"location":"net-OSSockOpt/#returns_414","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_zero","text":"[Source] fun box ip_fw_zero() : I32 val","title":"ip_fw_zero"},{"location":"net-OSSockOpt/#returns_415","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_hdrincl","text":"[Source] fun box ip_hdrincl() : I32 val","title":"ip_hdrincl"},{"location":"net-OSSockOpt/#returns_416","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_ipsec_policy","text":"[Source] fun box ip_ipsec_policy() : I32 val","title":"ip_ipsec_policy"},{"location":"net-OSSockOpt/#returns_417","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_max_group_src_filter","text":"[Source] fun box ip_max_group_src_filter() : I32 val","title":"ip_max_group_src_filter"},{"location":"net-OSSockOpt/#returns_418","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_max_memberships","text":"[Source] fun box ip_max_memberships() : I32 val","title":"ip_max_memberships"},{"location":"net-OSSockOpt/#returns_419","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_max_sock_mute_filter","text":"[Source] fun box ip_max_sock_mute_filter() : I32 val","title":"ip_max_sock_mute_filter"},{"location":"net-OSSockOpt/#returns_420","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_max_sock_src_filter","text":"[Source] fun box ip_max_sock_src_filter() : I32 val","title":"ip_max_sock_src_filter"},{"location":"net-OSSockOpt/#returns_421","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_max_source_filter","text":"[Source] fun box ip_max_source_filter() : I32 val","title":"ip_max_source_filter"},{"location":"net-OSSockOpt/#returns_422","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_minttl","text":"[Source] fun box ip_minttl() : I32 val","title":"ip_minttl"},{"location":"net-OSSockOpt/#returns_423","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_min_memberships","text":"[Source] fun box ip_min_memberships() : I32 val","title":"ip_min_memberships"},{"location":"net-OSSockOpt/#returns_424","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_msfilter","text":"[Source] fun box ip_msfilter() : I32 val","title":"ip_msfilter"},{"location":"net-OSSockOpt/#returns_425","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_mtu","text":"[Source] fun box ip_mtu() : I32 val","title":"ip_mtu"},{"location":"net-OSSockOpt/#returns_426","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_mtu_discover","text":"[Source] fun box ip_mtu_discover() : I32 val","title":"ip_mtu_discover"},{"location":"net-OSSockOpt/#returns_427","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_multicast_all","text":"[Source] fun box ip_multicast_all() : I32 val","title":"ip_multicast_all"},{"location":"net-OSSockOpt/#returns_428","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_multicast_if","text":"[Source] fun box ip_multicast_if() : I32 val","title":"ip_multicast_if"},{"location":"net-OSSockOpt/#returns_429","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_multicast_ifindex","text":"[Source] fun box ip_multicast_ifindex() : I32 val","title":"ip_multicast_ifindex"},{"location":"net-OSSockOpt/#returns_430","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_multicast_loop","text":"[Source] fun box ip_multicast_loop() : I32 val","title":"ip_multicast_loop"},{"location":"net-OSSockOpt/#returns_431","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_multicast_ttl","text":"[Source] fun box ip_multicast_ttl() : I32 val","title":"ip_multicast_ttl"},{"location":"net-OSSockOpt/#returns_432","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_multicast_vif","text":"[Source] fun box ip_multicast_vif() : I32 val","title":"ip_multicast_vif"},{"location":"net-OSSockOpt/#returns_433","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_nat_xxx","text":"[Source] fun box ip_nat_xxx() : I32 val","title":"ip_nat_xxx"},{"location":"net-OSSockOpt/#returns_434","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_nodefrag","text":"[Source] fun box ip_nodefrag() : I32 val","title":"ip_nodefrag"},{"location":"net-OSSockOpt/#returns_435","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_old_fw_add","text":"[Source] fun box ip_old_fw_add() : I32 val","title":"ip_old_fw_add"},{"location":"net-OSSockOpt/#returns_436","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_old_fw_del","text":"[Source] fun box ip_old_fw_del() : I32 val","title":"ip_old_fw_del"},{"location":"net-OSSockOpt/#returns_437","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_old_fw_flush","text":"[Source] fun box ip_old_fw_flush() : I32 val","title":"ip_old_fw_flush"},{"location":"net-OSSockOpt/#returns_438","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_old_fw_get","text":"[Source] fun box ip_old_fw_get() : I32 val","title":"ip_old_fw_get"},{"location":"net-OSSockOpt/#returns_439","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_old_fw_resetlog","text":"[Source] fun box ip_old_fw_resetlog() : I32 val","title":"ip_old_fw_resetlog"},{"location":"net-OSSockOpt/#returns_440","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_old_fw_zero","text":"[Source] fun box ip_old_fw_zero() : I32 val","title":"ip_old_fw_zero"},{"location":"net-OSSockOpt/#returns_441","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_onesbcast","text":"[Source] fun box ip_onesbcast() : I32 val","title":"ip_onesbcast"},{"location":"net-OSSockOpt/#returns_442","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_options","text":"[Source] fun box ip_options() : I32 val","title":"ip_options"},{"location":"net-OSSockOpt/#returns_443","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_origdstaddr","text":"[Source] fun box ip_origdstaddr() : I32 val","title":"ip_origdstaddr"},{"location":"net-OSSockOpt/#returns_444","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_passsec","text":"[Source] fun box ip_passsec() : I32 val","title":"ip_passsec"},{"location":"net-OSSockOpt/#returns_445","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_pktinfo","text":"[Source] fun box ip_pktinfo() : I32 val","title":"ip_pktinfo"},{"location":"net-OSSockOpt/#returns_446","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_pktoptions","text":"[Source] fun box ip_pktoptions() : I32 val","title":"ip_pktoptions"},{"location":"net-OSSockOpt/#returns_447","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_pmtudisc_do","text":"[Source] fun box ip_pmtudisc_do() : I32 val","title":"ip_pmtudisc_do"},{"location":"net-OSSockOpt/#returns_448","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_pmtudisc_dont","text":"[Source] fun box ip_pmtudisc_dont() : I32 val","title":"ip_pmtudisc_dont"},{"location":"net-OSSockOpt/#returns_449","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_pmtudisc_interface","text":"[Source] fun box ip_pmtudisc_interface() : I32 val","title":"ip_pmtudisc_interface"},{"location":"net-OSSockOpt/#returns_450","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_pmtudisc_omit","text":"[Source] fun box ip_pmtudisc_omit() : I32 val","title":"ip_pmtudisc_omit"},{"location":"net-OSSockOpt/#returns_451","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_pmtudisc_probe","text":"[Source] fun box ip_pmtudisc_probe() : I32 val","title":"ip_pmtudisc_probe"},{"location":"net-OSSockOpt/#returns_452","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_pmtudisc_want","text":"[Source] fun box ip_pmtudisc_want() : I32 val","title":"ip_pmtudisc_want"},{"location":"net-OSSockOpt/#returns_453","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_portrange","text":"[Source] fun box ip_portrange() : I32 val","title":"ip_portrange"},{"location":"net-OSSockOpt/#returns_454","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_portrange_default","text":"[Source] fun box ip_portrange_default() : I32 val","title":"ip_portrange_default"},{"location":"net-OSSockOpt/#returns_455","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_portrange_high","text":"[Source] fun box ip_portrange_high() : I32 val","title":"ip_portrange_high"},{"location":"net-OSSockOpt/#returns_456","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_portrange_low","text":"[Source] fun box ip_portrange_low() : I32 val","title":"ip_portrange_low"},{"location":"net-OSSockOpt/#returns_457","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvdstaddr","text":"[Source] fun box ip_recvdstaddr() : I32 val","title":"ip_recvdstaddr"},{"location":"net-OSSockOpt/#returns_458","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recverr","text":"[Source] fun box ip_recverr() : I32 val","title":"ip_recverr"},{"location":"net-OSSockOpt/#returns_459","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvflowid","text":"[Source] fun box ip_recvflowid() : I32 val","title":"ip_recvflowid"},{"location":"net-OSSockOpt/#returns_460","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvif","text":"[Source] fun box ip_recvif() : I32 val","title":"ip_recvif"},{"location":"net-OSSockOpt/#returns_461","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvopts","text":"[Source] fun box ip_recvopts() : I32 val","title":"ip_recvopts"},{"location":"net-OSSockOpt/#returns_462","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvorigdstaddr","text":"[Source] fun box ip_recvorigdstaddr() : I32 val","title":"ip_recvorigdstaddr"},{"location":"net-OSSockOpt/#returns_463","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvpktinfo","text":"[Source] fun box ip_recvpktinfo() : I32 val","title":"ip_recvpktinfo"},{"location":"net-OSSockOpt/#returns_464","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvretopts","text":"[Source] fun box ip_recvretopts() : I32 val","title":"ip_recvretopts"},{"location":"net-OSSockOpt/#returns_465","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvrssbucketid","text":"[Source] fun box ip_recvrssbucketid() : I32 val","title":"ip_recvrssbucketid"},{"location":"net-OSSockOpt/#returns_466","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvtos","text":"[Source] fun box ip_recvtos() : I32 val","title":"ip_recvtos"},{"location":"net-OSSockOpt/#returns_467","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvttl","text":"[Source] fun box ip_recvttl() : I32 val","title":"ip_recvttl"},{"location":"net-OSSockOpt/#returns_468","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_retopts","text":"[Source] fun box ip_retopts() : I32 val","title":"ip_retopts"},{"location":"net-OSSockOpt/#returns_469","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_router_alert","text":"[Source] fun box ip_router_alert() : I32 val","title":"ip_router_alert"},{"location":"net-OSSockOpt/#returns_470","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_rssbucketid","text":"[Source] fun box ip_rssbucketid() : I32 val","title":"ip_rssbucketid"},{"location":"net-OSSockOpt/#returns_471","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_rss_listen_bucket","text":"[Source] fun box ip_rss_listen_bucket() : I32 val","title":"ip_rss_listen_bucket"},{"location":"net-OSSockOpt/#returns_472","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_rsvp_off","text":"[Source] fun box ip_rsvp_off() : I32 val","title":"ip_rsvp_off"},{"location":"net-OSSockOpt/#returns_473","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_rsvp_on","text":"[Source] fun box ip_rsvp_on() : I32 val","title":"ip_rsvp_on"},{"location":"net-OSSockOpt/#returns_474","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_rsvp_vif_off","text":"[Source] fun box ip_rsvp_vif_off() : I32 val","title":"ip_rsvp_vif_off"},{"location":"net-OSSockOpt/#returns_475","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_rsvp_vif_on","text":"[Source] fun box ip_rsvp_vif_on() : I32 val","title":"ip_rsvp_vif_on"},{"location":"net-OSSockOpt/#returns_476","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_sendsrcaddr","text":"[Source] fun box ip_sendsrcaddr() : I32 val","title":"ip_sendsrcaddr"},{"location":"net-OSSockOpt/#returns_477","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_striphdr","text":"[Source] fun box ip_striphdr() : I32 val","title":"ip_striphdr"},{"location":"net-OSSockOpt/#returns_478","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_tos","text":"[Source] fun box ip_tos() : I32 val","title":"ip_tos"},{"location":"net-OSSockOpt/#returns_479","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_traffic_mgt_background","text":"[Source] fun box ip_traffic_mgt_background() : I32 val","title":"ip_traffic_mgt_background"},{"location":"net-OSSockOpt/#returns_480","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_transparent","text":"[Source] fun box ip_transparent() : I32 val","title":"ip_transparent"},{"location":"net-OSSockOpt/#returns_481","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_ttl","text":"[Source] fun box ip_ttl() : I32 val","title":"ip_ttl"},{"location":"net-OSSockOpt/#returns_482","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_unblock_source","text":"[Source] fun box ip_unblock_source() : I32 val","title":"ip_unblock_source"},{"location":"net-OSSockOpt/#returns_483","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_unicast_if","text":"[Source] fun box ip_unicast_if() : I32 val","title":"ip_unicast_if"},{"location":"net-OSSockOpt/#returns_484","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_xfrm_policy","text":"[Source] fun box ip_xfrm_policy() : I32 val","title":"ip_xfrm_policy"},{"location":"net-OSSockOpt/#returns_485","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#local_connwait","text":"[Source] fun box local_connwait() : I32 val","title":"local_connwait"},{"location":"net-OSSockOpt/#returns_486","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#local_creds","text":"[Source] fun box local_creds() : I32 val","title":"local_creds"},{"location":"net-OSSockOpt/#returns_487","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#local_peercred","text":"[Source] fun box local_peercred() : I32 val","title":"local_peercred"},{"location":"net-OSSockOpt/#returns_488","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#local_peerepid","text":"[Source] fun box local_peerepid() : I32 val","title":"local_peerepid"},{"location":"net-OSSockOpt/#returns_489","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#local_peereuuid","text":"[Source] fun box local_peereuuid() : I32 val","title":"local_peereuuid"},{"location":"net-OSSockOpt/#returns_490","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#local_peerpid","text":"[Source] fun box local_peerpid() : I32 val","title":"local_peerpid"},{"location":"net-OSSockOpt/#returns_491","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#local_peeruuid","text":"[Source] fun box local_peeruuid() : I32 val","title":"local_peeruuid"},{"location":"net-OSSockOpt/#returns_492","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#local_vendor","text":"[Source] fun box local_vendor() : I32 val","title":"local_vendor"},{"location":"net-OSSockOpt/#returns_493","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#max_tcpoptlen","text":"[Source] fun box max_tcpoptlen() : I32 val","title":"max_tcpoptlen"},{"location":"net-OSSockOpt/#returns_494","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_block_source","text":"[Source] fun box mcast_block_source() : I32 val","title":"mcast_block_source"},{"location":"net-OSSockOpt/#returns_495","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_exclude","text":"[Source] fun box mcast_exclude() : I32 val","title":"mcast_exclude"},{"location":"net-OSSockOpt/#returns_496","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_include","text":"[Source] fun box mcast_include() : I32 val","title":"mcast_include"},{"location":"net-OSSockOpt/#returns_497","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_join_group","text":"[Source] fun box mcast_join_group() : I32 val","title":"mcast_join_group"},{"location":"net-OSSockOpt/#returns_498","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_join_source_group","text":"[Source] fun box mcast_join_source_group() : I32 val","title":"mcast_join_source_group"},{"location":"net-OSSockOpt/#returns_499","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_leave_group","text":"[Source] fun box mcast_leave_group() : I32 val","title":"mcast_leave_group"},{"location":"net-OSSockOpt/#returns_500","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_leave_source_group","text":"[Source] fun box mcast_leave_source_group() : I32 val","title":"mcast_leave_source_group"},{"location":"net-OSSockOpt/#returns_501","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_msfilter","text":"[Source] fun box mcast_msfilter() : I32 val","title":"mcast_msfilter"},{"location":"net-OSSockOpt/#returns_502","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_unblock_source","text":"[Source] fun box mcast_unblock_source() : I32 val","title":"mcast_unblock_source"},{"location":"net-OSSockOpt/#returns_503","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_undefined","text":"[Source] fun box mcast_undefined() : I32 val","title":"mcast_undefined"},{"location":"net-OSSockOpt/#returns_504","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_add_bw_upcall","text":"[Source] fun box mrt_add_bw_upcall() : I32 val","title":"mrt_add_bw_upcall"},{"location":"net-OSSockOpt/#returns_505","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_add_mfc","text":"[Source] fun box mrt_add_mfc() : I32 val","title":"mrt_add_mfc"},{"location":"net-OSSockOpt/#returns_506","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_add_vif","text":"[Source] fun box mrt_add_vif() : I32 val","title":"mrt_add_vif"},{"location":"net-OSSockOpt/#returns_507","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_api_config","text":"[Source] fun box mrt_api_config() : I32 val","title":"mrt_api_config"},{"location":"net-OSSockOpt/#returns_508","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_api_flags_all","text":"[Source] fun box mrt_api_flags_all() : I32 val","title":"mrt_api_flags_all"},{"location":"net-OSSockOpt/#returns_509","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_api_support","text":"[Source] fun box mrt_api_support() : I32 val","title":"mrt_api_support"},{"location":"net-OSSockOpt/#returns_510","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_assert","text":"[Source] fun box mrt_assert() : I32 val","title":"mrt_assert"},{"location":"net-OSSockOpt/#returns_511","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_del_bw_upcall","text":"[Source] fun box mrt_del_bw_upcall() : I32 val","title":"mrt_del_bw_upcall"},{"location":"net-OSSockOpt/#returns_512","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_del_mfc","text":"[Source] fun box mrt_del_mfc() : I32 val","title":"mrt_del_mfc"},{"location":"net-OSSockOpt/#returns_513","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_del_vif","text":"[Source] fun box mrt_del_vif() : I32 val","title":"mrt_del_vif"},{"location":"net-OSSockOpt/#returns_514","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_done","text":"[Source] fun box mrt_done() : I32 val","title":"mrt_done"},{"location":"net-OSSockOpt/#returns_515","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_init","text":"[Source] fun box mrt_init() : I32 val","title":"mrt_init"},{"location":"net-OSSockOpt/#returns_516","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_mfc_bw_upcall","text":"[Source] fun box mrt_mfc_bw_upcall() : I32 val","title":"mrt_mfc_bw_upcall"},{"location":"net-OSSockOpt/#returns_517","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_mfc_flags_all","text":"[Source] fun box mrt_mfc_flags_all() : I32 val","title":"mrt_mfc_flags_all"},{"location":"net-OSSockOpt/#returns_518","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_mfc_flags_border_vif","text":"[Source] fun box mrt_mfc_flags_border_vif() : I32 val","title":"mrt_mfc_flags_border_vif"},{"location":"net-OSSockOpt/#returns_519","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_mfc_flags_disable_wrongvif","text":"[Source] fun box mrt_mfc_flags_disable_wrongvif() : I32 val","title":"mrt_mfc_flags_disable_wrongvif"},{"location":"net-OSSockOpt/#returns_520","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_mfc_rp","text":"[Source] fun box mrt_mfc_rp() : I32 val","title":"mrt_mfc_rp"},{"location":"net-OSSockOpt/#returns_521","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_pim","text":"[Source] fun box mrt_pim() : I32 val","title":"mrt_pim"},{"location":"net-OSSockOpt/#returns_522","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_version","text":"[Source] fun box mrt_version() : I32 val","title":"mrt_version"},{"location":"net-OSSockOpt/#returns_523","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#msg_notification","text":"[Source] fun box msg_notification() : I32 val","title":"msg_notification"},{"location":"net-OSSockOpt/#returns_524","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#msg_socallbck","text":"[Source] fun box msg_socallbck() : I32 val","title":"msg_socallbck"},{"location":"net-OSSockOpt/#returns_525","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrvproto_ndrv","text":"[Source] fun box ndrvproto_ndrv() : I32 val","title":"ndrvproto_ndrv"},{"location":"net-OSSockOpt/#returns_526","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrv_addmulticast","text":"[Source] fun box ndrv_addmulticast() : I32 val","title":"ndrv_addmulticast"},{"location":"net-OSSockOpt/#returns_527","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrv_deldmxspec","text":"[Source] fun box ndrv_deldmxspec() : I32 val","title":"ndrv_deldmxspec"},{"location":"net-OSSockOpt/#returns_528","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrv_delmulticast","text":"[Source] fun box ndrv_delmulticast() : I32 val","title":"ndrv_delmulticast"},{"location":"net-OSSockOpt/#returns_529","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrv_demuxtype_ethertype","text":"[Source] fun box ndrv_demuxtype_ethertype() : I32 val","title":"ndrv_demuxtype_ethertype"},{"location":"net-OSSockOpt/#returns_530","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrv_demuxtype_sap","text":"[Source] fun box ndrv_demuxtype_sap() : I32 val","title":"ndrv_demuxtype_sap"},{"location":"net-OSSockOpt/#returns_531","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrv_demuxtype_snap","text":"[Source] fun box ndrv_demuxtype_snap() : I32 val","title":"ndrv_demuxtype_snap"},{"location":"net-OSSockOpt/#returns_532","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrv_dmux_max_descr","text":"[Source] fun box ndrv_dmux_max_descr() : I32 val","title":"ndrv_dmux_max_descr"},{"location":"net-OSSockOpt/#returns_533","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrv_protocol_desc_vers","text":"[Source] fun box ndrv_protocol_desc_vers() : I32 val","title":"ndrv_protocol_desc_vers"},{"location":"net-OSSockOpt/#returns_534","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrv_setdmxspec","text":"[Source] fun box ndrv_setdmxspec() : I32 val","title":"ndrv_setdmxspec"},{"location":"net-OSSockOpt/#returns_535","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_add_membership","text":"[Source] fun box netlink_add_membership() : I32 val","title":"netlink_add_membership"},{"location":"net-OSSockOpt/#returns_536","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_audit","text":"[Source] fun box netlink_audit() : I32 val","title":"netlink_audit"},{"location":"net-OSSockOpt/#returns_537","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_broadcast_error","text":"[Source] fun box netlink_broadcast_error() : I32 val","title":"netlink_broadcast_error"},{"location":"net-OSSockOpt/#returns_538","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_cap_ack","text":"[Source] fun box netlink_cap_ack() : I32 val","title":"netlink_cap_ack"},{"location":"net-OSSockOpt/#returns_539","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_connector","text":"[Source] fun box netlink_connector() : I32 val","title":"netlink_connector"},{"location":"net-OSSockOpt/#returns_540","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_crypto","text":"[Source] fun box netlink_crypto() : I32 val","title":"netlink_crypto"},{"location":"net-OSSockOpt/#returns_541","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_dnrtmsg","text":"[Source] fun box netlink_dnrtmsg() : I32 val","title":"netlink_dnrtmsg"},{"location":"net-OSSockOpt/#returns_542","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_drop_membership","text":"[Source] fun box netlink_drop_membership() : I32 val","title":"netlink_drop_membership"},{"location":"net-OSSockOpt/#returns_543","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_ecryptfs","text":"[Source] fun box netlink_ecryptfs() : I32 val","title":"netlink_ecryptfs"},{"location":"net-OSSockOpt/#returns_544","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_fib_lookup","text":"[Source] fun box netlink_fib_lookup() : I32 val","title":"netlink_fib_lookup"},{"location":"net-OSSockOpt/#returns_545","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_firewall","text":"[Source] fun box netlink_firewall() : I32 val","title":"netlink_firewall"},{"location":"net-OSSockOpt/#returns_546","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_generic","text":"[Source] fun box netlink_generic() : I32 val","title":"netlink_generic"},{"location":"net-OSSockOpt/#returns_547","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_inet_diag","text":"[Source] fun box netlink_inet_diag() : I32 val","title":"netlink_inet_diag"},{"location":"net-OSSockOpt/#returns_548","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_ip6_fw","text":"[Source] fun box netlink_ip6_fw() : I32 val","title":"netlink_ip6_fw"},{"location":"net-OSSockOpt/#returns_549","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_iscsi","text":"[Source] fun box netlink_iscsi() : I32 val","title":"netlink_iscsi"},{"location":"net-OSSockOpt/#returns_550","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_kobject_uevent","text":"[Source] fun box netlink_kobject_uevent() : I32 val","title":"netlink_kobject_uevent"},{"location":"net-OSSockOpt/#returns_551","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_listen_all_nsid","text":"[Source] fun box netlink_listen_all_nsid() : I32 val","title":"netlink_listen_all_nsid"},{"location":"net-OSSockOpt/#returns_552","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_list_memberships","text":"[Source] fun box netlink_list_memberships() : I32 val","title":"netlink_list_memberships"},{"location":"net-OSSockOpt/#returns_553","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_netfilter","text":"[Source] fun box netlink_netfilter() : I32 val","title":"netlink_netfilter"},{"location":"net-OSSockOpt/#returns_554","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_nflog","text":"[Source] fun box netlink_nflog() : I32 val","title":"netlink_nflog"},{"location":"net-OSSockOpt/#returns_555","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_no_enobufs","text":"[Source] fun box netlink_no_enobufs() : I32 val","title":"netlink_no_enobufs"},{"location":"net-OSSockOpt/#returns_556","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_pktinfo","text":"[Source] fun box netlink_pktinfo() : I32 val","title":"netlink_pktinfo"},{"location":"net-OSSockOpt/#returns_557","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_rdma","text":"[Source] fun box netlink_rdma() : I32 val","title":"netlink_rdma"},{"location":"net-OSSockOpt/#returns_558","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_route","text":"[Source] fun box netlink_route() : I32 val","title":"netlink_route"},{"location":"net-OSSockOpt/#returns_559","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_rx_ring","text":"[Source] fun box netlink_rx_ring() : I32 val","title":"netlink_rx_ring"},{"location":"net-OSSockOpt/#returns_560","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_scsitransport","text":"[Source] fun box netlink_scsitransport() : I32 val","title":"netlink_scsitransport"},{"location":"net-OSSockOpt/#returns_561","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_selinux","text":"[Source] fun box netlink_selinux() : I32 val","title":"netlink_selinux"},{"location":"net-OSSockOpt/#returns_562","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_sock_diag","text":"[Source] fun box netlink_sock_diag() : I32 val","title":"netlink_sock_diag"},{"location":"net-OSSockOpt/#returns_563","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_tx_ring","text":"[Source] fun box netlink_tx_ring() : I32 val","title":"netlink_tx_ring"},{"location":"net-OSSockOpt/#returns_564","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_unused","text":"[Source] fun box netlink_unused() : I32 val","title":"netlink_unused"},{"location":"net-OSSockOpt/#returns_565","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_usersock","text":"[Source] fun box netlink_usersock() : I32 val","title":"netlink_usersock"},{"location":"net-OSSockOpt/#returns_566","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_xfrm","text":"[Source] fun box netlink_xfrm() : I32 val","title":"netlink_xfrm"},{"location":"net-OSSockOpt/#returns_567","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netrom_idle","text":"[Source] fun box netrom_idle() : I32 val","title":"netrom_idle"},{"location":"net-OSSockOpt/#returns_568","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netrom_kill","text":"[Source] fun box netrom_kill() : I32 val","title":"netrom_kill"},{"location":"net-OSSockOpt/#returns_569","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netrom_n2","text":"[Source] fun box netrom_n2() : I32 val","title":"netrom_n2"},{"location":"net-OSSockOpt/#returns_570","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netrom_neigh","text":"[Source] fun box netrom_neigh() : I32 val","title":"netrom_neigh"},{"location":"net-OSSockOpt/#returns_571","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netrom_node","text":"[Source] fun box netrom_node() : I32 val","title":"netrom_node"},{"location":"net-OSSockOpt/#returns_572","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netrom_paclen","text":"[Source] fun box netrom_paclen() : I32 val","title":"netrom_paclen"},{"location":"net-OSSockOpt/#returns_573","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netrom_t1","text":"[Source] fun box netrom_t1() : I32 val","title":"netrom_t1"},{"location":"net-OSSockOpt/#returns_574","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netrom_t2","text":"[Source] fun box netrom_t2() : I32 val","title":"netrom_t2"},{"location":"net-OSSockOpt/#returns_575","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netrom_t4","text":"[Source] fun box netrom_t4() : I32 val","title":"netrom_t4"},{"location":"net-OSSockOpt/#returns_576","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#nrdv_multicast_addrs_per_sock","text":"[Source] fun box nrdv_multicast_addrs_per_sock() : I32 val","title":"nrdv_multicast_addrs_per_sock"},{"location":"net-OSSockOpt/#returns_577","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#pvd_config","text":"[Source] fun box pvd_config() : I32 val","title":"pvd_config"},{"location":"net-OSSockOpt/#returns_578","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cancel_sent_to","text":"[Source] fun box rds_cancel_sent_to() : I32 val","title":"rds_cancel_sent_to"},{"location":"net-OSSockOpt/#returns_579","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cmsg_atomic_cswp","text":"[Source] fun box rds_cmsg_atomic_cswp() : I32 val","title":"rds_cmsg_atomic_cswp"},{"location":"net-OSSockOpt/#returns_580","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cmsg_atomic_fadd","text":"[Source] fun box rds_cmsg_atomic_fadd() : I32 val","title":"rds_cmsg_atomic_fadd"},{"location":"net-OSSockOpt/#returns_581","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cmsg_cong_update","text":"[Source] fun box rds_cmsg_cong_update() : I32 val","title":"rds_cmsg_cong_update"},{"location":"net-OSSockOpt/#returns_582","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cmsg_masked_atomic_cswp","text":"[Source] fun box rds_cmsg_masked_atomic_cswp() : I32 val","title":"rds_cmsg_masked_atomic_cswp"},{"location":"net-OSSockOpt/#returns_583","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cmsg_masked_atomic_fadd","text":"[Source] fun box rds_cmsg_masked_atomic_fadd() : I32 val","title":"rds_cmsg_masked_atomic_fadd"},{"location":"net-OSSockOpt/#returns_584","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cmsg_rdma_args","text":"[Source] fun box rds_cmsg_rdma_args() : I32 val","title":"rds_cmsg_rdma_args"},{"location":"net-OSSockOpt/#returns_585","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cmsg_rdma_dest","text":"[Source] fun box rds_cmsg_rdma_dest() : I32 val","title":"rds_cmsg_rdma_dest"},{"location":"net-OSSockOpt/#returns_586","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cmsg_rdma_map","text":"[Source] fun box rds_cmsg_rdma_map() : I32 val","title":"rds_cmsg_rdma_map"},{"location":"net-OSSockOpt/#returns_587","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cmsg_rdma_status","text":"[Source] fun box rds_cmsg_rdma_status() : I32 val","title":"rds_cmsg_rdma_status"},{"location":"net-OSSockOpt/#returns_588","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cong_monitor","text":"[Source] fun box rds_cong_monitor() : I32 val","title":"rds_cong_monitor"},{"location":"net-OSSockOpt/#returns_589","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cong_monitor_size","text":"[Source] fun box rds_cong_monitor_size() : I32 val","title":"rds_cong_monitor_size"},{"location":"net-OSSockOpt/#returns_590","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_free_mr","text":"[Source] fun box rds_free_mr() : I32 val","title":"rds_free_mr"},{"location":"net-OSSockOpt/#returns_591","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_get_mr","text":"[Source] fun box rds_get_mr() : I32 val","title":"rds_get_mr"},{"location":"net-OSSockOpt/#returns_592","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_get_mr_for_dest","text":"[Source] fun box rds_get_mr_for_dest() : I32 val","title":"rds_get_mr_for_dest"},{"location":"net-OSSockOpt/#returns_593","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_ib_abi_version","text":"[Source] fun box rds_ib_abi_version() : I32 val","title":"rds_ib_abi_version"},{"location":"net-OSSockOpt/#returns_594","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_ib_gid_len","text":"[Source] fun box rds_ib_gid_len() : I32 val","title":"rds_ib_gid_len"},{"location":"net-OSSockOpt/#returns_595","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_connections","text":"[Source] fun box rds_info_connections() : I32 val","title":"rds_info_connections"},{"location":"net-OSSockOpt/#returns_596","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_connection_flag_connected","text":"[Source] fun box rds_info_connection_flag_connected() : I32 val","title":"rds_info_connection_flag_connected"},{"location":"net-OSSockOpt/#returns_597","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_connection_flag_connecting","text":"[Source] fun box rds_info_connection_flag_connecting() : I32 val","title":"rds_info_connection_flag_connecting"},{"location":"net-OSSockOpt/#returns_598","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_connection_flag_sending","text":"[Source] fun box rds_info_connection_flag_sending() : I32 val","title":"rds_info_connection_flag_sending"},{"location":"net-OSSockOpt/#returns_599","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_connection_stats","text":"[Source] fun box rds_info_connection_stats() : I32 val","title":"rds_info_connection_stats"},{"location":"net-OSSockOpt/#returns_600","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_counters","text":"[Source] fun box rds_info_counters() : I32 val","title":"rds_info_counters"},{"location":"net-OSSockOpt/#returns_601","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_first","text":"[Source] fun box rds_info_first() : I32 val","title":"rds_info_first"},{"location":"net-OSSockOpt/#returns_602","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_ib_connections","text":"[Source] fun box rds_info_ib_connections() : I32 val","title":"rds_info_ib_connections"},{"location":"net-OSSockOpt/#returns_603","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_iwarp_connections","text":"[Source] fun box rds_info_iwarp_connections() : I32 val","title":"rds_info_iwarp_connections"},{"location":"net-OSSockOpt/#returns_604","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_last","text":"[Source] fun box rds_info_last() : I32 val","title":"rds_info_last"},{"location":"net-OSSockOpt/#returns_605","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_message_flag_ack","text":"[Source] fun box rds_info_message_flag_ack() : I32 val","title":"rds_info_message_flag_ack"},{"location":"net-OSSockOpt/#returns_606","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_message_flag_fast_ack","text":"[Source] fun box rds_info_message_flag_fast_ack() : I32 val","title":"rds_info_message_flag_fast_ack"},{"location":"net-OSSockOpt/#returns_607","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_recv_messages","text":"[Source] fun box rds_info_recv_messages() : I32 val","title":"rds_info_recv_messages"},{"location":"net-OSSockOpt/#returns_608","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_retrans_messages","text":"[Source] fun box rds_info_retrans_messages() : I32 val","title":"rds_info_retrans_messages"},{"location":"net-OSSockOpt/#returns_609","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_send_messages","text":"[Source] fun box rds_info_send_messages() : I32 val","title":"rds_info_send_messages"},{"location":"net-OSSockOpt/#returns_610","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_sockets","text":"[Source] fun box rds_info_sockets() : I32 val","title":"rds_info_sockets"},{"location":"net-OSSockOpt/#returns_611","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_tcp_sockets","text":"[Source] fun box rds_info_tcp_sockets() : I32 val","title":"rds_info_tcp_sockets"},{"location":"net-OSSockOpt/#returns_612","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_canceled","text":"[Source] fun box rds_rdma_canceled() : I32 val","title":"rds_rdma_canceled"},{"location":"net-OSSockOpt/#returns_613","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_dontwait","text":"[Source] fun box rds_rdma_dontwait() : I32 val","title":"rds_rdma_dontwait"},{"location":"net-OSSockOpt/#returns_614","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_dropped","text":"[Source] fun box rds_rdma_dropped() : I32 val","title":"rds_rdma_dropped"},{"location":"net-OSSockOpt/#returns_615","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_fence","text":"[Source] fun box rds_rdma_fence() : I32 val","title":"rds_rdma_fence"},{"location":"net-OSSockOpt/#returns_616","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_invalidate","text":"[Source] fun box rds_rdma_invalidate() : I32 val","title":"rds_rdma_invalidate"},{"location":"net-OSSockOpt/#returns_617","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_notify_me","text":"[Source] fun box rds_rdma_notify_me() : I32 val","title":"rds_rdma_notify_me"},{"location":"net-OSSockOpt/#returns_618","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_other_error","text":"[Source] fun box rds_rdma_other_error() : I32 val","title":"rds_rdma_other_error"},{"location":"net-OSSockOpt/#returns_619","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_readwrite","text":"[Source] fun box rds_rdma_readwrite() : I32 val","title":"rds_rdma_readwrite"},{"location":"net-OSSockOpt/#returns_620","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_remote_error","text":"[Source] fun box rds_rdma_remote_error() : I32 val","title":"rds_rdma_remote_error"},{"location":"net-OSSockOpt/#returns_621","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_silent","text":"[Source] fun box rds_rdma_silent() : I32 val","title":"rds_rdma_silent"},{"location":"net-OSSockOpt/#returns_622","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_success","text":"[Source] fun box rds_rdma_success() : I32 val","title":"rds_rdma_success"},{"location":"net-OSSockOpt/#returns_623","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_use_once","text":"[Source] fun box rds_rdma_use_once() : I32 val","title":"rds_rdma_use_once"},{"location":"net-OSSockOpt/#returns_624","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_recverr","text":"[Source] fun box rds_recverr() : I32 val","title":"rds_recverr"},{"location":"net-OSSockOpt/#returns_625","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_trans_count","text":"[Source] fun box rds_trans_count() : I32 val","title":"rds_trans_count"},{"location":"net-OSSockOpt/#returns_626","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_trans_ib","text":"[Source] fun box rds_trans_ib() : I32 val","title":"rds_trans_ib"},{"location":"net-OSSockOpt/#returns_627","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_trans_iwarp","text":"[Source] fun box rds_trans_iwarp() : I32 val","title":"rds_trans_iwarp"},{"location":"net-OSSockOpt/#returns_628","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_trans_none","text":"[Source] fun box rds_trans_none() : I32 val","title":"rds_trans_none"},{"location":"net-OSSockOpt/#returns_629","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_trans_tcp","text":"[Source] fun box rds_trans_tcp() : I32 val","title":"rds_trans_tcp"},{"location":"net-OSSockOpt/#returns_630","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_access_barred","text":"[Source] fun box rose_access_barred() : I32 val","title":"rose_access_barred"},{"location":"net-OSSockOpt/#returns_631","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_defer","text":"[Source] fun box rose_defer() : I32 val","title":"rose_defer"},{"location":"net-OSSockOpt/#returns_632","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_dte_originated","text":"[Source] fun box rose_dte_originated() : I32 val","title":"rose_dte_originated"},{"location":"net-OSSockOpt/#returns_633","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_holdback","text":"[Source] fun box rose_holdback() : I32 val","title":"rose_holdback"},{"location":"net-OSSockOpt/#returns_634","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_idle","text":"[Source] fun box rose_idle() : I32 val","title":"rose_idle"},{"location":"net-OSSockOpt/#returns_635","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_invalid_facility","text":"[Source] fun box rose_invalid_facility() : I32 val","title":"rose_invalid_facility"},{"location":"net-OSSockOpt/#returns_636","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_local_procedure","text":"[Source] fun box rose_local_procedure() : I32 val","title":"rose_local_procedure"},{"location":"net-OSSockOpt/#returns_637","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_max_digis","text":"[Source] fun box rose_max_digis() : I32 val","title":"rose_max_digis"},{"location":"net-OSSockOpt/#returns_638","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_mtu","text":"[Source] fun box rose_mtu() : I32 val","title":"rose_mtu"},{"location":"net-OSSockOpt/#returns_639","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_network_congestion","text":"[Source] fun box rose_network_congestion() : I32 val","title":"rose_network_congestion"},{"location":"net-OSSockOpt/#returns_640","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_not_obtainable","text":"[Source] fun box rose_not_obtainable() : I32 val","title":"rose_not_obtainable"},{"location":"net-OSSockOpt/#returns_641","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_number_busy","text":"[Source] fun box rose_number_busy() : I32 val","title":"rose_number_busy"},{"location":"net-OSSockOpt/#returns_642","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_out_of_order","text":"[Source] fun box rose_out_of_order() : I32 val","title":"rose_out_of_order"},{"location":"net-OSSockOpt/#returns_643","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_qbitincl","text":"[Source] fun box rose_qbitincl() : I32 val","title":"rose_qbitincl"},{"location":"net-OSSockOpt/#returns_644","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_remote_procedure","text":"[Source] fun box rose_remote_procedure() : I32 val","title":"rose_remote_procedure"},{"location":"net-OSSockOpt/#returns_645","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_ship_absent","text":"[Source] fun box rose_ship_absent() : I32 val","title":"rose_ship_absent"},{"location":"net-OSSockOpt/#returns_646","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_t1","text":"[Source] fun box rose_t1() : I32 val","title":"rose_t1"},{"location":"net-OSSockOpt/#returns_647","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_t2","text":"[Source] fun box rose_t2() : I32 val","title":"rose_t2"},{"location":"net-OSSockOpt/#returns_648","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_t3","text":"[Source] fun box rose_t3() : I32 val","title":"rose_t3"},{"location":"net-OSSockOpt/#returns_649","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#scm_hci_raw_direction","text":"[Source] fun box scm_hci_raw_direction() : I32 val","title":"scm_hci_raw_direction"},{"location":"net-OSSockOpt/#returns_650","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#scm_timestamp","text":"[Source] fun box scm_timestamp() : I32 val","title":"scm_timestamp"},{"location":"net-OSSockOpt/#returns_651","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#scm_timestamping","text":"[Source] fun box scm_timestamping() : I32 val","title":"scm_timestamping"},{"location":"net-OSSockOpt/#returns_652","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#scm_timestampns","text":"[Source] fun box scm_timestampns() : I32 val","title":"scm_timestampns"},{"location":"net-OSSockOpt/#returns_653","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#scm_wifi_status","text":"[Source] fun box scm_wifi_status() : I32 val","title":"scm_wifi_status"},{"location":"net-OSSockOpt/#returns_654","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_abort_association","text":"[Source] fun box sctp_abort_association() : I32 val","title":"sctp_abort_association"},{"location":"net-OSSockOpt/#returns_655","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_adaptation_layer","text":"[Source] fun box sctp_adaptation_layer() : I32 val","title":"sctp_adaptation_layer"},{"location":"net-OSSockOpt/#returns_656","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_adaption_layer","text":"[Source] fun box sctp_adaption_layer() : I32 val","title":"sctp_adaption_layer"},{"location":"net-OSSockOpt/#returns_657","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_add_streams","text":"[Source] fun box sctp_add_streams() : I32 val","title":"sctp_add_streams"},{"location":"net-OSSockOpt/#returns_658","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_add_vrf_id","text":"[Source] fun box sctp_add_vrf_id() : I32 val","title":"sctp_add_vrf_id"},{"location":"net-OSSockOpt/#returns_659","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_asconf","text":"[Source] fun box sctp_asconf() : I32 val","title":"sctp_asconf"},{"location":"net-OSSockOpt/#returns_660","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_asconf_ack","text":"[Source] fun box sctp_asconf_ack() : I32 val","title":"sctp_asconf_ack"},{"location":"net-OSSockOpt/#returns_661","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_asconf_supported","text":"[Source] fun box sctp_asconf_supported() : I32 val","title":"sctp_asconf_supported"},{"location":"net-OSSockOpt/#returns_662","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_associnfo","text":"[Source] fun box sctp_associnfo() : I32 val","title":"sctp_associnfo"},{"location":"net-OSSockOpt/#returns_663","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_authentication","text":"[Source] fun box sctp_authentication() : I32 val","title":"sctp_authentication"},{"location":"net-OSSockOpt/#returns_664","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_auth_active_key","text":"[Source] fun box sctp_auth_active_key() : I32 val","title":"sctp_auth_active_key"},{"location":"net-OSSockOpt/#returns_665","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_auth_chunk","text":"[Source] fun box sctp_auth_chunk() : I32 val","title":"sctp_auth_chunk"},{"location":"net-OSSockOpt/#returns_666","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_auth_deactivate_key","text":"[Source] fun box sctp_auth_deactivate_key() : I32 val","title":"sctp_auth_deactivate_key"},{"location":"net-OSSockOpt/#returns_667","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_auth_delete_key","text":"[Source] fun box sctp_auth_delete_key() : I32 val","title":"sctp_auth_delete_key"},{"location":"net-OSSockOpt/#returns_668","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_auth_key","text":"[Source] fun box sctp_auth_key() : I32 val","title":"sctp_auth_key"},{"location":"net-OSSockOpt/#returns_669","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_auth_supported","text":"[Source] fun box sctp_auth_supported() : I32 val","title":"sctp_auth_supported"},{"location":"net-OSSockOpt/#returns_670","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_autoclose","text":"[Source] fun box sctp_autoclose() : I32 val","title":"sctp_autoclose"},{"location":"net-OSSockOpt/#returns_671","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_auto_asconf","text":"[Source] fun box sctp_auto_asconf() : I32 val","title":"sctp_auto_asconf"},{"location":"net-OSSockOpt/#returns_672","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_badcrc","text":"[Source] fun box sctp_badcrc() : I32 val","title":"sctp_badcrc"},{"location":"net-OSSockOpt/#returns_673","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_bindx_add_addr","text":"[Source] fun box sctp_bindx_add_addr() : I32 val","title":"sctp_bindx_add_addr"},{"location":"net-OSSockOpt/#returns_674","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_bindx_rem_addr","text":"[Source] fun box sctp_bindx_rem_addr() : I32 val","title":"sctp_bindx_rem_addr"},{"location":"net-OSSockOpt/#returns_675","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_blk_logging_enable","text":"[Source] fun box sctp_blk_logging_enable() : I32 val","title":"sctp_blk_logging_enable"},{"location":"net-OSSockOpt/#returns_676","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_bound","text":"[Source] fun box sctp_bound() : I32 val","title":"sctp_bound"},{"location":"net-OSSockOpt/#returns_677","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_cookie_in_shutdown","text":"[Source] fun box sctp_cause_cookie_in_shutdown() : I32 val","title":"sctp_cause_cookie_in_shutdown"},{"location":"net-OSSockOpt/#returns_678","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_deleting_last_addr","text":"[Source] fun box sctp_cause_deleting_last_addr() : I32 val","title":"sctp_cause_deleting_last_addr"},{"location":"net-OSSockOpt/#returns_679","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_deleting_src_addr","text":"[Source] fun box sctp_cause_deleting_src_addr() : I32 val","title":"sctp_cause_deleting_src_addr"},{"location":"net-OSSockOpt/#returns_680","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_illegal_asconf_ack","text":"[Source] fun box sctp_cause_illegal_asconf_ack() : I32 val","title":"sctp_cause_illegal_asconf_ack"},{"location":"net-OSSockOpt/#returns_681","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_invalid_param","text":"[Source] fun box sctp_cause_invalid_param() : I32 val","title":"sctp_cause_invalid_param"},{"location":"net-OSSockOpt/#returns_682","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_invalid_stream","text":"[Source] fun box sctp_cause_invalid_stream() : I32 val","title":"sctp_cause_invalid_stream"},{"location":"net-OSSockOpt/#returns_683","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_missing_param","text":"[Source] fun box sctp_cause_missing_param() : I32 val","title":"sctp_cause_missing_param"},{"location":"net-OSSockOpt/#returns_684","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_nat_colliding_state","text":"[Source] fun box sctp_cause_nat_colliding_state() : I32 val","title":"sctp_cause_nat_colliding_state"},{"location":"net-OSSockOpt/#returns_685","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_nat_missing_state","text":"[Source] fun box sctp_cause_nat_missing_state() : I32 val","title":"sctp_cause_nat_missing_state"},{"location":"net-OSSockOpt/#returns_686","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_no_error","text":"[Source] fun box sctp_cause_no_error() : I32 val","title":"sctp_cause_no_error"},{"location":"net-OSSockOpt/#returns_687","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_no_user_data","text":"[Source] fun box sctp_cause_no_user_data() : I32 val","title":"sctp_cause_no_user_data"},{"location":"net-OSSockOpt/#returns_688","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_out_of_resc","text":"[Source] fun box sctp_cause_out_of_resc() : I32 val","title":"sctp_cause_out_of_resc"},{"location":"net-OSSockOpt/#returns_689","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_protocol_violation","text":"[Source] fun box sctp_cause_protocol_violation() : I32 val","title":"sctp_cause_protocol_violation"},{"location":"net-OSSockOpt/#returns_690","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_request_refused","text":"[Source] fun box sctp_cause_request_refused() : I32 val","title":"sctp_cause_request_refused"},{"location":"net-OSSockOpt/#returns_691","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_resource_shortage","text":"[Source] fun box sctp_cause_resource_shortage() : I32 val","title":"sctp_cause_resource_shortage"},{"location":"net-OSSockOpt/#returns_692","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_restart_w_newaddr","text":"[Source] fun box sctp_cause_restart_w_newaddr() : I32 val","title":"sctp_cause_restart_w_newaddr"},{"location":"net-OSSockOpt/#returns_693","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_stale_cookie","text":"[Source] fun box sctp_cause_stale_cookie() : I32 val","title":"sctp_cause_stale_cookie"},{"location":"net-OSSockOpt/#returns_694","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_unrecog_chunk","text":"[Source] fun box sctp_cause_unrecog_chunk() : I32 val","title":"sctp_cause_unrecog_chunk"},{"location":"net-OSSockOpt/#returns_695","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_unrecog_param","text":"[Source] fun box sctp_cause_unrecog_param() : I32 val","title":"sctp_cause_unrecog_param"},{"location":"net-OSSockOpt/#returns_696","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_unresolvable_addr","text":"[Source] fun box sctp_cause_unresolvable_addr() : I32 val","title":"sctp_cause_unresolvable_addr"},{"location":"net-OSSockOpt/#returns_697","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_unsupported_hmacid","text":"[Source] fun box sctp_cause_unsupported_hmacid() : I32 val","title":"sctp_cause_unsupported_hmacid"},{"location":"net-OSSockOpt/#returns_698","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_user_initiated_abt","text":"[Source] fun box sctp_cause_user_initiated_abt() : I32 val","title":"sctp_cause_user_initiated_abt"},{"location":"net-OSSockOpt/#returns_699","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cc_hstcp","text":"[Source] fun box sctp_cc_hstcp() : I32 val","title":"sctp_cc_hstcp"},{"location":"net-OSSockOpt/#returns_700","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cc_htcp","text":"[Source] fun box sctp_cc_htcp() : I32 val","title":"sctp_cc_htcp"},{"location":"net-OSSockOpt/#returns_701","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cc_option","text":"[Source] fun box sctp_cc_option() : I32 val","title":"sctp_cc_option"},{"location":"net-OSSockOpt/#returns_702","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cc_opt_rtcc_setmode","text":"[Source] fun box sctp_cc_opt_rtcc_setmode() : I32 val","title":"sctp_cc_opt_rtcc_setmode"},{"location":"net-OSSockOpt/#returns_703","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cc_opt_steady_step","text":"[Source] fun box sctp_cc_opt_steady_step() : I32 val","title":"sctp_cc_opt_steady_step"},{"location":"net-OSSockOpt/#returns_704","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cc_opt_use_dccc_ecn","text":"[Source] fun box sctp_cc_opt_use_dccc_ecn() : I32 val","title":"sctp_cc_opt_use_dccc_ecn"},{"location":"net-OSSockOpt/#returns_705","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cc_rfc2581","text":"[Source] fun box sctp_cc_rfc2581() : I32 val","title":"sctp_cc_rfc2581"},{"location":"net-OSSockOpt/#returns_706","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cc_rtcc","text":"[Source] fun box sctp_cc_rtcc() : I32 val","title":"sctp_cc_rtcc"},{"location":"net-OSSockOpt/#returns_707","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_closed","text":"[Source] fun box sctp_closed() : I32 val","title":"sctp_closed"},{"location":"net-OSSockOpt/#returns_708","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_clr_stat_log","text":"[Source] fun box sctp_clr_stat_log() : I32 val","title":"sctp_clr_stat_log"},{"location":"net-OSSockOpt/#returns_709","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cmt_base","text":"[Source] fun box sctp_cmt_base() : I32 val","title":"sctp_cmt_base"},{"location":"net-OSSockOpt/#returns_710","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cmt_max","text":"[Source] fun box sctp_cmt_max() : I32 val","title":"sctp_cmt_max"},{"location":"net-OSSockOpt/#returns_711","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cmt_mptcp","text":"[Source] fun box sctp_cmt_mptcp() : I32 val","title":"sctp_cmt_mptcp"},{"location":"net-OSSockOpt/#returns_712","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cmt_off","text":"[Source] fun box sctp_cmt_off() : I32 val","title":"sctp_cmt_off"},{"location":"net-OSSockOpt/#returns_713","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cmt_on_off","text":"[Source] fun box sctp_cmt_on_off() : I32 val","title":"sctp_cmt_on_off"},{"location":"net-OSSockOpt/#returns_714","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cmt_rpv1","text":"[Source] fun box sctp_cmt_rpv1() : I32 val","title":"sctp_cmt_rpv1"},{"location":"net-OSSockOpt/#returns_715","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cmt_rpv2","text":"[Source] fun box sctp_cmt_rpv2() : I32 val","title":"sctp_cmt_rpv2"},{"location":"net-OSSockOpt/#returns_716","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cmt_use_dac","text":"[Source] fun box sctp_cmt_use_dac() : I32 val","title":"sctp_cmt_use_dac"},{"location":"net-OSSockOpt/#returns_717","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_connect_x","text":"[Source] fun box sctp_connect_x() : I32 val","title":"sctp_connect_x"},{"location":"net-OSSockOpt/#returns_718","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_connect_x_complete","text":"[Source] fun box sctp_connect_x_complete() : I32 val","title":"sctp_connect_x_complete"},{"location":"net-OSSockOpt/#returns_719","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_connect_x_delayed","text":"[Source] fun box sctp_connect_x_delayed() : I32 val","title":"sctp_connect_x_delayed"},{"location":"net-OSSockOpt/#returns_720","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_context","text":"[Source] fun box sctp_context() : I32 val","title":"sctp_context"},{"location":"net-OSSockOpt/#returns_721","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cookie_ack","text":"[Source] fun box sctp_cookie_ack() : I32 val","title":"sctp_cookie_ack"},{"location":"net-OSSockOpt/#returns_722","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cookie_echo","text":"[Source] fun box sctp_cookie_echo() : I32 val","title":"sctp_cookie_echo"},{"location":"net-OSSockOpt/#returns_723","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cookie_echoed","text":"[Source] fun box sctp_cookie_echoed() : I32 val","title":"sctp_cookie_echoed"},{"location":"net-OSSockOpt/#returns_724","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cookie_wait","text":"[Source] fun box sctp_cookie_wait() : I32 val","title":"sctp_cookie_wait"},{"location":"net-OSSockOpt/#returns_725","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cwnd_logging_enable","text":"[Source] fun box sctp_cwnd_logging_enable() : I32 val","title":"sctp_cwnd_logging_enable"},{"location":"net-OSSockOpt/#returns_726","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cwnd_monitor_enable","text":"[Source] fun box sctp_cwnd_monitor_enable() : I32 val","title":"sctp_cwnd_monitor_enable"},{"location":"net-OSSockOpt/#returns_727","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cwr_in_same_window","text":"[Source] fun box sctp_cwr_in_same_window() : I32 val","title":"sctp_cwr_in_same_window"},{"location":"net-OSSockOpt/#returns_728","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cwr_reduce_override","text":"[Source] fun box sctp_cwr_reduce_override() : I32 val","title":"sctp_cwr_reduce_override"},{"location":"net-OSSockOpt/#returns_729","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_data","text":"[Source] fun box sctp_data() : I32 val","title":"sctp_data"},{"location":"net-OSSockOpt/#returns_730","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_data_first_frag","text":"[Source] fun box sctp_data_first_frag() : I32 val","title":"sctp_data_first_frag"},{"location":"net-OSSockOpt/#returns_731","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_data_frag_mask","text":"[Source] fun box sctp_data_frag_mask() : I32 val","title":"sctp_data_frag_mask"},{"location":"net-OSSockOpt/#returns_732","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_data_last_frag","text":"[Source] fun box sctp_data_last_frag() : I32 val","title":"sctp_data_last_frag"},{"location":"net-OSSockOpt/#returns_733","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_data_middle_frag","text":"[Source] fun box sctp_data_middle_frag() : I32 val","title":"sctp_data_middle_frag"},{"location":"net-OSSockOpt/#returns_734","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_data_not_frag","text":"[Source] fun box sctp_data_not_frag() : I32 val","title":"sctp_data_not_frag"},{"location":"net-OSSockOpt/#returns_735","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_data_sack_immediately","text":"[Source] fun box sctp_data_sack_immediately() : I32 val","title":"sctp_data_sack_immediately"},{"location":"net-OSSockOpt/#returns_736","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_data_unordered","text":"[Source] fun box sctp_data_unordered() : I32 val","title":"sctp_data_unordered"},{"location":"net-OSSockOpt/#returns_737","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_default_prinfo","text":"[Source] fun box sctp_default_prinfo() : I32 val","title":"sctp_default_prinfo"},{"location":"net-OSSockOpt/#returns_738","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_default_send_param","text":"[Source] fun box sctp_default_send_param() : I32 val","title":"sctp_default_send_param"},{"location":"net-OSSockOpt/#returns_739","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_default_sndinfo","text":"[Source] fun box sctp_default_sndinfo() : I32 val","title":"sctp_default_sndinfo"},{"location":"net-OSSockOpt/#returns_740","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_delayed_sack","text":"[Source] fun box sctp_delayed_sack() : I32 val","title":"sctp_delayed_sack"},{"location":"net-OSSockOpt/#returns_741","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_del_vrf_id","text":"[Source] fun box sctp_del_vrf_id() : I32 val","title":"sctp_del_vrf_id"},{"location":"net-OSSockOpt/#returns_742","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_disable_fragments","text":"[Source] fun box sctp_disable_fragments() : I32 val","title":"sctp_disable_fragments"},{"location":"net-OSSockOpt/#returns_743","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ecn_cwr","text":"[Source] fun box sctp_ecn_cwr() : I32 val","title":"sctp_ecn_cwr"},{"location":"net-OSSockOpt/#returns_744","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ecn_echo","text":"[Source] fun box sctp_ecn_echo() : I32 val","title":"sctp_ecn_echo"},{"location":"net-OSSockOpt/#returns_745","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ecn_supported","text":"[Source] fun box sctp_ecn_supported() : I32 val","title":"sctp_ecn_supported"},{"location":"net-OSSockOpt/#returns_746","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_enable_change_assoc_req","text":"[Source] fun box sctp_enable_change_assoc_req() : I32 val","title":"sctp_enable_change_assoc_req"},{"location":"net-OSSockOpt/#returns_747","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_enable_reset_assoc_req","text":"[Source] fun box sctp_enable_reset_assoc_req() : I32 val","title":"sctp_enable_reset_assoc_req"},{"location":"net-OSSockOpt/#returns_748","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_enable_reset_stream_req","text":"[Source] fun box sctp_enable_reset_stream_req() : I32 val","title":"sctp_enable_reset_stream_req"},{"location":"net-OSSockOpt/#returns_749","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_enable_stream_reset","text":"[Source] fun box sctp_enable_stream_reset() : I32 val","title":"sctp_enable_stream_reset"},{"location":"net-OSSockOpt/#returns_750","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_enable_value_mask","text":"[Source] fun box sctp_enable_value_mask() : I32 val","title":"sctp_enable_value_mask"},{"location":"net-OSSockOpt/#returns_751","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_established","text":"[Source] fun box sctp_established() : I32 val","title":"sctp_established"},{"location":"net-OSSockOpt/#returns_752","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_event","text":"[Source] fun box sctp_event() : I32 val","title":"sctp_event"},{"location":"net-OSSockOpt/#returns_753","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_events","text":"[Source] fun box sctp_events() : I32 val","title":"sctp_events"},{"location":"net-OSSockOpt/#returns_754","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_explicit_eor","text":"[Source] fun box sctp_explicit_eor() : I32 val","title":"sctp_explicit_eor"},{"location":"net-OSSockOpt/#returns_755","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_flight_logging_enable","text":"[Source] fun box sctp_flight_logging_enable() : I32 val","title":"sctp_flight_logging_enable"},{"location":"net-OSSockOpt/#returns_756","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_forward_cum_tsn","text":"[Source] fun box sctp_forward_cum_tsn() : I32 val","title":"sctp_forward_cum_tsn"},{"location":"net-OSSockOpt/#returns_757","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_fragment_interleave","text":"[Source] fun box sctp_fragment_interleave() : I32 val","title":"sctp_fragment_interleave"},{"location":"net-OSSockOpt/#returns_758","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_frag_level_0","text":"[Source] fun box sctp_frag_level_0() : I32 val","title":"sctp_frag_level_0"},{"location":"net-OSSockOpt/#returns_759","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_frag_level_1","text":"[Source] fun box sctp_frag_level_1() : I32 val","title":"sctp_frag_level_1"},{"location":"net-OSSockOpt/#returns_760","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_frag_level_2","text":"[Source] fun box sctp_frag_level_2() : I32 val","title":"sctp_frag_level_2"},{"location":"net-OSSockOpt/#returns_761","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_from_middle_box","text":"[Source] fun box sctp_from_middle_box() : I32 val","title":"sctp_from_middle_box"},{"location":"net-OSSockOpt/#returns_762","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_fr_logging_enable","text":"[Source] fun box sctp_fr_logging_enable() : I32 val","title":"sctp_fr_logging_enable"},{"location":"net-OSSockOpt/#returns_763","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_addr_len","text":"[Source] fun box sctp_get_addr_len() : I32 val","title":"sctp_get_addr_len"},{"location":"net-OSSockOpt/#returns_764","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_asoc_vrf","text":"[Source] fun box sctp_get_asoc_vrf() : I32 val","title":"sctp_get_asoc_vrf"},{"location":"net-OSSockOpt/#returns_765","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_assoc_id_list","text":"[Source] fun box sctp_get_assoc_id_list() : I32 val","title":"sctp_get_assoc_id_list"},{"location":"net-OSSockOpt/#returns_766","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_assoc_number","text":"[Source] fun box sctp_get_assoc_number() : I32 val","title":"sctp_get_assoc_number"},{"location":"net-OSSockOpt/#returns_767","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_local_addresses","text":"[Source] fun box sctp_get_local_addresses() : I32 val","title":"sctp_get_local_addresses"},{"location":"net-OSSockOpt/#returns_768","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_local_addr_size","text":"[Source] fun box sctp_get_local_addr_size() : I32 val","title":"sctp_get_local_addr_size"},{"location":"net-OSSockOpt/#returns_769","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_nonce_values","text":"[Source] fun box sctp_get_nonce_values() : I32 val","title":"sctp_get_nonce_values"},{"location":"net-OSSockOpt/#returns_770","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_packet_log","text":"[Source] fun box sctp_get_packet_log() : I32 val","title":"sctp_get_packet_log"},{"location":"net-OSSockOpt/#returns_771","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_peer_addresses","text":"[Source] fun box sctp_get_peer_addresses() : I32 val","title":"sctp_get_peer_addresses"},{"location":"net-OSSockOpt/#returns_772","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_peer_addr_info","text":"[Source] fun box sctp_get_peer_addr_info() : I32 val","title":"sctp_get_peer_addr_info"},{"location":"net-OSSockOpt/#returns_773","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_remote_addr_size","text":"[Source] fun box sctp_get_remote_addr_size() : I32 val","title":"sctp_get_remote_addr_size"},{"location":"net-OSSockOpt/#returns_774","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_sndbuf_use","text":"[Source] fun box sctp_get_sndbuf_use() : I32 val","title":"sctp_get_sndbuf_use"},{"location":"net-OSSockOpt/#returns_775","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_stat_log","text":"[Source] fun box sctp_get_stat_log() : I32 val","title":"sctp_get_stat_log"},{"location":"net-OSSockOpt/#returns_776","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_vrf_ids","text":"[Source] fun box sctp_get_vrf_ids() : I32 val","title":"sctp_get_vrf_ids"},{"location":"net-OSSockOpt/#returns_777","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_had_no_tcb","text":"[Source] fun box sctp_had_no_tcb() : I32 val","title":"sctp_had_no_tcb"},{"location":"net-OSSockOpt/#returns_778","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_heartbeat_ack","text":"[Source] fun box sctp_heartbeat_ack() : I32 val","title":"sctp_heartbeat_ack"},{"location":"net-OSSockOpt/#returns_779","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_heartbeat_request","text":"[Source] fun box sctp_heartbeat_request() : I32 val","title":"sctp_heartbeat_request"},{"location":"net-OSSockOpt/#returns_780","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_hmac_ident","text":"[Source] fun box sctp_hmac_ident() : I32 val","title":"sctp_hmac_ident"},{"location":"net-OSSockOpt/#returns_781","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_idata","text":"[Source] fun box sctp_idata() : I32 val","title":"sctp_idata"},{"location":"net-OSSockOpt/#returns_782","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_iforward_cum_tsn","text":"[Source] fun box sctp_iforward_cum_tsn() : I32 val","title":"sctp_iforward_cum_tsn"},{"location":"net-OSSockOpt/#returns_783","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_initiation","text":"[Source] fun box sctp_initiation() : I32 val","title":"sctp_initiation"},{"location":"net-OSSockOpt/#returns_784","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_initiation_ack","text":"[Source] fun box sctp_initiation_ack() : I32 val","title":"sctp_initiation_ack"},{"location":"net-OSSockOpt/#returns_785","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_initmsg","text":"[Source] fun box sctp_initmsg() : I32 val","title":"sctp_initmsg"},{"location":"net-OSSockOpt/#returns_786","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_interleaving_supported","text":"[Source] fun box sctp_interleaving_supported() : I32 val","title":"sctp_interleaving_supported"},{"location":"net-OSSockOpt/#returns_787","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_i_want_mapped_v4_addr","text":"[Source] fun box sctp_i_want_mapped_v4_addr() : I32 val","title":"sctp_i_want_mapped_v4_addr"},{"location":"net-OSSockOpt/#returns_788","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_last_packet_tracing","text":"[Source] fun box sctp_last_packet_tracing() : I32 val","title":"sctp_last_packet_tracing"},{"location":"net-OSSockOpt/#returns_789","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_listen","text":"[Source] fun box sctp_listen() : I32 val","title":"sctp_listen"},{"location":"net-OSSockOpt/#returns_790","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_local_auth_chunks","text":"[Source] fun box sctp_local_auth_chunks() : I32 val","title":"sctp_local_auth_chunks"},{"location":"net-OSSockOpt/#returns_791","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_lock_logging_enable","text":"[Source] fun box sctp_lock_logging_enable() : I32 val","title":"sctp_lock_logging_enable"},{"location":"net-OSSockOpt/#returns_792","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_log_at_send_2_outq","text":"[Source] fun box sctp_log_at_send_2_outq() : I32 val","title":"sctp_log_at_send_2_outq"},{"location":"net-OSSockOpt/#returns_793","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_log_at_send_2_sctp","text":"[Source] fun box sctp_log_at_send_2_sctp() : I32 val","title":"sctp_log_at_send_2_sctp"},{"location":"net-OSSockOpt/#returns_794","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_log_maxburst_enable","text":"[Source] fun box sctp_log_maxburst_enable() : I32 val","title":"sctp_log_maxburst_enable"},{"location":"net-OSSockOpt/#returns_795","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_log_rwnd_enable","text":"[Source] fun box sctp_log_rwnd_enable() : I32 val","title":"sctp_log_rwnd_enable"},{"location":"net-OSSockOpt/#returns_796","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_log_sack_arrivals_enable","text":"[Source] fun box sctp_log_sack_arrivals_enable() : I32 val","title":"sctp_log_sack_arrivals_enable"},{"location":"net-OSSockOpt/#returns_797","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_log_try_advance","text":"[Source] fun box sctp_log_try_advance() : I32 val","title":"sctp_log_try_advance"},{"location":"net-OSSockOpt/#returns_798","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ltrace_chunk_enable","text":"[Source] fun box sctp_ltrace_chunk_enable() : I32 val","title":"sctp_ltrace_chunk_enable"},{"location":"net-OSSockOpt/#returns_799","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ltrace_error_enable","text":"[Source] fun box sctp_ltrace_error_enable() : I32 val","title":"sctp_ltrace_error_enable"},{"location":"net-OSSockOpt/#returns_800","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_map_logging_enable","text":"[Source] fun box sctp_map_logging_enable() : I32 val","title":"sctp_map_logging_enable"},{"location":"net-OSSockOpt/#returns_801","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_maxburst","text":"[Source] fun box sctp_maxburst() : I32 val","title":"sctp_maxburst"},{"location":"net-OSSockOpt/#returns_802","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_maxseg","text":"[Source] fun box sctp_maxseg() : I32 val","title":"sctp_maxseg"},{"location":"net-OSSockOpt/#returns_803","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_max_burst","text":"[Source] fun box sctp_max_burst() : I32 val","title":"sctp_max_burst"},{"location":"net-OSSockOpt/#returns_804","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_max_cookie_life","text":"[Source] fun box sctp_max_cookie_life() : I32 val","title":"sctp_max_cookie_life"},{"location":"net-OSSockOpt/#returns_805","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_max_cwnd","text":"[Source] fun box sctp_max_cwnd() : I32 val","title":"sctp_max_cwnd"},{"location":"net-OSSockOpt/#returns_806","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_max_hb_interval","text":"[Source] fun box sctp_max_hb_interval() : I32 val","title":"sctp_max_hb_interval"},{"location":"net-OSSockOpt/#returns_807","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_max_sack_delay","text":"[Source] fun box sctp_max_sack_delay() : I32 val","title":"sctp_max_sack_delay"},{"location":"net-OSSockOpt/#returns_808","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_mbcnt_logging_enable","text":"[Source] fun box sctp_mbcnt_logging_enable() : I32 val","title":"sctp_mbcnt_logging_enable"},{"location":"net-OSSockOpt/#returns_809","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_mbuf_logging_enable","text":"[Source] fun box sctp_mbuf_logging_enable() : I32 val","title":"sctp_mbuf_logging_enable"},{"location":"net-OSSockOpt/#returns_810","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_mobility_base","text":"[Source] fun box sctp_mobility_base() : I32 val","title":"sctp_mobility_base"},{"location":"net-OSSockOpt/#returns_811","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_mobility_fasthandoff","text":"[Source] fun box sctp_mobility_fasthandoff() : I32 val","title":"sctp_mobility_fasthandoff"},{"location":"net-OSSockOpt/#returns_812","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_mobility_prim_deleted","text":"[Source] fun box sctp_mobility_prim_deleted() : I32 val","title":"sctp_mobility_prim_deleted"},{"location":"net-OSSockOpt/#returns_813","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_nagle_logging_enable","text":"[Source] fun box sctp_nagle_logging_enable() : I32 val","title":"sctp_nagle_logging_enable"},{"location":"net-OSSockOpt/#returns_814","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_nodelay","text":"[Source] fun box sctp_nodelay() : I32 val","title":"sctp_nodelay"},{"location":"net-OSSockOpt/#returns_815","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_nrsack_supported","text":"[Source] fun box sctp_nrsack_supported() : I32 val","title":"sctp_nrsack_supported"},{"location":"net-OSSockOpt/#returns_816","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_nr_selective_ack","text":"[Source] fun box sctp_nr_selective_ack() : I32 val","title":"sctp_nr_selective_ack"},{"location":"net-OSSockOpt/#returns_817","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_operation_error","text":"[Source] fun box sctp_operation_error() : I32 val","title":"sctp_operation_error"},{"location":"net-OSSockOpt/#returns_818","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_packed","text":"[Source] fun box sctp_packed() : I32 val","title":"sctp_packed"},{"location":"net-OSSockOpt/#returns_819","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_packet_dropped","text":"[Source] fun box sctp_packet_dropped() : I32 val","title":"sctp_packet_dropped"},{"location":"net-OSSockOpt/#returns_820","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_packet_log_size","text":"[Source] fun box sctp_packet_log_size() : I32 val","title":"sctp_packet_log_size"},{"location":"net-OSSockOpt/#returns_821","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_packet_truncated","text":"[Source] fun box sctp_packet_truncated() : I32 val","title":"sctp_packet_truncated"},{"location":"net-OSSockOpt/#returns_822","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pad_chunk","text":"[Source] fun box sctp_pad_chunk() : I32 val","title":"sctp_pad_chunk"},{"location":"net-OSSockOpt/#returns_823","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_partial_delivery_point","text":"[Source] fun box sctp_partial_delivery_point() : I32 val","title":"sctp_partial_delivery_point"},{"location":"net-OSSockOpt/#returns_824","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_copy_flags","text":"[Source] fun box sctp_pcb_copy_flags() : I32 val","title":"sctp_pcb_copy_flags"},{"location":"net-OSSockOpt/#returns_825","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_accepting","text":"[Source] fun box sctp_pcb_flags_accepting() : I32 val","title":"sctp_pcb_flags_accepting"},{"location":"net-OSSockOpt/#returns_826","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_adaptationevnt","text":"[Source] fun box sctp_pcb_flags_adaptationevnt() : I32 val","title":"sctp_pcb_flags_adaptationevnt"},{"location":"net-OSSockOpt/#returns_827","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_assoc_resetevnt","text":"[Source] fun box sctp_pcb_flags_assoc_resetevnt() : I32 val","title":"sctp_pcb_flags_assoc_resetevnt"},{"location":"net-OSSockOpt/#returns_828","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_authevnt","text":"[Source] fun box sctp_pcb_flags_authevnt() : I32 val","title":"sctp_pcb_flags_authevnt"},{"location":"net-OSSockOpt/#returns_829","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_autoclose","text":"[Source] fun box sctp_pcb_flags_autoclose() : I32 val","title":"sctp_pcb_flags_autoclose"},{"location":"net-OSSockOpt/#returns_830","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_auto_asconf","text":"[Source] fun box sctp_pcb_flags_auto_asconf() : I32 val","title":"sctp_pcb_flags_auto_asconf"},{"location":"net-OSSockOpt/#returns_831","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_blocking_io","text":"[Source] fun box sctp_pcb_flags_blocking_io() : I32 val","title":"sctp_pcb_flags_blocking_io"},{"location":"net-OSSockOpt/#returns_832","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_boundall","text":"[Source] fun box sctp_pcb_flags_boundall() : I32 val","title":"sctp_pcb_flags_boundall"},{"location":"net-OSSockOpt/#returns_833","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_bound_v6","text":"[Source] fun box sctp_pcb_flags_bound_v6() : I32 val","title":"sctp_pcb_flags_bound_v6"},{"location":"net-OSSockOpt/#returns_834","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_close_ip","text":"[Source] fun box sctp_pcb_flags_close_ip() : I32 val","title":"sctp_pcb_flags_close_ip"},{"location":"net-OSSockOpt/#returns_835","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_connected","text":"[Source] fun box sctp_pcb_flags_connected() : I32 val","title":"sctp_pcb_flags_connected"},{"location":"net-OSSockOpt/#returns_836","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_donot_heartbeat","text":"[Source] fun box sctp_pcb_flags_donot_heartbeat() : I32 val","title":"sctp_pcb_flags_donot_heartbeat"},{"location":"net-OSSockOpt/#returns_837","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_dont_wake","text":"[Source] fun box sctp_pcb_flags_dont_wake() : I32 val","title":"sctp_pcb_flags_dont_wake"},{"location":"net-OSSockOpt/#returns_838","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_do_asconf","text":"[Source] fun box sctp_pcb_flags_do_asconf() : I32 val","title":"sctp_pcb_flags_do_asconf"},{"location":"net-OSSockOpt/#returns_839","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_do_not_pmtud","text":"[Source] fun box sctp_pcb_flags_do_not_pmtud() : I32 val","title":"sctp_pcb_flags_do_not_pmtud"},{"location":"net-OSSockOpt/#returns_840","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_dryevnt","text":"[Source] fun box sctp_pcb_flags_dryevnt() : I32 val","title":"sctp_pcb_flags_dryevnt"},{"location":"net-OSSockOpt/#returns_841","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_explicit_eor","text":"[Source] fun box sctp_pcb_flags_explicit_eor() : I32 val","title":"sctp_pcb_flags_explicit_eor"},{"location":"net-OSSockOpt/#returns_842","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_ext_rcvinfo","text":"[Source] fun box sctp_pcb_flags_ext_rcvinfo() : I32 val","title":"sctp_pcb_flags_ext_rcvinfo"},{"location":"net-OSSockOpt/#returns_843","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_frag_interleave","text":"[Source] fun box sctp_pcb_flags_frag_interleave() : I32 val","title":"sctp_pcb_flags_frag_interleave"},{"location":"net-OSSockOpt/#returns_844","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_interleave_strms","text":"[Source] fun box sctp_pcb_flags_interleave_strms() : I32 val","title":"sctp_pcb_flags_interleave_strms"},{"location":"net-OSSockOpt/#returns_845","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_in_tcppool","text":"[Source] fun box sctp_pcb_flags_in_tcppool() : I32 val","title":"sctp_pcb_flags_in_tcppool"},{"location":"net-OSSockOpt/#returns_846","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_multiple_asconfs","text":"[Source] fun box sctp_pcb_flags_multiple_asconfs() : I32 val","title":"sctp_pcb_flags_multiple_asconfs"},{"location":"net-OSSockOpt/#returns_847","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_needs_mapped_v4","text":"[Source] fun box sctp_pcb_flags_needs_mapped_v4() : I32 val","title":"sctp_pcb_flags_needs_mapped_v4"},{"location":"net-OSSockOpt/#returns_848","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_nodelay","text":"[Source] fun box sctp_pcb_flags_nodelay() : I32 val","title":"sctp_pcb_flags_nodelay"},{"location":"net-OSSockOpt/#returns_849","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_no_fragment","text":"[Source] fun box sctp_pcb_flags_no_fragment() : I32 val","title":"sctp_pcb_flags_no_fragment"},{"location":"net-OSSockOpt/#returns_850","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_pdapievnt","text":"[Source] fun box sctp_pcb_flags_pdapievnt() : I32 val","title":"sctp_pcb_flags_pdapievnt"},{"location":"net-OSSockOpt/#returns_851","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_portreuse","text":"[Source] fun box sctp_pcb_flags_portreuse() : I32 val","title":"sctp_pcb_flags_portreuse"},{"location":"net-OSSockOpt/#returns_852","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvassocevnt","text":"[Source] fun box sctp_pcb_flags_recvassocevnt() : I32 val","title":"sctp_pcb_flags_recvassocevnt"},{"location":"net-OSSockOpt/#returns_853","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvdataioevnt","text":"[Source] fun box sctp_pcb_flags_recvdataioevnt() : I32 val","title":"sctp_pcb_flags_recvdataioevnt"},{"location":"net-OSSockOpt/#returns_854","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvnsendfailevnt","text":"[Source] fun box sctp_pcb_flags_recvnsendfailevnt() : I32 val","title":"sctp_pcb_flags_recvnsendfailevnt"},{"location":"net-OSSockOpt/#returns_855","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvnxtinfo","text":"[Source] fun box sctp_pcb_flags_recvnxtinfo() : I32 val","title":"sctp_pcb_flags_recvnxtinfo"},{"location":"net-OSSockOpt/#returns_856","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvpaddrevnt","text":"[Source] fun box sctp_pcb_flags_recvpaddrevnt() : I32 val","title":"sctp_pcb_flags_recvpaddrevnt"},{"location":"net-OSSockOpt/#returns_857","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvpeererr","text":"[Source] fun box sctp_pcb_flags_recvpeererr() : I32 val","title":"sctp_pcb_flags_recvpeererr"},{"location":"net-OSSockOpt/#returns_858","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvrcvinfo","text":"[Source] fun box sctp_pcb_flags_recvrcvinfo() : I32 val","title":"sctp_pcb_flags_recvrcvinfo"},{"location":"net-OSSockOpt/#returns_859","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvsendfailevnt","text":"[Source] fun box sctp_pcb_flags_recvsendfailevnt() : I32 val","title":"sctp_pcb_flags_recvsendfailevnt"},{"location":"net-OSSockOpt/#returns_860","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvshutdownevnt","text":"[Source] fun box sctp_pcb_flags_recvshutdownevnt() : I32 val","title":"sctp_pcb_flags_recvshutdownevnt"},{"location":"net-OSSockOpt/#returns_861","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_socket_allgone","text":"[Source] fun box sctp_pcb_flags_socket_allgone() : I32 val","title":"sctp_pcb_flags_socket_allgone"},{"location":"net-OSSockOpt/#returns_862","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_socket_cant_read","text":"[Source] fun box sctp_pcb_flags_socket_cant_read() : I32 val","title":"sctp_pcb_flags_socket_cant_read"},{"location":"net-OSSockOpt/#returns_863","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_socket_gone","text":"[Source] fun box sctp_pcb_flags_socket_gone() : I32 val","title":"sctp_pcb_flags_socket_gone"},{"location":"net-OSSockOpt/#returns_864","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_stream_changeevnt","text":"[Source] fun box sctp_pcb_flags_stream_changeevnt() : I32 val","title":"sctp_pcb_flags_stream_changeevnt"},{"location":"net-OSSockOpt/#returns_865","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_stream_resetevnt","text":"[Source] fun box sctp_pcb_flags_stream_resetevnt() : I32 val","title":"sctp_pcb_flags_stream_resetevnt"},{"location":"net-OSSockOpt/#returns_866","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_tcptype","text":"[Source] fun box sctp_pcb_flags_tcptype() : I32 val","title":"sctp_pcb_flags_tcptype"},{"location":"net-OSSockOpt/#returns_867","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_udptype","text":"[Source] fun box sctp_pcb_flags_udptype() : I32 val","title":"sctp_pcb_flags_udptype"},{"location":"net-OSSockOpt/#returns_868","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_unbound","text":"[Source] fun box sctp_pcb_flags_unbound() : I32 val","title":"sctp_pcb_flags_unbound"},{"location":"net-OSSockOpt/#returns_869","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_wakeinput","text":"[Source] fun box sctp_pcb_flags_wakeinput() : I32 val","title":"sctp_pcb_flags_wakeinput"},{"location":"net-OSSockOpt/#returns_870","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_wakeoutput","text":"[Source] fun box sctp_pcb_flags_wakeoutput() : I32 val","title":"sctp_pcb_flags_wakeoutput"},{"location":"net-OSSockOpt/#returns_871","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_was_aborted","text":"[Source] fun box sctp_pcb_flags_was_aborted() : I32 val","title":"sctp_pcb_flags_was_aborted"},{"location":"net-OSSockOpt/#returns_872","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_was_connected","text":"[Source] fun box sctp_pcb_flags_was_connected() : I32 val","title":"sctp_pcb_flags_was_connected"},{"location":"net-OSSockOpt/#returns_873","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_zero_copy_active","text":"[Source] fun box sctp_pcb_flags_zero_copy_active() : I32 val","title":"sctp_pcb_flags_zero_copy_active"},{"location":"net-OSSockOpt/#returns_874","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_status","text":"[Source] fun box sctp_pcb_status() : I32 val","title":"sctp_pcb_status"},{"location":"net-OSSockOpt/#returns_875","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_peeloff","text":"[Source] fun box sctp_peeloff() : I32 val","title":"sctp_peeloff"},{"location":"net-OSSockOpt/#returns_876","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_peer_addr_params","text":"[Source] fun box sctp_peer_addr_params() : I32 val","title":"sctp_peer_addr_params"},{"location":"net-OSSockOpt/#returns_877","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_peer_addr_thlds","text":"[Source] fun box sctp_peer_addr_thlds() : I32 val","title":"sctp_peer_addr_thlds"},{"location":"net-OSSockOpt/#returns_878","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_peer_auth_chunks","text":"[Source] fun box sctp_peer_auth_chunks() : I32 val","title":"sctp_peer_auth_chunks"},{"location":"net-OSSockOpt/#returns_879","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pktdrop_supported","text":"[Source] fun box sctp_pktdrop_supported() : I32 val","title":"sctp_pktdrop_supported"},{"location":"net-OSSockOpt/#returns_880","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pluggable_cc","text":"[Source] fun box sctp_pluggable_cc() : I32 val","title":"sctp_pluggable_cc"},{"location":"net-OSSockOpt/#returns_881","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pluggable_ss","text":"[Source] fun box sctp_pluggable_ss() : I32 val","title":"sctp_pluggable_ss"},{"location":"net-OSSockOpt/#returns_882","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_primary_addr","text":"[Source] fun box sctp_primary_addr() : I32 val","title":"sctp_primary_addr"},{"location":"net-OSSockOpt/#returns_883","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pr_assoc_status","text":"[Source] fun box sctp_pr_assoc_status() : I32 val","title":"sctp_pr_assoc_status"},{"location":"net-OSSockOpt/#returns_884","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pr_stream_status","text":"[Source] fun box sctp_pr_stream_status() : I32 val","title":"sctp_pr_stream_status"},{"location":"net-OSSockOpt/#returns_885","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pr_supported","text":"[Source] fun box sctp_pr_supported() : I32 val","title":"sctp_pr_supported"},{"location":"net-OSSockOpt/#returns_886","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_reconfig_supported","text":"[Source] fun box sctp_reconfig_supported() : I32 val","title":"sctp_reconfig_supported"},{"location":"net-OSSockOpt/#returns_887","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_recvnxtinfo","text":"[Source] fun box sctp_recvnxtinfo() : I32 val","title":"sctp_recvnxtinfo"},{"location":"net-OSSockOpt/#returns_888","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_recvrcvinfo","text":"[Source] fun box sctp_recvrcvinfo() : I32 val","title":"sctp_recvrcvinfo"},{"location":"net-OSSockOpt/#returns_889","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_recv_rwnd_logging_enable","text":"[Source] fun box sctp_recv_rwnd_logging_enable() : I32 val","title":"sctp_recv_rwnd_logging_enable"},{"location":"net-OSSockOpt/#returns_890","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_remote_udp_encaps_port","text":"[Source] fun box sctp_remote_udp_encaps_port() : I32 val","title":"sctp_remote_udp_encaps_port"},{"location":"net-OSSockOpt/#returns_891","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_reset_assoc","text":"[Source] fun box sctp_reset_assoc() : I32 val","title":"sctp_reset_assoc"},{"location":"net-OSSockOpt/#returns_892","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_reset_streams","text":"[Source] fun box sctp_reset_streams() : I32 val","title":"sctp_reset_streams"},{"location":"net-OSSockOpt/#returns_893","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_reuse_port","text":"[Source] fun box sctp_reuse_port() : I32 val","title":"sctp_reuse_port"},{"location":"net-OSSockOpt/#returns_894","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_rtoinfo","text":"[Source] fun box sctp_rtoinfo() : I32 val","title":"sctp_rtoinfo"},{"location":"net-OSSockOpt/#returns_895","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_rttvar_logging_enable","text":"[Source] fun box sctp_rttvar_logging_enable() : I32 val","title":"sctp_rttvar_logging_enable"},{"location":"net-OSSockOpt/#returns_896","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_sack_cmt_dac","text":"[Source] fun box sctp_sack_cmt_dac() : I32 val","title":"sctp_sack_cmt_dac"},{"location":"net-OSSockOpt/#returns_897","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_sack_logging_enable","text":"[Source] fun box sctp_sack_logging_enable() : I32 val","title":"sctp_sack_logging_enable"},{"location":"net-OSSockOpt/#returns_898","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_sack_nonce_sum","text":"[Source] fun box sctp_sack_nonce_sum() : I32 val","title":"sctp_sack_nonce_sum"},{"location":"net-OSSockOpt/#returns_899","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_sack_rwnd_logging_enable","text":"[Source] fun box sctp_sack_rwnd_logging_enable() : I32 val","title":"sctp_sack_rwnd_logging_enable"},{"location":"net-OSSockOpt/#returns_900","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_sat_network_burst_incr","text":"[Source] fun box sctp_sat_network_burst_incr() : I32 val","title":"sctp_sat_network_burst_incr"},{"location":"net-OSSockOpt/#returns_901","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_sat_network_min","text":"[Source] fun box sctp_sat_network_min() : I32 val","title":"sctp_sat_network_min"},{"location":"net-OSSockOpt/#returns_902","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_sb_logging_enable","text":"[Source] fun box sctp_sb_logging_enable() : I32 val","title":"sctp_sb_logging_enable"},{"location":"net-OSSockOpt/#returns_903","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_selective_ack","text":"[Source] fun box sctp_selective_ack() : I32 val","title":"sctp_selective_ack"},{"location":"net-OSSockOpt/#returns_904","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_set_debug_level","text":"[Source] fun box sctp_set_debug_level() : I32 val","title":"sctp_set_debug_level"},{"location":"net-OSSockOpt/#returns_905","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_set_dynamic_primary","text":"[Source] fun box sctp_set_dynamic_primary() : I32 val","title":"sctp_set_dynamic_primary"},{"location":"net-OSSockOpt/#returns_906","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_set_initial_dbg_seq","text":"[Source] fun box sctp_set_initial_dbg_seq() : I32 val","title":"sctp_set_initial_dbg_seq"},{"location":"net-OSSockOpt/#returns_907","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_set_peer_primary_addr","text":"[Source] fun box sctp_set_peer_primary_addr() : I32 val","title":"sctp_set_peer_primary_addr"},{"location":"net-OSSockOpt/#returns_908","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_shutdown","text":"[Source] fun box sctp_shutdown() : I32 val","title":"sctp_shutdown"},{"location":"net-OSSockOpt/#returns_909","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_shutdown_ack","text":"[Source] fun box sctp_shutdown_ack() : I32 val","title":"sctp_shutdown_ack"},{"location":"net-OSSockOpt/#returns_910","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_shutdown_ack_sent","text":"[Source] fun box sctp_shutdown_ack_sent() : I32 val","title":"sctp_shutdown_ack_sent"},{"location":"net-OSSockOpt/#returns_911","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_shutdown_complete","text":"[Source] fun box sctp_shutdown_complete() : I32 val","title":"sctp_shutdown_complete"},{"location":"net-OSSockOpt/#returns_912","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_shutdown_pending","text":"[Source] fun box sctp_shutdown_pending() : I32 val","title":"sctp_shutdown_pending"},{"location":"net-OSSockOpt/#returns_913","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_shutdown_received","text":"[Source] fun box sctp_shutdown_received() : I32 val","title":"sctp_shutdown_received"},{"location":"net-OSSockOpt/#returns_914","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_shutdown_sent","text":"[Source] fun box sctp_shutdown_sent() : I32 val","title":"sctp_shutdown_sent"},{"location":"net-OSSockOpt/#returns_915","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_smallest_pmtu","text":"[Source] fun box sctp_smallest_pmtu() : I32 val","title":"sctp_smallest_pmtu"},{"location":"net-OSSockOpt/#returns_916","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ss_default","text":"[Source] fun box sctp_ss_default() : I32 val","title":"sctp_ss_default"},{"location":"net-OSSockOpt/#returns_917","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ss_fair_bandwith","text":"[Source] fun box sctp_ss_fair_bandwith() : I32 val","title":"sctp_ss_fair_bandwith"},{"location":"net-OSSockOpt/#returns_918","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ss_first_come","text":"[Source] fun box sctp_ss_first_come() : I32 val","title":"sctp_ss_first_come"},{"location":"net-OSSockOpt/#returns_919","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ss_priority","text":"[Source] fun box sctp_ss_priority() : I32 val","title":"sctp_ss_priority"},{"location":"net-OSSockOpt/#returns_920","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ss_round_robin","text":"[Source] fun box sctp_ss_round_robin() : I32 val","title":"sctp_ss_round_robin"},{"location":"net-OSSockOpt/#returns_921","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ss_round_robin_packet","text":"[Source] fun box sctp_ss_round_robin_packet() : I32 val","title":"sctp_ss_round_robin_packet"},{"location":"net-OSSockOpt/#returns_922","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ss_value","text":"[Source] fun box sctp_ss_value() : I32 val","title":"sctp_ss_value"},{"location":"net-OSSockOpt/#returns_923","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_status","text":"[Source] fun box sctp_status() : I32 val","title":"sctp_status"},{"location":"net-OSSockOpt/#returns_924","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_stream_reset","text":"[Source] fun box sctp_stream_reset() : I32 val","title":"sctp_stream_reset"},{"location":"net-OSSockOpt/#returns_925","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_stream_reset_incoming","text":"[Source] fun box sctp_stream_reset_incoming() : I32 val","title":"sctp_stream_reset_incoming"},{"location":"net-OSSockOpt/#returns_926","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_stream_reset_outgoing","text":"[Source] fun box sctp_stream_reset_outgoing() : I32 val","title":"sctp_stream_reset_outgoing"},{"location":"net-OSSockOpt/#returns_927","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_str_logging_enable","text":"[Source] fun box sctp_str_logging_enable() : I32 val","title":"sctp_str_logging_enable"},{"location":"net-OSSockOpt/#returns_928","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_threshold_logging","text":"[Source] fun box sctp_threshold_logging() : I32 val","title":"sctp_threshold_logging"},{"location":"net-OSSockOpt/#returns_929","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_timeouts","text":"[Source] fun box sctp_timeouts() : I32 val","title":"sctp_timeouts"},{"location":"net-OSSockOpt/#returns_930","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_use_ext_rcvinfo","text":"[Source] fun box sctp_use_ext_rcvinfo() : I32 val","title":"sctp_use_ext_rcvinfo"},{"location":"net-OSSockOpt/#returns_931","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_vrf_id","text":"[Source] fun box sctp_vrf_id() : I32 val","title":"sctp_vrf_id"},{"location":"net-OSSockOpt/#returns_932","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_wake_logging_enable","text":"[Source] fun box sctp_wake_logging_enable() : I32 val","title":"sctp_wake_logging_enable"},{"location":"net-OSSockOpt/#returns_933","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sock_cloexec","text":"[Source] fun box sock_cloexec() : I32 val","title":"sock_cloexec"},{"location":"net-OSSockOpt/#returns_934","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sock_dgram","text":"[Source] fun box sock_dgram() : I32 val","title":"sock_dgram"},{"location":"net-OSSockOpt/#returns_935","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sock_maxaddrlen","text":"[Source] fun box sock_maxaddrlen() : I32 val","title":"sock_maxaddrlen"},{"location":"net-OSSockOpt/#returns_936","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sock_nonblock","text":"[Source] fun box sock_nonblock() : I32 val","title":"sock_nonblock"},{"location":"net-OSSockOpt/#returns_937","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sock_raw","text":"[Source] fun box sock_raw() : I32 val","title":"sock_raw"},{"location":"net-OSSockOpt/#returns_938","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sock_rdm","text":"[Source] fun box sock_rdm() : I32 val","title":"sock_rdm"},{"location":"net-OSSockOpt/#returns_939","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sock_seqpacket","text":"[Source] fun box sock_seqpacket() : I32 val","title":"sock_seqpacket"},{"location":"net-OSSockOpt/#returns_940","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sock_stream","text":"[Source] fun box sock_stream() : I32 val","title":"sock_stream"},{"location":"net-OSSockOpt/#returns_941","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#somaxconn","text":"[Source] fun box somaxconn() : I32 val","title":"somaxconn"},{"location":"net-OSSockOpt/#returns_942","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sonpx_setoptshut","text":"[Source] fun box sonpx_setoptshut() : I32 val","title":"sonpx_setoptshut"},{"location":"net-OSSockOpt/#returns_943","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_acceptconn","text":"[Source] fun box so_acceptconn() : I32 val","title":"so_acceptconn"},{"location":"net-OSSockOpt/#returns_944","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_acceptfilter","text":"[Source] fun box so_acceptfilter() : I32 val","title":"so_acceptfilter"},{"location":"net-OSSockOpt/#returns_945","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_atmpvc","text":"[Source] fun box so_atmpvc() : I32 val","title":"so_atmpvc"},{"location":"net-OSSockOpt/#returns_946","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_atmqos","text":"[Source] fun box so_atmqos() : I32 val","title":"so_atmqos"},{"location":"net-OSSockOpt/#returns_947","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_atmsap","text":"[Source] fun box so_atmsap() : I32 val","title":"so_atmsap"},{"location":"net-OSSockOpt/#returns_948","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_attach_bpf","text":"[Source] fun box so_attach_bpf() : I32 val","title":"so_attach_bpf"},{"location":"net-OSSockOpt/#returns_949","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_attach_filter","text":"[Source] fun box so_attach_filter() : I32 val","title":"so_attach_filter"},{"location":"net-OSSockOpt/#returns_950","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_bindtodevice","text":"[Source] fun box so_bindtodevice() : I32 val","title":"so_bindtodevice"},{"location":"net-OSSockOpt/#returns_951","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_bintime","text":"[Source] fun box so_bintime() : I32 val","title":"so_bintime"},{"location":"net-OSSockOpt/#returns_952","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_bpf_extensions","text":"[Source] fun box so_bpf_extensions() : I32 val","title":"so_bpf_extensions"},{"location":"net-OSSockOpt/#returns_953","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_broadcast","text":"[Source] fun box so_broadcast() : I32 val","title":"so_broadcast"},{"location":"net-OSSockOpt/#returns_954","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_bsdcompat","text":"[Source] fun box so_bsdcompat() : I32 val","title":"so_bsdcompat"},{"location":"net-OSSockOpt/#returns_955","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_bsp_state","text":"[Source] fun box so_bsp_state() : I32 val","title":"so_bsp_state"},{"location":"net-OSSockOpt/#returns_956","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_busy_poll","text":"[Source] fun box so_busy_poll() : I32 val","title":"so_busy_poll"},{"location":"net-OSSockOpt/#returns_957","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_conaccess","text":"[Source] fun box so_conaccess() : I32 val","title":"so_conaccess"},{"location":"net-OSSockOpt/#returns_958","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_condata","text":"[Source] fun box so_condata() : I32 val","title":"so_condata"},{"location":"net-OSSockOpt/#returns_959","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_conditional_accept","text":"[Source] fun box so_conditional_accept() : I32 val","title":"so_conditional_accept"},{"location":"net-OSSockOpt/#returns_960","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_connect_time","text":"[Source] fun box so_connect_time() : I32 val","title":"so_connect_time"},{"location":"net-OSSockOpt/#returns_961","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_debug","text":"[Source] fun box so_debug() : I32 val","title":"so_debug"},{"location":"net-OSSockOpt/#returns_962","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_detach_bpf","text":"[Source] fun box so_detach_bpf() : I32 val","title":"so_detach_bpf"},{"location":"net-OSSockOpt/#returns_963","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_detach_filter","text":"[Source] fun box so_detach_filter() : I32 val","title":"so_detach_filter"},{"location":"net-OSSockOpt/#returns_964","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_domain","text":"[Source] fun box so_domain() : I32 val","title":"so_domain"},{"location":"net-OSSockOpt/#returns_965","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_dontlinger","text":"[Source] fun box so_dontlinger() : I32 val","title":"so_dontlinger"},{"location":"net-OSSockOpt/#returns_966","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_dontroute","text":"[Source] fun box so_dontroute() : I32 val","title":"so_dontroute"},{"location":"net-OSSockOpt/#returns_967","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_donttrunc","text":"[Source] fun box so_donttrunc() : I32 val","title":"so_donttrunc"},{"location":"net-OSSockOpt/#returns_968","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_error","text":"[Source] fun box so_error() : I32 val","title":"so_error"},{"location":"net-OSSockOpt/#returns_969","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_exclusiveaddruse","text":"[Source] fun box so_exclusiveaddruse() : I32 val","title":"so_exclusiveaddruse"},{"location":"net-OSSockOpt/#returns_970","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_get_filter","text":"[Source] fun box so_get_filter() : I32 val","title":"so_get_filter"},{"location":"net-OSSockOpt/#returns_971","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_group_id","text":"[Source] fun box so_group_id() : I32 val","title":"so_group_id"},{"location":"net-OSSockOpt/#returns_972","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_group_priority","text":"[Source] fun box so_group_priority() : I32 val","title":"so_group_priority"},{"location":"net-OSSockOpt/#returns_973","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_hci_raw_direction","text":"[Source] fun box so_hci_raw_direction() : I32 val","title":"so_hci_raw_direction"},{"location":"net-OSSockOpt/#returns_974","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_hci_raw_filter","text":"[Source] fun box so_hci_raw_filter() : I32 val","title":"so_hci_raw_filter"},{"location":"net-OSSockOpt/#returns_975","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_incoming_cpu","text":"[Source] fun box so_incoming_cpu() : I32 val","title":"so_incoming_cpu"},{"location":"net-OSSockOpt/#returns_976","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_keepalive","text":"[Source] fun box so_keepalive() : I32 val","title":"so_keepalive"},{"location":"net-OSSockOpt/#returns_977","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_l2cap_encrypted","text":"[Source] fun box so_l2cap_encrypted() : I32 val","title":"so_l2cap_encrypted"},{"location":"net-OSSockOpt/#returns_978","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_l2cap_flush","text":"[Source] fun box so_l2cap_flush() : I32 val","title":"so_l2cap_flush"},{"location":"net-OSSockOpt/#returns_979","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_l2cap_iflow","text":"[Source] fun box so_l2cap_iflow() : I32 val","title":"so_l2cap_iflow"},{"location":"net-OSSockOpt/#returns_980","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_l2cap_imtu","text":"[Source] fun box so_l2cap_imtu() : I32 val","title":"so_l2cap_imtu"},{"location":"net-OSSockOpt/#returns_981","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_l2cap_oflow","text":"[Source] fun box so_l2cap_oflow() : I32 val","title":"so_l2cap_oflow"},{"location":"net-OSSockOpt/#returns_982","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_l2cap_omtu","text":"[Source] fun box so_l2cap_omtu() : I32 val","title":"so_l2cap_omtu"},{"location":"net-OSSockOpt/#returns_983","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_label","text":"[Source] fun box so_label() : I32 val","title":"so_label"},{"location":"net-OSSockOpt/#returns_984","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_linger","text":"[Source] fun box so_linger() : I32 val","title":"so_linger"},{"location":"net-OSSockOpt/#returns_985","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_linger_sec","text":"[Source] fun box so_linger_sec() : I32 val","title":"so_linger_sec"},{"location":"net-OSSockOpt/#returns_986","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_linkinfo","text":"[Source] fun box so_linkinfo() : I32 val","title":"so_linkinfo"},{"location":"net-OSSockOpt/#returns_987","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_listenincqlen","text":"[Source] fun box so_listenincqlen() : I32 val","title":"so_listenincqlen"},{"location":"net-OSSockOpt/#returns_988","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_listenqlen","text":"[Source] fun box so_listenqlen() : I32 val","title":"so_listenqlen"},{"location":"net-OSSockOpt/#returns_989","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_listenqlimit","text":"[Source] fun box so_listenqlimit() : I32 val","title":"so_listenqlimit"},{"location":"net-OSSockOpt/#returns_990","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_lock_filter","text":"[Source] fun box so_lock_filter() : I32 val","title":"so_lock_filter"},{"location":"net-OSSockOpt/#returns_991","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_mark","text":"[Source] fun box so_mark() : I32 val","title":"so_mark"},{"location":"net-OSSockOpt/#returns_992","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_max_msg_size","text":"[Source] fun box so_max_msg_size() : I32 val","title":"so_max_msg_size"},{"location":"net-OSSockOpt/#returns_993","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_max_pacing_rate","text":"[Source] fun box so_max_pacing_rate() : I32 val","title":"so_max_pacing_rate"},{"location":"net-OSSockOpt/#returns_994","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_multipoint","text":"[Source] fun box so_multipoint() : I32 val","title":"so_multipoint"},{"location":"net-OSSockOpt/#returns_995","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_netsvc_marking_level","text":"[Source] fun box so_netsvc_marking_level() : I32 val","title":"so_netsvc_marking_level"},{"location":"net-OSSockOpt/#returns_996","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_net_service_type","text":"[Source] fun box so_net_service_type() : I32 val","title":"so_net_service_type"},{"location":"net-OSSockOpt/#returns_997","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_nke","text":"[Source] fun box so_nke() : I32 val","title":"so_nke"},{"location":"net-OSSockOpt/#returns_998","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_noaddrerr","text":"[Source] fun box so_noaddrerr() : I32 val","title":"so_noaddrerr"},{"location":"net-OSSockOpt/#returns_999","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_nofcs","text":"[Source] fun box so_nofcs() : I32 val","title":"so_nofcs"},{"location":"net-OSSockOpt/#returns_1000","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_nosigpipe","text":"[Source] fun box so_nosigpipe() : I32 val","title":"so_nosigpipe"},{"location":"net-OSSockOpt/#returns_1001","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_notifyconflict","text":"[Source] fun box so_notifyconflict() : I32 val","title":"so_notifyconflict"},{"location":"net-OSSockOpt/#returns_1002","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_no_check","text":"[Source] fun box so_no_check() : I32 val","title":"so_no_check"},{"location":"net-OSSockOpt/#returns_1003","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_no_ddp","text":"[Source] fun box so_no_ddp() : I32 val","title":"so_no_ddp"},{"location":"net-OSSockOpt/#returns_1004","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_no_offload","text":"[Source] fun box so_no_offload() : I32 val","title":"so_no_offload"},{"location":"net-OSSockOpt/#returns_1005","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_np_extensions","text":"[Source] fun box so_np_extensions() : I32 val","title":"so_np_extensions"},{"location":"net-OSSockOpt/#returns_1006","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_nread","text":"[Source] fun box so_nread() : I32 val","title":"so_nread"},{"location":"net-OSSockOpt/#returns_1007","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_numrcvpkt","text":"[Source] fun box so_numrcvpkt() : I32 val","title":"so_numrcvpkt"},{"location":"net-OSSockOpt/#returns_1008","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_nwrite","text":"[Source] fun box so_nwrite() : I32 val","title":"so_nwrite"},{"location":"net-OSSockOpt/#returns_1009","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_oobinline","text":"[Source] fun box so_oobinline() : I32 val","title":"so_oobinline"},{"location":"net-OSSockOpt/#returns_1010","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_original_dst","text":"[Source] fun box so_original_dst() : I32 val","title":"so_original_dst"},{"location":"net-OSSockOpt/#returns_1011","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_passcred","text":"[Source] fun box so_passcred() : I32 val","title":"so_passcred"},{"location":"net-OSSockOpt/#returns_1012","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_passsec","text":"[Source] fun box so_passsec() : I32 val","title":"so_passsec"},{"location":"net-OSSockOpt/#returns_1013","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_peek_off","text":"[Source] fun box so_peek_off() : I32 val","title":"so_peek_off"},{"location":"net-OSSockOpt/#returns_1014","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_peercred","text":"[Source] fun box so_peercred() : I32 val","title":"so_peercred"},{"location":"net-OSSockOpt/#returns_1015","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_peerlabel","text":"[Source] fun box so_peerlabel() : I32 val","title":"so_peerlabel"},{"location":"net-OSSockOpt/#returns_1016","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_peername","text":"[Source] fun box so_peername() : I32 val","title":"so_peername"},{"location":"net-OSSockOpt/#returns_1017","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_peersec","text":"[Source] fun box so_peersec() : I32 val","title":"so_peersec"},{"location":"net-OSSockOpt/#returns_1018","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_port_scalability","text":"[Source] fun box so_port_scalability() : I32 val","title":"so_port_scalability"},{"location":"net-OSSockOpt/#returns_1019","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_priority","text":"[Source] fun box so_priority() : I32 val","title":"so_priority"},{"location":"net-OSSockOpt/#returns_1020","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_protocol","text":"[Source] fun box so_protocol() : I32 val","title":"so_protocol"},{"location":"net-OSSockOpt/#returns_1021","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_protocol_info","text":"[Source] fun box so_protocol_info() : I32 val","title":"so_protocol_info"},{"location":"net-OSSockOpt/#returns_1022","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_prototype","text":"[Source] fun box so_prototype() : I32 val","title":"so_prototype"},{"location":"net-OSSockOpt/#returns_1023","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_proxyusr","text":"[Source] fun box so_proxyusr() : I32 val","title":"so_proxyusr"},{"location":"net-OSSockOpt/#returns_1024","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_randomport","text":"[Source] fun box so_randomport() : I32 val","title":"so_randomport"},{"location":"net-OSSockOpt/#returns_1025","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_rcvbuf","text":"[Source] fun box so_rcvbuf() : I32 val","title":"so_rcvbuf"},{"location":"net-OSSockOpt/#returns_1026","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_rcvbufforce","text":"[Source] fun box so_rcvbufforce() : I32 val","title":"so_rcvbufforce"},{"location":"net-OSSockOpt/#returns_1027","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_rcvlowat","text":"[Source] fun box so_rcvlowat() : I32 val","title":"so_rcvlowat"},{"location":"net-OSSockOpt/#returns_1028","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_rcvtimeo","text":"[Source] fun box so_rcvtimeo() : I32 val","title":"so_rcvtimeo"},{"location":"net-OSSockOpt/#returns_1029","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_rds_transport","text":"[Source] fun box so_rds_transport() : I32 val","title":"so_rds_transport"},{"location":"net-OSSockOpt/#returns_1030","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_reuseaddr","text":"[Source] fun box so_reuseaddr() : I32 val","title":"so_reuseaddr"},{"location":"net-OSSockOpt/#returns_1031","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_reuseport","text":"[Source] fun box so_reuseport() : I32 val","title":"so_reuseport"},{"location":"net-OSSockOpt/#returns_1032","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_reuseshareuid","text":"[Source] fun box so_reuseshareuid() : I32 val","title":"so_reuseshareuid"},{"location":"net-OSSockOpt/#returns_1033","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_rfcomm_fc_info","text":"[Source] fun box so_rfcomm_fc_info() : I32 val","title":"so_rfcomm_fc_info"},{"location":"net-OSSockOpt/#returns_1034","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_rfcomm_mtu","text":"[Source] fun box so_rfcomm_mtu() : I32 val","title":"so_rfcomm_mtu"},{"location":"net-OSSockOpt/#returns_1035","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_rxq_ovfl","text":"[Source] fun box so_rxq_ovfl() : I32 val","title":"so_rxq_ovfl"},{"location":"net-OSSockOpt/#returns_1036","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_sco_conninfo","text":"[Source] fun box so_sco_conninfo() : I32 val","title":"so_sco_conninfo"},{"location":"net-OSSockOpt/#returns_1037","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_sco_mtu","text":"[Source] fun box so_sco_mtu() : I32 val","title":"so_sco_mtu"},{"location":"net-OSSockOpt/#returns_1038","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_security_authentication","text":"[Source] fun box so_security_authentication() : I32 val","title":"so_security_authentication"},{"location":"net-OSSockOpt/#returns_1039","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_security_encryption_network","text":"[Source] fun box so_security_encryption_network() : I32 val","title":"so_security_encryption_network"},{"location":"net-OSSockOpt/#returns_1040","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_security_encryption_transport","text":"[Source] fun box so_security_encryption_transport() : I32 val","title":"so_security_encryption_transport"},{"location":"net-OSSockOpt/#returns_1041","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_select_err_queue","text":"[Source] fun box so_select_err_queue() : I32 val","title":"so_select_err_queue"},{"location":"net-OSSockOpt/#returns_1042","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_setclp","text":"[Source] fun box so_setclp() : I32 val","title":"so_setclp"},{"location":"net-OSSockOpt/#returns_1043","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_setfib","text":"[Source] fun box so_setfib() : I32 val","title":"so_setfib"},{"location":"net-OSSockOpt/#returns_1044","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_sndbuf","text":"[Source] fun box so_sndbuf() : I32 val","title":"so_sndbuf"},{"location":"net-OSSockOpt/#returns_1045","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_sndbufforce","text":"[Source] fun box so_sndbufforce() : I32 val","title":"so_sndbufforce"},{"location":"net-OSSockOpt/#returns_1046","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_sndlowat","text":"[Source] fun box so_sndlowat() : I32 val","title":"so_sndlowat"},{"location":"net-OSSockOpt/#returns_1047","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_sndtimeo","text":"[Source] fun box so_sndtimeo() : I32 val","title":"so_sndtimeo"},{"location":"net-OSSockOpt/#returns_1048","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_timestamp","text":"[Source] fun box so_timestamp() : I32 val","title":"so_timestamp"},{"location":"net-OSSockOpt/#returns_1049","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_timestamping","text":"[Source] fun box so_timestamping() : I32 val","title":"so_timestamping"},{"location":"net-OSSockOpt/#returns_1050","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_timestampns","text":"[Source] fun box so_timestampns() : I32 val","title":"so_timestampns"},{"location":"net-OSSockOpt/#returns_1051","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_timestamp_monotonic","text":"[Source] fun box so_timestamp_monotonic() : I32 val","title":"so_timestamp_monotonic"},{"location":"net-OSSockOpt/#returns_1052","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_type","text":"[Source] fun box so_type() : I32 val","title":"so_type"},{"location":"net-OSSockOpt/#returns_1053","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_upcallclosewait","text":"[Source] fun box so_upcallclosewait() : I32 val","title":"so_upcallclosewait"},{"location":"net-OSSockOpt/#returns_1054","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_update_accept_context","text":"[Source] fun box so_update_accept_context() : I32 val","title":"so_update_accept_context"},{"location":"net-OSSockOpt/#returns_1055","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_useloopback","text":"[Source] fun box so_useloopback() : I32 val","title":"so_useloopback"},{"location":"net-OSSockOpt/#returns_1056","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_user_cookie","text":"[Source] fun box so_user_cookie() : I32 val","title":"so_user_cookie"},{"location":"net-OSSockOpt/#returns_1057","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_vendor","text":"[Source] fun box so_vendor() : I32 val","title":"so_vendor"},{"location":"net-OSSockOpt/#returns_1058","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_vm_sockets_buffer_max_size","text":"[Source] fun box so_vm_sockets_buffer_max_size() : I32 val","title":"so_vm_sockets_buffer_max_size"},{"location":"net-OSSockOpt/#returns_1059","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_vm_sockets_buffer_min_size","text":"[Source] fun box so_vm_sockets_buffer_min_size() : I32 val","title":"so_vm_sockets_buffer_min_size"},{"location":"net-OSSockOpt/#returns_1060","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_vm_sockets_buffer_size","text":"[Source] fun box so_vm_sockets_buffer_size() : I32 val","title":"so_vm_sockets_buffer_size"},{"location":"net-OSSockOpt/#returns_1061","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_vm_sockets_connect_timeout","text":"[Source] fun box so_vm_sockets_connect_timeout() : I32 val","title":"so_vm_sockets_connect_timeout"},{"location":"net-OSSockOpt/#returns_1062","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_vm_sockets_nonblock_txrx","text":"[Source] fun box so_vm_sockets_nonblock_txrx() : I32 val","title":"so_vm_sockets_nonblock_txrx"},{"location":"net-OSSockOpt/#returns_1063","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_vm_sockets_peer_host_vm_id","text":"[Source] fun box so_vm_sockets_peer_host_vm_id() : I32 val","title":"so_vm_sockets_peer_host_vm_id"},{"location":"net-OSSockOpt/#returns_1064","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_vm_sockets_trusted","text":"[Source] fun box so_vm_sockets_trusted() : I32 val","title":"so_vm_sockets_trusted"},{"location":"net-OSSockOpt/#returns_1065","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_wantmore","text":"[Source] fun box so_wantmore() : I32 val","title":"so_wantmore"},{"location":"net-OSSockOpt/#returns_1066","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_wantoobflag","text":"[Source] fun box so_wantoobflag() : I32 val","title":"so_wantoobflag"},{"location":"net-OSSockOpt/#returns_1067","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_wifi_status","text":"[Source] fun box so_wifi_status() : I32 val","title":"so_wifi_status"},{"location":"net-OSSockOpt/#returns_1068","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp6_mss","text":"[Source] fun box tcp6_mss() : I32 val","title":"tcp6_mss"},{"location":"net-OSSockOpt/#returns_1069","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpci_flag_lossrecovery","text":"[Source] fun box tcpci_flag_lossrecovery() : I32 val","title":"tcpci_flag_lossrecovery"},{"location":"net-OSSockOpt/#returns_1070","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpci_flag_reordering_detected","text":"[Source] fun box tcpci_flag_reordering_detected() : I32 val","title":"tcpci_flag_reordering_detected"},{"location":"net-OSSockOpt/#returns_1071","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpci_opt_ecn","text":"[Source] fun box tcpci_opt_ecn() : I32 val","title":"tcpci_opt_ecn"},{"location":"net-OSSockOpt/#returns_1072","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpci_opt_sack","text":"[Source] fun box tcpci_opt_sack() : I32 val","title":"tcpci_opt_sack"},{"location":"net-OSSockOpt/#returns_1073","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpci_opt_timestamps","text":"[Source] fun box tcpci_opt_timestamps() : I32 val","title":"tcpci_opt_timestamps"},{"location":"net-OSSockOpt/#returns_1074","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpci_opt_wscale","text":"[Source] fun box tcpci_opt_wscale() : I32 val","title":"tcpci_opt_wscale"},{"location":"net-OSSockOpt/#returns_1075","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpf_ca_cwr","text":"[Source] fun box tcpf_ca_cwr() : I32 val","title":"tcpf_ca_cwr"},{"location":"net-OSSockOpt/#returns_1076","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpf_ca_disorder","text":"[Source] fun box tcpf_ca_disorder() : I32 val","title":"tcpf_ca_disorder"},{"location":"net-OSSockOpt/#returns_1077","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpf_ca_loss","text":"[Source] fun box tcpf_ca_loss() : I32 val","title":"tcpf_ca_loss"},{"location":"net-OSSockOpt/#returns_1078","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpf_ca_open","text":"[Source] fun box tcpf_ca_open() : I32 val","title":"tcpf_ca_open"},{"location":"net-OSSockOpt/#returns_1079","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpf_ca_recovery","text":"[Source] fun box tcpf_ca_recovery() : I32 val","title":"tcpf_ca_recovery"},{"location":"net-OSSockOpt/#returns_1080","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpi_opt_ecn","text":"[Source] fun box tcpi_opt_ecn() : I32 val","title":"tcpi_opt_ecn"},{"location":"net-OSSockOpt/#returns_1081","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpi_opt_ecn_seen","text":"[Source] fun box tcpi_opt_ecn_seen() : I32 val","title":"tcpi_opt_ecn_seen"},{"location":"net-OSSockOpt/#returns_1082","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpi_opt_sack","text":"[Source] fun box tcpi_opt_sack() : I32 val","title":"tcpi_opt_sack"},{"location":"net-OSSockOpt/#returns_1083","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpi_opt_syn_data","text":"[Source] fun box tcpi_opt_syn_data() : I32 val","title":"tcpi_opt_syn_data"},{"location":"net-OSSockOpt/#returns_1084","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpi_opt_timestamps","text":"[Source] fun box tcpi_opt_timestamps() : I32 val","title":"tcpi_opt_timestamps"},{"location":"net-OSSockOpt/#returns_1085","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpi_opt_toe","text":"[Source] fun box tcpi_opt_toe() : I32 val","title":"tcpi_opt_toe"},{"location":"net-OSSockOpt/#returns_1086","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpi_opt_wscale","text":"[Source] fun box tcpi_opt_wscale() : I32 val","title":"tcpi_opt_wscale"},{"location":"net-OSSockOpt/#returns_1087","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_cc","text":"[Source] fun box tcpolen_cc() : I32 val","title":"tcpolen_cc"},{"location":"net-OSSockOpt/#returns_1088","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_cc_appa","text":"[Source] fun box tcpolen_cc_appa() : I32 val","title":"tcpolen_cc_appa"},{"location":"net-OSSockOpt/#returns_1089","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_eol","text":"[Source] fun box tcpolen_eol() : I32 val","title":"tcpolen_eol"},{"location":"net-OSSockOpt/#returns_1090","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_fastopen_req","text":"[Source] fun box tcpolen_fastopen_req() : I32 val","title":"tcpolen_fastopen_req"},{"location":"net-OSSockOpt/#returns_1091","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_fast_open_empty","text":"[Source] fun box tcpolen_fast_open_empty() : I32 val","title":"tcpolen_fast_open_empty"},{"location":"net-OSSockOpt/#returns_1092","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_fast_open_max","text":"[Source] fun box tcpolen_fast_open_max() : I32 val","title":"tcpolen_fast_open_max"},{"location":"net-OSSockOpt/#returns_1093","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_fast_open_min","text":"[Source] fun box tcpolen_fast_open_min() : I32 val","title":"tcpolen_fast_open_min"},{"location":"net-OSSockOpt/#returns_1094","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_maxseg","text":"[Source] fun box tcpolen_maxseg() : I32 val","title":"tcpolen_maxseg"},{"location":"net-OSSockOpt/#returns_1095","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_nop","text":"[Source] fun box tcpolen_nop() : I32 val","title":"tcpolen_nop"},{"location":"net-OSSockOpt/#returns_1096","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_pad","text":"[Source] fun box tcpolen_pad() : I32 val","title":"tcpolen_pad"},{"location":"net-OSSockOpt/#returns_1097","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_sack","text":"[Source] fun box tcpolen_sack() : I32 val","title":"tcpolen_sack"},{"location":"net-OSSockOpt/#returns_1098","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_sackhdr","text":"[Source] fun box tcpolen_sackhdr() : I32 val","title":"tcpolen_sackhdr"},{"location":"net-OSSockOpt/#returns_1099","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_sack_permitted","text":"[Source] fun box tcpolen_sack_permitted() : I32 val","title":"tcpolen_sack_permitted"},{"location":"net-OSSockOpt/#returns_1100","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_signature","text":"[Source] fun box tcpolen_signature() : I32 val","title":"tcpolen_signature"},{"location":"net-OSSockOpt/#returns_1101","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_timestamp","text":"[Source] fun box tcpolen_timestamp() : I32 val","title":"tcpolen_timestamp"},{"location":"net-OSSockOpt/#returns_1102","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_tstamp_appa","text":"[Source] fun box tcpolen_tstamp_appa() : I32 val","title":"tcpolen_tstamp_appa"},{"location":"net-OSSockOpt/#returns_1103","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_window","text":"[Source] fun box tcpolen_window() : I32 val","title":"tcpolen_window"},{"location":"net-OSSockOpt/#returns_1104","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_cc","text":"[Source] fun box tcpopt_cc() : I32 val","title":"tcpopt_cc"},{"location":"net-OSSockOpt/#returns_1105","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_ccecho","text":"[Source] fun box tcpopt_ccecho() : I32 val","title":"tcpopt_ccecho"},{"location":"net-OSSockOpt/#returns_1106","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_ccnew","text":"[Source] fun box tcpopt_ccnew() : I32 val","title":"tcpopt_ccnew"},{"location":"net-OSSockOpt/#returns_1107","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_eol","text":"[Source] fun box tcpopt_eol() : I32 val","title":"tcpopt_eol"},{"location":"net-OSSockOpt/#returns_1108","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_fastopen","text":"[Source] fun box tcpopt_fastopen() : I32 val","title":"tcpopt_fastopen"},{"location":"net-OSSockOpt/#returns_1109","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_fast_open","text":"[Source] fun box tcpopt_fast_open() : I32 val","title":"tcpopt_fast_open"},{"location":"net-OSSockOpt/#returns_1110","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_maxseg","text":"[Source] fun box tcpopt_maxseg() : I32 val","title":"tcpopt_maxseg"},{"location":"net-OSSockOpt/#returns_1111","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_multipath","text":"[Source] fun box tcpopt_multipath() : I32 val","title":"tcpopt_multipath"},{"location":"net-OSSockOpt/#returns_1112","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_nop","text":"[Source] fun box tcpopt_nop() : I32 val","title":"tcpopt_nop"},{"location":"net-OSSockOpt/#returns_1113","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_pad","text":"[Source] fun box tcpopt_pad() : I32 val","title":"tcpopt_pad"},{"location":"net-OSSockOpt/#returns_1114","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_sack","text":"[Source] fun box tcpopt_sack() : I32 val","title":"tcpopt_sack"},{"location":"net-OSSockOpt/#returns_1115","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_sack_hdr","text":"[Source] fun box tcpopt_sack_hdr() : I32 val","title":"tcpopt_sack_hdr"},{"location":"net-OSSockOpt/#returns_1116","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_sack_permitted","text":"[Source] fun box tcpopt_sack_permitted() : I32 val","title":"tcpopt_sack_permitted"},{"location":"net-OSSockOpt/#returns_1117","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_sack_permit_hdr","text":"[Source] fun box tcpopt_sack_permit_hdr() : I32 val","title":"tcpopt_sack_permit_hdr"},{"location":"net-OSSockOpt/#returns_1118","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_signature","text":"[Source] fun box tcpopt_signature() : I32 val","title":"tcpopt_signature"},{"location":"net-OSSockOpt/#returns_1119","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_timestamp","text":"[Source] fun box tcpopt_timestamp() : I32 val","title":"tcpopt_timestamp"},{"location":"net-OSSockOpt/#returns_1120","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_tstamp_hdr","text":"[Source] fun box tcpopt_tstamp_hdr() : I32 val","title":"tcpopt_tstamp_hdr"},{"location":"net-OSSockOpt/#returns_1121","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_window","text":"[Source] fun box tcpopt_window() : I32 val","title":"tcpopt_window"},{"location":"net-OSSockOpt/#returns_1122","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_ca_name_max","text":"[Source] fun box tcp_ca_name_max() : I32 val","title":"tcp_ca_name_max"},{"location":"net-OSSockOpt/#returns_1123","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_ccalgoopt","text":"[Source] fun box tcp_ccalgoopt() : I32 val","title":"tcp_ccalgoopt"},{"location":"net-OSSockOpt/#returns_1124","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_cc_info","text":"[Source] fun box tcp_cc_info() : I32 val","title":"tcp_cc_info"},{"location":"net-OSSockOpt/#returns_1125","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_congestion","text":"[Source] fun box tcp_congestion() : I32 val","title":"tcp_congestion"},{"location":"net-OSSockOpt/#returns_1126","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_connectiontimeout","text":"[Source] fun box tcp_connectiontimeout() : I32 val","title":"tcp_connectiontimeout"},{"location":"net-OSSockOpt/#returns_1127","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_connection_info","text":"[Source] fun box tcp_connection_info() : I32 val","title":"tcp_connection_info"},{"location":"net-OSSockOpt/#returns_1128","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_cookie_in_always","text":"[Source] fun box tcp_cookie_in_always() : I32 val","title":"tcp_cookie_in_always"},{"location":"net-OSSockOpt/#returns_1129","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_cookie_max","text":"[Source] fun box tcp_cookie_max() : I32 val","title":"tcp_cookie_max"},{"location":"net-OSSockOpt/#returns_1130","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_cookie_min","text":"[Source] fun box tcp_cookie_min() : I32 val","title":"tcp_cookie_min"},{"location":"net-OSSockOpt/#returns_1131","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_cookie_out_never","text":"[Source] fun box tcp_cookie_out_never() : I32 val","title":"tcp_cookie_out_never"},{"location":"net-OSSockOpt/#returns_1132","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_cookie_pair_size","text":"[Source] fun box tcp_cookie_pair_size() : I32 val","title":"tcp_cookie_pair_size"},{"location":"net-OSSockOpt/#returns_1133","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_cookie_transactions","text":"[Source] fun box tcp_cookie_transactions() : I32 val","title":"tcp_cookie_transactions"},{"location":"net-OSSockOpt/#returns_1134","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_cork","text":"[Source] fun box tcp_cork() : I32 val","title":"tcp_cork"},{"location":"net-OSSockOpt/#returns_1135","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_defer_accept","text":"[Source] fun box tcp_defer_accept() : I32 val","title":"tcp_defer_accept"},{"location":"net-OSSockOpt/#returns_1136","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_enable_ecn","text":"[Source] fun box tcp_enable_ecn() : I32 val","title":"tcp_enable_ecn"},{"location":"net-OSSockOpt/#returns_1137","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_fastopen","text":"[Source] fun box tcp_fastopen() : I32 val","title":"tcp_fastopen"},{"location":"net-OSSockOpt/#returns_1138","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_function_blk","text":"[Source] fun box tcp_function_blk() : I32 val","title":"tcp_function_blk"},{"location":"net-OSSockOpt/#returns_1139","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_function_name_len_max","text":"[Source] fun box tcp_function_name_len_max() : I32 val","title":"tcp_function_name_len_max"},{"location":"net-OSSockOpt/#returns_1140","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_info","text":"[Source] fun box tcp_info() : I32 val","title":"tcp_info"},{"location":"net-OSSockOpt/#returns_1141","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_keepalive","text":"[Source] fun box tcp_keepalive() : I32 val","title":"tcp_keepalive"},{"location":"net-OSSockOpt/#returns_1142","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_keepcnt","text":"[Source] fun box tcp_keepcnt() : I32 val","title":"tcp_keepcnt"},{"location":"net-OSSockOpt/#returns_1143","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_keepidle","text":"[Source] fun box tcp_keepidle() : I32 val","title":"tcp_keepidle"},{"location":"net-OSSockOpt/#returns_1144","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_keepinit","text":"[Source] fun box tcp_keepinit() : I32 val","title":"tcp_keepinit"},{"location":"net-OSSockOpt/#returns_1145","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_keepintvl","text":"[Source] fun box tcp_keepintvl() : I32 val","title":"tcp_keepintvl"},{"location":"net-OSSockOpt/#returns_1146","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_linger2","text":"[Source] fun box tcp_linger2() : I32 val","title":"tcp_linger2"},{"location":"net-OSSockOpt/#returns_1147","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_maxburst","text":"[Source] fun box tcp_maxburst() : I32 val","title":"tcp_maxburst"},{"location":"net-OSSockOpt/#returns_1148","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_maxhlen","text":"[Source] fun box tcp_maxhlen() : I32 val","title":"tcp_maxhlen"},{"location":"net-OSSockOpt/#returns_1149","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_maxolen","text":"[Source] fun box tcp_maxolen() : I32 val","title":"tcp_maxolen"},{"location":"net-OSSockOpt/#returns_1150","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_maxseg","text":"[Source] fun box tcp_maxseg() : I32 val","title":"tcp_maxseg"},{"location":"net-OSSockOpt/#returns_1151","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_maxwin","text":"[Source] fun box tcp_maxwin() : I32 val","title":"tcp_maxwin"},{"location":"net-OSSockOpt/#returns_1152","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_max_sack","text":"[Source] fun box tcp_max_sack() : I32 val","title":"tcp_max_sack"},{"location":"net-OSSockOpt/#returns_1153","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_max_winshift","text":"[Source] fun box tcp_max_winshift() : I32 val","title":"tcp_max_winshift"},{"location":"net-OSSockOpt/#returns_1154","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_md5sig","text":"[Source] fun box tcp_md5sig() : I32 val","title":"tcp_md5sig"},{"location":"net-OSSockOpt/#returns_1155","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_md5sig_maxkeylen","text":"[Source] fun box tcp_md5sig_maxkeylen() : I32 val","title":"tcp_md5sig_maxkeylen"},{"location":"net-OSSockOpt/#returns_1156","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_minmss","text":"[Source] fun box tcp_minmss() : I32 val","title":"tcp_minmss"},{"location":"net-OSSockOpt/#returns_1157","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_mss","text":"[Source] fun box tcp_mss() : I32 val","title":"tcp_mss"},{"location":"net-OSSockOpt/#returns_1158","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_mss_default","text":"[Source] fun box tcp_mss_default() : I32 val","title":"tcp_mss_default"},{"location":"net-OSSockOpt/#returns_1159","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_mss_desired","text":"[Source] fun box tcp_mss_desired() : I32 val","title":"tcp_mss_desired"},{"location":"net-OSSockOpt/#returns_1160","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_nodelay","text":"[Source] fun box tcp_nodelay() : I32 val","title":"tcp_nodelay"},{"location":"net-OSSockOpt/#returns_1161","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_noopt","text":"[Source] fun box tcp_noopt() : I32 val","title":"tcp_noopt"},{"location":"net-OSSockOpt/#returns_1162","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_nopush","text":"[Source] fun box tcp_nopush() : I32 val","title":"tcp_nopush"},{"location":"net-OSSockOpt/#returns_1163","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_notsent_lowat","text":"[Source] fun box tcp_notsent_lowat() : I32 val","title":"tcp_notsent_lowat"},{"location":"net-OSSockOpt/#returns_1164","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_pcap_in","text":"[Source] fun box tcp_pcap_in() : I32 val","title":"tcp_pcap_in"},{"location":"net-OSSockOpt/#returns_1165","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_pcap_out","text":"[Source] fun box tcp_pcap_out() : I32 val","title":"tcp_pcap_out"},{"location":"net-OSSockOpt/#returns_1166","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_queue_seq","text":"[Source] fun box tcp_queue_seq() : I32 val","title":"tcp_queue_seq"},{"location":"net-OSSockOpt/#returns_1167","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_quickack","text":"[Source] fun box tcp_quickack() : I32 val","title":"tcp_quickack"},{"location":"net-OSSockOpt/#returns_1168","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_repair","text":"[Source] fun box tcp_repair() : I32 val","title":"tcp_repair"},{"location":"net-OSSockOpt/#returns_1169","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_repair_options","text":"[Source] fun box tcp_repair_options() : I32 val","title":"tcp_repair_options"},{"location":"net-OSSockOpt/#returns_1170","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_repair_queue","text":"[Source] fun box tcp_repair_queue() : I32 val","title":"tcp_repair_queue"},{"location":"net-OSSockOpt/#returns_1171","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_rxt_conndroptime","text":"[Source] fun box tcp_rxt_conndroptime() : I32 val","title":"tcp_rxt_conndroptime"},{"location":"net-OSSockOpt/#returns_1172","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_rxt_findrop","text":"[Source] fun box tcp_rxt_findrop() : I32 val","title":"tcp_rxt_findrop"},{"location":"net-OSSockOpt/#returns_1173","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_saved_syn","text":"[Source] fun box tcp_saved_syn() : I32 val","title":"tcp_saved_syn"},{"location":"net-OSSockOpt/#returns_1174","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_save_syn","text":"[Source] fun box tcp_save_syn() : I32 val","title":"tcp_save_syn"},{"location":"net-OSSockOpt/#returns_1175","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_sendmoreacks","text":"[Source] fun box tcp_sendmoreacks() : I32 val","title":"tcp_sendmoreacks"},{"location":"net-OSSockOpt/#returns_1176","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_syncnt","text":"[Source] fun box tcp_syncnt() : I32 val","title":"tcp_syncnt"},{"location":"net-OSSockOpt/#returns_1177","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_s_data_in","text":"[Source] fun box tcp_s_data_in() : I32 val","title":"tcp_s_data_in"},{"location":"net-OSSockOpt/#returns_1178","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_s_data_out","text":"[Source] fun box tcp_s_data_out() : I32 val","title":"tcp_s_data_out"},{"location":"net-OSSockOpt/#returns_1179","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_thin_dupack","text":"[Source] fun box tcp_thin_dupack() : I32 val","title":"tcp_thin_dupack"},{"location":"net-OSSockOpt/#returns_1180","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_thin_linear_timeouts","text":"[Source] fun box tcp_thin_linear_timeouts() : I32 val","title":"tcp_thin_linear_timeouts"},{"location":"net-OSSockOpt/#returns_1181","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_timestamp","text":"[Source] fun box tcp_timestamp() : I32 val","title":"tcp_timestamp"},{"location":"net-OSSockOpt/#returns_1182","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_user_timeout","text":"[Source] fun box tcp_user_timeout() : I32 val","title":"tcp_user_timeout"},{"location":"net-OSSockOpt/#returns_1183","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_vendor","text":"[Source] fun box tcp_vendor() : I32 val","title":"tcp_vendor"},{"location":"net-OSSockOpt/#returns_1184","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_window_clamp","text":"[Source] fun box tcp_window_clamp() : I32 val","title":"tcp_window_clamp"},{"location":"net-OSSockOpt/#returns_1185","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_addr_id","text":"[Source] fun box tipc_addr_id() : I32 val","title":"tipc_addr_id"},{"location":"net-OSSockOpt/#returns_1186","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_addr_mcast","text":"[Source] fun box tipc_addr_mcast() : I32 val","title":"tipc_addr_mcast"},{"location":"net-OSSockOpt/#returns_1187","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_addr_name","text":"[Source] fun box tipc_addr_name() : I32 val","title":"tipc_addr_name"},{"location":"net-OSSockOpt/#returns_1188","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_addr_nameseq","text":"[Source] fun box tipc_addr_nameseq() : I32 val","title":"tipc_addr_nameseq"},{"location":"net-OSSockOpt/#returns_1189","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_cfg_srv","text":"[Source] fun box tipc_cfg_srv() : I32 val","title":"tipc_cfg_srv"},{"location":"net-OSSockOpt/#returns_1190","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_cluster_scope","text":"[Source] fun box tipc_cluster_scope() : I32 val","title":"tipc_cluster_scope"},{"location":"net-OSSockOpt/#returns_1191","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_conn_shutdown","text":"[Source] fun box tipc_conn_shutdown() : I32 val","title":"tipc_conn_shutdown"},{"location":"net-OSSockOpt/#returns_1192","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_conn_timeout","text":"[Source] fun box tipc_conn_timeout() : I32 val","title":"tipc_conn_timeout"},{"location":"net-OSSockOpt/#returns_1193","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_critical_importance","text":"[Source] fun box tipc_critical_importance() : I32 val","title":"tipc_critical_importance"},{"location":"net-OSSockOpt/#returns_1194","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_destname","text":"[Source] fun box tipc_destname() : I32 val","title":"tipc_destname"},{"location":"net-OSSockOpt/#returns_1195","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_dest_droppable","text":"[Source] fun box tipc_dest_droppable() : I32 val","title":"tipc_dest_droppable"},{"location":"net-OSSockOpt/#returns_1196","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_errinfo","text":"[Source] fun box tipc_errinfo() : I32 val","title":"tipc_errinfo"},{"location":"net-OSSockOpt/#returns_1197","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_err_no_name","text":"[Source] fun box tipc_err_no_name() : I32 val","title":"tipc_err_no_name"},{"location":"net-OSSockOpt/#returns_1198","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_err_no_node","text":"[Source] fun box tipc_err_no_node() : I32 val","title":"tipc_err_no_node"},{"location":"net-OSSockOpt/#returns_1199","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_err_no_port","text":"[Source] fun box tipc_err_no_port() : I32 val","title":"tipc_err_no_port"},{"location":"net-OSSockOpt/#returns_1200","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_err_overload","text":"[Source] fun box tipc_err_overload() : I32 val","title":"tipc_err_overload"},{"location":"net-OSSockOpt/#returns_1201","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_high_importance","text":"[Source] fun box tipc_high_importance() : I32 val","title":"tipc_high_importance"},{"location":"net-OSSockOpt/#returns_1202","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_importance","text":"[Source] fun box tipc_importance() : I32 val","title":"tipc_importance"},{"location":"net-OSSockOpt/#returns_1203","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_link_state","text":"[Source] fun box tipc_link_state() : I32 val","title":"tipc_link_state"},{"location":"net-OSSockOpt/#returns_1204","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_low_importance","text":"[Source] fun box tipc_low_importance() : I32 val","title":"tipc_low_importance"},{"location":"net-OSSockOpt/#returns_1205","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_max_bearer_name","text":"[Source] fun box tipc_max_bearer_name() : I32 val","title":"tipc_max_bearer_name"},{"location":"net-OSSockOpt/#returns_1206","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_max_if_name","text":"[Source] fun box tipc_max_if_name() : I32 val","title":"tipc_max_if_name"},{"location":"net-OSSockOpt/#returns_1207","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_max_link_name","text":"[Source] fun box tipc_max_link_name() : I32 val","title":"tipc_max_link_name"},{"location":"net-OSSockOpt/#returns_1208","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_max_media_name","text":"[Source] fun box tipc_max_media_name() : I32 val","title":"tipc_max_media_name"},{"location":"net-OSSockOpt/#returns_1209","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_max_user_msg_size","text":"[Source] fun box tipc_max_user_msg_size() : I32 val","title":"tipc_max_user_msg_size"},{"location":"net-OSSockOpt/#returns_1210","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_medium_importance","text":"[Source] fun box tipc_medium_importance() : I32 val","title":"tipc_medium_importance"},{"location":"net-OSSockOpt/#returns_1211","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_node_recvq_depth","text":"[Source] fun box tipc_node_recvq_depth() : I32 val","title":"tipc_node_recvq_depth"},{"location":"net-OSSockOpt/#returns_1212","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_node_scope","text":"[Source] fun box tipc_node_scope() : I32 val","title":"tipc_node_scope"},{"location":"net-OSSockOpt/#returns_1213","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_ok","text":"[Source] fun box tipc_ok() : I32 val","title":"tipc_ok"},{"location":"net-OSSockOpt/#returns_1214","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_published","text":"[Source] fun box tipc_published() : I32 val","title":"tipc_published"},{"location":"net-OSSockOpt/#returns_1215","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_reserved_types","text":"[Source] fun box tipc_reserved_types() : I32 val","title":"tipc_reserved_types"},{"location":"net-OSSockOpt/#returns_1216","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_retdata","text":"[Source] fun box tipc_retdata() : I32 val","title":"tipc_retdata"},{"location":"net-OSSockOpt/#returns_1217","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_sock_recvq_depth","text":"[Source] fun box tipc_sock_recvq_depth() : I32 val","title":"tipc_sock_recvq_depth"},{"location":"net-OSSockOpt/#returns_1218","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_src_droppable","text":"[Source] fun box tipc_src_droppable() : I32 val","title":"tipc_src_droppable"},{"location":"net-OSSockOpt/#returns_1219","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_subscr_timeout","text":"[Source] fun box tipc_subscr_timeout() : I32 val","title":"tipc_subscr_timeout"},{"location":"net-OSSockOpt/#returns_1220","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_sub_cancel","text":"[Source] fun box tipc_sub_cancel() : I32 val","title":"tipc_sub_cancel"},{"location":"net-OSSockOpt/#returns_1221","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_sub_ports","text":"[Source] fun box tipc_sub_ports() : I32 val","title":"tipc_sub_ports"},{"location":"net-OSSockOpt/#returns_1222","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_sub_service","text":"[Source] fun box tipc_sub_service() : I32 val","title":"tipc_sub_service"},{"location":"net-OSSockOpt/#returns_1223","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_top_srv","text":"[Source] fun box tipc_top_srv() : I32 val","title":"tipc_top_srv"},{"location":"net-OSSockOpt/#returns_1224","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_wait_forever","text":"[Source] fun box tipc_wait_forever() : I32 val","title":"tipc_wait_forever"},{"location":"net-OSSockOpt/#returns_1225","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_withdrawn","text":"[Source] fun box tipc_withdrawn() : I32 val","title":"tipc_withdrawn"},{"location":"net-OSSockOpt/#returns_1226","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_zone_scope","text":"[Source] fun box tipc_zone_scope() : I32 val","title":"tipc_zone_scope"},{"location":"net-OSSockOpt/#returns_1227","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ttcp_client_snd_wnd","text":"[Source] fun box ttcp_client_snd_wnd() : I32 val","title":"ttcp_client_snd_wnd"},{"location":"net-OSSockOpt/#returns_1228","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_cork","text":"[Source] fun box udp_cork() : I32 val","title":"udp_cork"},{"location":"net-OSSockOpt/#returns_1229","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_encap","text":"[Source] fun box udp_encap() : I32 val","title":"udp_encap"},{"location":"net-OSSockOpt/#returns_1230","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_encap_espinudp","text":"[Source] fun box udp_encap_espinudp() : I32 val","title":"udp_encap_espinudp"},{"location":"net-OSSockOpt/#returns_1231","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_encap_espinudp_maxfraglen","text":"[Source] fun box udp_encap_espinudp_maxfraglen() : I32 val","title":"udp_encap_espinudp_maxfraglen"},{"location":"net-OSSockOpt/#returns_1232","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_encap_espinudp_non_ike","text":"[Source] fun box udp_encap_espinudp_non_ike() : I32 val","title":"udp_encap_espinudp_non_ike"},{"location":"net-OSSockOpt/#returns_1233","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_encap_espinudp_port","text":"[Source] fun box udp_encap_espinudp_port() : I32 val","title":"udp_encap_espinudp_port"},{"location":"net-OSSockOpt/#returns_1234","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_encap_l2tpinudp","text":"[Source] fun box udp_encap_l2tpinudp() : I32 val","title":"udp_encap_l2tpinudp"},{"location":"net-OSSockOpt/#returns_1235","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_nocksum","text":"[Source] fun box udp_nocksum() : I32 val","title":"udp_nocksum"},{"location":"net-OSSockOpt/#returns_1236","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_no_check6_rx","text":"[Source] fun box udp_no_check6_rx() : I32 val","title":"udp_no_check6_rx"},{"location":"net-OSSockOpt/#returns_1237","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_no_check6_tx","text":"[Source] fun box udp_no_check6_tx() : I32 val","title":"udp_no_check6_tx"},{"location":"net-OSSockOpt/#returns_1238","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_vendor","text":"[Source] fun box udp_vendor() : I32 val","title":"udp_vendor"},{"location":"net-OSSockOpt/#returns_1239","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#eq","text":"[Source] fun box eq( that: OSSockOpt val) : Bool val","title":"eq"},{"location":"net-OSSockOpt/#parameters","text":"that: OSSockOpt val","title":"Parameters"},{"location":"net-OSSockOpt/#returns_1240","text":"Bool val","title":"Returns"},{"location":"net-OSSockOpt/#ne","text":"[Source] fun box ne( that: OSSockOpt val) : Bool val","title":"ne"},{"location":"net-OSSockOpt/#parameters_1","text":"that: OSSockOpt val","title":"Parameters"},{"location":"net-OSSockOpt/#returns_1241","text":"Bool val","title":"Returns"},{"location":"net-TCPAuth/","text":"TCPAuth [Source] primitive val TCPAuth Constructors create [Source] new val create( from: (AmbientAuth val | NetAuth val)) : TCPAuth val^ Parameters from: ( AmbientAuth val | NetAuth val) Returns TCPAuth val^ Public Functions eq [Source] fun box eq( that: TCPAuth val) : Bool val Parameters that: TCPAuth val Returns Bool val ne [Source] fun box ne( that: TCPAuth val) : Bool val Parameters that: TCPAuth val Returns Bool val","title":"primitive TCPAuth"},{"location":"net-TCPAuth/#tcpauth","text":"[Source] primitive val TCPAuth","title":"TCPAuth"},{"location":"net-TCPAuth/#constructors","text":"","title":"Constructors"},{"location":"net-TCPAuth/#create","text":"[Source] new val create( from: (AmbientAuth val | NetAuth val)) : TCPAuth val^","title":"create"},{"location":"net-TCPAuth/#parameters","text":"from: ( AmbientAuth val | NetAuth val)","title":"Parameters"},{"location":"net-TCPAuth/#returns","text":"TCPAuth val^","title":"Returns"},{"location":"net-TCPAuth/#public-functions","text":"","title":"Public Functions"},{"location":"net-TCPAuth/#eq","text":"[Source] fun box eq( that: TCPAuth val) : Bool val","title":"eq"},{"location":"net-TCPAuth/#parameters_1","text":"that: TCPAuth val","title":"Parameters"},{"location":"net-TCPAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-TCPAuth/#ne","text":"[Source] fun box ne( that: TCPAuth val) : Bool val","title":"ne"},{"location":"net-TCPAuth/#parameters_2","text":"that: TCPAuth val","title":"Parameters"},{"location":"net-TCPAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-TCPConnectAuth/","text":"TCPConnectAuth [Source] primitive val TCPConnectAuth Constructors create [Source] new val create( from: (AmbientAuth val | NetAuth val | TCPAuth val)) : TCPConnectAuth val^ Parameters from: ( AmbientAuth val | NetAuth val | TCPAuth val) Returns TCPConnectAuth val^ Public Functions eq [Source] fun box eq( that: TCPConnectAuth val) : Bool val Parameters that: TCPConnectAuth val Returns Bool val ne [Source] fun box ne( that: TCPConnectAuth val) : Bool val Parameters that: TCPConnectAuth val Returns Bool val","title":"primitive TCPConnectAuth"},{"location":"net-TCPConnectAuth/#tcpconnectauth","text":"[Source] primitive val TCPConnectAuth","title":"TCPConnectAuth"},{"location":"net-TCPConnectAuth/#constructors","text":"","title":"Constructors"},{"location":"net-TCPConnectAuth/#create","text":"[Source] new val create( from: (AmbientAuth val | NetAuth val | TCPAuth val)) : TCPConnectAuth val^","title":"create"},{"location":"net-TCPConnectAuth/#parameters","text":"from: ( AmbientAuth val | NetAuth val | TCPAuth val)","title":"Parameters"},{"location":"net-TCPConnectAuth/#returns","text":"TCPConnectAuth val^","title":"Returns"},{"location":"net-TCPConnectAuth/#public-functions","text":"","title":"Public Functions"},{"location":"net-TCPConnectAuth/#eq","text":"[Source] fun box eq( that: TCPConnectAuth val) : Bool val","title":"eq"},{"location":"net-TCPConnectAuth/#parameters_1","text":"that: TCPConnectAuth val","title":"Parameters"},{"location":"net-TCPConnectAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-TCPConnectAuth/#ne","text":"[Source] fun box ne( that: TCPConnectAuth val) : Bool val","title":"ne"},{"location":"net-TCPConnectAuth/#parameters_2","text":"that: TCPConnectAuth val","title":"Parameters"},{"location":"net-TCPConnectAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-TCPConnection/","text":"TCPConnection [Source] A TCP connection. When connecting, the Happy Eyeballs algorithm is used. The following code creates a client that connects to port 8989 of the local host, writes \"hello world\", and listens for a response, which it then prints. use net class MyTCPConnectionNotify is TCPConnectionNotify let _out: OutStream new create(out: OutStream) = _out = out fun ref connected(conn: TCPConnection ref) = conn.write( hello world ) fun ref received( conn: TCPConnection ref, data: Array[U8] iso, times: USize) : Bool = _out.print( GOT: + String.from_array(consume data)) conn.close() true fun ref connect_failed(conn: TCPConnection ref) = None actor Main new create(env: Env) = try TCPConnection(env.root as AmbientAuth, recover MyTCPConnectionNotify(env.out) end, , 8989 ) end Note: when writing to the connection data will be silently discarded if the connection has not yet been established. Backpressure support Write The TCP protocol has built-in backpressure support. This is generally experienced as the outgoing write buffer becoming full and being unable to write all requested data to the socket. In TCPConnection , this is hidden from the programmer. When this occurs, TCPConnection will buffer the extra data until such time as it is able to be sent. Left unchecked, this could result in uncontrolled queuing. To address this, TCPConnectionNotify implements two methods throttled and unthrottled that are called when backpressure is applied and released. Upon receiving a throttled notification, your application has two choices on how to handle it. One is to inform the Pony runtime that it can no longer make progress and that runtime backpressure should be applied to any actors sending this one messages. For example, you might construct your application like: // Here we have a TCPConnectionNotify that upon construction // is given a BackpressureAuth token. This allows the notifier // to inform the Pony runtime when to apply and release backpressure // as the connection experiences it. // Note the calls to // // Backpressure.apply(_auth) // Backpressure.release(_auth) // // that apply and release backpressure as needed use backpressure use collections use net class SlowDown is TCPConnectionNotify let _auth: BackpressureAuth let _out: StdStream new iso create(auth: BackpressureAuth, out: StdStream) = _auth = auth _out = out fun ref throttled(connection: TCPConnection ref) = _out.print( Experiencing backpressure! ) Backpressure.apply(_auth) fun ref unthrottled(connection: TCPConnection ref) = _out.print( Releasing backpressure! ) Backpressure.release(_auth) fun ref closed(connection: TCPConnection ref) = // if backpressure has been applied, make sure we release // when shutting down _out.print( Releasing backpressure if applied! ) Backpressure.release(_auth) fun ref connect_failed(conn: TCPConnection ref) = None actor Main new create(env: Env) = try let auth = env.root as AmbientAuth let socket = TCPConnection(auth, recover SlowDown(auth, env.out) end, , 7669 ) end Or if you want, you could handle backpressure by shedding load, that is, dropping the extra data rather than carrying out the send. This might look like: use net class ThrowItAway is TCPConnectionNotify var _throttled: Bool = false fun ref sent(conn: TCPConnection ref, data: ByteSeq): ByteSeq = if not _throttled then data else end fun ref sentv(conn: TCPConnection ref, data: ByteSeqIter): ByteSeqIter = if not _throttled then data else recover Array[String] end end fun ref throttled(connection: TCPConnection ref) = _throttled = true fun ref unthrottled(connection: TCPConnection ref) = _throttled = false fun ref connect_failed(conn: TCPConnection ref) = None actor Main new create(env: Env) = try TCPConnection(env.root as AmbientAuth, recover ThrowItAway end, , 7669 ) end In general, unless you have a very specific use case, we strongly advise that you don't implement a load shedding scheme where you drop data. Read If your application is unable to keep up with data being sent to it over a TCPConnection you can use the builtin read backpressure support to pause reading the socket which will in turn start to exert backpressure on the corresponding writer on the other end of that socket. The mute behavior allow any other actors in your application to request the cessation of additional reads until such time as unmute is called. Please note that this cessation is not guaranteed to happen immediately as it is the result of an asynchronous behavior call and as such will have to wait for existing messages in the TCPConnection 's mailbox to be handled. On non-windows platforms, your TCPConnection will not notice if the other end of the connection closes until you unmute it. Unix type systems like FreeBSD, Linux and OSX learn about a closed connection upon read. On these platforms, you must call unmute on a muted connection to have it close. Without calling unmute the TCPConnection actor will never exit. actor tag TCPConnection Constructors create [Source] Connect via IPv4 or IPv6. If from is a non-empty string, the connection will be made from the specified interface. new tag create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val), notify: TCPConnectionNotify iso, host: String val, service: String val, from: String val = seq, init_size: USize val = seq, max_size: USize val = seq) : TCPConnection tag^ Parameters auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) notify: TCPConnectionNotify iso host: String val service: String val from: String val = seq init_size: USize val = seq max_size: USize val = seq Returns TCPConnection tag^ ip4 [Source] Connect via IPv4. new tag ip4( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val), notify: TCPConnectionNotify iso, host: String val, service: String val, from: String val = seq, init_size: USize val = seq, max_size: USize val = seq) : TCPConnection tag^ Parameters auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) notify: TCPConnectionNotify iso host: String val service: String val from: String val = seq init_size: USize val = seq max_size: USize val = seq Returns TCPConnection tag^ ip6 [Source] Connect via IPv6. new tag ip6( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val), notify: TCPConnectionNotify iso, host: String val, service: String val, from: String val = seq, init_size: USize val = seq, max_size: USize val = seq) : TCPConnection tag^ Parameters auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) notify: TCPConnectionNotify iso host: String val service: String val from: String val = seq init_size: USize val = seq max_size: USize val = seq Returns TCPConnection tag^ _accept [Source] A new connection accepted on a server. new tag _accept( listen: TCPListener tag, notify: TCPConnectionNotify iso, fd: U32 val, init_size: USize val = seq, max_size: USize val = seq) : TCPConnection tag^ Parameters listen: TCPListener tag notify: TCPConnectionNotify iso fd: U32 val init_size: USize val = seq max_size: USize val = seq Returns TCPConnection tag^ Public Behaviours write [Source] Write a single sequence of bytes. Data will be silently discarded if the connection has not yet been established though. be write( data: (String val | Array[U8 val] val)) Parameters data: ( String val | Array [ U8 val] val) writev [Source] Write a sequence of sequences of bytes. Data will be silently discarded if the connection has not yet been established though. be writev( data: ByteSeqIter val) Parameters data: ByteSeqIter val mute [Source] Temporarily suspend reading off this TCPConnection until such time as unmute is called. be mute() unmute [Source] Start reading off this TCPConnection again after having been muted. be unmute() set_notify [Source] Change the notifier. be set_notify( notify: TCPConnectionNotify iso) Parameters notify: TCPConnectionNotify iso dispose [Source] Close the connection gracefully once all writes are sent. be dispose() Public Functions local_address [Source] Return the local IP address. fun box local_address() : NetAddress val Returns NetAddress val remote_address [Source] Return the remote IP address. fun box remote_address() : NetAddress val Returns NetAddress val expect [Source] A received call on the notifier must contain exactly qty bytes. If qty is zero, the call can contain any amount of data. This has no effect if called in the sent notifier callback. fun ref expect( qty: USize val = seq) : None val Parameters qty: USize val = seq Returns None val set_nodelay [Source] Turn Nagle on/off. Defaults to on. This can only be set on a connected socket. fun ref set_nodelay( state: Bool val) : None val Parameters state: Bool val Returns None val set_keepalive [Source] Sets the TCP keepalive timeout to approximately secs seconds. Exact timing is OS dependent. If secs is zero, TCP keepalive is disabled. TCP keepalive is disabled by default. This can only be set on a connected socket. fun ref set_keepalive( secs: U32 val) : None val Parameters secs: U32 val Returns None val write_final [Source] Write as much as possible to the socket. Set _writeable to false if not everything was written. On an error, close the connection. This is for data that has already been transformed by the notifier. Data will be silently discarded if the connection has not yet been established though. fun ref write_final( data: (String val | Array[U8 val] val)) : None val Parameters data: ( String val | Array [ U8 val] val) Returns None val close [Source] Attempt to perform a graceful shutdown. Don't accept new writes. If the connection isn't muted then we won't finish closing until we get a zero length read. If the connection is muted, perform a hard close and shut down immediately. fun ref close() : None val Returns None val getsockopt [Source] General wrapper for TCP sockets to the getsockopt(2) system call. The caller must provide an array that is pre-allocated to be at least as large as the largest data structure that the kernel may return for the requested option. In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. An Array[U8] of data returned by the system call's void * 4th argument. Its size is specified by the kernel via the system call's sockopt_len_t * 5th argument. In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. Usage example: // connected() is a callback function for class TCPConnectionNotify fun ref connected(conn: TCPConnection ref) = match conn.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4) | (0, let gbytes: Array[U8] iso) = try let br = Reader.create(). append(consume gbytes) ifdef littleendian then let buffer_size = br.u32_le()? else let buffer_size = br.u32_be()? end end | (let errno: U32, _) = // System call failed end fun ref getsockopt( level: I32 val, option_name: I32 val, option_max_size: USize val = seq) : (U32 val , Array[U8 val] iso^) Parameters level: I32 val option_name: I32 val option_max_size: USize val = seq Returns ( U32 val , Array [ U8 val] iso^) getsockopt_u32 [Source] Wrapper for TCP sockets to the getsockopt(2) system call where the kernel's returned option value is a C uint32_t type / Pony type U32 . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. The *option_value returned by the kernel converted to a Pony U32 . In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. fun ref getsockopt_u32( level: I32 val, option_name: I32 val) : (U32 val , U32 val) Parameters level: I32 val option_name: I32 val Returns ( U32 val , U32 val) setsockopt [Source] General wrapper for TCP sockets to the setsockopt(2) system call. The caller is responsible for the correct size and byte contents of the option array for the requested level and option_name , including using the appropriate machine endian byte order. This function returns 0 on success, else the value of errno on failure. Usage example: // connected() is a callback function for class TCPConnectionNotify fun ref connected(conn: TCPConnection ref) = let sb = Writer sb.u32_le(7744) // Our desired socket buffer size let sbytes = Array[U8] for bs in sb.done().values() do sbytes.append(bs) end match conn.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes) | 0 = // System call was successful | let errno: U32 = // System call failed end fun ref setsockopt( level: I32 val, option_name: I32 val, option: Array[U8 val] ref) : U32 val Parameters level: I32 val option_name: I32 val option: Array [ U8 val] ref Returns U32 val setsockopt_u32 [Source] General wrapper for TCP sockets to the setsockopt(2) system call where the kernel expects an option value of a C uint32_t type / Pony type U32 . This function returns 0 on success, else the value of errno on failure. fun ref setsockopt_u32( level: I32 val, option_name: I32 val, option: U32 val) : U32 val Parameters level: I32 val option_name: I32 val option: U32 val Returns U32 val get_so_error [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_ERROR, ...) fun ref get_so_error() : (U32 val , U32 val) Returns ( U32 val , U32 val) get_so_rcvbuf [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun ref get_so_rcvbuf() : (U32 val , U32 val) Returns ( U32 val , U32 val) get_so_sndbuf [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun ref get_so_sndbuf() : (U32 val , U32 val) Returns ( U32 val , U32 val) get_tcp_nodelay [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...) fun ref get_tcp_nodelay() : (U32 val , U32 val) Returns ( U32 val , U32 val) set_so_rcvbuf [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun ref set_so_rcvbuf( bufsize: U32 val) : U32 val Parameters bufsize: U32 val Returns U32 val set_so_sndbuf [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun ref set_so_sndbuf( bufsize: U32 val) : U32 val Parameters bufsize: U32 val Returns U32 val set_tcp_nodelay [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...) fun ref set_tcp_nodelay( state: Bool val) : U32 val Parameters state: Bool val Returns U32 val Private Behaviours _event_notify [Source] Handle socket events. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val _read_again [Source] Resume reading. be _read_again() Private Functions _complete_writes [Source] The OS has informed us that len bytes of pending writes have completed. This occurs only with IOCP on Windows. fun ref _complete_writes( len: U32 val) : None val Parameters len: U32 val Returns None val _pending_writes [Source] Send pending data. If any data can't be sent, keep it and mark as not writeable. On an error, dispose of the connection. Returns whether it sent all pending data or not. fun ref _pending_writes() : Bool val Returns Bool val _manage_pending_buffer [Source] Manage pending buffer for data sent. Returns a boolean of whether the pending buffer is empty or not. fun ref _manage_pending_buffer( bytes_sent: USize val, bytes_to_send: USize val, num_to_send: USize val) : Bool val ? Parameters bytes_sent: USize val bytes_to_send: USize val num_to_send: USize val Returns Bool val ? _complete_reads [Source] The OS has informed us that len bytes of pending reads have completed. This occurs only with IOCP on Windows. fun ref _complete_reads( len: U32 val) : None val Parameters len: U32 val Returns None val _read_buf_size [Source] Resize the read buffer. fun ref _read_buf_size() : None val Returns None val _queue_read [Source] Begin an IOCP read on Windows. fun ref _queue_read() : None val Returns None val _pending_reads [Source] Unless this connection is currently muted, read while data is available, guessing the next packet length as we go. If we read 4 kb of data, send ourself a resume message and stop reading, to avoid starving other actors. fun ref _pending_reads() : None val Returns None val _notify_connecting [Source] Inform the notifier that we're connecting. fun ref _notify_connecting() : None val Returns None val _close [Source] fun ref _close() : None val Returns None val _try_shutdown [Source] If we have closed and we have no remaining writes or pending connections, then shutdown. fun ref _try_shutdown() : None val Returns None val _hard_close [Source] When an error happens, do a non-graceful close. fun ref _hard_close() : None val Returns None val _is_sock_connected [Source] fun box _is_sock_connected( fd: U32 val) : Bool val Parameters fd: U32 val Returns Bool val _apply_backpressure [Source] fun ref _apply_backpressure() : None val Returns None val _release_backpressure [Source] fun ref _release_backpressure() : None val Returns None val","title":"actor TCPConnection"},{"location":"net-TCPConnection/#tcpconnection","text":"[Source] A TCP connection. When connecting, the Happy Eyeballs algorithm is used. The following code creates a client that connects to port 8989 of the local host, writes \"hello world\", and listens for a response, which it then prints. use net class MyTCPConnectionNotify is TCPConnectionNotify let _out: OutStream new create(out: OutStream) = _out = out fun ref connected(conn: TCPConnection ref) = conn.write( hello world ) fun ref received( conn: TCPConnection ref, data: Array[U8] iso, times: USize) : Bool = _out.print( GOT: + String.from_array(consume data)) conn.close() true fun ref connect_failed(conn: TCPConnection ref) = None actor Main new create(env: Env) = try TCPConnection(env.root as AmbientAuth, recover MyTCPConnectionNotify(env.out) end, , 8989 ) end Note: when writing to the connection data will be silently discarded if the connection has not yet been established.","title":"TCPConnection"},{"location":"net-TCPConnection/#backpressure-support","text":"","title":"Backpressure support"},{"location":"net-TCPConnection/#write","text":"The TCP protocol has built-in backpressure support. This is generally experienced as the outgoing write buffer becoming full and being unable to write all requested data to the socket. In TCPConnection , this is hidden from the programmer. When this occurs, TCPConnection will buffer the extra data until such time as it is able to be sent. Left unchecked, this could result in uncontrolled queuing. To address this, TCPConnectionNotify implements two methods throttled and unthrottled that are called when backpressure is applied and released. Upon receiving a throttled notification, your application has two choices on how to handle it. One is to inform the Pony runtime that it can no longer make progress and that runtime backpressure should be applied to any actors sending this one messages. For example, you might construct your application like: // Here we have a TCPConnectionNotify that upon construction // is given a BackpressureAuth token. This allows the notifier // to inform the Pony runtime when to apply and release backpressure // as the connection experiences it. // Note the calls to // // Backpressure.apply(_auth) // Backpressure.release(_auth) // // that apply and release backpressure as needed use backpressure use collections use net class SlowDown is TCPConnectionNotify let _auth: BackpressureAuth let _out: StdStream new iso create(auth: BackpressureAuth, out: StdStream) = _auth = auth _out = out fun ref throttled(connection: TCPConnection ref) = _out.print( Experiencing backpressure! ) Backpressure.apply(_auth) fun ref unthrottled(connection: TCPConnection ref) = _out.print( Releasing backpressure! ) Backpressure.release(_auth) fun ref closed(connection: TCPConnection ref) = // if backpressure has been applied, make sure we release // when shutting down _out.print( Releasing backpressure if applied! ) Backpressure.release(_auth) fun ref connect_failed(conn: TCPConnection ref) = None actor Main new create(env: Env) = try let auth = env.root as AmbientAuth let socket = TCPConnection(auth, recover SlowDown(auth, env.out) end, , 7669 ) end Or if you want, you could handle backpressure by shedding load, that is, dropping the extra data rather than carrying out the send. This might look like: use net class ThrowItAway is TCPConnectionNotify var _throttled: Bool = false fun ref sent(conn: TCPConnection ref, data: ByteSeq): ByteSeq = if not _throttled then data else end fun ref sentv(conn: TCPConnection ref, data: ByteSeqIter): ByteSeqIter = if not _throttled then data else recover Array[String] end end fun ref throttled(connection: TCPConnection ref) = _throttled = true fun ref unthrottled(connection: TCPConnection ref) = _throttled = false fun ref connect_failed(conn: TCPConnection ref) = None actor Main new create(env: Env) = try TCPConnection(env.root as AmbientAuth, recover ThrowItAway end, , 7669 ) end In general, unless you have a very specific use case, we strongly advise that you don't implement a load shedding scheme where you drop data.","title":"Write"},{"location":"net-TCPConnection/#read","text":"If your application is unable to keep up with data being sent to it over a TCPConnection you can use the builtin read backpressure support to pause reading the socket which will in turn start to exert backpressure on the corresponding writer on the other end of that socket. The mute behavior allow any other actors in your application to request the cessation of additional reads until such time as unmute is called. Please note that this cessation is not guaranteed to happen immediately as it is the result of an asynchronous behavior call and as such will have to wait for existing messages in the TCPConnection 's mailbox to be handled. On non-windows platforms, your TCPConnection will not notice if the other end of the connection closes until you unmute it. Unix type systems like FreeBSD, Linux and OSX learn about a closed connection upon read. On these platforms, you must call unmute on a muted connection to have it close. Without calling unmute the TCPConnection actor will never exit. actor tag TCPConnection","title":"Read"},{"location":"net-TCPConnection/#constructors","text":"","title":"Constructors"},{"location":"net-TCPConnection/#create","text":"[Source] Connect via IPv4 or IPv6. If from is a non-empty string, the connection will be made from the specified interface. new tag create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val), notify: TCPConnectionNotify iso, host: String val, service: String val, from: String val = seq, init_size: USize val = seq, max_size: USize val = seq) : TCPConnection tag^","title":"create"},{"location":"net-TCPConnection/#parameters","text":"auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) notify: TCPConnectionNotify iso host: String val service: String val from: String val = seq init_size: USize val = seq max_size: USize val = seq","title":"Parameters"},{"location":"net-TCPConnection/#returns","text":"TCPConnection tag^","title":"Returns"},{"location":"net-TCPConnection/#ip4","text":"[Source] Connect via IPv4. new tag ip4( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val), notify: TCPConnectionNotify iso, host: String val, service: String val, from: String val = seq, init_size: USize val = seq, max_size: USize val = seq) : TCPConnection tag^","title":"ip4"},{"location":"net-TCPConnection/#parameters_1","text":"auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) notify: TCPConnectionNotify iso host: String val service: String val from: String val = seq init_size: USize val = seq max_size: USize val = seq","title":"Parameters"},{"location":"net-TCPConnection/#returns_1","text":"TCPConnection tag^","title":"Returns"},{"location":"net-TCPConnection/#ip6","text":"[Source] Connect via IPv6. new tag ip6( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val), notify: TCPConnectionNotify iso, host: String val, service: String val, from: String val = seq, init_size: USize val = seq, max_size: USize val = seq) : TCPConnection tag^","title":"ip6"},{"location":"net-TCPConnection/#parameters_2","text":"auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) notify: TCPConnectionNotify iso host: String val service: String val from: String val = seq init_size: USize val = seq max_size: USize val = seq","title":"Parameters"},{"location":"net-TCPConnection/#returns_2","text":"TCPConnection tag^","title":"Returns"},{"location":"net-TCPConnection/#_accept","text":"[Source] A new connection accepted on a server. new tag _accept( listen: TCPListener tag, notify: TCPConnectionNotify iso, fd: U32 val, init_size: USize val = seq, max_size: USize val = seq) : TCPConnection tag^","title":"_accept"},{"location":"net-TCPConnection/#parameters_3","text":"listen: TCPListener tag notify: TCPConnectionNotify iso fd: U32 val init_size: USize val = seq max_size: USize val = seq","title":"Parameters"},{"location":"net-TCPConnection/#returns_3","text":"TCPConnection tag^","title":"Returns"},{"location":"net-TCPConnection/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"net-TCPConnection/#write_1","text":"[Source] Write a single sequence of bytes. Data will be silently discarded if the connection has not yet been established though. be write( data: (String val | Array[U8 val] val))","title":"write"},{"location":"net-TCPConnection/#parameters_4","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"net-TCPConnection/#writev","text":"[Source] Write a sequence of sequences of bytes. Data will be silently discarded if the connection has not yet been established though. be writev( data: ByteSeqIter val)","title":"writev"},{"location":"net-TCPConnection/#parameters_5","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"net-TCPConnection/#mute","text":"[Source] Temporarily suspend reading off this TCPConnection until such time as unmute is called. be mute()","title":"mute"},{"location":"net-TCPConnection/#unmute","text":"[Source] Start reading off this TCPConnection again after having been muted. be unmute()","title":"unmute"},{"location":"net-TCPConnection/#set_notify","text":"[Source] Change the notifier. be set_notify( notify: TCPConnectionNotify iso)","title":"set_notify"},{"location":"net-TCPConnection/#parameters_6","text":"notify: TCPConnectionNotify iso","title":"Parameters"},{"location":"net-TCPConnection/#dispose","text":"[Source] Close the connection gracefully once all writes are sent. be dispose()","title":"dispose"},{"location":"net-TCPConnection/#public-functions","text":"","title":"Public Functions"},{"location":"net-TCPConnection/#local_address","text":"[Source] Return the local IP address. fun box local_address() : NetAddress val","title":"local_address"},{"location":"net-TCPConnection/#returns_4","text":"NetAddress val","title":"Returns"},{"location":"net-TCPConnection/#remote_address","text":"[Source] Return the remote IP address. fun box remote_address() : NetAddress val","title":"remote_address"},{"location":"net-TCPConnection/#returns_5","text":"NetAddress val","title":"Returns"},{"location":"net-TCPConnection/#expect","text":"[Source] A received call on the notifier must contain exactly qty bytes. If qty is zero, the call can contain any amount of data. This has no effect if called in the sent notifier callback. fun ref expect( qty: USize val = seq) : None val","title":"expect"},{"location":"net-TCPConnection/#parameters_7","text":"qty: USize val = seq","title":"Parameters"},{"location":"net-TCPConnection/#returns_6","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#set_nodelay","text":"[Source] Turn Nagle on/off. Defaults to on. This can only be set on a connected socket. fun ref set_nodelay( state: Bool val) : None val","title":"set_nodelay"},{"location":"net-TCPConnection/#parameters_8","text":"state: Bool val","title":"Parameters"},{"location":"net-TCPConnection/#returns_7","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#set_keepalive","text":"[Source] Sets the TCP keepalive timeout to approximately secs seconds. Exact timing is OS dependent. If secs is zero, TCP keepalive is disabled. TCP keepalive is disabled by default. This can only be set on a connected socket. fun ref set_keepalive( secs: U32 val) : None val","title":"set_keepalive"},{"location":"net-TCPConnection/#parameters_9","text":"secs: U32 val","title":"Parameters"},{"location":"net-TCPConnection/#returns_8","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#write_final","text":"[Source] Write as much as possible to the socket. Set _writeable to false if not everything was written. On an error, close the connection. This is for data that has already been transformed by the notifier. Data will be silently discarded if the connection has not yet been established though. fun ref write_final( data: (String val | Array[U8 val] val)) : None val","title":"write_final"},{"location":"net-TCPConnection/#parameters_10","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"net-TCPConnection/#returns_9","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#close","text":"[Source] Attempt to perform a graceful shutdown. Don't accept new writes. If the connection isn't muted then we won't finish closing until we get a zero length read. If the connection is muted, perform a hard close and shut down immediately. fun ref close() : None val","title":"close"},{"location":"net-TCPConnection/#returns_10","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#getsockopt","text":"[Source] General wrapper for TCP sockets to the getsockopt(2) system call. The caller must provide an array that is pre-allocated to be at least as large as the largest data structure that the kernel may return for the requested option. In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. An Array[U8] of data returned by the system call's void * 4th argument. Its size is specified by the kernel via the system call's sockopt_len_t * 5th argument. In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. Usage example: // connected() is a callback function for class TCPConnectionNotify fun ref connected(conn: TCPConnection ref) = match conn.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4) | (0, let gbytes: Array[U8] iso) = try let br = Reader.create(). append(consume gbytes) ifdef littleendian then let buffer_size = br.u32_le()? else let buffer_size = br.u32_be()? end end | (let errno: U32, _) = // System call failed end fun ref getsockopt( level: I32 val, option_name: I32 val, option_max_size: USize val = seq) : (U32 val , Array[U8 val] iso^)","title":"getsockopt"},{"location":"net-TCPConnection/#parameters_11","text":"level: I32 val option_name: I32 val option_max_size: USize val = seq","title":"Parameters"},{"location":"net-TCPConnection/#returns_11","text":"( U32 val , Array [ U8 val] iso^)","title":"Returns"},{"location":"net-TCPConnection/#getsockopt_u32","text":"[Source] Wrapper for TCP sockets to the getsockopt(2) system call where the kernel's returned option value is a C uint32_t type / Pony type U32 . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. The *option_value returned by the kernel converted to a Pony U32 . In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. fun ref getsockopt_u32( level: I32 val, option_name: I32 val) : (U32 val , U32 val)","title":"getsockopt_u32"},{"location":"net-TCPConnection/#parameters_12","text":"level: I32 val option_name: I32 val","title":"Parameters"},{"location":"net-TCPConnection/#returns_12","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-TCPConnection/#setsockopt","text":"[Source] General wrapper for TCP sockets to the setsockopt(2) system call. The caller is responsible for the correct size and byte contents of the option array for the requested level and option_name , including using the appropriate machine endian byte order. This function returns 0 on success, else the value of errno on failure. Usage example: // connected() is a callback function for class TCPConnectionNotify fun ref connected(conn: TCPConnection ref) = let sb = Writer sb.u32_le(7744) // Our desired socket buffer size let sbytes = Array[U8] for bs in sb.done().values() do sbytes.append(bs) end match conn.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes) | 0 = // System call was successful | let errno: U32 = // System call failed end fun ref setsockopt( level: I32 val, option_name: I32 val, option: Array[U8 val] ref) : U32 val","title":"setsockopt"},{"location":"net-TCPConnection/#parameters_13","text":"level: I32 val option_name: I32 val option: Array [ U8 val] ref","title":"Parameters"},{"location":"net-TCPConnection/#returns_13","text":"U32 val","title":"Returns"},{"location":"net-TCPConnection/#setsockopt_u32","text":"[Source] General wrapper for TCP sockets to the setsockopt(2) system call where the kernel expects an option value of a C uint32_t type / Pony type U32 . This function returns 0 on success, else the value of errno on failure. fun ref setsockopt_u32( level: I32 val, option_name: I32 val, option: U32 val) : U32 val","title":"setsockopt_u32"},{"location":"net-TCPConnection/#parameters_14","text":"level: I32 val option_name: I32 val option: U32 val","title":"Parameters"},{"location":"net-TCPConnection/#returns_14","text":"U32 val","title":"Returns"},{"location":"net-TCPConnection/#get_so_error","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_ERROR, ...) fun ref get_so_error() : (U32 val , U32 val)","title":"get_so_error"},{"location":"net-TCPConnection/#returns_15","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-TCPConnection/#get_so_rcvbuf","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun ref get_so_rcvbuf() : (U32 val , U32 val)","title":"get_so_rcvbuf"},{"location":"net-TCPConnection/#returns_16","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-TCPConnection/#get_so_sndbuf","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun ref get_so_sndbuf() : (U32 val , U32 val)","title":"get_so_sndbuf"},{"location":"net-TCPConnection/#returns_17","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-TCPConnection/#get_tcp_nodelay","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...) fun ref get_tcp_nodelay() : (U32 val , U32 val)","title":"get_tcp_nodelay"},{"location":"net-TCPConnection/#returns_18","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-TCPConnection/#set_so_rcvbuf","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun ref set_so_rcvbuf( bufsize: U32 val) : U32 val","title":"set_so_rcvbuf"},{"location":"net-TCPConnection/#parameters_15","text":"bufsize: U32 val","title":"Parameters"},{"location":"net-TCPConnection/#returns_19","text":"U32 val","title":"Returns"},{"location":"net-TCPConnection/#set_so_sndbuf","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun ref set_so_sndbuf( bufsize: U32 val) : U32 val","title":"set_so_sndbuf"},{"location":"net-TCPConnection/#parameters_16","text":"bufsize: U32 val","title":"Parameters"},{"location":"net-TCPConnection/#returns_20","text":"U32 val","title":"Returns"},{"location":"net-TCPConnection/#set_tcp_nodelay","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...) fun ref set_tcp_nodelay( state: Bool val) : U32 val","title":"set_tcp_nodelay"},{"location":"net-TCPConnection/#parameters_17","text":"state: Bool val","title":"Parameters"},{"location":"net-TCPConnection/#returns_21","text":"U32 val","title":"Returns"},{"location":"net-TCPConnection/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"net-TCPConnection/#_event_notify","text":"[Source] Handle socket events. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"net-TCPConnection/#parameters_18","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"net-TCPConnection/#_read_again","text":"[Source] Resume reading. be _read_again()","title":"_read_again"},{"location":"net-TCPConnection/#private-functions","text":"","title":"Private Functions"},{"location":"net-TCPConnection/#_complete_writes","text":"[Source] The OS has informed us that len bytes of pending writes have completed. This occurs only with IOCP on Windows. fun ref _complete_writes( len: U32 val) : None val","title":"_complete_writes"},{"location":"net-TCPConnection/#parameters_19","text":"len: U32 val","title":"Parameters"},{"location":"net-TCPConnection/#returns_22","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#_pending_writes","text":"[Source] Send pending data. If any data can't be sent, keep it and mark as not writeable. On an error, dispose of the connection. Returns whether it sent all pending data or not. fun ref _pending_writes() : Bool val","title":"_pending_writes"},{"location":"net-TCPConnection/#returns_23","text":"Bool val","title":"Returns"},{"location":"net-TCPConnection/#_manage_pending_buffer","text":"[Source] Manage pending buffer for data sent. Returns a boolean of whether the pending buffer is empty or not. fun ref _manage_pending_buffer( bytes_sent: USize val, bytes_to_send: USize val, num_to_send: USize val) : Bool val ?","title":"_manage_pending_buffer"},{"location":"net-TCPConnection/#parameters_20","text":"bytes_sent: USize val bytes_to_send: USize val num_to_send: USize val","title":"Parameters"},{"location":"net-TCPConnection/#returns_24","text":"Bool val ?","title":"Returns"},{"location":"net-TCPConnection/#_complete_reads","text":"[Source] The OS has informed us that len bytes of pending reads have completed. This occurs only with IOCP on Windows. fun ref _complete_reads( len: U32 val) : None val","title":"_complete_reads"},{"location":"net-TCPConnection/#parameters_21","text":"len: U32 val","title":"Parameters"},{"location":"net-TCPConnection/#returns_25","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#_read_buf_size","text":"[Source] Resize the read buffer. fun ref _read_buf_size() : None val","title":"_read_buf_size"},{"location":"net-TCPConnection/#returns_26","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#_queue_read","text":"[Source] Begin an IOCP read on Windows. fun ref _queue_read() : None val","title":"_queue_read"},{"location":"net-TCPConnection/#returns_27","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#_pending_reads","text":"[Source] Unless this connection is currently muted, read while data is available, guessing the next packet length as we go. If we read 4 kb of data, send ourself a resume message and stop reading, to avoid starving other actors. fun ref _pending_reads() : None val","title":"_pending_reads"},{"location":"net-TCPConnection/#returns_28","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#_notify_connecting","text":"[Source] Inform the notifier that we're connecting. fun ref _notify_connecting() : None val","title":"_notify_connecting"},{"location":"net-TCPConnection/#returns_29","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#_close","text":"[Source] fun ref _close() : None val","title":"_close"},{"location":"net-TCPConnection/#returns_30","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#_try_shutdown","text":"[Source] If we have closed and we have no remaining writes or pending connections, then shutdown. fun ref _try_shutdown() : None val","title":"_try_shutdown"},{"location":"net-TCPConnection/#returns_31","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#_hard_close","text":"[Source] When an error happens, do a non-graceful close. fun ref _hard_close() : None val","title":"_hard_close"},{"location":"net-TCPConnection/#returns_32","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#_is_sock_connected","text":"[Source] fun box _is_sock_connected( fd: U32 val) : Bool val","title":"_is_sock_connected"},{"location":"net-TCPConnection/#parameters_22","text":"fd: U32 val","title":"Parameters"},{"location":"net-TCPConnection/#returns_33","text":"Bool val","title":"Returns"},{"location":"net-TCPConnection/#_apply_backpressure","text":"[Source] fun ref _apply_backpressure() : None val","title":"_apply_backpressure"},{"location":"net-TCPConnection/#returns_34","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#_release_backpressure","text":"[Source] fun ref _release_backpressure() : None val","title":"_release_backpressure"},{"location":"net-TCPConnection/#returns_35","text":"None val","title":"Returns"},{"location":"net-TCPConnectionAuth/","text":"TCPConnectionAuth [Source] type TCPConnectionAuth is (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) Type Alias For ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val)","title":"type TCPConnectionAuth"},{"location":"net-TCPConnectionAuth/#tcpconnectionauth","text":"[Source] type TCPConnectionAuth is (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val)","title":"TCPConnectionAuth"},{"location":"net-TCPConnectionAuth/#type-alias-for","text":"( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val)","title":"Type Alias For"},{"location":"net-TCPConnectionNotify/","text":"TCPConnectionNotify [Source] Notifications for TCP connections. For an example of using this class please see the documentation for the TCPConnection and TCPListener actors. interface ref TCPConnectionNotify Public Functions accepted [Source] Called when a TCPConnection is accepted by a TCPListener. fun ref accepted( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val connecting [Source] Called if name resolution succeeded for a TCPConnection and we are now waiting for a connection to the server to succeed. The count is the number of connections we're trying. The notifier will be informed each time the count changes, until a connection is made or connect_failed() is called. fun ref connecting( conn: TCPConnection ref, count: U32 val) : None val Parameters conn: TCPConnection ref count: U32 val Returns None val connected [Source] Called when we have successfully connected to the server. fun ref connected( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val connect_failed [Source] Called when we have failed to connect to all possible addresses for the server. At this point, the connection will never be established. It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this: fun ref connect_failed(conn: TCPConnection ref) = None fun ref connect_failed( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val auth_failed [Source] A raw TCPConnection has no authentication mechanism. However, when protocols are wrapped in other protocols, this can be used to report an authentication failure in a lower level protocol (e.g. SSL). fun ref auth_failed( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val sent [Source] Called when data is sent on the connection. This gives the notifier an opportunity to modify sent data before it is written. To swallow data, return an empty string. fun ref sent( conn: TCPConnection ref, data: (String val | Array[U8 val] val)) : (String val | Array[U8 val] val) Parameters conn: TCPConnection ref data: ( String val | Array [ U8 val] val) Returns ( String val | Array [ U8 val] val) sentv [Source] Called when multiple chunks of data are sent to the connection in a single call. This gives the notifier an opportunity to modify the sent data chunks before they are written. To swallow the send, return an empty Array[String]. fun ref sentv( conn: TCPConnection ref, data: ByteSeqIter val) : ByteSeqIter val Parameters conn: TCPConnection ref data: ByteSeqIter val Returns ByteSeqIter val received [Source] Called when new data is received on the connection. Return true if you want to continue receiving messages without yielding until you read max_size on the TCPConnection. Return false to cause the TCPConnection to yield now. Includes the number of times during the current behavior, that received has been called. This allows the notifier to end reads on a regular basis. fun ref received( conn: TCPConnection ref, data: Array[U8 val] iso, times: USize val) : Bool val Parameters conn: TCPConnection ref data: Array [ U8 val] iso times: USize val Returns Bool val expect [Source] Called when the connection has been told to expect a certain quantity of bytes. This allows nested notifiers to change the expected quantity, which allows a lower level protocol to handle any framing (e.g. SSL). fun ref expect( conn: TCPConnection ref, qty: USize val) : USize val Parameters conn: TCPConnection ref qty: USize val Returns USize val closed [Source] Called when the connection is closed. fun ref closed( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val throttled [Source] Called when the connection starts experiencing TCP backpressure. You should respond to this by pausing additional calls to write and writev until you are informed that pressure has been released. Failure to respond to the throttled notification will result in outgoing data queuing in the connection and increasing memory usage. fun ref throttled( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val unthrottled [Source] Called when the connection stops experiencing TCP backpressure. Upon receiving this notification, you should feel free to start making calls to write and writev again. fun ref unthrottled( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val","title":"interface TCPConnectionNotify"},{"location":"net-TCPConnectionNotify/#tcpconnectionnotify","text":"[Source] Notifications for TCP connections. For an example of using this class please see the documentation for the TCPConnection and TCPListener actors. interface ref TCPConnectionNotify","title":"TCPConnectionNotify"},{"location":"net-TCPConnectionNotify/#public-functions","text":"","title":"Public Functions"},{"location":"net-TCPConnectionNotify/#accepted","text":"[Source] Called when a TCPConnection is accepted by a TCPListener. fun ref accepted( conn: TCPConnection ref) : None val","title":"accepted"},{"location":"net-TCPConnectionNotify/#parameters","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns","text":"None val","title":"Returns"},{"location":"net-TCPConnectionNotify/#connecting","text":"[Source] Called if name resolution succeeded for a TCPConnection and we are now waiting for a connection to the server to succeed. The count is the number of connections we're trying. The notifier will be informed each time the count changes, until a connection is made or connect_failed() is called. fun ref connecting( conn: TCPConnection ref, count: U32 val) : None val","title":"connecting"},{"location":"net-TCPConnectionNotify/#parameters_1","text":"conn: TCPConnection ref count: U32 val","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_1","text":"None val","title":"Returns"},{"location":"net-TCPConnectionNotify/#connected","text":"[Source] Called when we have successfully connected to the server. fun ref connected( conn: TCPConnection ref) : None val","title":"connected"},{"location":"net-TCPConnectionNotify/#parameters_2","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_2","text":"None val","title":"Returns"},{"location":"net-TCPConnectionNotify/#connect_failed","text":"[Source] Called when we have failed to connect to all possible addresses for the server. At this point, the connection will never be established. It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this: fun ref connect_failed(conn: TCPConnection ref) = None fun ref connect_failed( conn: TCPConnection ref) : None val","title":"connect_failed"},{"location":"net-TCPConnectionNotify/#parameters_3","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_3","text":"None val","title":"Returns"},{"location":"net-TCPConnectionNotify/#auth_failed","text":"[Source] A raw TCPConnection has no authentication mechanism. However, when protocols are wrapped in other protocols, this can be used to report an authentication failure in a lower level protocol (e.g. SSL). fun ref auth_failed( conn: TCPConnection ref) : None val","title":"auth_failed"},{"location":"net-TCPConnectionNotify/#parameters_4","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_4","text":"None val","title":"Returns"},{"location":"net-TCPConnectionNotify/#sent","text":"[Source] Called when data is sent on the connection. This gives the notifier an opportunity to modify sent data before it is written. To swallow data, return an empty string. fun ref sent( conn: TCPConnection ref, data: (String val | Array[U8 val] val)) : (String val | Array[U8 val] val)","title":"sent"},{"location":"net-TCPConnectionNotify/#parameters_5","text":"conn: TCPConnection ref data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_5","text":"( String val | Array [ U8 val] val)","title":"Returns"},{"location":"net-TCPConnectionNotify/#sentv","text":"[Source] Called when multiple chunks of data are sent to the connection in a single call. This gives the notifier an opportunity to modify the sent data chunks before they are written. To swallow the send, return an empty Array[String]. fun ref sentv( conn: TCPConnection ref, data: ByteSeqIter val) : ByteSeqIter val","title":"sentv"},{"location":"net-TCPConnectionNotify/#parameters_6","text":"conn: TCPConnection ref data: ByteSeqIter val","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_6","text":"ByteSeqIter val","title":"Returns"},{"location":"net-TCPConnectionNotify/#received","text":"[Source] Called when new data is received on the connection. Return true if you want to continue receiving messages without yielding until you read max_size on the TCPConnection. Return false to cause the TCPConnection to yield now. Includes the number of times during the current behavior, that received has been called. This allows the notifier to end reads on a regular basis. fun ref received( conn: TCPConnection ref, data: Array[U8 val] iso, times: USize val) : Bool val","title":"received"},{"location":"net-TCPConnectionNotify/#parameters_7","text":"conn: TCPConnection ref data: Array [ U8 val] iso times: USize val","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_7","text":"Bool val","title":"Returns"},{"location":"net-TCPConnectionNotify/#expect","text":"[Source] Called when the connection has been told to expect a certain quantity of bytes. This allows nested notifiers to change the expected quantity, which allows a lower level protocol to handle any framing (e.g. SSL). fun ref expect( conn: TCPConnection ref, qty: USize val) : USize val","title":"expect"},{"location":"net-TCPConnectionNotify/#parameters_8","text":"conn: TCPConnection ref qty: USize val","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_8","text":"USize val","title":"Returns"},{"location":"net-TCPConnectionNotify/#closed","text":"[Source] Called when the connection is closed. fun ref closed( conn: TCPConnection ref) : None val","title":"closed"},{"location":"net-TCPConnectionNotify/#parameters_9","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_9","text":"None val","title":"Returns"},{"location":"net-TCPConnectionNotify/#throttled","text":"[Source] Called when the connection starts experiencing TCP backpressure. You should respond to this by pausing additional calls to write and writev until you are informed that pressure has been released. Failure to respond to the throttled notification will result in outgoing data queuing in the connection and increasing memory usage. fun ref throttled( conn: TCPConnection ref) : None val","title":"throttled"},{"location":"net-TCPConnectionNotify/#parameters_10","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_10","text":"None val","title":"Returns"},{"location":"net-TCPConnectionNotify/#unthrottled","text":"[Source] Called when the connection stops experiencing TCP backpressure. Upon receiving this notification, you should feel free to start making calls to write and writev again. fun ref unthrottled( conn: TCPConnection ref) : None val","title":"unthrottled"},{"location":"net-TCPConnectionNotify/#parameters_11","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_11","text":"None val","title":"Returns"},{"location":"net-TCPListenAuth/","text":"TCPListenAuth [Source] primitive val TCPListenAuth Constructors create [Source] new val create( from: (AmbientAuth val | NetAuth val | TCPAuth val)) : TCPListenAuth val^ Parameters from: ( AmbientAuth val | NetAuth val | TCPAuth val) Returns TCPListenAuth val^ Public Functions eq [Source] fun box eq( that: TCPListenAuth val) : Bool val Parameters that: TCPListenAuth val Returns Bool val ne [Source] fun box ne( that: TCPListenAuth val) : Bool val Parameters that: TCPListenAuth val Returns Bool val","title":"primitive TCPListenAuth"},{"location":"net-TCPListenAuth/#tcplistenauth","text":"[Source] primitive val TCPListenAuth","title":"TCPListenAuth"},{"location":"net-TCPListenAuth/#constructors","text":"","title":"Constructors"},{"location":"net-TCPListenAuth/#create","text":"[Source] new val create( from: (AmbientAuth val | NetAuth val | TCPAuth val)) : TCPListenAuth val^","title":"create"},{"location":"net-TCPListenAuth/#parameters","text":"from: ( AmbientAuth val | NetAuth val | TCPAuth val)","title":"Parameters"},{"location":"net-TCPListenAuth/#returns","text":"TCPListenAuth val^","title":"Returns"},{"location":"net-TCPListenAuth/#public-functions","text":"","title":"Public Functions"},{"location":"net-TCPListenAuth/#eq","text":"[Source] fun box eq( that: TCPListenAuth val) : Bool val","title":"eq"},{"location":"net-TCPListenAuth/#parameters_1","text":"that: TCPListenAuth val","title":"Parameters"},{"location":"net-TCPListenAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-TCPListenAuth/#ne","text":"[Source] fun box ne( that: TCPListenAuth val) : Bool val","title":"ne"},{"location":"net-TCPListenAuth/#parameters_2","text":"that: TCPListenAuth val","title":"Parameters"},{"location":"net-TCPListenAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-TCPListenNotify/","text":"TCPListenNotify [Source] Notifications for TCP listeners. For an example of using this class, please see the documentation for the TCPListener actor. interface ref TCPListenNotify Public Functions listening [Source] Called when the listener has been bound to an address. fun ref listening( listen: TCPListener ref) : None val Parameters listen: TCPListener ref Returns None val not_listening [Source] Called if it wasn't possible to bind the listener to an address. It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this: fun ref not_listening(listen: TCPListener ref) = None fun ref not_listening( listen: TCPListener ref) : None val Parameters listen: TCPListener ref Returns None val closed [Source] Called when the listener is closed. fun ref closed( listen: TCPListener ref) : None val Parameters listen: TCPListener ref Returns None val connected [Source] Create a new TCPConnectionNotify to attach to a new TCPConnection for a newly established connection to the server. fun ref connected( listen: TCPListener ref) : TCPConnectionNotify iso^ ? Parameters listen: TCPListener ref Returns TCPConnectionNotify iso^ ?","title":"interface TCPListenNotify"},{"location":"net-TCPListenNotify/#tcplistennotify","text":"[Source] Notifications for TCP listeners. For an example of using this class, please see the documentation for the TCPListener actor. interface ref TCPListenNotify","title":"TCPListenNotify"},{"location":"net-TCPListenNotify/#public-functions","text":"","title":"Public Functions"},{"location":"net-TCPListenNotify/#listening","text":"[Source] Called when the listener has been bound to an address. fun ref listening( listen: TCPListener ref) : None val","title":"listening"},{"location":"net-TCPListenNotify/#parameters","text":"listen: TCPListener ref","title":"Parameters"},{"location":"net-TCPListenNotify/#returns","text":"None val","title":"Returns"},{"location":"net-TCPListenNotify/#not_listening","text":"[Source] Called if it wasn't possible to bind the listener to an address. It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this: fun ref not_listening(listen: TCPListener ref) = None fun ref not_listening( listen: TCPListener ref) : None val","title":"not_listening"},{"location":"net-TCPListenNotify/#parameters_1","text":"listen: TCPListener ref","title":"Parameters"},{"location":"net-TCPListenNotify/#returns_1","text":"None val","title":"Returns"},{"location":"net-TCPListenNotify/#closed","text":"[Source] Called when the listener is closed. fun ref closed( listen: TCPListener ref) : None val","title":"closed"},{"location":"net-TCPListenNotify/#parameters_2","text":"listen: TCPListener ref","title":"Parameters"},{"location":"net-TCPListenNotify/#returns_2","text":"None val","title":"Returns"},{"location":"net-TCPListenNotify/#connected","text":"[Source] Create a new TCPConnectionNotify to attach to a new TCPConnection for a newly established connection to the server. fun ref connected( listen: TCPListener ref) : TCPConnectionNotify iso^ ?","title":"connected"},{"location":"net-TCPListenNotify/#parameters_3","text":"listen: TCPListener ref","title":"Parameters"},{"location":"net-TCPListenNotify/#returns_3","text":"TCPConnectionNotify iso^ ?","title":"Returns"},{"location":"net-TCPListener/","text":"TCPListener [Source] Listens for new network connections. The following program creates an echo server that listens for connections on port 8989 and echoes back any data it receives. use net class MyTCPConnectionNotify is TCPConnectionNotify fun ref received( conn: TCPConnection ref, data: Array[U8] iso, times: USize) : Bool = conn.write(String.from_array(consume data)) true fun ref connect_failed(conn: TCPConnection ref) = None class MyTCPListenNotify is TCPListenNotify fun ref connected(listen: TCPListener ref): TCPConnectionNotify iso^ = MyTCPConnectionNotify fun ref not_listening(listen: TCPListener ref) = None actor Main new create(env: Env) = try TCPListener(env.root as AmbientAuth, recover MyTCPListenNotify end, , 8989 ) end actor tag TCPListener Constructors create [Source] Listens for both IPv4 and IPv6 connections. new tag create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val), notify: TCPListenNotify iso, host: String val = seq, service: String val = seq, limit: USize val = seq, init_size: USize val = seq, max_size: USize val = seq) : TCPListener tag^ Parameters auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) notify: TCPListenNotify iso host: String val = seq service: String val = seq limit: USize val = seq init_size: USize val = seq max_size: USize val = seq Returns TCPListener tag^ ip4 [Source] Listens for IPv4 connections. new tag ip4( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val), notify: TCPListenNotify iso, host: String val = seq, service: String val = seq, limit: USize val = seq, init_size: USize val = seq, max_size: USize val = seq) : TCPListener tag^ Parameters auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) notify: TCPListenNotify iso host: String val = seq service: String val = seq limit: USize val = seq init_size: USize val = seq max_size: USize val = seq Returns TCPListener tag^ ip6 [Source] Listens for IPv6 connections. new tag ip6( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val), notify: TCPListenNotify iso, host: String val = seq, service: String val = seq, limit: USize val = seq, init_size: USize val = seq, max_size: USize val = seq) : TCPListener tag^ Parameters auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) notify: TCPListenNotify iso host: String val = seq service: String val = seq limit: USize val = seq init_size: USize val = seq max_size: USize val = seq Returns TCPListener tag^ Public Behaviours set_notify [Source] Change the notifier. be set_notify( notify: TCPListenNotify iso) Parameters notify: TCPListenNotify iso dispose [Source] Stop listening. be dispose() Public Functions local_address [Source] Return the bound IP address. fun box local_address() : NetAddress val Returns NetAddress val close [Source] Dispose of resources. fun ref close() : None val Returns None val Private Behaviours _event_notify [Source] When we are readable, we accept new connections until none remain. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val _conn_closed [Source] An accepted connection has closed. If we have dropped below the limit, try to accept new connections. be _conn_closed() Private Functions _accept [Source] Accept connections as long as we have spawned fewer than our limit. fun ref _accept( ns: U32 val = seq) : None val Parameters ns: U32 val = seq Returns None val _spawn [Source] Spawn a new connection. fun ref _spawn( ns: U32 val) : None val Parameters ns: U32 val Returns None val _notify_listening [Source] Inform the notifier that we're listening. fun ref _notify_listening() : None val Returns None val","title":"actor TCPListener"},{"location":"net-TCPListener/#tcplistener","text":"[Source] Listens for new network connections. The following program creates an echo server that listens for connections on port 8989 and echoes back any data it receives. use net class MyTCPConnectionNotify is TCPConnectionNotify fun ref received( conn: TCPConnection ref, data: Array[U8] iso, times: USize) : Bool = conn.write(String.from_array(consume data)) true fun ref connect_failed(conn: TCPConnection ref) = None class MyTCPListenNotify is TCPListenNotify fun ref connected(listen: TCPListener ref): TCPConnectionNotify iso^ = MyTCPConnectionNotify fun ref not_listening(listen: TCPListener ref) = None actor Main new create(env: Env) = try TCPListener(env.root as AmbientAuth, recover MyTCPListenNotify end, , 8989 ) end actor tag TCPListener","title":"TCPListener"},{"location":"net-TCPListener/#constructors","text":"","title":"Constructors"},{"location":"net-TCPListener/#create","text":"[Source] Listens for both IPv4 and IPv6 connections. new tag create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val), notify: TCPListenNotify iso, host: String val = seq, service: String val = seq, limit: USize val = seq, init_size: USize val = seq, max_size: USize val = seq) : TCPListener tag^","title":"create"},{"location":"net-TCPListener/#parameters","text":"auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) notify: TCPListenNotify iso host: String val = seq service: String val = seq limit: USize val = seq init_size: USize val = seq max_size: USize val = seq","title":"Parameters"},{"location":"net-TCPListener/#returns","text":"TCPListener tag^","title":"Returns"},{"location":"net-TCPListener/#ip4","text":"[Source] Listens for IPv4 connections. new tag ip4( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val), notify: TCPListenNotify iso, host: String val = seq, service: String val = seq, limit: USize val = seq, init_size: USize val = seq, max_size: USize val = seq) : TCPListener tag^","title":"ip4"},{"location":"net-TCPListener/#parameters_1","text":"auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) notify: TCPListenNotify iso host: String val = seq service: String val = seq limit: USize val = seq init_size: USize val = seq max_size: USize val = seq","title":"Parameters"},{"location":"net-TCPListener/#returns_1","text":"TCPListener tag^","title":"Returns"},{"location":"net-TCPListener/#ip6","text":"[Source] Listens for IPv6 connections. new tag ip6( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val), notify: TCPListenNotify iso, host: String val = seq, service: String val = seq, limit: USize val = seq, init_size: USize val = seq, max_size: USize val = seq) : TCPListener tag^","title":"ip6"},{"location":"net-TCPListener/#parameters_2","text":"auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) notify: TCPListenNotify iso host: String val = seq service: String val = seq limit: USize val = seq init_size: USize val = seq max_size: USize val = seq","title":"Parameters"},{"location":"net-TCPListener/#returns_2","text":"TCPListener tag^","title":"Returns"},{"location":"net-TCPListener/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"net-TCPListener/#set_notify","text":"[Source] Change the notifier. be set_notify( notify: TCPListenNotify iso)","title":"set_notify"},{"location":"net-TCPListener/#parameters_3","text":"notify: TCPListenNotify iso","title":"Parameters"},{"location":"net-TCPListener/#dispose","text":"[Source] Stop listening. be dispose()","title":"dispose"},{"location":"net-TCPListener/#public-functions","text":"","title":"Public Functions"},{"location":"net-TCPListener/#local_address","text":"[Source] Return the bound IP address. fun box local_address() : NetAddress val","title":"local_address"},{"location":"net-TCPListener/#returns_3","text":"NetAddress val","title":"Returns"},{"location":"net-TCPListener/#close","text":"[Source] Dispose of resources. fun ref close() : None val","title":"close"},{"location":"net-TCPListener/#returns_4","text":"None val","title":"Returns"},{"location":"net-TCPListener/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"net-TCPListener/#_event_notify","text":"[Source] When we are readable, we accept new connections until none remain. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"net-TCPListener/#parameters_4","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"net-TCPListener/#_conn_closed","text":"[Source] An accepted connection has closed. If we have dropped below the limit, try to accept new connections. be _conn_closed()","title":"_conn_closed"},{"location":"net-TCPListener/#private-functions","text":"","title":"Private Functions"},{"location":"net-TCPListener/#_accept","text":"[Source] Accept connections as long as we have spawned fewer than our limit. fun ref _accept( ns: U32 val = seq) : None val","title":"_accept"},{"location":"net-TCPListener/#parameters_5","text":"ns: U32 val = seq","title":"Parameters"},{"location":"net-TCPListener/#returns_5","text":"None val","title":"Returns"},{"location":"net-TCPListener/#_spawn","text":"[Source] Spawn a new connection. fun ref _spawn( ns: U32 val) : None val","title":"_spawn"},{"location":"net-TCPListener/#parameters_6","text":"ns: U32 val","title":"Parameters"},{"location":"net-TCPListener/#returns_6","text":"None val","title":"Returns"},{"location":"net-TCPListener/#_notify_listening","text":"[Source] Inform the notifier that we're listening. fun ref _notify_listening() : None val","title":"_notify_listening"},{"location":"net-TCPListener/#returns_7","text":"None val","title":"Returns"},{"location":"net-TCPListenerAuth/","text":"TCPListenerAuth [Source] type TCPListenerAuth is (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) Type Alias For ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val)","title":"type TCPListenerAuth"},{"location":"net-TCPListenerAuth/#tcplistenerauth","text":"[Source] type TCPListenerAuth is (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val)","title":"TCPListenerAuth"},{"location":"net-TCPListenerAuth/#type-alias-for","text":"( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val)","title":"Type Alias For"},{"location":"net-UDPAuth/","text":"UDPAuth [Source] primitive val UDPAuth Constructors create [Source] new val create( from: (AmbientAuth val | NetAuth val)) : UDPAuth val^ Parameters from: ( AmbientAuth val | NetAuth val) Returns UDPAuth val^ Public Functions eq [Source] fun box eq( that: UDPAuth val) : Bool val Parameters that: UDPAuth val Returns Bool val ne [Source] fun box ne( that: UDPAuth val) : Bool val Parameters that: UDPAuth val Returns Bool val","title":"primitive UDPAuth"},{"location":"net-UDPAuth/#udpauth","text":"[Source] primitive val UDPAuth","title":"UDPAuth"},{"location":"net-UDPAuth/#constructors","text":"","title":"Constructors"},{"location":"net-UDPAuth/#create","text":"[Source] new val create( from: (AmbientAuth val | NetAuth val)) : UDPAuth val^","title":"create"},{"location":"net-UDPAuth/#parameters","text":"from: ( AmbientAuth val | NetAuth val)","title":"Parameters"},{"location":"net-UDPAuth/#returns","text":"UDPAuth val^","title":"Returns"},{"location":"net-UDPAuth/#public-functions","text":"","title":"Public Functions"},{"location":"net-UDPAuth/#eq","text":"[Source] fun box eq( that: UDPAuth val) : Bool val","title":"eq"},{"location":"net-UDPAuth/#parameters_1","text":"that: UDPAuth val","title":"Parameters"},{"location":"net-UDPAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-UDPAuth/#ne","text":"[Source] fun box ne( that: UDPAuth val) : Bool val","title":"ne"},{"location":"net-UDPAuth/#parameters_2","text":"that: UDPAuth val","title":"Parameters"},{"location":"net-UDPAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-UDPNotify/","text":"UDPNotify [Source] Notifications for UDP connections. For an example of using this class please see the documentatoin for the UDPSocket actor. interface ref UDPNotify Public Functions listening [Source] Called when the socket has been bound to an address. fun ref listening( sock: UDPSocket ref) : None val Parameters sock: UDPSocket ref Returns None val not_listening [Source] Called if it wasn't possible to bind the socket to an address. It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this: fun ref not_listening(sock: UDPSocket ref) = None fun ref not_listening( sock: UDPSocket ref) : None val Parameters sock: UDPSocket ref Returns None val received [Source] Called when new data is received on the socket. fun ref received( sock: UDPSocket ref, data: Array[U8 val] iso, from: NetAddress val) : None val Parameters sock: UDPSocket ref data: Array [ U8 val] iso from: NetAddress val Returns None val closed [Source] Called when the socket is closed. fun ref closed( sock: UDPSocket ref) : None val Parameters sock: UDPSocket ref Returns None val","title":"interface UDPNotify"},{"location":"net-UDPNotify/#udpnotify","text":"[Source] Notifications for UDP connections. For an example of using this class please see the documentatoin for the UDPSocket actor. interface ref UDPNotify","title":"UDPNotify"},{"location":"net-UDPNotify/#public-functions","text":"","title":"Public Functions"},{"location":"net-UDPNotify/#listening","text":"[Source] Called when the socket has been bound to an address. fun ref listening( sock: UDPSocket ref) : None val","title":"listening"},{"location":"net-UDPNotify/#parameters","text":"sock: UDPSocket ref","title":"Parameters"},{"location":"net-UDPNotify/#returns","text":"None val","title":"Returns"},{"location":"net-UDPNotify/#not_listening","text":"[Source] Called if it wasn't possible to bind the socket to an address. It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this: fun ref not_listening(sock: UDPSocket ref) = None fun ref not_listening( sock: UDPSocket ref) : None val","title":"not_listening"},{"location":"net-UDPNotify/#parameters_1","text":"sock: UDPSocket ref","title":"Parameters"},{"location":"net-UDPNotify/#returns_1","text":"None val","title":"Returns"},{"location":"net-UDPNotify/#received","text":"[Source] Called when new data is received on the socket. fun ref received( sock: UDPSocket ref, data: Array[U8 val] iso, from: NetAddress val) : None val","title":"received"},{"location":"net-UDPNotify/#parameters_2","text":"sock: UDPSocket ref data: Array [ U8 val] iso from: NetAddress val","title":"Parameters"},{"location":"net-UDPNotify/#returns_2","text":"None val","title":"Returns"},{"location":"net-UDPNotify/#closed","text":"[Source] Called when the socket is closed. fun ref closed( sock: UDPSocket ref) : None val","title":"closed"},{"location":"net-UDPNotify/#parameters_3","text":"sock: UDPSocket ref","title":"Parameters"},{"location":"net-UDPNotify/#returns_3","text":"None val","title":"Returns"},{"location":"net-UDPSocket/","text":"UDPSocket [Source] Creates a UDP socket that can be used for sending and receiving UDP messages. The following examples create: an echo server that listens for connections and returns whatever message it receives a client that connects to the server, sends a message, and prints the message it receives in response The server is implemented like this: use net class MyUDPNotify is UDPNotify fun ref received( sock: UDPSocket ref, data: Array[U8] iso, from: NetAddress) = sock.write(consume data, from) fun ref not_listening(sock: UDPSocket ref) = None actor Main new create(env: Env) = try UDPSocket(env.root as AmbientAuth, MyUDPNotify, , 8989 ) end The client is implemented like this: use net class MyUDPNotify is UDPNotify let _out: OutStream let _destination: NetAddress new create( out: OutStream, destination: NetAddress) = _out = out _destination = destination fun ref listening(sock: UDPSocket ref) = sock.write( hello world , _destination) fun ref received( sock: UDPSocket ref, data: Array[U8] iso, from: NetAddress) = _out.print( GOT: + String.from_array(consume data)) sock.dispose() fun ref not_listening(sock: UDPSocket ref) = None actor Main new create(env: Env) = try let destination = DNS.ip4(env.root as AmbientAuth, localhost , 8989 )(0)? UDPSocket(env.root as AmbientAuth, recover MyUDPNotify(env.out, consume destination) end) end actor tag UDPSocket Constructors create [Source] Listens for both IPv4 and IPv6 datagrams. new tag create( auth: (AmbientAuth val | NetAuth val | UDPAuth val), notify: UDPNotify iso, host: String val = seq, service: String val = seq, size: USize val = seq) : UDPSocket tag^ Parameters auth: ( AmbientAuth val | NetAuth val | UDPAuth val) notify: UDPNotify iso host: String val = seq service: String val = seq size: USize val = seq Returns UDPSocket tag^ ip4 [Source] Listens for IPv4 datagrams. new tag ip4( auth: (AmbientAuth val | NetAuth val | UDPAuth val), notify: UDPNotify iso, host: String val = seq, service: String val = seq, size: USize val = seq) : UDPSocket tag^ Parameters auth: ( AmbientAuth val | NetAuth val | UDPAuth val) notify: UDPNotify iso host: String val = seq service: String val = seq size: USize val = seq Returns UDPSocket tag^ ip6 [Source] Listens for IPv6 datagrams. new tag ip6( auth: (AmbientAuth val | NetAuth val | UDPAuth val), notify: UDPNotify iso, host: String val = seq, service: String val = seq, size: USize val = seq) : UDPSocket tag^ Parameters auth: ( AmbientAuth val | NetAuth val | UDPAuth val) notify: UDPNotify iso host: String val = seq service: String val = seq size: USize val = seq Returns UDPSocket tag^ Public Behaviours write [Source] Write a single sequence of bytes. be write( data: (String val | Array[U8 val] val), to: NetAddress val) Parameters data: ( String val | Array [ U8 val] val) to: NetAddress val writev [Source] Write a sequence of sequences of bytes. be writev( data: ByteSeqIter val, to: NetAddress val) Parameters data: ByteSeqIter val to: NetAddress val set_notify [Source] Change the notifier. be set_notify( notify: UDPNotify iso) Parameters notify: UDPNotify iso set_broadcast [Source] Enable or disable broadcasting from this socket. be set_broadcast( state: Bool val) Parameters state: Bool val set_multicast_interface [Source] By default, the OS will choose which address is used to send packets bound for multicast addresses. This can be used to force a specific interface. To revert to allowing the OS to choose, call with an empty string. be set_multicast_interface( from: String val = seq) Parameters from: String val = seq set_multicast_loopback [Source] By default, packets sent to a multicast address will be received by the sending system if it has subscribed to that address. Disabling loopback prevents this. be set_multicast_loopback( loopback: Bool val) Parameters loopback: Bool val set_multicast_ttl [Source] Set the TTL for multicast sends. Defaults to 1. be set_multicast_ttl( ttl: U8 val) Parameters ttl: U8 val multicast_join [Source] Add a multicast group. This can be limited to packets arriving on a specific interface. be multicast_join( group: String val, to: String val = seq) Parameters group: String val to: String val = seq multicast_leave [Source] Drop a multicast group. This can be limited to packets arriving on a specific interface. No attempt is made to check that this socket has previously added this group. be multicast_leave( group: String val, to: String val = seq) Parameters group: String val to: String val = seq dispose [Source] Stop listening. be dispose() Public Functions local_address [Source] Return the bound IP address. fun box local_address() : NetAddress val Returns NetAddress val getsockopt [Source] General wrapper for UDP sockets to the getsockopt(2) system call. The caller must provide an array that is pre-allocated to be at least as large as the largest data structure that the kernel may return for the requested option. In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. An Array[U8] of data returned by the system call's void * 4th argument. Its size is specified by the kernel via the system call's sockopt_len_t * 5th argument. In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. Usage example: // listening() is a callback function for class UDPNotify fun ref listening(sock: UDPSocket ref) = match sock.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4) | (0, let gbytes: Array[U8] iso) = try let br = Reader.create(). append(consume gbytes) ifdef littleendian then let buffer_size = br.u32_le()? else let buffer_size = br.u32_be()? end end | (let errno: U32, _) = // System call failed end fun ref getsockopt( level: I32 val, option_name: I32 val, option_max_size: USize val = seq) : (U32 val , Array[U8 val] iso^) Parameters level: I32 val option_name: I32 val option_max_size: USize val = seq Returns ( U32 val , Array [ U8 val] iso^) getsockopt_u32 [Source] Wrapper for UDP sockets to the getsockopt(2) system call where the kernel's returned option value is a C uint32_t type / Pony type U32 . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. The *option_value returned by the kernel converted to a Pony U32 . In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. fun ref getsockopt_u32( level: I32 val, option_name: I32 val) : (U32 val , U32 val) Parameters level: I32 val option_name: I32 val Returns ( U32 val , U32 val) setsockopt [Source] General wrapper for UDP sockets to the setsockopt(2) system call. The caller is responsible for the correct size and byte contents of the option array for the requested level and option_name , including using the appropriate CPU endian byte order. This function returns 0 on success, else the value of errno on failure. Usage example: // listening() is a callback function for class UDPNotify fun ref listening(sock: UDPSocket ref) = let sb = Writer sb.u32_le(7744) // Our desired socket buffer size let sbytes = Array[U8] for bs in sb.done().values() do sbytes.append(bs) end match sock.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes) | 0 = // System call was successful | let errno: U32 = // System call failed end fun ref setsockopt( level: I32 val, option_name: I32 val, option: Array[U8 val] ref) : U32 val Parameters level: I32 val option_name: I32 val option: Array [ U8 val] ref Returns U32 val setsockopt_u32 [Source] Wrapper for UDP sockets to the setsockopt(2) system call where the kernel expects an option value of a C uint32_t type / Pony type U32 . This function returns 0 on success, else the value of errno on failure. fun ref setsockopt_u32( level: I32 val, option_name: I32 val, option: U32 val) : U32 val Parameters level: I32 val option_name: I32 val option: U32 val Returns U32 val get_so_error [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_ERROR, ...) fun ref get_so_error() : (U32 val , U32 val) Returns ( U32 val , U32 val) get_so_rcvbuf [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun ref get_so_rcvbuf() : (U32 val , U32 val) Returns ( U32 val , U32 val) get_so_sndbuf [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun ref get_so_sndbuf() : (U32 val , U32 val) Returns ( U32 val , U32 val) set_ip_multicast_loop [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, IP_MULTICAST_LOOP, ...) fun ref set_ip_multicast_loop( loopback: Bool val) : U32 val Parameters loopback: Bool val Returns U32 val set_ip_multicast_ttl [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, IP_MULTICAST_TTL, ...) fun ref set_ip_multicast_ttl( ttl: U8 val) : U32 val Parameters ttl: U8 val Returns U32 val set_so_broadcast [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_BROADCAST, ...) fun ref set_so_broadcast( state: Bool val) : U32 val Parameters state: Bool val Returns U32 val set_so_rcvbuf [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun ref set_so_rcvbuf( bufsize: U32 val) : U32 val Parameters bufsize: U32 val Returns U32 val set_so_sndbuf [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun ref set_so_sndbuf( bufsize: U32 val) : U32 val Parameters bufsize: U32 val Returns U32 val Private Behaviours _event_notify [Source] When we are readable, we accept new connections until none remain. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val _read_again [Source] Resume reading. be _read_again() Private Functions _pending_reads [Source] Read while data is available, guessing the next packet length as we go. If we read 4 kb of data, send ourself a resume message and stop reading, to avoid starving other actors. fun ref _pending_reads() : None val Returns None val _complete_reads [Source] The OS has informed as that len bytes of pending reads have completed. This occurs only with IOCP on Windows. fun ref _complete_reads( len: U32 val) : None val Parameters len: U32 val Returns None val _start_next_read [Source] Start our next receive. This is used only with IOCP on Windows. fun ref _start_next_read() : None val Returns None val _write [Source] Write the datagram to the socket. fun ref _write( data: (String val | Array[U8 val] val), to: NetAddress val) : None val Parameters data: ( String val | Array [ U8 val] val) to: NetAddress val Returns None val _notify_listening [Source] Inform the notifier that we're listening. fun ref _notify_listening() : None val Returns None val _close [Source] Inform the notifier that we've closed. fun ref _close() : None val Returns None val","title":"actor UDPSocket"},{"location":"net-UDPSocket/#udpsocket","text":"[Source] Creates a UDP socket that can be used for sending and receiving UDP messages. The following examples create: an echo server that listens for connections and returns whatever message it receives a client that connects to the server, sends a message, and prints the message it receives in response The server is implemented like this: use net class MyUDPNotify is UDPNotify fun ref received( sock: UDPSocket ref, data: Array[U8] iso, from: NetAddress) = sock.write(consume data, from) fun ref not_listening(sock: UDPSocket ref) = None actor Main new create(env: Env) = try UDPSocket(env.root as AmbientAuth, MyUDPNotify, , 8989 ) end The client is implemented like this: use net class MyUDPNotify is UDPNotify let _out: OutStream let _destination: NetAddress new create( out: OutStream, destination: NetAddress) = _out = out _destination = destination fun ref listening(sock: UDPSocket ref) = sock.write( hello world , _destination) fun ref received( sock: UDPSocket ref, data: Array[U8] iso, from: NetAddress) = _out.print( GOT: + String.from_array(consume data)) sock.dispose() fun ref not_listening(sock: UDPSocket ref) = None actor Main new create(env: Env) = try let destination = DNS.ip4(env.root as AmbientAuth, localhost , 8989 )(0)? UDPSocket(env.root as AmbientAuth, recover MyUDPNotify(env.out, consume destination) end) end actor tag UDPSocket","title":"UDPSocket"},{"location":"net-UDPSocket/#constructors","text":"","title":"Constructors"},{"location":"net-UDPSocket/#create","text":"[Source] Listens for both IPv4 and IPv6 datagrams. new tag create( auth: (AmbientAuth val | NetAuth val | UDPAuth val), notify: UDPNotify iso, host: String val = seq, service: String val = seq, size: USize val = seq) : UDPSocket tag^","title":"create"},{"location":"net-UDPSocket/#parameters","text":"auth: ( AmbientAuth val | NetAuth val | UDPAuth val) notify: UDPNotify iso host: String val = seq service: String val = seq size: USize val = seq","title":"Parameters"},{"location":"net-UDPSocket/#returns","text":"UDPSocket tag^","title":"Returns"},{"location":"net-UDPSocket/#ip4","text":"[Source] Listens for IPv4 datagrams. new tag ip4( auth: (AmbientAuth val | NetAuth val | UDPAuth val), notify: UDPNotify iso, host: String val = seq, service: String val = seq, size: USize val = seq) : UDPSocket tag^","title":"ip4"},{"location":"net-UDPSocket/#parameters_1","text":"auth: ( AmbientAuth val | NetAuth val | UDPAuth val) notify: UDPNotify iso host: String val = seq service: String val = seq size: USize val = seq","title":"Parameters"},{"location":"net-UDPSocket/#returns_1","text":"UDPSocket tag^","title":"Returns"},{"location":"net-UDPSocket/#ip6","text":"[Source] Listens for IPv6 datagrams. new tag ip6( auth: (AmbientAuth val | NetAuth val | UDPAuth val), notify: UDPNotify iso, host: String val = seq, service: String val = seq, size: USize val = seq) : UDPSocket tag^","title":"ip6"},{"location":"net-UDPSocket/#parameters_2","text":"auth: ( AmbientAuth val | NetAuth val | UDPAuth val) notify: UDPNotify iso host: String val = seq service: String val = seq size: USize val = seq","title":"Parameters"},{"location":"net-UDPSocket/#returns_2","text":"UDPSocket tag^","title":"Returns"},{"location":"net-UDPSocket/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"net-UDPSocket/#write","text":"[Source] Write a single sequence of bytes. be write( data: (String val | Array[U8 val] val), to: NetAddress val)","title":"write"},{"location":"net-UDPSocket/#parameters_3","text":"data: ( String val | Array [ U8 val] val) to: NetAddress val","title":"Parameters"},{"location":"net-UDPSocket/#writev","text":"[Source] Write a sequence of sequences of bytes. be writev( data: ByteSeqIter val, to: NetAddress val)","title":"writev"},{"location":"net-UDPSocket/#parameters_4","text":"data: ByteSeqIter val to: NetAddress val","title":"Parameters"},{"location":"net-UDPSocket/#set_notify","text":"[Source] Change the notifier. be set_notify( notify: UDPNotify iso)","title":"set_notify"},{"location":"net-UDPSocket/#parameters_5","text":"notify: UDPNotify iso","title":"Parameters"},{"location":"net-UDPSocket/#set_broadcast","text":"[Source] Enable or disable broadcasting from this socket. be set_broadcast( state: Bool val)","title":"set_broadcast"},{"location":"net-UDPSocket/#parameters_6","text":"state: Bool val","title":"Parameters"},{"location":"net-UDPSocket/#set_multicast_interface","text":"[Source] By default, the OS will choose which address is used to send packets bound for multicast addresses. This can be used to force a specific interface. To revert to allowing the OS to choose, call with an empty string. be set_multicast_interface( from: String val = seq)","title":"set_multicast_interface"},{"location":"net-UDPSocket/#parameters_7","text":"from: String val = seq","title":"Parameters"},{"location":"net-UDPSocket/#set_multicast_loopback","text":"[Source] By default, packets sent to a multicast address will be received by the sending system if it has subscribed to that address. Disabling loopback prevents this. be set_multicast_loopback( loopback: Bool val)","title":"set_multicast_loopback"},{"location":"net-UDPSocket/#parameters_8","text":"loopback: Bool val","title":"Parameters"},{"location":"net-UDPSocket/#set_multicast_ttl","text":"[Source] Set the TTL for multicast sends. Defaults to 1. be set_multicast_ttl( ttl: U8 val)","title":"set_multicast_ttl"},{"location":"net-UDPSocket/#parameters_9","text":"ttl: U8 val","title":"Parameters"},{"location":"net-UDPSocket/#multicast_join","text":"[Source] Add a multicast group. This can be limited to packets arriving on a specific interface. be multicast_join( group: String val, to: String val = seq)","title":"multicast_join"},{"location":"net-UDPSocket/#parameters_10","text":"group: String val to: String val = seq","title":"Parameters"},{"location":"net-UDPSocket/#multicast_leave","text":"[Source] Drop a multicast group. This can be limited to packets arriving on a specific interface. No attempt is made to check that this socket has previously added this group. be multicast_leave( group: String val, to: String val = seq)","title":"multicast_leave"},{"location":"net-UDPSocket/#parameters_11","text":"group: String val to: String val = seq","title":"Parameters"},{"location":"net-UDPSocket/#dispose","text":"[Source] Stop listening. be dispose()","title":"dispose"},{"location":"net-UDPSocket/#public-functions","text":"","title":"Public Functions"},{"location":"net-UDPSocket/#local_address","text":"[Source] Return the bound IP address. fun box local_address() : NetAddress val","title":"local_address"},{"location":"net-UDPSocket/#returns_3","text":"NetAddress val","title":"Returns"},{"location":"net-UDPSocket/#getsockopt","text":"[Source] General wrapper for UDP sockets to the getsockopt(2) system call. The caller must provide an array that is pre-allocated to be at least as large as the largest data structure that the kernel may return for the requested option. In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. An Array[U8] of data returned by the system call's void * 4th argument. Its size is specified by the kernel via the system call's sockopt_len_t * 5th argument. In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. Usage example: // listening() is a callback function for class UDPNotify fun ref listening(sock: UDPSocket ref) = match sock.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4) | (0, let gbytes: Array[U8] iso) = try let br = Reader.create(). append(consume gbytes) ifdef littleendian then let buffer_size = br.u32_le()? else let buffer_size = br.u32_be()? end end | (let errno: U32, _) = // System call failed end fun ref getsockopt( level: I32 val, option_name: I32 val, option_max_size: USize val = seq) : (U32 val , Array[U8 val] iso^)","title":"getsockopt"},{"location":"net-UDPSocket/#parameters_12","text":"level: I32 val option_name: I32 val option_max_size: USize val = seq","title":"Parameters"},{"location":"net-UDPSocket/#returns_4","text":"( U32 val , Array [ U8 val] iso^)","title":"Returns"},{"location":"net-UDPSocket/#getsockopt_u32","text":"[Source] Wrapper for UDP sockets to the getsockopt(2) system call where the kernel's returned option value is a C uint32_t type / Pony type U32 . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. The *option_value returned by the kernel converted to a Pony U32 . In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. fun ref getsockopt_u32( level: I32 val, option_name: I32 val) : (U32 val , U32 val)","title":"getsockopt_u32"},{"location":"net-UDPSocket/#parameters_13","text":"level: I32 val option_name: I32 val","title":"Parameters"},{"location":"net-UDPSocket/#returns_5","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-UDPSocket/#setsockopt","text":"[Source] General wrapper for UDP sockets to the setsockopt(2) system call. The caller is responsible for the correct size and byte contents of the option array for the requested level and option_name , including using the appropriate CPU endian byte order. This function returns 0 on success, else the value of errno on failure. Usage example: // listening() is a callback function for class UDPNotify fun ref listening(sock: UDPSocket ref) = let sb = Writer sb.u32_le(7744) // Our desired socket buffer size let sbytes = Array[U8] for bs in sb.done().values() do sbytes.append(bs) end match sock.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes) | 0 = // System call was successful | let errno: U32 = // System call failed end fun ref setsockopt( level: I32 val, option_name: I32 val, option: Array[U8 val] ref) : U32 val","title":"setsockopt"},{"location":"net-UDPSocket/#parameters_14","text":"level: I32 val option_name: I32 val option: Array [ U8 val] ref","title":"Parameters"},{"location":"net-UDPSocket/#returns_6","text":"U32 val","title":"Returns"},{"location":"net-UDPSocket/#setsockopt_u32","text":"[Source] Wrapper for UDP sockets to the setsockopt(2) system call where the kernel expects an option value of a C uint32_t type / Pony type U32 . This function returns 0 on success, else the value of errno on failure. fun ref setsockopt_u32( level: I32 val, option_name: I32 val, option: U32 val) : U32 val","title":"setsockopt_u32"},{"location":"net-UDPSocket/#parameters_15","text":"level: I32 val option_name: I32 val option: U32 val","title":"Parameters"},{"location":"net-UDPSocket/#returns_7","text":"U32 val","title":"Returns"},{"location":"net-UDPSocket/#get_so_error","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_ERROR, ...) fun ref get_so_error() : (U32 val , U32 val)","title":"get_so_error"},{"location":"net-UDPSocket/#returns_8","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-UDPSocket/#get_so_rcvbuf","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun ref get_so_rcvbuf() : (U32 val , U32 val)","title":"get_so_rcvbuf"},{"location":"net-UDPSocket/#returns_9","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-UDPSocket/#get_so_sndbuf","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun ref get_so_sndbuf() : (U32 val , U32 val)","title":"get_so_sndbuf"},{"location":"net-UDPSocket/#returns_10","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-UDPSocket/#set_ip_multicast_loop","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, IP_MULTICAST_LOOP, ...) fun ref set_ip_multicast_loop( loopback: Bool val) : U32 val","title":"set_ip_multicast_loop"},{"location":"net-UDPSocket/#parameters_16","text":"loopback: Bool val","title":"Parameters"},{"location":"net-UDPSocket/#returns_11","text":"U32 val","title":"Returns"},{"location":"net-UDPSocket/#set_ip_multicast_ttl","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, IP_MULTICAST_TTL, ...) fun ref set_ip_multicast_ttl( ttl: U8 val) : U32 val","title":"set_ip_multicast_ttl"},{"location":"net-UDPSocket/#parameters_17","text":"ttl: U8 val","title":"Parameters"},{"location":"net-UDPSocket/#returns_12","text":"U32 val","title":"Returns"},{"location":"net-UDPSocket/#set_so_broadcast","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_BROADCAST, ...) fun ref set_so_broadcast( state: Bool val) : U32 val","title":"set_so_broadcast"},{"location":"net-UDPSocket/#parameters_18","text":"state: Bool val","title":"Parameters"},{"location":"net-UDPSocket/#returns_13","text":"U32 val","title":"Returns"},{"location":"net-UDPSocket/#set_so_rcvbuf","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun ref set_so_rcvbuf( bufsize: U32 val) : U32 val","title":"set_so_rcvbuf"},{"location":"net-UDPSocket/#parameters_19","text":"bufsize: U32 val","title":"Parameters"},{"location":"net-UDPSocket/#returns_14","text":"U32 val","title":"Returns"},{"location":"net-UDPSocket/#set_so_sndbuf","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun ref set_so_sndbuf( bufsize: U32 val) : U32 val","title":"set_so_sndbuf"},{"location":"net-UDPSocket/#parameters_20","text":"bufsize: U32 val","title":"Parameters"},{"location":"net-UDPSocket/#returns_15","text":"U32 val","title":"Returns"},{"location":"net-UDPSocket/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"net-UDPSocket/#_event_notify","text":"[Source] When we are readable, we accept new connections until none remain. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"net-UDPSocket/#parameters_21","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"net-UDPSocket/#_read_again","text":"[Source] Resume reading. be _read_again()","title":"_read_again"},{"location":"net-UDPSocket/#private-functions","text":"","title":"Private Functions"},{"location":"net-UDPSocket/#_pending_reads","text":"[Source] Read while data is available, guessing the next packet length as we go. If we read 4 kb of data, send ourself a resume message and stop reading, to avoid starving other actors. fun ref _pending_reads() : None val","title":"_pending_reads"},{"location":"net-UDPSocket/#returns_16","text":"None val","title":"Returns"},{"location":"net-UDPSocket/#_complete_reads","text":"[Source] The OS has informed as that len bytes of pending reads have completed. This occurs only with IOCP on Windows. fun ref _complete_reads( len: U32 val) : None val","title":"_complete_reads"},{"location":"net-UDPSocket/#parameters_22","text":"len: U32 val","title":"Parameters"},{"location":"net-UDPSocket/#returns_17","text":"None val","title":"Returns"},{"location":"net-UDPSocket/#_start_next_read","text":"[Source] Start our next receive. This is used only with IOCP on Windows. fun ref _start_next_read() : None val","title":"_start_next_read"},{"location":"net-UDPSocket/#returns_18","text":"None val","title":"Returns"},{"location":"net-UDPSocket/#_write","text":"[Source] Write the datagram to the socket. fun ref _write( data: (String val | Array[U8 val] val), to: NetAddress val) : None val","title":"_write"},{"location":"net-UDPSocket/#parameters_23","text":"data: ( String val | Array [ U8 val] val) to: NetAddress val","title":"Parameters"},{"location":"net-UDPSocket/#returns_19","text":"None val","title":"Returns"},{"location":"net-UDPSocket/#_notify_listening","text":"[Source] Inform the notifier that we're listening. fun ref _notify_listening() : None val","title":"_notify_listening"},{"location":"net-UDPSocket/#returns_20","text":"None val","title":"Returns"},{"location":"net-UDPSocket/#_close","text":"[Source] Inform the notifier that we've closed. fun ref _close() : None val","title":"_close"},{"location":"net-UDPSocket/#returns_21","text":"None val","title":"Returns"},{"location":"net-UDPSocketAuth/","text":"UDPSocketAuth [Source] type UDPSocketAuth is (AmbientAuth val | NetAuth val | UDPAuth val) Type Alias For ( AmbientAuth val | NetAuth val | UDPAuth val)","title":"type UDPSocketAuth"},{"location":"net-UDPSocketAuth/#udpsocketauth","text":"[Source] type UDPSocketAuth is (AmbientAuth val | NetAuth val | UDPAuth val)","title":"UDPSocketAuth"},{"location":"net-UDPSocketAuth/#type-alias-for","text":"( AmbientAuth val | NetAuth val | UDPAuth val)","title":"Type Alias For"},{"location":"net-_OSSocket/","text":"_OSSocket [Source] Socket type-independent wrapper functions for getsockopt(2) and setsockopt(2) system calls for internal net package use. primitive val _OSSocket Constructors create [Source] new val create() : _OSSocket val^ Returns _OSSocket val^ Public Functions get_so_error [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_ERROR, ...) fun box get_so_error( fd: U32 val) : (U32 val , U32 val) Parameters fd: U32 val Returns ( U32 val , U32 val) get_so_rcvbuf [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun box get_so_rcvbuf( fd: U32 val) : (U32 val , U32 val) Parameters fd: U32 val Returns ( U32 val , U32 val) get_so_sndbuf [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun box get_so_sndbuf( fd: U32 val) : (U32 val , U32 val) Parameters fd: U32 val Returns ( U32 val , U32 val) set_so_rcvbuf [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun box set_so_rcvbuf( fd: U32 val, bufsize: U32 val) : U32 val Parameters fd: U32 val bufsize: U32 val Returns U32 val set_so_sndbuf [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun box set_so_sndbuf( fd: U32 val, bufsize: U32 val) : U32 val Parameters fd: U32 val bufsize: U32 val Returns U32 val getsockopt [Source] General wrapper for sockets to the getsockopt(2) system call. The option_max_size argument is the maximum number of bytes that the caller expects the kernel to return via the system call's void * 4th argument. This function will allocate a Pony Array[U8] array of size option_max_size prior to calling getsockopt(2) . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. An Array[U8] of data returned by the system call's void * 4th argument. Its size is specified by the kernel via the system call's sockopt_len_t * 5th argument. In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. fun box getsockopt( fd: U32 val, level: I32 val, option_name: I32 val, option_max_size: USize val = seq) : (U32 val , Array[U8 val] iso^) Parameters fd: U32 val level: I32 val option_name: I32 val option_max_size: USize val = seq Returns ( U32 val , Array [ U8 val] iso^) getsockopt_u32 [Source] Wrapper for sockets to the getsockopt(2) system call where the kernel's returned option value is a C uint32_t type / Pony type U32 . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. The *option_value returned by the kernel converted to a Pony U32 . In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. fun box getsockopt_u32( fd: U32 val, level: I32 val, option_name: I32 val) : (U32 val , U32 val) Parameters fd: U32 val level: I32 val option_name: I32 val Returns ( U32 val , U32 val) setsockopt [Source] General wrapper for sockets to the setsockopt(2) system call. The caller is responsible for the correct size and byte contents of the option array for the requested level and option_name , including using the appropriate CPU endian byte order. This function returns 0 on success, else the value of errno on failure. fun box setsockopt( fd: U32 val, level: I32 val, option_name: I32 val, option: Array[U8 val] ref) : U32 val Parameters fd: U32 val level: I32 val option_name: I32 val option: Array [ U8 val] ref Returns U32 val setsockopt_u32 [Source] Wrapper for sockets to the setsockopt(2) system call where the kernel expects an option value of a C uint32_t type / Pony type U32 . This function returns 0 on success, else the value of errno on failure. fun box setsockopt_u32( fd: U32 val, level: I32 val, option_name: I32 val, option: U32 val) : U32 val Parameters fd: U32 val level: I32 val option_name: I32 val option: U32 val Returns U32 val get_so [Source] Low-level interface to getsockopt(2) . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. An Array[U8] of data returned by the system call's void * 4th argument. Its size is specified by the kernel via the system call's sockopt_len_t * 5th argument. In case of system call failure, errno is returned in the first element of the 2-tuple, and the second element's value is junk. fun box get_so( fd: U32 val, level: I32 val, option_name: I32 val, option_max_size: USize val) : (U32 val , Array[U8 val] iso^) Parameters fd: U32 val level: I32 val option_name: I32 val option_max_size: USize val Returns ( U32 val , Array [ U8 val] iso^) set_so [Source] fun box set_so( fd: U32 val, level: I32 val, option_name: I32 val, option: Array[U8 val] ref) : U32 val Parameters fd: U32 val level: I32 val option_name: I32 val option: Array [ U8 val] ref Returns U32 val bytes4_to_u32 [Source] fun box bytes4_to_u32( b: Array[U8 val] ref) : U32 val ? Parameters b: Array [ U8 val] ref Returns U32 val ? u32_to_bytes4 [Source] fun box u32_to_bytes4( option: U32 val) : Array[U8 val] ref Parameters option: U32 val Returns Array [ U8 val] ref eq [Source] fun box eq( that: _OSSocket val) : Bool val Parameters that: _OSSocket val Returns Bool val ne [Source] fun box ne( that: _OSSocket val) : Bool val Parameters that: _OSSocket val Returns Bool val","title":"primitive _OSSocket"},{"location":"net-_OSSocket/#_ossocket","text":"[Source] Socket type-independent wrapper functions for getsockopt(2) and setsockopt(2) system calls for internal net package use. primitive val _OSSocket","title":"_OSSocket"},{"location":"net-_OSSocket/#constructors","text":"","title":"Constructors"},{"location":"net-_OSSocket/#create","text":"[Source] new val create() : _OSSocket val^","title":"create"},{"location":"net-_OSSocket/#returns","text":"_OSSocket val^","title":"Returns"},{"location":"net-_OSSocket/#public-functions","text":"","title":"Public Functions"},{"location":"net-_OSSocket/#get_so_error","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_ERROR, ...) fun box get_so_error( fd: U32 val) : (U32 val , U32 val)","title":"get_so_error"},{"location":"net-_OSSocket/#parameters","text":"fd: U32 val","title":"Parameters"},{"location":"net-_OSSocket/#returns_1","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-_OSSocket/#get_so_rcvbuf","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun box get_so_rcvbuf( fd: U32 val) : (U32 val , U32 val)","title":"get_so_rcvbuf"},{"location":"net-_OSSocket/#parameters_1","text":"fd: U32 val","title":"Parameters"},{"location":"net-_OSSocket/#returns_2","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-_OSSocket/#get_so_sndbuf","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun box get_so_sndbuf( fd: U32 val) : (U32 val , U32 val)","title":"get_so_sndbuf"},{"location":"net-_OSSocket/#parameters_2","text":"fd: U32 val","title":"Parameters"},{"location":"net-_OSSocket/#returns_3","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-_OSSocket/#set_so_rcvbuf","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun box set_so_rcvbuf( fd: U32 val, bufsize: U32 val) : U32 val","title":"set_so_rcvbuf"},{"location":"net-_OSSocket/#parameters_3","text":"fd: U32 val bufsize: U32 val","title":"Parameters"},{"location":"net-_OSSocket/#returns_4","text":"U32 val","title":"Returns"},{"location":"net-_OSSocket/#set_so_sndbuf","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun box set_so_sndbuf( fd: U32 val, bufsize: U32 val) : U32 val","title":"set_so_sndbuf"},{"location":"net-_OSSocket/#parameters_4","text":"fd: U32 val bufsize: U32 val","title":"Parameters"},{"location":"net-_OSSocket/#returns_5","text":"U32 val","title":"Returns"},{"location":"net-_OSSocket/#getsockopt","text":"[Source] General wrapper for sockets to the getsockopt(2) system call. The option_max_size argument is the maximum number of bytes that the caller expects the kernel to return via the system call's void * 4th argument. This function will allocate a Pony Array[U8] array of size option_max_size prior to calling getsockopt(2) . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. An Array[U8] of data returned by the system call's void * 4th argument. Its size is specified by the kernel via the system call's sockopt_len_t * 5th argument. In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. fun box getsockopt( fd: U32 val, level: I32 val, option_name: I32 val, option_max_size: USize val = seq) : (U32 val , Array[U8 val] iso^)","title":"getsockopt"},{"location":"net-_OSSocket/#parameters_5","text":"fd: U32 val level: I32 val option_name: I32 val option_max_size: USize val = seq","title":"Parameters"},{"location":"net-_OSSocket/#returns_6","text":"( U32 val , Array [ U8 val] iso^)","title":"Returns"},{"location":"net-_OSSocket/#getsockopt_u32","text":"[Source] Wrapper for sockets to the getsockopt(2) system call where the kernel's returned option value is a C uint32_t type / Pony type U32 . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. The *option_value returned by the kernel converted to a Pony U32 . In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. fun box getsockopt_u32( fd: U32 val, level: I32 val, option_name: I32 val) : (U32 val , U32 val)","title":"getsockopt_u32"},{"location":"net-_OSSocket/#parameters_6","text":"fd: U32 val level: I32 val option_name: I32 val","title":"Parameters"},{"location":"net-_OSSocket/#returns_7","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-_OSSocket/#setsockopt","text":"[Source] General wrapper for sockets to the setsockopt(2) system call. The caller is responsible for the correct size and byte contents of the option array for the requested level and option_name , including using the appropriate CPU endian byte order. This function returns 0 on success, else the value of errno on failure. fun box setsockopt( fd: U32 val, level: I32 val, option_name: I32 val, option: Array[U8 val] ref) : U32 val","title":"setsockopt"},{"location":"net-_OSSocket/#parameters_7","text":"fd: U32 val level: I32 val option_name: I32 val option: Array [ U8 val] ref","title":"Parameters"},{"location":"net-_OSSocket/#returns_8","text":"U32 val","title":"Returns"},{"location":"net-_OSSocket/#setsockopt_u32","text":"[Source] Wrapper for sockets to the setsockopt(2) system call where the kernel expects an option value of a C uint32_t type / Pony type U32 . This function returns 0 on success, else the value of errno on failure. fun box setsockopt_u32( fd: U32 val, level: I32 val, option_name: I32 val, option: U32 val) : U32 val","title":"setsockopt_u32"},{"location":"net-_OSSocket/#parameters_8","text":"fd: U32 val level: I32 val option_name: I32 val option: U32 val","title":"Parameters"},{"location":"net-_OSSocket/#returns_9","text":"U32 val","title":"Returns"},{"location":"net-_OSSocket/#get_so","text":"[Source] Low-level interface to getsockopt(2) . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. An Array[U8] of data returned by the system call's void * 4th argument. Its size is specified by the kernel via the system call's sockopt_len_t * 5th argument. In case of system call failure, errno is returned in the first element of the 2-tuple, and the second element's value is junk. fun box get_so( fd: U32 val, level: I32 val, option_name: I32 val, option_max_size: USize val) : (U32 val , Array[U8 val] iso^)","title":"get_so"},{"location":"net-_OSSocket/#parameters_9","text":"fd: U32 val level: I32 val option_name: I32 val option_max_size: USize val","title":"Parameters"},{"location":"net-_OSSocket/#returns_10","text":"( U32 val , Array [ U8 val] iso^)","title":"Returns"},{"location":"net-_OSSocket/#set_so","text":"[Source] fun box set_so( fd: U32 val, level: I32 val, option_name: I32 val, option: Array[U8 val] ref) : U32 val","title":"set_so"},{"location":"net-_OSSocket/#parameters_10","text":"fd: U32 val level: I32 val option_name: I32 val option: Array [ U8 val] ref","title":"Parameters"},{"location":"net-_OSSocket/#returns_11","text":"U32 val","title":"Returns"},{"location":"net-_OSSocket/#bytes4_to_u32","text":"[Source] fun box bytes4_to_u32( b: Array[U8 val] ref) : U32 val ?","title":"bytes4_to_u32"},{"location":"net-_OSSocket/#parameters_11","text":"b: Array [ U8 val] ref","title":"Parameters"},{"location":"net-_OSSocket/#returns_12","text":"U32 val ?","title":"Returns"},{"location":"net-_OSSocket/#u32_to_bytes4","text":"[Source] fun box u32_to_bytes4( option: U32 val) : Array[U8 val] ref","title":"u32_to_bytes4"},{"location":"net-_OSSocket/#parameters_12","text":"option: U32 val","title":"Parameters"},{"location":"net-_OSSocket/#returns_13","text":"Array [ U8 val] ref","title":"Returns"},{"location":"net-_OSSocket/#eq","text":"[Source] fun box eq( that: _OSSocket val) : Bool val","title":"eq"},{"location":"net-_OSSocket/#parameters_13","text":"that: _OSSocket val","title":"Parameters"},{"location":"net-_OSSocket/#returns_14","text":"Bool val","title":"Returns"},{"location":"net-_OSSocket/#ne","text":"[Source] fun box ne( that: _OSSocket val) : Bool val","title":"ne"},{"location":"net-_OSSocket/#parameters_14","text":"that: _OSSocket val","title":"Parameters"},{"location":"net-_OSSocket/#returns_15","text":"Bool val","title":"Returns"},{"location":"net-ssl--index/","text":"No package doc string provided for net/ssl. Public Types primitive X509 primitive SslAutoVersion primitive Ssl3Version primitive Tls1Version primitive Tls1u1Version primitive Tls1u2Version primitive Tls1u3Version primitive Dtls1Version primitive Dtls1u2Version primitive TlsMinVersion primitive TlsMaxVersion primitive DtlsMinVersion primitive DtlsMaxVersion class SSLContext class SSLConnection primitive SSLHandshake primitive SSLAuthFail primitive SSLReady primitive SSLError type SSLState class SSL interface ALPNProtocolNotify type ALPNProtocolName primitive ALPNFatal primitive ALPNNoAck primitive ALPNWarning type ALPNMatchResult interface ALPNProtocolResolver class ALPNStandardProtocolResolver Private Types primitive _X509Name primitive _GeneralName primitive _GeneralNameStack primitive _SSLContext primitive _SslCtrlSetOptions primitive _SslCtrlClearOptions primitive _SslOpNoSslV2 primitive _SslOpNoSslV3 primitive _SslOpNoTlsV1 primitive _SslOpNoTlsV1u2 primitive _SslOpNoTlsV1u1 primitive _SslOpNoTlsV1u3 primitive _SslOpNoDtlsV1 primitive _SslOpNoDtlsV1u2 primitive _SslOpNoSslMask primitive _SslOpNoDtlsMask primitive _SSL primitive _BIO primitive _ALPNMatchResultCode primitive _ALPNProtocolList primitive _SslCtrlSetMinProtoVersion primitive _SslCtrlSetMaxProtoVersion primitive _SslCtrlGetMinProtoVersion primitive _SslCtrlGetMaxProtoVersion primitive _OpenSslInitSettings primitive _OpenSslInitNoLoadSslStrings primitive _OpenSslInitLoadSslStrings primitive _OpenSslInitNoLoadCryptoStrings primitive _OpenSslInitLoadCryptoStrings primitive _SSLInit","title":"Package"},{"location":"net-ssl--index/#public-types","text":"primitive X509 primitive SslAutoVersion primitive Ssl3Version primitive Tls1Version primitive Tls1u1Version primitive Tls1u2Version primitive Tls1u3Version primitive Dtls1Version primitive Dtls1u2Version primitive TlsMinVersion primitive TlsMaxVersion primitive DtlsMinVersion primitive DtlsMaxVersion class SSLContext class SSLConnection primitive SSLHandshake primitive SSLAuthFail primitive SSLReady primitive SSLError type SSLState class SSL interface ALPNProtocolNotify type ALPNProtocolName primitive ALPNFatal primitive ALPNNoAck primitive ALPNWarning type ALPNMatchResult interface ALPNProtocolResolver class ALPNStandardProtocolResolver","title":"Public Types"},{"location":"net-ssl--index/#private-types","text":"primitive _X509Name primitive _GeneralName primitive _GeneralNameStack primitive _SSLContext primitive _SslCtrlSetOptions primitive _SslCtrlClearOptions primitive _SslOpNoSslV2 primitive _SslOpNoSslV3 primitive _SslOpNoTlsV1 primitive _SslOpNoTlsV1u2 primitive _SslOpNoTlsV1u1 primitive _SslOpNoTlsV1u3 primitive _SslOpNoDtlsV1 primitive _SslOpNoDtlsV1u2 primitive _SslOpNoSslMask primitive _SslOpNoDtlsMask primitive _SSL primitive _BIO primitive _ALPNMatchResultCode primitive _ALPNProtocolList primitive _SslCtrlSetMinProtoVersion primitive _SslCtrlSetMaxProtoVersion primitive _SslCtrlGetMinProtoVersion primitive _SslCtrlGetMaxProtoVersion primitive _OpenSslInitSettings primitive _OpenSslInitNoLoadSslStrings primitive _OpenSslInitLoadSslStrings primitive _OpenSslInitNoLoadCryptoStrings primitive _OpenSslInitLoadCryptoStrings primitive _SSLInit","title":"Private Types"},{"location":"net-ssl-ALPNFatal/","text":"ALPNFatal [Source] primitive val ALPNFatal Constructors create [Source] new val create() : ALPNFatal val^ Returns ALPNFatal val^ Public Functions eq [Source] fun box eq( that: ALPNFatal val) : Bool val Parameters that: ALPNFatal val Returns Bool val ne [Source] fun box ne( that: ALPNFatal val) : Bool val Parameters that: ALPNFatal val Returns Bool val","title":"primitive ALPNFatal"},{"location":"net-ssl-ALPNFatal/#alpnfatal","text":"[Source] primitive val ALPNFatal","title":"ALPNFatal"},{"location":"net-ssl-ALPNFatal/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-ALPNFatal/#create","text":"[Source] new val create() : ALPNFatal val^","title":"create"},{"location":"net-ssl-ALPNFatal/#returns","text":"ALPNFatal val^","title":"Returns"},{"location":"net-ssl-ALPNFatal/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-ALPNFatal/#eq","text":"[Source] fun box eq( that: ALPNFatal val) : Bool val","title":"eq"},{"location":"net-ssl-ALPNFatal/#parameters","text":"that: ALPNFatal val","title":"Parameters"},{"location":"net-ssl-ALPNFatal/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-ssl-ALPNFatal/#ne","text":"[Source] fun box ne( that: ALPNFatal val) : Bool val","title":"ne"},{"location":"net-ssl-ALPNFatal/#parameters_1","text":"that: ALPNFatal val","title":"Parameters"},{"location":"net-ssl-ALPNFatal/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-ALPNMatchResult/","text":"ALPNMatchResult [Source] type ALPNMatchResult is (String val | ALPNNoAck val | ALPNWarning val | ALPNFatal val) Type Alias For ( String val | ALPNNoAck val | ALPNWarning val | ALPNFatal val)","title":"type ALPNMatchResult"},{"location":"net-ssl-ALPNMatchResult/#alpnmatchresult","text":"[Source] type ALPNMatchResult is (String val | ALPNNoAck val | ALPNWarning val | ALPNFatal val)","title":"ALPNMatchResult"},{"location":"net-ssl-ALPNMatchResult/#type-alias-for","text":"( String val | ALPNNoAck val | ALPNWarning val | ALPNFatal val)","title":"Type Alias For"},{"location":"net-ssl-ALPNNoAck/","text":"ALPNNoAck [Source] primitive val ALPNNoAck Constructors create [Source] new val create() : ALPNNoAck val^ Returns ALPNNoAck val^ Public Functions eq [Source] fun box eq( that: ALPNNoAck val) : Bool val Parameters that: ALPNNoAck val Returns Bool val ne [Source] fun box ne( that: ALPNNoAck val) : Bool val Parameters that: ALPNNoAck val Returns Bool val","title":"primitive ALPNNoAck"},{"location":"net-ssl-ALPNNoAck/#alpnnoack","text":"[Source] primitive val ALPNNoAck","title":"ALPNNoAck"},{"location":"net-ssl-ALPNNoAck/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-ALPNNoAck/#create","text":"[Source] new val create() : ALPNNoAck val^","title":"create"},{"location":"net-ssl-ALPNNoAck/#returns","text":"ALPNNoAck val^","title":"Returns"},{"location":"net-ssl-ALPNNoAck/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-ALPNNoAck/#eq","text":"[Source] fun box eq( that: ALPNNoAck val) : Bool val","title":"eq"},{"location":"net-ssl-ALPNNoAck/#parameters","text":"that: ALPNNoAck val","title":"Parameters"},{"location":"net-ssl-ALPNNoAck/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-ssl-ALPNNoAck/#ne","text":"[Source] fun box ne( that: ALPNNoAck val) : Bool val","title":"ne"},{"location":"net-ssl-ALPNNoAck/#parameters_1","text":"that: ALPNNoAck val","title":"Parameters"},{"location":"net-ssl-ALPNNoAck/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-ALPNProtocolName/","text":"ALPNProtocolName [Source] type ALPNProtocolName is String val Type Alias For String val","title":"type ALPNProtocolName"},{"location":"net-ssl-ALPNProtocolName/#alpnprotocolname","text":"[Source] type ALPNProtocolName is String val","title":"ALPNProtocolName"},{"location":"net-ssl-ALPNProtocolName/#type-alias-for","text":"String val","title":"Type Alias For"},{"location":"net-ssl-ALPNProtocolNotify/","text":"ALPNProtocolNotify [Source] interface ref ALPNProtocolNotify Public Functions alpn_negotiated [Source] fun ref alpn_negotiated( conn: TCPConnection ref, protocol: (String val | None val)) : None val Parameters conn: TCPConnection ref protocol: ( String val | None val) Returns None val","title":"interface ALPNProtocolNotify"},{"location":"net-ssl-ALPNProtocolNotify/#alpnprotocolnotify","text":"[Source] interface ref ALPNProtocolNotify","title":"ALPNProtocolNotify"},{"location":"net-ssl-ALPNProtocolNotify/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-ALPNProtocolNotify/#alpn_negotiated","text":"[Source] fun ref alpn_negotiated( conn: TCPConnection ref, protocol: (String val | None val)) : None val","title":"alpn_negotiated"},{"location":"net-ssl-ALPNProtocolNotify/#parameters","text":"conn: TCPConnection ref protocol: ( String val | None val)","title":"Parameters"},{"location":"net-ssl-ALPNProtocolNotify/#returns","text":"None val","title":"Returns"},{"location":"net-ssl-ALPNProtocolResolver/","text":"ALPNProtocolResolver [Source] Controls the protocol name to be chosen for incomming SSLConnections using the ALPN extension. interface box ALPNProtocolResolver Public Functions resolve [Source] fun box resolve( advertised: Array[String val] val) : (String val | ALPNNoAck val | ALPNWarning val | ALPNFatal val) Parameters advertised: Array [ String val] val Returns ( String val | ALPNNoAck val | ALPNWarning val | ALPNFatal val)","title":"interface ALPNProtocolResolver"},{"location":"net-ssl-ALPNProtocolResolver/#alpnprotocolresolver","text":"[Source] Controls the protocol name to be chosen for incomming SSLConnections using the ALPN extension. interface box ALPNProtocolResolver","title":"ALPNProtocolResolver"},{"location":"net-ssl-ALPNProtocolResolver/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-ALPNProtocolResolver/#resolve","text":"[Source] fun box resolve( advertised: Array[String val] val) : (String val | ALPNNoAck val | ALPNWarning val | ALPNFatal val)","title":"resolve"},{"location":"net-ssl-ALPNProtocolResolver/#parameters","text":"advertised: Array [ String val] val","title":"Parameters"},{"location":"net-ssl-ALPNProtocolResolver/#returns","text":"( String val | ALPNNoAck val | ALPNWarning val | ALPNFatal val)","title":"Returns"},{"location":"net-ssl-ALPNStandardProtocolResolver/","text":"ALPNStandardProtocolResolver [Source] Implements the standard protocol selection akin to the OpenSSL function SSL_select_next_proto . class val ALPNStandardProtocolResolver is ALPNProtocolResolver box Implements ALPNProtocolResolver box Constructors create [Source] new val create( supported': Array[String val] val, use_client_as_fallback': Bool val = seq) : ALPNStandardProtocolResolver val^ Parameters supported': Array [ String val] val use_client_as_fallback': Bool val = seq Returns ALPNStandardProtocolResolver val^ Public fields let supported: Array [ String val] val [Source] let use_client_as_fallback: Bool val [Source] Public Functions resolve [Source] fun box resolve( advertised: Array[String val] val) : (String val | ALPNNoAck val | ALPNWarning val | ALPNFatal val) Parameters advertised: Array [ String val] val Returns ( String val | ALPNNoAck val | ALPNWarning val | ALPNFatal val)","title":"class ALPNStandardProtocolResolver"},{"location":"net-ssl-ALPNStandardProtocolResolver/#alpnstandardprotocolresolver","text":"[Source] Implements the standard protocol selection akin to the OpenSSL function SSL_select_next_proto . class val ALPNStandardProtocolResolver is ALPNProtocolResolver box","title":"ALPNStandardProtocolResolver"},{"location":"net-ssl-ALPNStandardProtocolResolver/#implements","text":"ALPNProtocolResolver box","title":"Implements"},{"location":"net-ssl-ALPNStandardProtocolResolver/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-ALPNStandardProtocolResolver/#create","text":"[Source] new val create( supported': Array[String val] val, use_client_as_fallback': Bool val = seq) : ALPNStandardProtocolResolver val^","title":"create"},{"location":"net-ssl-ALPNStandardProtocolResolver/#parameters","text":"supported': Array [ String val] val use_client_as_fallback': Bool val = seq","title":"Parameters"},{"location":"net-ssl-ALPNStandardProtocolResolver/#returns","text":"ALPNStandardProtocolResolver val^","title":"Returns"},{"location":"net-ssl-ALPNStandardProtocolResolver/#public-fields","text":"","title":"Public fields"},{"location":"net-ssl-ALPNStandardProtocolResolver/#let-supported-array91string-val93-val","text":"[Source]","title":"let supported: Array[String val] val"},{"location":"net-ssl-ALPNStandardProtocolResolver/#let-use_client_as_fallback-bool-val","text":"[Source]","title":"let use_client_as_fallback: Bool val"},{"location":"net-ssl-ALPNStandardProtocolResolver/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-ALPNStandardProtocolResolver/#resolve","text":"[Source] fun box resolve( advertised: Array[String val] val) : (String val | ALPNNoAck val | ALPNWarning val | ALPNFatal val)","title":"resolve"},{"location":"net-ssl-ALPNStandardProtocolResolver/#parameters_1","text":"advertised: Array [ String val] val","title":"Parameters"},{"location":"net-ssl-ALPNStandardProtocolResolver/#returns_1","text":"( String val | ALPNNoAck val | ALPNWarning val | ALPNFatal val)","title":"Returns"},{"location":"net-ssl-ALPNWarning/","text":"ALPNWarning [Source] primitive val ALPNWarning Constructors create [Source] new val create() : ALPNWarning val^ Returns ALPNWarning val^ Public Functions eq [Source] fun box eq( that: ALPNWarning val) : Bool val Parameters that: ALPNWarning val Returns Bool val ne [Source] fun box ne( that: ALPNWarning val) : Bool val Parameters that: ALPNWarning val Returns Bool val","title":"primitive ALPNWarning"},{"location":"net-ssl-ALPNWarning/#alpnwarning","text":"[Source] primitive val ALPNWarning","title":"ALPNWarning"},{"location":"net-ssl-ALPNWarning/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-ALPNWarning/#create","text":"[Source] new val create() : ALPNWarning val^","title":"create"},{"location":"net-ssl-ALPNWarning/#returns","text":"ALPNWarning val^","title":"Returns"},{"location":"net-ssl-ALPNWarning/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-ALPNWarning/#eq","text":"[Source] fun box eq( that: ALPNWarning val) : Bool val","title":"eq"},{"location":"net-ssl-ALPNWarning/#parameters","text":"that: ALPNWarning val","title":"Parameters"},{"location":"net-ssl-ALPNWarning/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-ssl-ALPNWarning/#ne","text":"[Source] fun box ne( that: ALPNWarning val) : Bool val","title":"ne"},{"location":"net-ssl-ALPNWarning/#parameters_1","text":"that: ALPNWarning val","title":"Parameters"},{"location":"net-ssl-ALPNWarning/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-Dtls1Version/","text":"Dtls1Version [Source] primitive val Dtls1Version Constructors create [Source] new val create() : Dtls1Version val^ Returns Dtls1Version val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: Dtls1Version val) : Bool val Parameters that: Dtls1Version val Returns Bool val ne [Source] fun box ne( that: Dtls1Version val) : Bool val Parameters that: Dtls1Version val Returns Bool val","title":"primitive Dtls1Version"},{"location":"net-ssl-Dtls1Version/#dtls1version","text":"[Source] primitive val Dtls1Version","title":"Dtls1Version"},{"location":"net-ssl-Dtls1Version/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-Dtls1Version/#create","text":"[Source] new val create() : Dtls1Version val^","title":"create"},{"location":"net-ssl-Dtls1Version/#returns","text":"Dtls1Version val^","title":"Returns"},{"location":"net-ssl-Dtls1Version/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-Dtls1Version/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-Dtls1Version/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-Dtls1Version/#eq","text":"[Source] fun box eq( that: Dtls1Version val) : Bool val","title":"eq"},{"location":"net-ssl-Dtls1Version/#parameters","text":"that: Dtls1Version val","title":"Parameters"},{"location":"net-ssl-Dtls1Version/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-Dtls1Version/#ne","text":"[Source] fun box ne( that: Dtls1Version val) : Bool val","title":"ne"},{"location":"net-ssl-Dtls1Version/#parameters_1","text":"that: Dtls1Version val","title":"Parameters"},{"location":"net-ssl-Dtls1Version/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-Dtls1u2Version/","text":"Dtls1u2Version [Source] primitive val Dtls1u2Version Constructors create [Source] new val create() : Dtls1u2Version val^ Returns Dtls1u2Version val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: Dtls1u2Version val) : Bool val Parameters that: Dtls1u2Version val Returns Bool val ne [Source] fun box ne( that: Dtls1u2Version val) : Bool val Parameters that: Dtls1u2Version val Returns Bool val","title":"primitive Dtls1u2Version"},{"location":"net-ssl-Dtls1u2Version/#dtls1u2version","text":"[Source] primitive val Dtls1u2Version","title":"Dtls1u2Version"},{"location":"net-ssl-Dtls1u2Version/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-Dtls1u2Version/#create","text":"[Source] new val create() : Dtls1u2Version val^","title":"create"},{"location":"net-ssl-Dtls1u2Version/#returns","text":"Dtls1u2Version val^","title":"Returns"},{"location":"net-ssl-Dtls1u2Version/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-Dtls1u2Version/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-Dtls1u2Version/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-Dtls1u2Version/#eq","text":"[Source] fun box eq( that: Dtls1u2Version val) : Bool val","title":"eq"},{"location":"net-ssl-Dtls1u2Version/#parameters","text":"that: Dtls1u2Version val","title":"Parameters"},{"location":"net-ssl-Dtls1u2Version/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-Dtls1u2Version/#ne","text":"[Source] fun box ne( that: Dtls1u2Version val) : Bool val","title":"ne"},{"location":"net-ssl-Dtls1u2Version/#parameters_1","text":"that: Dtls1u2Version val","title":"Parameters"},{"location":"net-ssl-Dtls1u2Version/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-DtlsMaxVersion/","text":"DtlsMaxVersion [Source] primitive val DtlsMaxVersion Constructors create [Source] new val create() : DtlsMaxVersion val^ Returns DtlsMaxVersion val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: DtlsMaxVersion val) : Bool val Parameters that: DtlsMaxVersion val Returns Bool val ne [Source] fun box ne( that: DtlsMaxVersion val) : Bool val Parameters that: DtlsMaxVersion val Returns Bool val","title":"primitive DtlsMaxVersion"},{"location":"net-ssl-DtlsMaxVersion/#dtlsmaxversion","text":"[Source] primitive val DtlsMaxVersion","title":"DtlsMaxVersion"},{"location":"net-ssl-DtlsMaxVersion/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-DtlsMaxVersion/#create","text":"[Source] new val create() : DtlsMaxVersion val^","title":"create"},{"location":"net-ssl-DtlsMaxVersion/#returns","text":"DtlsMaxVersion val^","title":"Returns"},{"location":"net-ssl-DtlsMaxVersion/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-DtlsMaxVersion/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-DtlsMaxVersion/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-DtlsMaxVersion/#eq","text":"[Source] fun box eq( that: DtlsMaxVersion val) : Bool val","title":"eq"},{"location":"net-ssl-DtlsMaxVersion/#parameters","text":"that: DtlsMaxVersion val","title":"Parameters"},{"location":"net-ssl-DtlsMaxVersion/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-DtlsMaxVersion/#ne","text":"[Source] fun box ne( that: DtlsMaxVersion val) : Bool val","title":"ne"},{"location":"net-ssl-DtlsMaxVersion/#parameters_1","text":"that: DtlsMaxVersion val","title":"Parameters"},{"location":"net-ssl-DtlsMaxVersion/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-DtlsMinVersion/","text":"DtlsMinVersion [Source] primitive val DtlsMinVersion Constructors create [Source] new val create() : DtlsMinVersion val^ Returns DtlsMinVersion val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: DtlsMinVersion val) : Bool val Parameters that: DtlsMinVersion val Returns Bool val ne [Source] fun box ne( that: DtlsMinVersion val) : Bool val Parameters that: DtlsMinVersion val Returns Bool val","title":"primitive DtlsMinVersion"},{"location":"net-ssl-DtlsMinVersion/#dtlsminversion","text":"[Source] primitive val DtlsMinVersion","title":"DtlsMinVersion"},{"location":"net-ssl-DtlsMinVersion/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-DtlsMinVersion/#create","text":"[Source] new val create() : DtlsMinVersion val^","title":"create"},{"location":"net-ssl-DtlsMinVersion/#returns","text":"DtlsMinVersion val^","title":"Returns"},{"location":"net-ssl-DtlsMinVersion/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-DtlsMinVersion/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-DtlsMinVersion/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-DtlsMinVersion/#eq","text":"[Source] fun box eq( that: DtlsMinVersion val) : Bool val","title":"eq"},{"location":"net-ssl-DtlsMinVersion/#parameters","text":"that: DtlsMinVersion val","title":"Parameters"},{"location":"net-ssl-DtlsMinVersion/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-DtlsMinVersion/#ne","text":"[Source] fun box ne( that: DtlsMinVersion val) : Bool val","title":"ne"},{"location":"net-ssl-DtlsMinVersion/#parameters_1","text":"that: DtlsMinVersion val","title":"Parameters"},{"location":"net-ssl-DtlsMinVersion/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-SSL/","text":"SSL [Source] An SSL session manages handshakes, encryption and decryption. It is not tied to any transport layer. class ref SSL Constructors _create [Source] Create a client or server SSL session from a context. new ref _create( ctx: Pointer[_SSLContext val] tag, server: Bool val, verify: Bool val, hostname: String val = seq) : SSL ref^ ? Parameters ctx: Pointer [ _SSLContext val] tag server: Bool val verify: Bool val hostname: String val = seq Returns SSL ref^ ? Public Functions alpn_selected [Source] Get the protocol identifier negotiated via ALPN fun box alpn_selected() : (String val | None val) Returns ( String val | None val) state [Source] Returns the SSL session state. fun box state() : (SSLHandshake val | SSLAuthFail val | SSLReady val | SSLError val) Returns ( SSLHandshake val | SSLAuthFail val | SSLReady val | SSLError val) read [Source] Returns unencrypted bytes to be passed to the application. If expect is non-zero, the number of bytes returned will be exactly expect . If no data (or less than expect bytes) is available, this returns None. fun ref read( expect: USize val = seq) : (Array[U8 val] iso^ | None val) Parameters expect: USize val = seq Returns ( Array [ U8 val] iso^ | None val) write [Source] When application data is sent, add it to the SSL session. Raises an error if the handshake is not complete. fun ref write( data: (String val | Array[U8 val] val)) : None val ? Parameters data: ( String val | Array [ U8 val] val) Returns None val ? receive [Source] When data is received, add it to the SSL session. fun ref receive( data: (String val | Array[U8 val] val)) : None val Parameters data: ( String val | Array [ U8 val] val) Returns None val can_send [Source] Returns true if there are encrypted bytes to be passed to the destination. fun ref can_send() : Bool val Returns Bool val send [Source] Returns encrypted bytes to be passed to the destination. Raises an error if no data is available. fun ref send() : Array[U8 val] iso^ ? Returns Array [ U8 val] iso^ ? dispose [Source] Dispose of the session. fun ref dispose() : None val Returns None val Private Functions _final [Source] Dispose of the session. fun box _final() : None val Returns None val _verify_hostname [Source] Verify that the certificate is valid for the given hostname. fun ref _verify_hostname() : None val Returns None val","title":"class SSL"},{"location":"net-ssl-SSL/#ssl","text":"[Source] An SSL session manages handshakes, encryption and decryption. It is not tied to any transport layer. class ref SSL","title":"SSL"},{"location":"net-ssl-SSL/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-SSL/#_create","text":"[Source] Create a client or server SSL session from a context. new ref _create( ctx: Pointer[_SSLContext val] tag, server: Bool val, verify: Bool val, hostname: String val = seq) : SSL ref^ ?","title":"_create"},{"location":"net-ssl-SSL/#parameters","text":"ctx: Pointer [ _SSLContext val] tag server: Bool val verify: Bool val hostname: String val = seq","title":"Parameters"},{"location":"net-ssl-SSL/#returns","text":"SSL ref^ ?","title":"Returns"},{"location":"net-ssl-SSL/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-SSL/#alpn_selected","text":"[Source] Get the protocol identifier negotiated via ALPN fun box alpn_selected() : (String val | None val)","title":"alpn_selected"},{"location":"net-ssl-SSL/#returns_1","text":"( String val | None val)","title":"Returns"},{"location":"net-ssl-SSL/#state","text":"[Source] Returns the SSL session state. fun box state() : (SSLHandshake val | SSLAuthFail val | SSLReady val | SSLError val)","title":"state"},{"location":"net-ssl-SSL/#returns_2","text":"( SSLHandshake val | SSLAuthFail val | SSLReady val | SSLError val)","title":"Returns"},{"location":"net-ssl-SSL/#read","text":"[Source] Returns unencrypted bytes to be passed to the application. If expect is non-zero, the number of bytes returned will be exactly expect . If no data (or less than expect bytes) is available, this returns None. fun ref read( expect: USize val = seq) : (Array[U8 val] iso^ | None val)","title":"read"},{"location":"net-ssl-SSL/#parameters_1","text":"expect: USize val = seq","title":"Parameters"},{"location":"net-ssl-SSL/#returns_3","text":"( Array [ U8 val] iso^ | None val)","title":"Returns"},{"location":"net-ssl-SSL/#write","text":"[Source] When application data is sent, add it to the SSL session. Raises an error if the handshake is not complete. fun ref write( data: (String val | Array[U8 val] val)) : None val ?","title":"write"},{"location":"net-ssl-SSL/#parameters_2","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"net-ssl-SSL/#returns_4","text":"None val ?","title":"Returns"},{"location":"net-ssl-SSL/#receive","text":"[Source] When data is received, add it to the SSL session. fun ref receive( data: (String val | Array[U8 val] val)) : None val","title":"receive"},{"location":"net-ssl-SSL/#parameters_3","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"net-ssl-SSL/#returns_5","text":"None val","title":"Returns"},{"location":"net-ssl-SSL/#can_send","text":"[Source] Returns true if there are encrypted bytes to be passed to the destination. fun ref can_send() : Bool val","title":"can_send"},{"location":"net-ssl-SSL/#returns_6","text":"Bool val","title":"Returns"},{"location":"net-ssl-SSL/#send","text":"[Source] Returns encrypted bytes to be passed to the destination. Raises an error if no data is available. fun ref send() : Array[U8 val] iso^ ?","title":"send"},{"location":"net-ssl-SSL/#returns_7","text":"Array [ U8 val] iso^ ?","title":"Returns"},{"location":"net-ssl-SSL/#dispose","text":"[Source] Dispose of the session. fun ref dispose() : None val","title":"dispose"},{"location":"net-ssl-SSL/#returns_8","text":"None val","title":"Returns"},{"location":"net-ssl-SSL/#private-functions","text":"","title":"Private Functions"},{"location":"net-ssl-SSL/#_final","text":"[Source] Dispose of the session. fun box _final() : None val","title":"_final"},{"location":"net-ssl-SSL/#returns_9","text":"None val","title":"Returns"},{"location":"net-ssl-SSL/#_verify_hostname","text":"[Source] Verify that the certificate is valid for the given hostname. fun ref _verify_hostname() : None val","title":"_verify_hostname"},{"location":"net-ssl-SSL/#returns_10","text":"None val","title":"Returns"},{"location":"net-ssl-SSLAuthFail/","text":"SSLAuthFail [Source] primitive val SSLAuthFail Constructors create [Source] new val create() : SSLAuthFail val^ Returns SSLAuthFail val^ Public Functions eq [Source] fun box eq( that: SSLAuthFail val) : Bool val Parameters that: SSLAuthFail val Returns Bool val ne [Source] fun box ne( that: SSLAuthFail val) : Bool val Parameters that: SSLAuthFail val Returns Bool val","title":"primitive SSLAuthFail"},{"location":"net-ssl-SSLAuthFail/#sslauthfail","text":"[Source] primitive val SSLAuthFail","title":"SSLAuthFail"},{"location":"net-ssl-SSLAuthFail/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-SSLAuthFail/#create","text":"[Source] new val create() : SSLAuthFail val^","title":"create"},{"location":"net-ssl-SSLAuthFail/#returns","text":"SSLAuthFail val^","title":"Returns"},{"location":"net-ssl-SSLAuthFail/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-SSLAuthFail/#eq","text":"[Source] fun box eq( that: SSLAuthFail val) : Bool val","title":"eq"},{"location":"net-ssl-SSLAuthFail/#parameters","text":"that: SSLAuthFail val","title":"Parameters"},{"location":"net-ssl-SSLAuthFail/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-ssl-SSLAuthFail/#ne","text":"[Source] fun box ne( that: SSLAuthFail val) : Bool val","title":"ne"},{"location":"net-ssl-SSLAuthFail/#parameters_1","text":"that: SSLAuthFail val","title":"Parameters"},{"location":"net-ssl-SSLAuthFail/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-SSLConnection/","text":"SSLConnection [Source] Wrap another protocol in an SSL connection. class ref SSLConnection is TCPConnectionNotify ref Implements TCPConnectionNotify ref Constructors create [Source] Initialise with a wrapped protocol and an SSL session. new iso create( notify: TCPConnectionNotify iso, ssl: SSL iso) : SSLConnection iso^ Parameters notify: TCPConnectionNotify iso ssl: SSL iso Returns SSLConnection iso^ Public Functions accepted [Source] Forward to the wrapped protocol. fun ref accepted( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val connecting [Source] Forward to the wrapped protocol. fun ref connecting( conn: TCPConnection ref, count: U32 val) : None val Parameters conn: TCPConnection ref count: U32 val Returns None val connected [Source] Swallow this event until the handshake is complete. fun ref connected( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val connect_failed [Source] Forward to the wrapped protocol. fun ref connect_failed( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val sent [Source] Pass the data to the SSL session and check for both new application data and new destination data. fun ref sent( conn: TCPConnection ref, data: (String val | Array[U8 val] val)) : (String val | Array[U8 val] val) Parameters conn: TCPConnection ref data: ( String val | Array [ U8 val] val) Returns ( String val | Array [ U8 val] val) sentv [Source] fun ref sentv( conn: TCPConnection ref, data: ByteSeqIter val) : ByteSeqIter val Parameters conn: TCPConnection ref data: ByteSeqIter val Returns ByteSeqIter val received [Source] Pass the data to the SSL session and check for both new application data and new destination data. fun ref received( conn: TCPConnection ref, data: Array[U8 val] iso, times: USize val) : Bool val Parameters conn: TCPConnection ref data: Array [ U8 val] iso times: USize val Returns Bool val expect [Source] Keep track of the expect count for the wrapped protocol. Always tell the TCPConnection to read all available data. fun ref expect( conn: TCPConnection ref, qty: USize val) : USize val Parameters conn: TCPConnection ref qty: USize val Returns USize val closed [Source] Forward to the wrapped protocol. fun ref closed( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val auth_failed [Source] fun ref auth_failed( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val throttled [Source] fun ref throttled( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val unthrottled [Source] fun ref unthrottled( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val Private Functions _poll [Source] Checks for both new application data and new destination data. Informs the wrapped protocol that is has connected when the handshake is complete. fun ref _poll( conn: TCPConnection ref) : None val Parameters conn: TCPConnection ref Returns None val","title":"class SSLConnection"},{"location":"net-ssl-SSLConnection/#sslconnection","text":"[Source] Wrap another protocol in an SSL connection. class ref SSLConnection is TCPConnectionNotify ref","title":"SSLConnection"},{"location":"net-ssl-SSLConnection/#implements","text":"TCPConnectionNotify ref","title":"Implements"},{"location":"net-ssl-SSLConnection/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-SSLConnection/#create","text":"[Source] Initialise with a wrapped protocol and an SSL session. new iso create( notify: TCPConnectionNotify iso, ssl: SSL iso) : SSLConnection iso^","title":"create"},{"location":"net-ssl-SSLConnection/#parameters","text":"notify: TCPConnectionNotify iso ssl: SSL iso","title":"Parameters"},{"location":"net-ssl-SSLConnection/#returns","text":"SSLConnection iso^","title":"Returns"},{"location":"net-ssl-SSLConnection/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-SSLConnection/#accepted","text":"[Source] Forward to the wrapped protocol. fun ref accepted( conn: TCPConnection ref) : None val","title":"accepted"},{"location":"net-ssl-SSLConnection/#parameters_1","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-ssl-SSLConnection/#returns_1","text":"None val","title":"Returns"},{"location":"net-ssl-SSLConnection/#connecting","text":"[Source] Forward to the wrapped protocol. fun ref connecting( conn: TCPConnection ref, count: U32 val) : None val","title":"connecting"},{"location":"net-ssl-SSLConnection/#parameters_2","text":"conn: TCPConnection ref count: U32 val","title":"Parameters"},{"location":"net-ssl-SSLConnection/#returns_2","text":"None val","title":"Returns"},{"location":"net-ssl-SSLConnection/#connected","text":"[Source] Swallow this event until the handshake is complete. fun ref connected( conn: TCPConnection ref) : None val","title":"connected"},{"location":"net-ssl-SSLConnection/#parameters_3","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-ssl-SSLConnection/#returns_3","text":"None val","title":"Returns"},{"location":"net-ssl-SSLConnection/#connect_failed","text":"[Source] Forward to the wrapped protocol. fun ref connect_failed( conn: TCPConnection ref) : None val","title":"connect_failed"},{"location":"net-ssl-SSLConnection/#parameters_4","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-ssl-SSLConnection/#returns_4","text":"None val","title":"Returns"},{"location":"net-ssl-SSLConnection/#sent","text":"[Source] Pass the data to the SSL session and check for both new application data and new destination data. fun ref sent( conn: TCPConnection ref, data: (String val | Array[U8 val] val)) : (String val | Array[U8 val] val)","title":"sent"},{"location":"net-ssl-SSLConnection/#parameters_5","text":"conn: TCPConnection ref data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"net-ssl-SSLConnection/#returns_5","text":"( String val | Array [ U8 val] val)","title":"Returns"},{"location":"net-ssl-SSLConnection/#sentv","text":"[Source] fun ref sentv( conn: TCPConnection ref, data: ByteSeqIter val) : ByteSeqIter val","title":"sentv"},{"location":"net-ssl-SSLConnection/#parameters_6","text":"conn: TCPConnection ref data: ByteSeqIter val","title":"Parameters"},{"location":"net-ssl-SSLConnection/#returns_6","text":"ByteSeqIter val","title":"Returns"},{"location":"net-ssl-SSLConnection/#received","text":"[Source] Pass the data to the SSL session and check for both new application data and new destination data. fun ref received( conn: TCPConnection ref, data: Array[U8 val] iso, times: USize val) : Bool val","title":"received"},{"location":"net-ssl-SSLConnection/#parameters_7","text":"conn: TCPConnection ref data: Array [ U8 val] iso times: USize val","title":"Parameters"},{"location":"net-ssl-SSLConnection/#returns_7","text":"Bool val","title":"Returns"},{"location":"net-ssl-SSLConnection/#expect","text":"[Source] Keep track of the expect count for the wrapped protocol. Always tell the TCPConnection to read all available data. fun ref expect( conn: TCPConnection ref, qty: USize val) : USize val","title":"expect"},{"location":"net-ssl-SSLConnection/#parameters_8","text":"conn: TCPConnection ref qty: USize val","title":"Parameters"},{"location":"net-ssl-SSLConnection/#returns_8","text":"USize val","title":"Returns"},{"location":"net-ssl-SSLConnection/#closed","text":"[Source] Forward to the wrapped protocol. fun ref closed( conn: TCPConnection ref) : None val","title":"closed"},{"location":"net-ssl-SSLConnection/#parameters_9","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-ssl-SSLConnection/#returns_9","text":"None val","title":"Returns"},{"location":"net-ssl-SSLConnection/#auth_failed","text":"[Source] fun ref auth_failed( conn: TCPConnection ref) : None val","title":"auth_failed"},{"location":"net-ssl-SSLConnection/#parameters_10","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-ssl-SSLConnection/#returns_10","text":"None val","title":"Returns"},{"location":"net-ssl-SSLConnection/#throttled","text":"[Source] fun ref throttled( conn: TCPConnection ref) : None val","title":"throttled"},{"location":"net-ssl-SSLConnection/#parameters_11","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-ssl-SSLConnection/#returns_11","text":"None val","title":"Returns"},{"location":"net-ssl-SSLConnection/#unthrottled","text":"[Source] fun ref unthrottled( conn: TCPConnection ref) : None val","title":"unthrottled"},{"location":"net-ssl-SSLConnection/#parameters_12","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-ssl-SSLConnection/#returns_12","text":"None val","title":"Returns"},{"location":"net-ssl-SSLConnection/#private-functions","text":"","title":"Private Functions"},{"location":"net-ssl-SSLConnection/#_poll","text":"[Source] Checks for both new application data and new destination data. Informs the wrapped protocol that is has connected when the handshake is complete. fun ref _poll( conn: TCPConnection ref) : None val","title":"_poll"},{"location":"net-ssl-SSLConnection/#parameters_13","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-ssl-SSLConnection/#returns_13","text":"None val","title":"Returns"},{"location":"net-ssl-SSLContext/","text":"SSLContext [Source] An SSL context is used to create SSL sessions. class val SSLContext Constructors create [Source] Create an SSL context. new ref create() : SSLContext ref^ Returns SSLContext ref^ Public Functions client [Source] Create a client-side SSL session. If a hostname is supplied, the server side certificate must be valid for that hostname. fun box client( hostname: String val = seq) : SSL iso^ ? Parameters hostname: String val = seq Returns SSL iso^ ? server [Source] Create a server-side SSL session. fun box server() : SSL iso^ ? Returns SSL iso^ ? set_cert [Source] The cert file is a PEM certificate chain. The key file is a private key. Servers must set this. For clients, it is optional. fun ref set_cert( cert: FilePath val, key: FilePath val) : None val ? Parameters cert: FilePath val key: FilePath val Returns None val ? set_authority [Source] Use a PEM file and/or a directory of PEM files to specify certificate authorities. Clients must set this. For servers, it is optional. Use None to indicate no file or no path. Raises an error if these verify locations aren't valid, or if both are None. fun ref set_authority( file: (FilePath val | None val), path: (FilePath val | None val) = seq) : None val ? Parameters file: ( FilePath val | None val) path: ( FilePath val | None val) = seq Returns None val ? set_ciphers [Source] Set the accepted ciphers. This replaces the existing list. Raises an error if the cipher list is invalid. fun ref set_ciphers( ciphers: String val) : None val ? Parameters ciphers: String val Returns None val ? set_client_verify [Source] Set to true to require verification. Defaults to true. fun ref set_client_verify( state: Bool val) : None val Parameters state: Bool val Returns None val set_server_verify [Source] Set to true to require verification. Defaults to false. fun ref set_server_verify( state: Bool val) : None val Parameters state: Bool val Returns None val set_verify_depth [Source] Set the verify depth. Defaults to 6. fun ref set_verify_depth( depth: U32 val) : None val Parameters depth: U32 val Returns None val set_min_proto_version [Source] Set minimum protocol version. Set to SslAutoVersion, 0, to automatically manage lowest version. Supported versions: Ssl3Version, Tls1Version, Tls1u1Version, Tls1u2Version, Tls1u3Version, Dtls1Version, Dtls1u2Version fun ref set_min_proto_version( version: ULong val) : None val ? Parameters version: ULong val Returns None val ? get_min_proto_version [Source] Get minimum protocol version. Returns SslAutoVersion, 0, when automatically managing lowest version. Supported versions: Ssl3Version, Tls1Version, Tls1u1Version, Tls1u2Version, Tls1u3Version, Dtls1Version, Dtls1u2Version fun ref get_min_proto_version() : ILong val Returns ILong val set_max_proto_version [Source] Set maximum protocol version. Set to SslAutoVersion, 0, to automatically manage higest version. Supported versions: Ssl3Version, Tls1Version, Tls1u1Version, Tls1u2Version, Tls1u3Version, Dtls1Version, Dtls1u2Version fun ref set_max_proto_version( version: ULong val) : None val ? Parameters version: ULong val Returns None val ? get_max_proto_version [Source] Get maximum protocol version. Returns SslAutoVersion, 0, when automatically managing highest version. Supported versions: Ssl3Version, Tls1Version, Tls1u1Version, Tls1u2Version, Tls1u3Version, Dtls1Version, Dtls1u2Version fun ref get_max_proto_version() : ILong val Returns ILong val alpn_set_resolver [Source] Use resolver to choose the protocol to be selected for incomming connections. Returns true on success Requires OpenSSL = 1.0.2 fun ref alpn_set_resolver( resolver: ALPNProtocolResolver box) : Bool val Parameters resolver: ALPNProtocolResolver box Returns Bool val alpn_set_client_protocols [Source] Configures the SSLContext to advertise the protocol names defined in protocols when connecting to a server protocol names must have a size of 1 to 255 Returns true on success Requires OpenSSL = 1.0.2 fun ref alpn_set_client_protocols( protocols: Array[String val] box) : Bool val Parameters protocols: Array [ String val] box Returns Bool val allow_tls_v1 [Source] Allow TLS v1. Defaults to false. Deprecated: use set_min_proto_version and set_max_proto_version fun ref allow_tls_v1( state: Bool val) : None val Parameters state: Bool val Returns None val allow_tls_v1_1 [Source] Allow TLS v1.1. Defaults to false. Deprecated: use set_min_proto_version and set_max_proto_version fun ref allow_tls_v1_1( state: Bool val) : None val Parameters state: Bool val Returns None val allow_tls_v1_2 [Source] Allow TLS v1.2. Defaults to true. Deprecated: use set_min_proto_version and set_max_proto_version fun ref allow_tls_v1_2( state: Bool val) : None val Parameters state: Bool val Returns None val dispose [Source] Free the SSL context. fun ref dispose() : None val Returns None val Private Functions _set_options [Source] fun box _set_options( opts: ULong val) : None val Parameters opts: ULong val Returns None val _clear_options [Source] fun box _clear_options( opts: ULong val) : None val Parameters opts: ULong val Returns None val _alpn_select_cb [Source] fun _alpn_select_cb( ssl: Pointer[_SSL val] tag, out: Pointer[Pointer[U8 val] tag] tag, outlen: Pointer[U8 val] tag, inptr: Pointer[U8 val] box, inlen: U32 val, resolver: ALPNProtocolResolver box) : I32 val Parameters ssl: Pointer [ _SSL val] tag out: Pointer [ Pointer [ U8 val] tag] tag outlen: Pointer [ U8 val] tag inptr: Pointer [ U8 val] box inlen: U32 val resolver: ALPNProtocolResolver box Returns I32 val _final [Source] Free the SSL context. fun box _final() : None val Returns None val","title":"class SSLContext"},{"location":"net-ssl-SSLContext/#sslcontext","text":"[Source] An SSL context is used to create SSL sessions. class val SSLContext","title":"SSLContext"},{"location":"net-ssl-SSLContext/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-SSLContext/#create","text":"[Source] Create an SSL context. new ref create() : SSLContext ref^","title":"create"},{"location":"net-ssl-SSLContext/#returns","text":"SSLContext ref^","title":"Returns"},{"location":"net-ssl-SSLContext/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-SSLContext/#client","text":"[Source] Create a client-side SSL session. If a hostname is supplied, the server side certificate must be valid for that hostname. fun box client( hostname: String val = seq) : SSL iso^ ?","title":"client"},{"location":"net-ssl-SSLContext/#parameters","text":"hostname: String val = seq","title":"Parameters"},{"location":"net-ssl-SSLContext/#returns_1","text":"SSL iso^ ?","title":"Returns"},{"location":"net-ssl-SSLContext/#server","text":"[Source] Create a server-side SSL session. fun box server() : SSL iso^ ?","title":"server"},{"location":"net-ssl-SSLContext/#returns_2","text":"SSL iso^ ?","title":"Returns"},{"location":"net-ssl-SSLContext/#set_cert","text":"[Source] The cert file is a PEM certificate chain. The key file is a private key. Servers must set this. For clients, it is optional. fun ref set_cert( cert: FilePath val, key: FilePath val) : None val ?","title":"set_cert"},{"location":"net-ssl-SSLContext/#parameters_1","text":"cert: FilePath val key: FilePath val","title":"Parameters"},{"location":"net-ssl-SSLContext/#returns_3","text":"None val ?","title":"Returns"},{"location":"net-ssl-SSLContext/#set_authority","text":"[Source] Use a PEM file and/or a directory of PEM files to specify certificate authorities. Clients must set this. For servers, it is optional. Use None to indicate no file or no path. Raises an error if these verify locations aren't valid, or if both are None. fun ref set_authority( file: (FilePath val | None val), path: (FilePath val | None val) = seq) : None val ?","title":"set_authority"},{"location":"net-ssl-SSLContext/#parameters_2","text":"file: ( FilePath val | None val) path: ( FilePath val | None val) = seq","title":"Parameters"},{"location":"net-ssl-SSLContext/#returns_4","text":"None val ?","title":"Returns"},{"location":"net-ssl-SSLContext/#set_ciphers","text":"[Source] Set the accepted ciphers. This replaces the existing list. Raises an error if the cipher list is invalid. fun ref set_ciphers( ciphers: String val) : None val ?","title":"set_ciphers"},{"location":"net-ssl-SSLContext/#parameters_3","text":"ciphers: String val","title":"Parameters"},{"location":"net-ssl-SSLContext/#returns_5","text":"None val ?","title":"Returns"},{"location":"net-ssl-SSLContext/#set_client_verify","text":"[Source] Set to true to require verification. Defaults to true. fun ref set_client_verify( state: Bool val) : None val","title":"set_client_verify"},{"location":"net-ssl-SSLContext/#parameters_4","text":"state: Bool val","title":"Parameters"},{"location":"net-ssl-SSLContext/#returns_6","text":"None val","title":"Returns"},{"location":"net-ssl-SSLContext/#set_server_verify","text":"[Source] Set to true to require verification. Defaults to false. fun ref set_server_verify( state: Bool val) : None val","title":"set_server_verify"},{"location":"net-ssl-SSLContext/#parameters_5","text":"state: Bool val","title":"Parameters"},{"location":"net-ssl-SSLContext/#returns_7","text":"None val","title":"Returns"},{"location":"net-ssl-SSLContext/#set_verify_depth","text":"[Source] Set the verify depth. Defaults to 6. fun ref set_verify_depth( depth: U32 val) : None val","title":"set_verify_depth"},{"location":"net-ssl-SSLContext/#parameters_6","text":"depth: U32 val","title":"Parameters"},{"location":"net-ssl-SSLContext/#returns_8","text":"None val","title":"Returns"},{"location":"net-ssl-SSLContext/#set_min_proto_version","text":"[Source] Set minimum protocol version. Set to SslAutoVersion, 0, to automatically manage lowest version. Supported versions: Ssl3Version, Tls1Version, Tls1u1Version, Tls1u2Version, Tls1u3Version, Dtls1Version, Dtls1u2Version fun ref set_min_proto_version( version: ULong val) : None val ?","title":"set_min_proto_version"},{"location":"net-ssl-SSLContext/#parameters_7","text":"version: ULong val","title":"Parameters"},{"location":"net-ssl-SSLContext/#returns_9","text":"None val ?","title":"Returns"},{"location":"net-ssl-SSLContext/#get_min_proto_version","text":"[Source] Get minimum protocol version. Returns SslAutoVersion, 0, when automatically managing lowest version. Supported versions: Ssl3Version, Tls1Version, Tls1u1Version, Tls1u2Version, Tls1u3Version, Dtls1Version, Dtls1u2Version fun ref get_min_proto_version() : ILong val","title":"get_min_proto_version"},{"location":"net-ssl-SSLContext/#returns_10","text":"ILong val","title":"Returns"},{"location":"net-ssl-SSLContext/#set_max_proto_version","text":"[Source] Set maximum protocol version. Set to SslAutoVersion, 0, to automatically manage higest version. Supported versions: Ssl3Version, Tls1Version, Tls1u1Version, Tls1u2Version, Tls1u3Version, Dtls1Version, Dtls1u2Version fun ref set_max_proto_version( version: ULong val) : None val ?","title":"set_max_proto_version"},{"location":"net-ssl-SSLContext/#parameters_8","text":"version: ULong val","title":"Parameters"},{"location":"net-ssl-SSLContext/#returns_11","text":"None val ?","title":"Returns"},{"location":"net-ssl-SSLContext/#get_max_proto_version","text":"[Source] Get maximum protocol version. Returns SslAutoVersion, 0, when automatically managing highest version. Supported versions: Ssl3Version, Tls1Version, Tls1u1Version, Tls1u2Version, Tls1u3Version, Dtls1Version, Dtls1u2Version fun ref get_max_proto_version() : ILong val","title":"get_max_proto_version"},{"location":"net-ssl-SSLContext/#returns_12","text":"ILong val","title":"Returns"},{"location":"net-ssl-SSLContext/#alpn_set_resolver","text":"[Source] Use resolver to choose the protocol to be selected for incomming connections. Returns true on success Requires OpenSSL = 1.0.2 fun ref alpn_set_resolver( resolver: ALPNProtocolResolver box) : Bool val","title":"alpn_set_resolver"},{"location":"net-ssl-SSLContext/#parameters_9","text":"resolver: ALPNProtocolResolver box","title":"Parameters"},{"location":"net-ssl-SSLContext/#returns_13","text":"Bool val","title":"Returns"},{"location":"net-ssl-SSLContext/#alpn_set_client_protocols","text":"[Source] Configures the SSLContext to advertise the protocol names defined in protocols when connecting to a server protocol names must have a size of 1 to 255 Returns true on success Requires OpenSSL = 1.0.2 fun ref alpn_set_client_protocols( protocols: Array[String val] box) : Bool val","title":"alpn_set_client_protocols"},{"location":"net-ssl-SSLContext/#parameters_10","text":"protocols: Array [ String val] box","title":"Parameters"},{"location":"net-ssl-SSLContext/#returns_14","text":"Bool val","title":"Returns"},{"location":"net-ssl-SSLContext/#allow_tls_v1","text":"[Source] Allow TLS v1. Defaults to false. Deprecated: use set_min_proto_version and set_max_proto_version fun ref allow_tls_v1( state: Bool val) : None val","title":"allow_tls_v1"},{"location":"net-ssl-SSLContext/#parameters_11","text":"state: Bool val","title":"Parameters"},{"location":"net-ssl-SSLContext/#returns_15","text":"None val","title":"Returns"},{"location":"net-ssl-SSLContext/#allow_tls_v1_1","text":"[Source] Allow TLS v1.1. Defaults to false. Deprecated: use set_min_proto_version and set_max_proto_version fun ref allow_tls_v1_1( state: Bool val) : None val","title":"allow_tls_v1_1"},{"location":"net-ssl-SSLContext/#parameters_12","text":"state: Bool val","title":"Parameters"},{"location":"net-ssl-SSLContext/#returns_16","text":"None val","title":"Returns"},{"location":"net-ssl-SSLContext/#allow_tls_v1_2","text":"[Source] Allow TLS v1.2. Defaults to true. Deprecated: use set_min_proto_version and set_max_proto_version fun ref allow_tls_v1_2( state: Bool val) : None val","title":"allow_tls_v1_2"},{"location":"net-ssl-SSLContext/#parameters_13","text":"state: Bool val","title":"Parameters"},{"location":"net-ssl-SSLContext/#returns_17","text":"None val","title":"Returns"},{"location":"net-ssl-SSLContext/#dispose","text":"[Source] Free the SSL context. fun ref dispose() : None val","title":"dispose"},{"location":"net-ssl-SSLContext/#returns_18","text":"None val","title":"Returns"},{"location":"net-ssl-SSLContext/#private-functions","text":"","title":"Private Functions"},{"location":"net-ssl-SSLContext/#_set_options","text":"[Source] fun box _set_options( opts: ULong val) : None val","title":"_set_options"},{"location":"net-ssl-SSLContext/#parameters_14","text":"opts: ULong val","title":"Parameters"},{"location":"net-ssl-SSLContext/#returns_19","text":"None val","title":"Returns"},{"location":"net-ssl-SSLContext/#_clear_options","text":"[Source] fun box _clear_options( opts: ULong val) : None val","title":"_clear_options"},{"location":"net-ssl-SSLContext/#parameters_15","text":"opts: ULong val","title":"Parameters"},{"location":"net-ssl-SSLContext/#returns_20","text":"None val","title":"Returns"},{"location":"net-ssl-SSLContext/#_alpn_select_cb","text":"[Source] fun _alpn_select_cb( ssl: Pointer[_SSL val] tag, out: Pointer[Pointer[U8 val] tag] tag, outlen: Pointer[U8 val] tag, inptr: Pointer[U8 val] box, inlen: U32 val, resolver: ALPNProtocolResolver box) : I32 val","title":"_alpn_select_cb"},{"location":"net-ssl-SSLContext/#parameters_16","text":"ssl: Pointer [ _SSL val] tag out: Pointer [ Pointer [ U8 val] tag] tag outlen: Pointer [ U8 val] tag inptr: Pointer [ U8 val] box inlen: U32 val resolver: ALPNProtocolResolver box","title":"Parameters"},{"location":"net-ssl-SSLContext/#returns_21","text":"I32 val","title":"Returns"},{"location":"net-ssl-SSLContext/#_final","text":"[Source] Free the SSL context. fun box _final() : None val","title":"_final"},{"location":"net-ssl-SSLContext/#returns_22","text":"None val","title":"Returns"},{"location":"net-ssl-SSLError/","text":"SSLError [Source] primitive val SSLError Constructors create [Source] new val create() : SSLError val^ Returns SSLError val^ Public Functions eq [Source] fun box eq( that: SSLError val) : Bool val Parameters that: SSLError val Returns Bool val ne [Source] fun box ne( that: SSLError val) : Bool val Parameters that: SSLError val Returns Bool val","title":"primitive SSLError"},{"location":"net-ssl-SSLError/#sslerror","text":"[Source] primitive val SSLError","title":"SSLError"},{"location":"net-ssl-SSLError/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-SSLError/#create","text":"[Source] new val create() : SSLError val^","title":"create"},{"location":"net-ssl-SSLError/#returns","text":"SSLError val^","title":"Returns"},{"location":"net-ssl-SSLError/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-SSLError/#eq","text":"[Source] fun box eq( that: SSLError val) : Bool val","title":"eq"},{"location":"net-ssl-SSLError/#parameters","text":"that: SSLError val","title":"Parameters"},{"location":"net-ssl-SSLError/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-ssl-SSLError/#ne","text":"[Source] fun box ne( that: SSLError val) : Bool val","title":"ne"},{"location":"net-ssl-SSLError/#parameters_1","text":"that: SSLError val","title":"Parameters"},{"location":"net-ssl-SSLError/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-SSLHandshake/","text":"SSLHandshake [Source] primitive val SSLHandshake Constructors create [Source] new val create() : SSLHandshake val^ Returns SSLHandshake val^ Public Functions eq [Source] fun box eq( that: SSLHandshake val) : Bool val Parameters that: SSLHandshake val Returns Bool val ne [Source] fun box ne( that: SSLHandshake val) : Bool val Parameters that: SSLHandshake val Returns Bool val","title":"primitive SSLHandshake"},{"location":"net-ssl-SSLHandshake/#sslhandshake","text":"[Source] primitive val SSLHandshake","title":"SSLHandshake"},{"location":"net-ssl-SSLHandshake/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-SSLHandshake/#create","text":"[Source] new val create() : SSLHandshake val^","title":"create"},{"location":"net-ssl-SSLHandshake/#returns","text":"SSLHandshake val^","title":"Returns"},{"location":"net-ssl-SSLHandshake/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-SSLHandshake/#eq","text":"[Source] fun box eq( that: SSLHandshake val) : Bool val","title":"eq"},{"location":"net-ssl-SSLHandshake/#parameters","text":"that: SSLHandshake val","title":"Parameters"},{"location":"net-ssl-SSLHandshake/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-ssl-SSLHandshake/#ne","text":"[Source] fun box ne( that: SSLHandshake val) : Bool val","title":"ne"},{"location":"net-ssl-SSLHandshake/#parameters_1","text":"that: SSLHandshake val","title":"Parameters"},{"location":"net-ssl-SSLHandshake/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-SSLReady/","text":"SSLReady [Source] primitive val SSLReady Constructors create [Source] new val create() : SSLReady val^ Returns SSLReady val^ Public Functions eq [Source] fun box eq( that: SSLReady val) : Bool val Parameters that: SSLReady val Returns Bool val ne [Source] fun box ne( that: SSLReady val) : Bool val Parameters that: SSLReady val Returns Bool val","title":"primitive SSLReady"},{"location":"net-ssl-SSLReady/#sslready","text":"[Source] primitive val SSLReady","title":"SSLReady"},{"location":"net-ssl-SSLReady/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-SSLReady/#create","text":"[Source] new val create() : SSLReady val^","title":"create"},{"location":"net-ssl-SSLReady/#returns","text":"SSLReady val^","title":"Returns"},{"location":"net-ssl-SSLReady/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-SSLReady/#eq","text":"[Source] fun box eq( that: SSLReady val) : Bool val","title":"eq"},{"location":"net-ssl-SSLReady/#parameters","text":"that: SSLReady val","title":"Parameters"},{"location":"net-ssl-SSLReady/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-ssl-SSLReady/#ne","text":"[Source] fun box ne( that: SSLReady val) : Bool val","title":"ne"},{"location":"net-ssl-SSLReady/#parameters_1","text":"that: SSLReady val","title":"Parameters"},{"location":"net-ssl-SSLReady/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-SSLState/","text":"SSLState [Source] type SSLState is (SSLHandshake val | SSLAuthFail val | SSLReady val | SSLError val) Type Alias For ( SSLHandshake val | SSLAuthFail val | SSLReady val | SSLError val)","title":"type SSLState"},{"location":"net-ssl-SSLState/#sslstate","text":"[Source] type SSLState is (SSLHandshake val | SSLAuthFail val | SSLReady val | SSLError val)","title":"SSLState"},{"location":"net-ssl-SSLState/#type-alias-for","text":"( SSLHandshake val | SSLAuthFail val | SSLReady val | SSLError val)","title":"Type Alias For"},{"location":"net-ssl-Ssl3Version/","text":"Ssl3Version [Source] primitive val Ssl3Version Constructors create [Source] new val create() : Ssl3Version val^ Returns Ssl3Version val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: Ssl3Version val) : Bool val Parameters that: Ssl3Version val Returns Bool val ne [Source] fun box ne( that: Ssl3Version val) : Bool val Parameters that: Ssl3Version val Returns Bool val","title":"primitive Ssl3Version"},{"location":"net-ssl-Ssl3Version/#ssl3version","text":"[Source] primitive val Ssl3Version","title":"Ssl3Version"},{"location":"net-ssl-Ssl3Version/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-Ssl3Version/#create","text":"[Source] new val create() : Ssl3Version val^","title":"create"},{"location":"net-ssl-Ssl3Version/#returns","text":"Ssl3Version val^","title":"Returns"},{"location":"net-ssl-Ssl3Version/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-Ssl3Version/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-Ssl3Version/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-Ssl3Version/#eq","text":"[Source] fun box eq( that: Ssl3Version val) : Bool val","title":"eq"},{"location":"net-ssl-Ssl3Version/#parameters","text":"that: Ssl3Version val","title":"Parameters"},{"location":"net-ssl-Ssl3Version/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-Ssl3Version/#ne","text":"[Source] fun box ne( that: Ssl3Version val) : Bool val","title":"ne"},{"location":"net-ssl-Ssl3Version/#parameters_1","text":"that: Ssl3Version val","title":"Parameters"},{"location":"net-ssl-Ssl3Version/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-SslAutoVersion/","text":"SslAutoVersion [Source] primitive val SslAutoVersion Constructors create [Source] new val create() : SslAutoVersion val^ Returns SslAutoVersion val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: SslAutoVersion val) : Bool val Parameters that: SslAutoVersion val Returns Bool val ne [Source] fun box ne( that: SslAutoVersion val) : Bool val Parameters that: SslAutoVersion val Returns Bool val","title":"primitive SslAutoVersion"},{"location":"net-ssl-SslAutoVersion/#sslautoversion","text":"[Source] primitive val SslAutoVersion","title":"SslAutoVersion"},{"location":"net-ssl-SslAutoVersion/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-SslAutoVersion/#create","text":"[Source] new val create() : SslAutoVersion val^","title":"create"},{"location":"net-ssl-SslAutoVersion/#returns","text":"SslAutoVersion val^","title":"Returns"},{"location":"net-ssl-SslAutoVersion/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-SslAutoVersion/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-SslAutoVersion/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-SslAutoVersion/#eq","text":"[Source] fun box eq( that: SslAutoVersion val) : Bool val","title":"eq"},{"location":"net-ssl-SslAutoVersion/#parameters","text":"that: SslAutoVersion val","title":"Parameters"},{"location":"net-ssl-SslAutoVersion/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-SslAutoVersion/#ne","text":"[Source] fun box ne( that: SslAutoVersion val) : Bool val","title":"ne"},{"location":"net-ssl-SslAutoVersion/#parameters_1","text":"that: SslAutoVersion val","title":"Parameters"},{"location":"net-ssl-SslAutoVersion/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-Tls1Version/","text":"Tls1Version [Source] primitive val Tls1Version Constructors create [Source] new val create() : Tls1Version val^ Returns Tls1Version val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: Tls1Version val) : Bool val Parameters that: Tls1Version val Returns Bool val ne [Source] fun box ne( that: Tls1Version val) : Bool val Parameters that: Tls1Version val Returns Bool val","title":"primitive Tls1Version"},{"location":"net-ssl-Tls1Version/#tls1version","text":"[Source] primitive val Tls1Version","title":"Tls1Version"},{"location":"net-ssl-Tls1Version/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-Tls1Version/#create","text":"[Source] new val create() : Tls1Version val^","title":"create"},{"location":"net-ssl-Tls1Version/#returns","text":"Tls1Version val^","title":"Returns"},{"location":"net-ssl-Tls1Version/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-Tls1Version/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-Tls1Version/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-Tls1Version/#eq","text":"[Source] fun box eq( that: Tls1Version val) : Bool val","title":"eq"},{"location":"net-ssl-Tls1Version/#parameters","text":"that: Tls1Version val","title":"Parameters"},{"location":"net-ssl-Tls1Version/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-Tls1Version/#ne","text":"[Source] fun box ne( that: Tls1Version val) : Bool val","title":"ne"},{"location":"net-ssl-Tls1Version/#parameters_1","text":"that: Tls1Version val","title":"Parameters"},{"location":"net-ssl-Tls1Version/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-Tls1u1Version/","text":"Tls1u1Version [Source] primitive val Tls1u1Version Constructors create [Source] new val create() : Tls1u1Version val^ Returns Tls1u1Version val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: Tls1u1Version val) : Bool val Parameters that: Tls1u1Version val Returns Bool val ne [Source] fun box ne( that: Tls1u1Version val) : Bool val Parameters that: Tls1u1Version val Returns Bool val","title":"primitive Tls1u1Version"},{"location":"net-ssl-Tls1u1Version/#tls1u1version","text":"[Source] primitive val Tls1u1Version","title":"Tls1u1Version"},{"location":"net-ssl-Tls1u1Version/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-Tls1u1Version/#create","text":"[Source] new val create() : Tls1u1Version val^","title":"create"},{"location":"net-ssl-Tls1u1Version/#returns","text":"Tls1u1Version val^","title":"Returns"},{"location":"net-ssl-Tls1u1Version/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-Tls1u1Version/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-Tls1u1Version/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-Tls1u1Version/#eq","text":"[Source] fun box eq( that: Tls1u1Version val) : Bool val","title":"eq"},{"location":"net-ssl-Tls1u1Version/#parameters","text":"that: Tls1u1Version val","title":"Parameters"},{"location":"net-ssl-Tls1u1Version/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-Tls1u1Version/#ne","text":"[Source] fun box ne( that: Tls1u1Version val) : Bool val","title":"ne"},{"location":"net-ssl-Tls1u1Version/#parameters_1","text":"that: Tls1u1Version val","title":"Parameters"},{"location":"net-ssl-Tls1u1Version/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-Tls1u2Version/","text":"Tls1u2Version [Source] primitive val Tls1u2Version Constructors create [Source] new val create() : Tls1u2Version val^ Returns Tls1u2Version val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: Tls1u2Version val) : Bool val Parameters that: Tls1u2Version val Returns Bool val ne [Source] fun box ne( that: Tls1u2Version val) : Bool val Parameters that: Tls1u2Version val Returns Bool val","title":"primitive Tls1u2Version"},{"location":"net-ssl-Tls1u2Version/#tls1u2version","text":"[Source] primitive val Tls1u2Version","title":"Tls1u2Version"},{"location":"net-ssl-Tls1u2Version/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-Tls1u2Version/#create","text":"[Source] new val create() : Tls1u2Version val^","title":"create"},{"location":"net-ssl-Tls1u2Version/#returns","text":"Tls1u2Version val^","title":"Returns"},{"location":"net-ssl-Tls1u2Version/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-Tls1u2Version/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-Tls1u2Version/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-Tls1u2Version/#eq","text":"[Source] fun box eq( that: Tls1u2Version val) : Bool val","title":"eq"},{"location":"net-ssl-Tls1u2Version/#parameters","text":"that: Tls1u2Version val","title":"Parameters"},{"location":"net-ssl-Tls1u2Version/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-Tls1u2Version/#ne","text":"[Source] fun box ne( that: Tls1u2Version val) : Bool val","title":"ne"},{"location":"net-ssl-Tls1u2Version/#parameters_1","text":"that: Tls1u2Version val","title":"Parameters"},{"location":"net-ssl-Tls1u2Version/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-Tls1u3Version/","text":"Tls1u3Version [Source] primitive val Tls1u3Version Constructors create [Source] new val create() : Tls1u3Version val^ Returns Tls1u3Version val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: Tls1u3Version val) : Bool val Parameters that: Tls1u3Version val Returns Bool val ne [Source] fun box ne( that: Tls1u3Version val) : Bool val Parameters that: Tls1u3Version val Returns Bool val","title":"primitive Tls1u3Version"},{"location":"net-ssl-Tls1u3Version/#tls1u3version","text":"[Source] primitive val Tls1u3Version","title":"Tls1u3Version"},{"location":"net-ssl-Tls1u3Version/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-Tls1u3Version/#create","text":"[Source] new val create() : Tls1u3Version val^","title":"create"},{"location":"net-ssl-Tls1u3Version/#returns","text":"Tls1u3Version val^","title":"Returns"},{"location":"net-ssl-Tls1u3Version/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-Tls1u3Version/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-Tls1u3Version/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-Tls1u3Version/#eq","text":"[Source] fun box eq( that: Tls1u3Version val) : Bool val","title":"eq"},{"location":"net-ssl-Tls1u3Version/#parameters","text":"that: Tls1u3Version val","title":"Parameters"},{"location":"net-ssl-Tls1u3Version/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-Tls1u3Version/#ne","text":"[Source] fun box ne( that: Tls1u3Version val) : Bool val","title":"ne"},{"location":"net-ssl-Tls1u3Version/#parameters_1","text":"that: Tls1u3Version val","title":"Parameters"},{"location":"net-ssl-Tls1u3Version/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-TlsMaxVersion/","text":"TlsMaxVersion [Source] primitive val TlsMaxVersion Constructors create [Source] new val create() : TlsMaxVersion val^ Returns TlsMaxVersion val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: TlsMaxVersion val) : Bool val Parameters that: TlsMaxVersion val Returns Bool val ne [Source] fun box ne( that: TlsMaxVersion val) : Bool val Parameters that: TlsMaxVersion val Returns Bool val","title":"primitive TlsMaxVersion"},{"location":"net-ssl-TlsMaxVersion/#tlsmaxversion","text":"[Source] primitive val TlsMaxVersion","title":"TlsMaxVersion"},{"location":"net-ssl-TlsMaxVersion/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-TlsMaxVersion/#create","text":"[Source] new val create() : TlsMaxVersion val^","title":"create"},{"location":"net-ssl-TlsMaxVersion/#returns","text":"TlsMaxVersion val^","title":"Returns"},{"location":"net-ssl-TlsMaxVersion/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-TlsMaxVersion/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-TlsMaxVersion/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-TlsMaxVersion/#eq","text":"[Source] fun box eq( that: TlsMaxVersion val) : Bool val","title":"eq"},{"location":"net-ssl-TlsMaxVersion/#parameters","text":"that: TlsMaxVersion val","title":"Parameters"},{"location":"net-ssl-TlsMaxVersion/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-TlsMaxVersion/#ne","text":"[Source] fun box ne( that: TlsMaxVersion val) : Bool val","title":"ne"},{"location":"net-ssl-TlsMaxVersion/#parameters_1","text":"that: TlsMaxVersion val","title":"Parameters"},{"location":"net-ssl-TlsMaxVersion/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-TlsMinVersion/","text":"TlsMinVersion [Source] primitive val TlsMinVersion Constructors create [Source] new val create() : TlsMinVersion val^ Returns TlsMinVersion val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: TlsMinVersion val) : Bool val Parameters that: TlsMinVersion val Returns Bool val ne [Source] fun box ne( that: TlsMinVersion val) : Bool val Parameters that: TlsMinVersion val Returns Bool val","title":"primitive TlsMinVersion"},{"location":"net-ssl-TlsMinVersion/#tlsminversion","text":"[Source] primitive val TlsMinVersion","title":"TlsMinVersion"},{"location":"net-ssl-TlsMinVersion/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-TlsMinVersion/#create","text":"[Source] new val create() : TlsMinVersion val^","title":"create"},{"location":"net-ssl-TlsMinVersion/#returns","text":"TlsMinVersion val^","title":"Returns"},{"location":"net-ssl-TlsMinVersion/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-TlsMinVersion/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-TlsMinVersion/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-TlsMinVersion/#eq","text":"[Source] fun box eq( that: TlsMinVersion val) : Bool val","title":"eq"},{"location":"net-ssl-TlsMinVersion/#parameters","text":"that: TlsMinVersion val","title":"Parameters"},{"location":"net-ssl-TlsMinVersion/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-TlsMinVersion/#ne","text":"[Source] fun box ne( that: TlsMinVersion val) : Bool val","title":"ne"},{"location":"net-ssl-TlsMinVersion/#parameters_1","text":"that: TlsMinVersion val","title":"Parameters"},{"location":"net-ssl-TlsMinVersion/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-X509/","text":"X509 [Source] primitive val X509 Constructors create [Source] new val create() : X509 val^ Returns X509 val^ Public Functions valid_for_host [Source] Checks if an OpenSSL X509 certificate is valid for a given host. fun box valid_for_host( cert: Pointer[X509 val] ref, host: String val) : Bool val Parameters cert: Pointer [ X509 val] ref host: String val Returns Bool val common_name [Source] Get the common name for the certificate. Raises an error if the common name contains any NULL bytes. fun box common_name( cert: Pointer[X509 val] ref) : String val ? Parameters cert: Pointer [ X509 val] ref Returns String val ? all_names [Source] Returns an array of all names for the certificate. Any names containing NULL bytes are not included. This includes the common name and all subject alternate names. fun box all_names( cert: Pointer[X509 val] ref) : Array[String val] val Parameters cert: Pointer [ X509 val] ref Returns Array [ String val] val eq [Source] fun box eq( that: X509 val) : Bool val Parameters that: X509 val Returns Bool val ne [Source] fun box ne( that: X509 val) : Bool val Parameters that: X509 val Returns Bool val Private Functions _match_name [Source] Returns true if the name extracted from the certificate is valid for the given host. fun box _match_name( host: String val, name: String val) : Bool val Parameters host: String val name: String val Returns Bool val","title":"primitive X509"},{"location":"net-ssl-X509/#x509","text":"[Source] primitive val X509","title":"X509"},{"location":"net-ssl-X509/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-X509/#create","text":"[Source] new val create() : X509 val^","title":"create"},{"location":"net-ssl-X509/#returns","text":"X509 val^","title":"Returns"},{"location":"net-ssl-X509/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-X509/#valid_for_host","text":"[Source] Checks if an OpenSSL X509 certificate is valid for a given host. fun box valid_for_host( cert: Pointer[X509 val] ref, host: String val) : Bool val","title":"valid_for_host"},{"location":"net-ssl-X509/#parameters","text":"cert: Pointer [ X509 val] ref host: String val","title":"Parameters"},{"location":"net-ssl-X509/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-ssl-X509/#common_name","text":"[Source] Get the common name for the certificate. Raises an error if the common name contains any NULL bytes. fun box common_name( cert: Pointer[X509 val] ref) : String val ?","title":"common_name"},{"location":"net-ssl-X509/#parameters_1","text":"cert: Pointer [ X509 val] ref","title":"Parameters"},{"location":"net-ssl-X509/#returns_2","text":"String val ?","title":"Returns"},{"location":"net-ssl-X509/#all_names","text":"[Source] Returns an array of all names for the certificate. Any names containing NULL bytes are not included. This includes the common name and all subject alternate names. fun box all_names( cert: Pointer[X509 val] ref) : Array[String val] val","title":"all_names"},{"location":"net-ssl-X509/#parameters_2","text":"cert: Pointer [ X509 val] ref","title":"Parameters"},{"location":"net-ssl-X509/#returns_3","text":"Array [ String val] val","title":"Returns"},{"location":"net-ssl-X509/#eq","text":"[Source] fun box eq( that: X509 val) : Bool val","title":"eq"},{"location":"net-ssl-X509/#parameters_3","text":"that: X509 val","title":"Parameters"},{"location":"net-ssl-X509/#returns_4","text":"Bool val","title":"Returns"},{"location":"net-ssl-X509/#ne","text":"[Source] fun box ne( that: X509 val) : Bool val","title":"ne"},{"location":"net-ssl-X509/#parameters_4","text":"that: X509 val","title":"Parameters"},{"location":"net-ssl-X509/#returns_5","text":"Bool val","title":"Returns"},{"location":"net-ssl-X509/#private-functions","text":"","title":"Private Functions"},{"location":"net-ssl-X509/#_match_name","text":"[Source] Returns true if the name extracted from the certificate is valid for the given host. fun box _match_name( host: String val, name: String val) : Bool val","title":"_match_name"},{"location":"net-ssl-X509/#parameters_5","text":"host: String val name: String val","title":"Parameters"},{"location":"net-ssl-X509/#returns_6","text":"Bool val","title":"Returns"},{"location":"net-ssl-_ALPNMatchResultCode/","text":"_ALPNMatchResultCode [Source] primitive val _ALPNMatchResultCode Constructors create [Source] new val create() : _ALPNMatchResultCode val^ Returns _ALPNMatchResultCode val^ Public Functions ok [Source] fun box ok() : I32 val Returns I32 val warning [Source] fun box warning() : I32 val Returns I32 val fatal [Source] fun box fatal() : I32 val Returns I32 val no_ack [Source] fun box no_ack() : I32 val Returns I32 val eq [Source] fun box eq( that: _ALPNMatchResultCode val) : Bool val Parameters that: _ALPNMatchResultCode val Returns Bool val ne [Source] fun box ne( that: _ALPNMatchResultCode val) : Bool val Parameters that: _ALPNMatchResultCode val Returns Bool val","title":"primitive _ALPNMatchResultCode"},{"location":"net-ssl-_ALPNMatchResultCode/#_alpnmatchresultcode","text":"[Source] primitive val _ALPNMatchResultCode","title":"_ALPNMatchResultCode"},{"location":"net-ssl-_ALPNMatchResultCode/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_ALPNMatchResultCode/#create","text":"[Source] new val create() : _ALPNMatchResultCode val^","title":"create"},{"location":"net-ssl-_ALPNMatchResultCode/#returns","text":"_ALPNMatchResultCode val^","title":"Returns"},{"location":"net-ssl-_ALPNMatchResultCode/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_ALPNMatchResultCode/#ok","text":"[Source] fun box ok() : I32 val","title":"ok"},{"location":"net-ssl-_ALPNMatchResultCode/#returns_1","text":"I32 val","title":"Returns"},{"location":"net-ssl-_ALPNMatchResultCode/#warning","text":"[Source] fun box warning() : I32 val","title":"warning"},{"location":"net-ssl-_ALPNMatchResultCode/#returns_2","text":"I32 val","title":"Returns"},{"location":"net-ssl-_ALPNMatchResultCode/#fatal","text":"[Source] fun box fatal() : I32 val","title":"fatal"},{"location":"net-ssl-_ALPNMatchResultCode/#returns_3","text":"I32 val","title":"Returns"},{"location":"net-ssl-_ALPNMatchResultCode/#no_ack","text":"[Source] fun box no_ack() : I32 val","title":"no_ack"},{"location":"net-ssl-_ALPNMatchResultCode/#returns_4","text":"I32 val","title":"Returns"},{"location":"net-ssl-_ALPNMatchResultCode/#eq","text":"[Source] fun box eq( that: _ALPNMatchResultCode val) : Bool val","title":"eq"},{"location":"net-ssl-_ALPNMatchResultCode/#parameters","text":"that: _ALPNMatchResultCode val","title":"Parameters"},{"location":"net-ssl-_ALPNMatchResultCode/#returns_5","text":"Bool val","title":"Returns"},{"location":"net-ssl-_ALPNMatchResultCode/#ne","text":"[Source] fun box ne( that: _ALPNMatchResultCode val) : Bool val","title":"ne"},{"location":"net-ssl-_ALPNMatchResultCode/#parameters_1","text":"that: _ALPNMatchResultCode val","title":"Parameters"},{"location":"net-ssl-_ALPNMatchResultCode/#returns_6","text":"Bool val","title":"Returns"},{"location":"net-ssl-_ALPNProtocolList/","text":"_ALPNProtocolList [Source] primitive val _ALPNProtocolList Constructors create [Source] new val create() : _ALPNProtocolList val^ Returns _ALPNProtocolList val^ Public Functions from_array [Source] Try to pack the protocol names in protocols into a protocol name list fun box from_array( protocols: Array[String val] box) : String val ? Parameters protocols: Array [ String val] box Returns String val ? to_array [Source] Try to unpack a protocol name list into an Array[String] fun box to_array( protocol_list: String box) : Array[String val] val ? Parameters protocol_list: String box Returns Array [ String val] val ? eq [Source] fun box eq( that: _ALPNProtocolList val) : Bool val Parameters that: _ALPNProtocolList val Returns Bool val ne [Source] fun box ne( that: _ALPNProtocolList val) : Bool val Parameters that: _ALPNProtocolList val Returns Bool val","title":"primitive _ALPNProtocolList"},{"location":"net-ssl-_ALPNProtocolList/#_alpnprotocollist","text":"[Source] primitive val _ALPNProtocolList","title":"_ALPNProtocolList"},{"location":"net-ssl-_ALPNProtocolList/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_ALPNProtocolList/#create","text":"[Source] new val create() : _ALPNProtocolList val^","title":"create"},{"location":"net-ssl-_ALPNProtocolList/#returns","text":"_ALPNProtocolList val^","title":"Returns"},{"location":"net-ssl-_ALPNProtocolList/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_ALPNProtocolList/#from_array","text":"[Source] Try to pack the protocol names in protocols into a protocol name list fun box from_array( protocols: Array[String val] box) : String val ?","title":"from_array"},{"location":"net-ssl-_ALPNProtocolList/#parameters","text":"protocols: Array [ String val] box","title":"Parameters"},{"location":"net-ssl-_ALPNProtocolList/#returns_1","text":"String val ?","title":"Returns"},{"location":"net-ssl-_ALPNProtocolList/#to_array","text":"[Source] Try to unpack a protocol name list into an Array[String] fun box to_array( protocol_list: String box) : Array[String val] val ?","title":"to_array"},{"location":"net-ssl-_ALPNProtocolList/#parameters_1","text":"protocol_list: String box","title":"Parameters"},{"location":"net-ssl-_ALPNProtocolList/#returns_2","text":"Array [ String val] val ?","title":"Returns"},{"location":"net-ssl-_ALPNProtocolList/#eq","text":"[Source] fun box eq( that: _ALPNProtocolList val) : Bool val","title":"eq"},{"location":"net-ssl-_ALPNProtocolList/#parameters_2","text":"that: _ALPNProtocolList val","title":"Parameters"},{"location":"net-ssl-_ALPNProtocolList/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_ALPNProtocolList/#ne","text":"[Source] fun box ne( that: _ALPNProtocolList val) : Bool val","title":"ne"},{"location":"net-ssl-_ALPNProtocolList/#parameters_3","text":"that: _ALPNProtocolList val","title":"Parameters"},{"location":"net-ssl-_ALPNProtocolList/#returns_4","text":"Bool val","title":"Returns"},{"location":"net-ssl-_BIO/","text":"_BIO [Source] primitive val _BIO Constructors create [Source] new val create() : _BIO val^ Returns _BIO val^ Public Functions eq [Source] fun box eq( that: _BIO val) : Bool val Parameters that: _BIO val Returns Bool val ne [Source] fun box ne( that: _BIO val) : Bool val Parameters that: _BIO val Returns Bool val","title":"primitive _BIO"},{"location":"net-ssl-_BIO/#_bio","text":"[Source] primitive val _BIO","title":"_BIO"},{"location":"net-ssl-_BIO/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_BIO/#create","text":"[Source] new val create() : _BIO val^","title":"create"},{"location":"net-ssl-_BIO/#returns","text":"_BIO val^","title":"Returns"},{"location":"net-ssl-_BIO/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_BIO/#eq","text":"[Source] fun box eq( that: _BIO val) : Bool val","title":"eq"},{"location":"net-ssl-_BIO/#parameters","text":"that: _BIO val","title":"Parameters"},{"location":"net-ssl-_BIO/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-ssl-_BIO/#ne","text":"[Source] fun box ne( that: _BIO val) : Bool val","title":"ne"},{"location":"net-ssl-_BIO/#parameters_1","text":"that: _BIO val","title":"Parameters"},{"location":"net-ssl-_BIO/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_GeneralName/","text":"_GeneralName [Source] primitive val _GeneralName Constructors create [Source] new val create() : _GeneralName val^ Returns _GeneralName val^ Public Functions eq [Source] fun box eq( that: _GeneralName val) : Bool val Parameters that: _GeneralName val Returns Bool val ne [Source] fun box ne( that: _GeneralName val) : Bool val Parameters that: _GeneralName val Returns Bool val","title":"primitive _GeneralName"},{"location":"net-ssl-_GeneralName/#_generalname","text":"[Source] primitive val _GeneralName","title":"_GeneralName"},{"location":"net-ssl-_GeneralName/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_GeneralName/#create","text":"[Source] new val create() : _GeneralName val^","title":"create"},{"location":"net-ssl-_GeneralName/#returns","text":"_GeneralName val^","title":"Returns"},{"location":"net-ssl-_GeneralName/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_GeneralName/#eq","text":"[Source] fun box eq( that: _GeneralName val) : Bool val","title":"eq"},{"location":"net-ssl-_GeneralName/#parameters","text":"that: _GeneralName val","title":"Parameters"},{"location":"net-ssl-_GeneralName/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-ssl-_GeneralName/#ne","text":"[Source] fun box ne( that: _GeneralName val) : Bool val","title":"ne"},{"location":"net-ssl-_GeneralName/#parameters_1","text":"that: _GeneralName val","title":"Parameters"},{"location":"net-ssl-_GeneralName/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_GeneralNameStack/","text":"_GeneralNameStack [Source] primitive val _GeneralNameStack Constructors create [Source] new val create() : _GeneralNameStack val^ Returns _GeneralNameStack val^ Public Functions eq [Source] fun box eq( that: _GeneralNameStack val) : Bool val Parameters that: _GeneralNameStack val Returns Bool val ne [Source] fun box ne( that: _GeneralNameStack val) : Bool val Parameters that: _GeneralNameStack val Returns Bool val","title":"primitive _GeneralNameStack"},{"location":"net-ssl-_GeneralNameStack/#_generalnamestack","text":"[Source] primitive val _GeneralNameStack","title":"_GeneralNameStack"},{"location":"net-ssl-_GeneralNameStack/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_GeneralNameStack/#create","text":"[Source] new val create() : _GeneralNameStack val^","title":"create"},{"location":"net-ssl-_GeneralNameStack/#returns","text":"_GeneralNameStack val^","title":"Returns"},{"location":"net-ssl-_GeneralNameStack/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_GeneralNameStack/#eq","text":"[Source] fun box eq( that: _GeneralNameStack val) : Bool val","title":"eq"},{"location":"net-ssl-_GeneralNameStack/#parameters","text":"that: _GeneralNameStack val","title":"Parameters"},{"location":"net-ssl-_GeneralNameStack/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-ssl-_GeneralNameStack/#ne","text":"[Source] fun box ne( that: _GeneralNameStack val) : Bool val","title":"ne"},{"location":"net-ssl-_GeneralNameStack/#parameters_1","text":"that: _GeneralNameStack val","title":"Parameters"},{"location":"net-ssl-_GeneralNameStack/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_OpenSslInitLoadCryptoStrings/","text":"_OpenSslInitLoadCryptoStrings [Source] primitive val _OpenSslInitLoadCryptoStrings Constructors create [Source] new val create() : _OpenSslInitLoadCryptoStrings val^ Returns _OpenSslInitLoadCryptoStrings val^ Public Functions apply [Source] fun val apply() : U64 val Returns U64 val eq [Source] fun box eq( that: _OpenSslInitLoadCryptoStrings val) : Bool val Parameters that: _OpenSslInitLoadCryptoStrings val Returns Bool val ne [Source] fun box ne( that: _OpenSslInitLoadCryptoStrings val) : Bool val Parameters that: _OpenSslInitLoadCryptoStrings val Returns Bool val","title":"primitive _OpenSslInitLoadCryptoStrings"},{"location":"net-ssl-_OpenSslInitLoadCryptoStrings/#_opensslinitloadcryptostrings","text":"[Source] primitive val _OpenSslInitLoadCryptoStrings","title":"_OpenSslInitLoadCryptoStrings"},{"location":"net-ssl-_OpenSslInitLoadCryptoStrings/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_OpenSslInitLoadCryptoStrings/#create","text":"[Source] new val create() : _OpenSslInitLoadCryptoStrings val^","title":"create"},{"location":"net-ssl-_OpenSslInitLoadCryptoStrings/#returns","text":"_OpenSslInitLoadCryptoStrings val^","title":"Returns"},{"location":"net-ssl-_OpenSslInitLoadCryptoStrings/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_OpenSslInitLoadCryptoStrings/#apply","text":"[Source] fun val apply() : U64 val","title":"apply"},{"location":"net-ssl-_OpenSslInitLoadCryptoStrings/#returns_1","text":"U64 val","title":"Returns"},{"location":"net-ssl-_OpenSslInitLoadCryptoStrings/#eq","text":"[Source] fun box eq( that: _OpenSslInitLoadCryptoStrings val) : Bool val","title":"eq"},{"location":"net-ssl-_OpenSslInitLoadCryptoStrings/#parameters","text":"that: _OpenSslInitLoadCryptoStrings val","title":"Parameters"},{"location":"net-ssl-_OpenSslInitLoadCryptoStrings/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_OpenSslInitLoadCryptoStrings/#ne","text":"[Source] fun box ne( that: _OpenSslInitLoadCryptoStrings val) : Bool val","title":"ne"},{"location":"net-ssl-_OpenSslInitLoadCryptoStrings/#parameters_1","text":"that: _OpenSslInitLoadCryptoStrings val","title":"Parameters"},{"location":"net-ssl-_OpenSslInitLoadCryptoStrings/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_OpenSslInitLoadSslStrings/","text":"_OpenSslInitLoadSslStrings [Source] primitive val _OpenSslInitLoadSslStrings Constructors create [Source] new val create() : _OpenSslInitLoadSslStrings val^ Returns _OpenSslInitLoadSslStrings val^ Public Functions apply [Source] fun val apply() : U64 val Returns U64 val eq [Source] fun box eq( that: _OpenSslInitLoadSslStrings val) : Bool val Parameters that: _OpenSslInitLoadSslStrings val Returns Bool val ne [Source] fun box ne( that: _OpenSslInitLoadSslStrings val) : Bool val Parameters that: _OpenSslInitLoadSslStrings val Returns Bool val","title":"primitive _OpenSslInitLoadSslStrings"},{"location":"net-ssl-_OpenSslInitLoadSslStrings/#_opensslinitloadsslstrings","text":"[Source] primitive val _OpenSslInitLoadSslStrings","title":"_OpenSslInitLoadSslStrings"},{"location":"net-ssl-_OpenSslInitLoadSslStrings/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_OpenSslInitLoadSslStrings/#create","text":"[Source] new val create() : _OpenSslInitLoadSslStrings val^","title":"create"},{"location":"net-ssl-_OpenSslInitLoadSslStrings/#returns","text":"_OpenSslInitLoadSslStrings val^","title":"Returns"},{"location":"net-ssl-_OpenSslInitLoadSslStrings/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_OpenSslInitLoadSslStrings/#apply","text":"[Source] fun val apply() : U64 val","title":"apply"},{"location":"net-ssl-_OpenSslInitLoadSslStrings/#returns_1","text":"U64 val","title":"Returns"},{"location":"net-ssl-_OpenSslInitLoadSslStrings/#eq","text":"[Source] fun box eq( that: _OpenSslInitLoadSslStrings val) : Bool val","title":"eq"},{"location":"net-ssl-_OpenSslInitLoadSslStrings/#parameters","text":"that: _OpenSslInitLoadSslStrings val","title":"Parameters"},{"location":"net-ssl-_OpenSslInitLoadSslStrings/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_OpenSslInitLoadSslStrings/#ne","text":"[Source] fun box ne( that: _OpenSslInitLoadSslStrings val) : Bool val","title":"ne"},{"location":"net-ssl-_OpenSslInitLoadSslStrings/#parameters_1","text":"that: _OpenSslInitLoadSslStrings val","title":"Parameters"},{"location":"net-ssl-_OpenSslInitLoadSslStrings/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_OpenSslInitNoLoadCryptoStrings/","text":"_OpenSslInitNoLoadCryptoStrings [Source] primitive val _OpenSslInitNoLoadCryptoStrings Constructors create [Source] new val create() : _OpenSslInitNoLoadCryptoStrings val^ Returns _OpenSslInitNoLoadCryptoStrings val^ Public Functions apply [Source] fun val apply() : U64 val Returns U64 val eq [Source] fun box eq( that: _OpenSslInitNoLoadCryptoStrings val) : Bool val Parameters that: _OpenSslInitNoLoadCryptoStrings val Returns Bool val ne [Source] fun box ne( that: _OpenSslInitNoLoadCryptoStrings val) : Bool val Parameters that: _OpenSslInitNoLoadCryptoStrings val Returns Bool val","title":"primitive _OpenSslInitNoLoadCryptoStrings"},{"location":"net-ssl-_OpenSslInitNoLoadCryptoStrings/#_opensslinitnoloadcryptostrings","text":"[Source] primitive val _OpenSslInitNoLoadCryptoStrings","title":"_OpenSslInitNoLoadCryptoStrings"},{"location":"net-ssl-_OpenSslInitNoLoadCryptoStrings/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_OpenSslInitNoLoadCryptoStrings/#create","text":"[Source] new val create() : _OpenSslInitNoLoadCryptoStrings val^","title":"create"},{"location":"net-ssl-_OpenSslInitNoLoadCryptoStrings/#returns","text":"_OpenSslInitNoLoadCryptoStrings val^","title":"Returns"},{"location":"net-ssl-_OpenSslInitNoLoadCryptoStrings/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_OpenSslInitNoLoadCryptoStrings/#apply","text":"[Source] fun val apply() : U64 val","title":"apply"},{"location":"net-ssl-_OpenSslInitNoLoadCryptoStrings/#returns_1","text":"U64 val","title":"Returns"},{"location":"net-ssl-_OpenSslInitNoLoadCryptoStrings/#eq","text":"[Source] fun box eq( that: _OpenSslInitNoLoadCryptoStrings val) : Bool val","title":"eq"},{"location":"net-ssl-_OpenSslInitNoLoadCryptoStrings/#parameters","text":"that: _OpenSslInitNoLoadCryptoStrings val","title":"Parameters"},{"location":"net-ssl-_OpenSslInitNoLoadCryptoStrings/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_OpenSslInitNoLoadCryptoStrings/#ne","text":"[Source] fun box ne( that: _OpenSslInitNoLoadCryptoStrings val) : Bool val","title":"ne"},{"location":"net-ssl-_OpenSslInitNoLoadCryptoStrings/#parameters_1","text":"that: _OpenSslInitNoLoadCryptoStrings val","title":"Parameters"},{"location":"net-ssl-_OpenSslInitNoLoadCryptoStrings/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_OpenSslInitNoLoadSslStrings/","text":"_OpenSslInitNoLoadSslStrings [Source] primitive val _OpenSslInitNoLoadSslStrings Constructors create [Source] new val create() : _OpenSslInitNoLoadSslStrings val^ Returns _OpenSslInitNoLoadSslStrings val^ Public Functions apply [Source] fun val apply() : U64 val Returns U64 val eq [Source] fun box eq( that: _OpenSslInitNoLoadSslStrings val) : Bool val Parameters that: _OpenSslInitNoLoadSslStrings val Returns Bool val ne [Source] fun box ne( that: _OpenSslInitNoLoadSslStrings val) : Bool val Parameters that: _OpenSslInitNoLoadSslStrings val Returns Bool val","title":"primitive _OpenSslInitNoLoadSslStrings"},{"location":"net-ssl-_OpenSslInitNoLoadSslStrings/#_opensslinitnoloadsslstrings","text":"[Source] primitive val _OpenSslInitNoLoadSslStrings","title":"_OpenSslInitNoLoadSslStrings"},{"location":"net-ssl-_OpenSslInitNoLoadSslStrings/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_OpenSslInitNoLoadSslStrings/#create","text":"[Source] new val create() : _OpenSslInitNoLoadSslStrings val^","title":"create"},{"location":"net-ssl-_OpenSslInitNoLoadSslStrings/#returns","text":"_OpenSslInitNoLoadSslStrings val^","title":"Returns"},{"location":"net-ssl-_OpenSslInitNoLoadSslStrings/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_OpenSslInitNoLoadSslStrings/#apply","text":"[Source] fun val apply() : U64 val","title":"apply"},{"location":"net-ssl-_OpenSslInitNoLoadSslStrings/#returns_1","text":"U64 val","title":"Returns"},{"location":"net-ssl-_OpenSslInitNoLoadSslStrings/#eq","text":"[Source] fun box eq( that: _OpenSslInitNoLoadSslStrings val) : Bool val","title":"eq"},{"location":"net-ssl-_OpenSslInitNoLoadSslStrings/#parameters","text":"that: _OpenSslInitNoLoadSslStrings val","title":"Parameters"},{"location":"net-ssl-_OpenSslInitNoLoadSslStrings/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_OpenSslInitNoLoadSslStrings/#ne","text":"[Source] fun box ne( that: _OpenSslInitNoLoadSslStrings val) : Bool val","title":"ne"},{"location":"net-ssl-_OpenSslInitNoLoadSslStrings/#parameters_1","text":"that: _OpenSslInitNoLoadSslStrings val","title":"Parameters"},{"location":"net-ssl-_OpenSslInitNoLoadSslStrings/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_OpenSslInitSettings/","text":"_OpenSslInitSettings [Source] primitive val _OpenSslInitSettings Constructors create [Source] new val create() : _OpenSslInitSettings val^ Returns _OpenSslInitSettings val^ Public Functions eq [Source] fun box eq( that: _OpenSslInitSettings val) : Bool val Parameters that: _OpenSslInitSettings val Returns Bool val ne [Source] fun box ne( that: _OpenSslInitSettings val) : Bool val Parameters that: _OpenSslInitSettings val Returns Bool val","title":"primitive _OpenSslInitSettings"},{"location":"net-ssl-_OpenSslInitSettings/#_opensslinitsettings","text":"[Source] primitive val _OpenSslInitSettings","title":"_OpenSslInitSettings"},{"location":"net-ssl-_OpenSslInitSettings/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_OpenSslInitSettings/#create","text":"[Source] new val create() : _OpenSslInitSettings val^","title":"create"},{"location":"net-ssl-_OpenSslInitSettings/#returns","text":"_OpenSslInitSettings val^","title":"Returns"},{"location":"net-ssl-_OpenSslInitSettings/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_OpenSslInitSettings/#eq","text":"[Source] fun box eq( that: _OpenSslInitSettings val) : Bool val","title":"eq"},{"location":"net-ssl-_OpenSslInitSettings/#parameters","text":"that: _OpenSslInitSettings val","title":"Parameters"},{"location":"net-ssl-_OpenSslInitSettings/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-ssl-_OpenSslInitSettings/#ne","text":"[Source] fun box ne( that: _OpenSslInitSettings val) : Bool val","title":"ne"},{"location":"net-ssl-_OpenSslInitSettings/#parameters_1","text":"that: _OpenSslInitSettings val","title":"Parameters"},{"location":"net-ssl-_OpenSslInitSettings/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SSL/","text":"_SSL [Source] primitive val _SSL Constructors create [Source] new val create() : _SSL val^ Returns _SSL val^ Public Functions eq [Source] fun box eq( that: _SSL val) : Bool val Parameters that: _SSL val Returns Bool val ne [Source] fun box ne( that: _SSL val) : Bool val Parameters that: _SSL val Returns Bool val","title":"primitive _SSL"},{"location":"net-ssl-_SSL/#_ssl","text":"[Source] primitive val _SSL","title":"_SSL"},{"location":"net-ssl-_SSL/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_SSL/#create","text":"[Source] new val create() : _SSL val^","title":"create"},{"location":"net-ssl-_SSL/#returns","text":"_SSL val^","title":"Returns"},{"location":"net-ssl-_SSL/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_SSL/#eq","text":"[Source] fun box eq( that: _SSL val) : Bool val","title":"eq"},{"location":"net-ssl-_SSL/#parameters","text":"that: _SSL val","title":"Parameters"},{"location":"net-ssl-_SSL/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SSL/#ne","text":"[Source] fun box ne( that: _SSL val) : Bool val","title":"ne"},{"location":"net-ssl-_SSL/#parameters_1","text":"that: _SSL val","title":"Parameters"},{"location":"net-ssl-_SSL/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SSLContext/","text":"_SSLContext [Source] primitive val _SSLContext Constructors create [Source] new val create() : _SSLContext val^ Returns _SSLContext val^ Public Functions eq [Source] fun box eq( that: _SSLContext val) : Bool val Parameters that: _SSLContext val Returns Bool val ne [Source] fun box ne( that: _SSLContext val) : Bool val Parameters that: _SSLContext val Returns Bool val","title":"primitive _SSLContext"},{"location":"net-ssl-_SSLContext/#_sslcontext","text":"[Source] primitive val _SSLContext","title":"_SSLContext"},{"location":"net-ssl-_SSLContext/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_SSLContext/#create","text":"[Source] new val create() : _SSLContext val^","title":"create"},{"location":"net-ssl-_SSLContext/#returns","text":"_SSLContext val^","title":"Returns"},{"location":"net-ssl-_SSLContext/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_SSLContext/#eq","text":"[Source] fun box eq( that: _SSLContext val) : Bool val","title":"eq"},{"location":"net-ssl-_SSLContext/#parameters","text":"that: _SSLContext val","title":"Parameters"},{"location":"net-ssl-_SSLContext/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SSLContext/#ne","text":"[Source] fun box ne( that: _SSLContext val) : Bool val","title":"ne"},{"location":"net-ssl-_SSLContext/#parameters_1","text":"that: _SSLContext val","title":"Parameters"},{"location":"net-ssl-_SSLContext/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SSLInit/","text":"_SSLInit [Source] This initialises SSL when the program begins. primitive val _SSLInit Constructors create [Source] new val create() : _SSLInit val^ Returns _SSLInit val^ Public Functions eq [Source] fun box eq( that: _SSLInit val) : Bool val Parameters that: _SSLInit val Returns Bool val ne [Source] fun box ne( that: _SSLInit val) : Bool val Parameters that: _SSLInit val Returns Bool val Private Functions _init [Source] fun box _init() : None val Returns None val","title":"primitive _SSLInit"},{"location":"net-ssl-_SSLInit/#_sslinit","text":"[Source] This initialises SSL when the program begins. primitive val _SSLInit","title":"_SSLInit"},{"location":"net-ssl-_SSLInit/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_SSLInit/#create","text":"[Source] new val create() : _SSLInit val^","title":"create"},{"location":"net-ssl-_SSLInit/#returns","text":"_SSLInit val^","title":"Returns"},{"location":"net-ssl-_SSLInit/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_SSLInit/#eq","text":"[Source] fun box eq( that: _SSLInit val) : Bool val","title":"eq"},{"location":"net-ssl-_SSLInit/#parameters","text":"that: _SSLInit val","title":"Parameters"},{"location":"net-ssl-_SSLInit/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SSLInit/#ne","text":"[Source] fun box ne( that: _SSLInit val) : Bool val","title":"ne"},{"location":"net-ssl-_SSLInit/#parameters_1","text":"that: _SSLInit val","title":"Parameters"},{"location":"net-ssl-_SSLInit/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SSLInit/#private-functions","text":"","title":"Private Functions"},{"location":"net-ssl-_SSLInit/#_init","text":"[Source] fun box _init() : None val","title":"_init"},{"location":"net-ssl-_SSLInit/#returns_3","text":"None val","title":"Returns"},{"location":"net-ssl-_SslCtrlClearOptions/","text":"_SslCtrlClearOptions [Source] primitive val _SslCtrlClearOptions Constructors create [Source] new val create() : _SslCtrlClearOptions val^ Returns _SslCtrlClearOptions val^ Public Functions apply [Source] fun val apply() : I32 val Returns I32 val eq [Source] fun box eq( that: _SslCtrlClearOptions val) : Bool val Parameters that: _SslCtrlClearOptions val Returns Bool val ne [Source] fun box ne( that: _SslCtrlClearOptions val) : Bool val Parameters that: _SslCtrlClearOptions val Returns Bool val","title":"primitive _SslCtrlClearOptions"},{"location":"net-ssl-_SslCtrlClearOptions/#_sslctrlclearoptions","text":"[Source] primitive val _SslCtrlClearOptions","title":"_SslCtrlClearOptions"},{"location":"net-ssl-_SslCtrlClearOptions/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_SslCtrlClearOptions/#create","text":"[Source] new val create() : _SslCtrlClearOptions val^","title":"create"},{"location":"net-ssl-_SslCtrlClearOptions/#returns","text":"_SslCtrlClearOptions val^","title":"Returns"},{"location":"net-ssl-_SslCtrlClearOptions/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_SslCtrlClearOptions/#apply","text":"[Source] fun val apply() : I32 val","title":"apply"},{"location":"net-ssl-_SslCtrlClearOptions/#returns_1","text":"I32 val","title":"Returns"},{"location":"net-ssl-_SslCtrlClearOptions/#eq","text":"[Source] fun box eq( that: _SslCtrlClearOptions val) : Bool val","title":"eq"},{"location":"net-ssl-_SslCtrlClearOptions/#parameters","text":"that: _SslCtrlClearOptions val","title":"Parameters"},{"location":"net-ssl-_SslCtrlClearOptions/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslCtrlClearOptions/#ne","text":"[Source] fun box ne( that: _SslCtrlClearOptions val) : Bool val","title":"ne"},{"location":"net-ssl-_SslCtrlClearOptions/#parameters_1","text":"that: _SslCtrlClearOptions val","title":"Parameters"},{"location":"net-ssl-_SslCtrlClearOptions/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslCtrlGetMaxProtoVersion/","text":"_SslCtrlGetMaxProtoVersion [Source] primitive val _SslCtrlGetMaxProtoVersion Constructors create [Source] new val create() : _SslCtrlGetMaxProtoVersion val^ Returns _SslCtrlGetMaxProtoVersion val^ Public Functions apply [Source] fun val apply() : I32 val Returns I32 val eq [Source] fun box eq( that: _SslCtrlGetMaxProtoVersion val) : Bool val Parameters that: _SslCtrlGetMaxProtoVersion val Returns Bool val ne [Source] fun box ne( that: _SslCtrlGetMaxProtoVersion val) : Bool val Parameters that: _SslCtrlGetMaxProtoVersion val Returns Bool val","title":"primitive _SslCtrlGetMaxProtoVersion"},{"location":"net-ssl-_SslCtrlGetMaxProtoVersion/#_sslctrlgetmaxprotoversion","text":"[Source] primitive val _SslCtrlGetMaxProtoVersion","title":"_SslCtrlGetMaxProtoVersion"},{"location":"net-ssl-_SslCtrlGetMaxProtoVersion/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_SslCtrlGetMaxProtoVersion/#create","text":"[Source] new val create() : _SslCtrlGetMaxProtoVersion val^","title":"create"},{"location":"net-ssl-_SslCtrlGetMaxProtoVersion/#returns","text":"_SslCtrlGetMaxProtoVersion val^","title":"Returns"},{"location":"net-ssl-_SslCtrlGetMaxProtoVersion/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_SslCtrlGetMaxProtoVersion/#apply","text":"[Source] fun val apply() : I32 val","title":"apply"},{"location":"net-ssl-_SslCtrlGetMaxProtoVersion/#returns_1","text":"I32 val","title":"Returns"},{"location":"net-ssl-_SslCtrlGetMaxProtoVersion/#eq","text":"[Source] fun box eq( that: _SslCtrlGetMaxProtoVersion val) : Bool val","title":"eq"},{"location":"net-ssl-_SslCtrlGetMaxProtoVersion/#parameters","text":"that: _SslCtrlGetMaxProtoVersion val","title":"Parameters"},{"location":"net-ssl-_SslCtrlGetMaxProtoVersion/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslCtrlGetMaxProtoVersion/#ne","text":"[Source] fun box ne( that: _SslCtrlGetMaxProtoVersion val) : Bool val","title":"ne"},{"location":"net-ssl-_SslCtrlGetMaxProtoVersion/#parameters_1","text":"that: _SslCtrlGetMaxProtoVersion val","title":"Parameters"},{"location":"net-ssl-_SslCtrlGetMaxProtoVersion/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslCtrlGetMinProtoVersion/","text":"_SslCtrlGetMinProtoVersion [Source] primitive val _SslCtrlGetMinProtoVersion Constructors create [Source] new val create() : _SslCtrlGetMinProtoVersion val^ Returns _SslCtrlGetMinProtoVersion val^ Public Functions apply [Source] fun val apply() : I32 val Returns I32 val eq [Source] fun box eq( that: _SslCtrlGetMinProtoVersion val) : Bool val Parameters that: _SslCtrlGetMinProtoVersion val Returns Bool val ne [Source] fun box ne( that: _SslCtrlGetMinProtoVersion val) : Bool val Parameters that: _SslCtrlGetMinProtoVersion val Returns Bool val","title":"primitive _SslCtrlGetMinProtoVersion"},{"location":"net-ssl-_SslCtrlGetMinProtoVersion/#_sslctrlgetminprotoversion","text":"[Source] primitive val _SslCtrlGetMinProtoVersion","title":"_SslCtrlGetMinProtoVersion"},{"location":"net-ssl-_SslCtrlGetMinProtoVersion/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_SslCtrlGetMinProtoVersion/#create","text":"[Source] new val create() : _SslCtrlGetMinProtoVersion val^","title":"create"},{"location":"net-ssl-_SslCtrlGetMinProtoVersion/#returns","text":"_SslCtrlGetMinProtoVersion val^","title":"Returns"},{"location":"net-ssl-_SslCtrlGetMinProtoVersion/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_SslCtrlGetMinProtoVersion/#apply","text":"[Source] fun val apply() : I32 val","title":"apply"},{"location":"net-ssl-_SslCtrlGetMinProtoVersion/#returns_1","text":"I32 val","title":"Returns"},{"location":"net-ssl-_SslCtrlGetMinProtoVersion/#eq","text":"[Source] fun box eq( that: _SslCtrlGetMinProtoVersion val) : Bool val","title":"eq"},{"location":"net-ssl-_SslCtrlGetMinProtoVersion/#parameters","text":"that: _SslCtrlGetMinProtoVersion val","title":"Parameters"},{"location":"net-ssl-_SslCtrlGetMinProtoVersion/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslCtrlGetMinProtoVersion/#ne","text":"[Source] fun box ne( that: _SslCtrlGetMinProtoVersion val) : Bool val","title":"ne"},{"location":"net-ssl-_SslCtrlGetMinProtoVersion/#parameters_1","text":"that: _SslCtrlGetMinProtoVersion val","title":"Parameters"},{"location":"net-ssl-_SslCtrlGetMinProtoVersion/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslCtrlSetMaxProtoVersion/","text":"_SslCtrlSetMaxProtoVersion [Source] primitive val _SslCtrlSetMaxProtoVersion Constructors create [Source] new val create() : _SslCtrlSetMaxProtoVersion val^ Returns _SslCtrlSetMaxProtoVersion val^ Public Functions apply [Source] fun val apply() : I32 val Returns I32 val eq [Source] fun box eq( that: _SslCtrlSetMaxProtoVersion val) : Bool val Parameters that: _SslCtrlSetMaxProtoVersion val Returns Bool val ne [Source] fun box ne( that: _SslCtrlSetMaxProtoVersion val) : Bool val Parameters that: _SslCtrlSetMaxProtoVersion val Returns Bool val","title":"primitive _SslCtrlSetMaxProtoVersion"},{"location":"net-ssl-_SslCtrlSetMaxProtoVersion/#_sslctrlsetmaxprotoversion","text":"[Source] primitive val _SslCtrlSetMaxProtoVersion","title":"_SslCtrlSetMaxProtoVersion"},{"location":"net-ssl-_SslCtrlSetMaxProtoVersion/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_SslCtrlSetMaxProtoVersion/#create","text":"[Source] new val create() : _SslCtrlSetMaxProtoVersion val^","title":"create"},{"location":"net-ssl-_SslCtrlSetMaxProtoVersion/#returns","text":"_SslCtrlSetMaxProtoVersion val^","title":"Returns"},{"location":"net-ssl-_SslCtrlSetMaxProtoVersion/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_SslCtrlSetMaxProtoVersion/#apply","text":"[Source] fun val apply() : I32 val","title":"apply"},{"location":"net-ssl-_SslCtrlSetMaxProtoVersion/#returns_1","text":"I32 val","title":"Returns"},{"location":"net-ssl-_SslCtrlSetMaxProtoVersion/#eq","text":"[Source] fun box eq( that: _SslCtrlSetMaxProtoVersion val) : Bool val","title":"eq"},{"location":"net-ssl-_SslCtrlSetMaxProtoVersion/#parameters","text":"that: _SslCtrlSetMaxProtoVersion val","title":"Parameters"},{"location":"net-ssl-_SslCtrlSetMaxProtoVersion/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslCtrlSetMaxProtoVersion/#ne","text":"[Source] fun box ne( that: _SslCtrlSetMaxProtoVersion val) : Bool val","title":"ne"},{"location":"net-ssl-_SslCtrlSetMaxProtoVersion/#parameters_1","text":"that: _SslCtrlSetMaxProtoVersion val","title":"Parameters"},{"location":"net-ssl-_SslCtrlSetMaxProtoVersion/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslCtrlSetMinProtoVersion/","text":"_SslCtrlSetMinProtoVersion [Source] primitive val _SslCtrlSetMinProtoVersion Constructors create [Source] new val create() : _SslCtrlSetMinProtoVersion val^ Returns _SslCtrlSetMinProtoVersion val^ Public Functions apply [Source] fun val apply() : I32 val Returns I32 val eq [Source] fun box eq( that: _SslCtrlSetMinProtoVersion val) : Bool val Parameters that: _SslCtrlSetMinProtoVersion val Returns Bool val ne [Source] fun box ne( that: _SslCtrlSetMinProtoVersion val) : Bool val Parameters that: _SslCtrlSetMinProtoVersion val Returns Bool val","title":"primitive _SslCtrlSetMinProtoVersion"},{"location":"net-ssl-_SslCtrlSetMinProtoVersion/#_sslctrlsetminprotoversion","text":"[Source] primitive val _SslCtrlSetMinProtoVersion","title":"_SslCtrlSetMinProtoVersion"},{"location":"net-ssl-_SslCtrlSetMinProtoVersion/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_SslCtrlSetMinProtoVersion/#create","text":"[Source] new val create() : _SslCtrlSetMinProtoVersion val^","title":"create"},{"location":"net-ssl-_SslCtrlSetMinProtoVersion/#returns","text":"_SslCtrlSetMinProtoVersion val^","title":"Returns"},{"location":"net-ssl-_SslCtrlSetMinProtoVersion/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_SslCtrlSetMinProtoVersion/#apply","text":"[Source] fun val apply() : I32 val","title":"apply"},{"location":"net-ssl-_SslCtrlSetMinProtoVersion/#returns_1","text":"I32 val","title":"Returns"},{"location":"net-ssl-_SslCtrlSetMinProtoVersion/#eq","text":"[Source] fun box eq( that: _SslCtrlSetMinProtoVersion val) : Bool val","title":"eq"},{"location":"net-ssl-_SslCtrlSetMinProtoVersion/#parameters","text":"that: _SslCtrlSetMinProtoVersion val","title":"Parameters"},{"location":"net-ssl-_SslCtrlSetMinProtoVersion/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslCtrlSetMinProtoVersion/#ne","text":"[Source] fun box ne( that: _SslCtrlSetMinProtoVersion val) : Bool val","title":"ne"},{"location":"net-ssl-_SslCtrlSetMinProtoVersion/#parameters_1","text":"that: _SslCtrlSetMinProtoVersion val","title":"Parameters"},{"location":"net-ssl-_SslCtrlSetMinProtoVersion/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslCtrlSetOptions/","text":"_SslCtrlSetOptions [Source] primitive val _SslCtrlSetOptions Constructors create [Source] new val create() : _SslCtrlSetOptions val^ Returns _SslCtrlSetOptions val^ Public Functions apply [Source] fun val apply() : I32 val Returns I32 val eq [Source] fun box eq( that: _SslCtrlSetOptions val) : Bool val Parameters that: _SslCtrlSetOptions val Returns Bool val ne [Source] fun box ne( that: _SslCtrlSetOptions val) : Bool val Parameters that: _SslCtrlSetOptions val Returns Bool val","title":"primitive _SslCtrlSetOptions"},{"location":"net-ssl-_SslCtrlSetOptions/#_sslctrlsetoptions","text":"[Source] primitive val _SslCtrlSetOptions","title":"_SslCtrlSetOptions"},{"location":"net-ssl-_SslCtrlSetOptions/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_SslCtrlSetOptions/#create","text":"[Source] new val create() : _SslCtrlSetOptions val^","title":"create"},{"location":"net-ssl-_SslCtrlSetOptions/#returns","text":"_SslCtrlSetOptions val^","title":"Returns"},{"location":"net-ssl-_SslCtrlSetOptions/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_SslCtrlSetOptions/#apply","text":"[Source] fun val apply() : I32 val","title":"apply"},{"location":"net-ssl-_SslCtrlSetOptions/#returns_1","text":"I32 val","title":"Returns"},{"location":"net-ssl-_SslCtrlSetOptions/#eq","text":"[Source] fun box eq( that: _SslCtrlSetOptions val) : Bool val","title":"eq"},{"location":"net-ssl-_SslCtrlSetOptions/#parameters","text":"that: _SslCtrlSetOptions val","title":"Parameters"},{"location":"net-ssl-_SslCtrlSetOptions/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslCtrlSetOptions/#ne","text":"[Source] fun box ne( that: _SslCtrlSetOptions val) : Bool val","title":"ne"},{"location":"net-ssl-_SslCtrlSetOptions/#parameters_1","text":"that: _SslCtrlSetOptions val","title":"Parameters"},{"location":"net-ssl-_SslCtrlSetOptions/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoDtlsMask/","text":"_SslOpNoDtlsMask [Source] primitive val _SslOpNoDtlsMask Constructors create [Source] new val create() : _SslOpNoDtlsMask val^ Returns _SslOpNoDtlsMask val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: _SslOpNoDtlsMask val) : Bool val Parameters that: _SslOpNoDtlsMask val Returns Bool val ne [Source] fun box ne( that: _SslOpNoDtlsMask val) : Bool val Parameters that: _SslOpNoDtlsMask val Returns Bool val","title":"primitive _SslOpNoDtlsMask"},{"location":"net-ssl-_SslOpNoDtlsMask/#_sslopnodtlsmask","text":"[Source] primitive val _SslOpNoDtlsMask","title":"_SslOpNoDtlsMask"},{"location":"net-ssl-_SslOpNoDtlsMask/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_SslOpNoDtlsMask/#create","text":"[Source] new val create() : _SslOpNoDtlsMask val^","title":"create"},{"location":"net-ssl-_SslOpNoDtlsMask/#returns","text":"_SslOpNoDtlsMask val^","title":"Returns"},{"location":"net-ssl-_SslOpNoDtlsMask/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_SslOpNoDtlsMask/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-_SslOpNoDtlsMask/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-_SslOpNoDtlsMask/#eq","text":"[Source] fun box eq( that: _SslOpNoDtlsMask val) : Bool val","title":"eq"},{"location":"net-ssl-_SslOpNoDtlsMask/#parameters","text":"that: _SslOpNoDtlsMask val","title":"Parameters"},{"location":"net-ssl-_SslOpNoDtlsMask/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoDtlsMask/#ne","text":"[Source] fun box ne( that: _SslOpNoDtlsMask val) : Bool val","title":"ne"},{"location":"net-ssl-_SslOpNoDtlsMask/#parameters_1","text":"that: _SslOpNoDtlsMask val","title":"Parameters"},{"location":"net-ssl-_SslOpNoDtlsMask/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoDtlsV1/","text":"_SslOpNoDtlsV1 [Source] primitive val _SslOpNoDtlsV1 Constructors create [Source] new val create() : _SslOpNoDtlsV1 val^ Returns _SslOpNoDtlsV1 val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: _SslOpNoDtlsV1 val) : Bool val Parameters that: _SslOpNoDtlsV1 val Returns Bool val ne [Source] fun box ne( that: _SslOpNoDtlsV1 val) : Bool val Parameters that: _SslOpNoDtlsV1 val Returns Bool val","title":"primitive _SslOpNoDtlsV1"},{"location":"net-ssl-_SslOpNoDtlsV1/#_sslopnodtlsv1","text":"[Source] primitive val _SslOpNoDtlsV1","title":"_SslOpNoDtlsV1"},{"location":"net-ssl-_SslOpNoDtlsV1/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_SslOpNoDtlsV1/#create","text":"[Source] new val create() : _SslOpNoDtlsV1 val^","title":"create"},{"location":"net-ssl-_SslOpNoDtlsV1/#returns","text":"_SslOpNoDtlsV1 val^","title":"Returns"},{"location":"net-ssl-_SslOpNoDtlsV1/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_SslOpNoDtlsV1/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-_SslOpNoDtlsV1/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-_SslOpNoDtlsV1/#eq","text":"[Source] fun box eq( that: _SslOpNoDtlsV1 val) : Bool val","title":"eq"},{"location":"net-ssl-_SslOpNoDtlsV1/#parameters","text":"that: _SslOpNoDtlsV1 val","title":"Parameters"},{"location":"net-ssl-_SslOpNoDtlsV1/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoDtlsV1/#ne","text":"[Source] fun box ne( that: _SslOpNoDtlsV1 val) : Bool val","title":"ne"},{"location":"net-ssl-_SslOpNoDtlsV1/#parameters_1","text":"that: _SslOpNoDtlsV1 val","title":"Parameters"},{"location":"net-ssl-_SslOpNoDtlsV1/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoDtlsV1u2/","text":"_SslOpNoDtlsV1u2 [Source] primitive val _SslOpNoDtlsV1u2 Constructors create [Source] new val create() : _SslOpNoDtlsV1u2 val^ Returns _SslOpNoDtlsV1u2 val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: _SslOpNoDtlsV1u2 val) : Bool val Parameters that: _SslOpNoDtlsV1u2 val Returns Bool val ne [Source] fun box ne( that: _SslOpNoDtlsV1u2 val) : Bool val Parameters that: _SslOpNoDtlsV1u2 val Returns Bool val","title":"primitive _SslOpNoDtlsV1u2"},{"location":"net-ssl-_SslOpNoDtlsV1u2/#_sslopnodtlsv1u2","text":"[Source] primitive val _SslOpNoDtlsV1u2","title":"_SslOpNoDtlsV1u2"},{"location":"net-ssl-_SslOpNoDtlsV1u2/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_SslOpNoDtlsV1u2/#create","text":"[Source] new val create() : _SslOpNoDtlsV1u2 val^","title":"create"},{"location":"net-ssl-_SslOpNoDtlsV1u2/#returns","text":"_SslOpNoDtlsV1u2 val^","title":"Returns"},{"location":"net-ssl-_SslOpNoDtlsV1u2/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_SslOpNoDtlsV1u2/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-_SslOpNoDtlsV1u2/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-_SslOpNoDtlsV1u2/#eq","text":"[Source] fun box eq( that: _SslOpNoDtlsV1u2 val) : Bool val","title":"eq"},{"location":"net-ssl-_SslOpNoDtlsV1u2/#parameters","text":"that: _SslOpNoDtlsV1u2 val","title":"Parameters"},{"location":"net-ssl-_SslOpNoDtlsV1u2/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoDtlsV1u2/#ne","text":"[Source] fun box ne( that: _SslOpNoDtlsV1u2 val) : Bool val","title":"ne"},{"location":"net-ssl-_SslOpNoDtlsV1u2/#parameters_1","text":"that: _SslOpNoDtlsV1u2 val","title":"Parameters"},{"location":"net-ssl-_SslOpNoDtlsV1u2/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoSslMask/","text":"_SslOpNoSslMask [Source] primitive val _SslOpNoSslMask Constructors create [Source] new val create() : _SslOpNoSslMask val^ Returns _SslOpNoSslMask val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: _SslOpNoSslMask val) : Bool val Parameters that: _SslOpNoSslMask val Returns Bool val ne [Source] fun box ne( that: _SslOpNoSslMask val) : Bool val Parameters that: _SslOpNoSslMask val Returns Bool val","title":"primitive _SslOpNoSslMask"},{"location":"net-ssl-_SslOpNoSslMask/#_sslopnosslmask","text":"[Source] primitive val _SslOpNoSslMask","title":"_SslOpNoSslMask"},{"location":"net-ssl-_SslOpNoSslMask/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_SslOpNoSslMask/#create","text":"[Source] new val create() : _SslOpNoSslMask val^","title":"create"},{"location":"net-ssl-_SslOpNoSslMask/#returns","text":"_SslOpNoSslMask val^","title":"Returns"},{"location":"net-ssl-_SslOpNoSslMask/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_SslOpNoSslMask/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-_SslOpNoSslMask/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-_SslOpNoSslMask/#eq","text":"[Source] fun box eq( that: _SslOpNoSslMask val) : Bool val","title":"eq"},{"location":"net-ssl-_SslOpNoSslMask/#parameters","text":"that: _SslOpNoSslMask val","title":"Parameters"},{"location":"net-ssl-_SslOpNoSslMask/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoSslMask/#ne","text":"[Source] fun box ne( that: _SslOpNoSslMask val) : Bool val","title":"ne"},{"location":"net-ssl-_SslOpNoSslMask/#parameters_1","text":"that: _SslOpNoSslMask val","title":"Parameters"},{"location":"net-ssl-_SslOpNoSslMask/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoSslV2/","text":"_SslOpNoSslV2 [Source] primitive val _SslOpNoSslV2 Constructors create [Source] new val create() : _SslOpNoSslV2 val^ Returns _SslOpNoSslV2 val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: _SslOpNoSslV2 val) : Bool val Parameters that: _SslOpNoSslV2 val Returns Bool val ne [Source] fun box ne( that: _SslOpNoSslV2 val) : Bool val Parameters that: _SslOpNoSslV2 val Returns Bool val","title":"primitive _SslOpNoSslV2"},{"location":"net-ssl-_SslOpNoSslV2/#_sslopnosslv2","text":"[Source] primitive val _SslOpNoSslV2","title":"_SslOpNoSslV2"},{"location":"net-ssl-_SslOpNoSslV2/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_SslOpNoSslV2/#create","text":"[Source] new val create() : _SslOpNoSslV2 val^","title":"create"},{"location":"net-ssl-_SslOpNoSslV2/#returns","text":"_SslOpNoSslV2 val^","title":"Returns"},{"location":"net-ssl-_SslOpNoSslV2/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_SslOpNoSslV2/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-_SslOpNoSslV2/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-_SslOpNoSslV2/#eq","text":"[Source] fun box eq( that: _SslOpNoSslV2 val) : Bool val","title":"eq"},{"location":"net-ssl-_SslOpNoSslV2/#parameters","text":"that: _SslOpNoSslV2 val","title":"Parameters"},{"location":"net-ssl-_SslOpNoSslV2/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoSslV2/#ne","text":"[Source] fun box ne( that: _SslOpNoSslV2 val) : Bool val","title":"ne"},{"location":"net-ssl-_SslOpNoSslV2/#parameters_1","text":"that: _SslOpNoSslV2 val","title":"Parameters"},{"location":"net-ssl-_SslOpNoSslV2/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoSslV3/","text":"_SslOpNoSslV3 [Source] primitive val _SslOpNoSslV3 Constructors create [Source] new val create() : _SslOpNoSslV3 val^ Returns _SslOpNoSslV3 val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: _SslOpNoSslV3 val) : Bool val Parameters that: _SslOpNoSslV3 val Returns Bool val ne [Source] fun box ne( that: _SslOpNoSslV3 val) : Bool val Parameters that: _SslOpNoSslV3 val Returns Bool val","title":"primitive _SslOpNoSslV3"},{"location":"net-ssl-_SslOpNoSslV3/#_sslopnosslv3","text":"[Source] primitive val _SslOpNoSslV3","title":"_SslOpNoSslV3"},{"location":"net-ssl-_SslOpNoSslV3/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_SslOpNoSslV3/#create","text":"[Source] new val create() : _SslOpNoSslV3 val^","title":"create"},{"location":"net-ssl-_SslOpNoSslV3/#returns","text":"_SslOpNoSslV3 val^","title":"Returns"},{"location":"net-ssl-_SslOpNoSslV3/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_SslOpNoSslV3/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-_SslOpNoSslV3/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-_SslOpNoSslV3/#eq","text":"[Source] fun box eq( that: _SslOpNoSslV3 val) : Bool val","title":"eq"},{"location":"net-ssl-_SslOpNoSslV3/#parameters","text":"that: _SslOpNoSslV3 val","title":"Parameters"},{"location":"net-ssl-_SslOpNoSslV3/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoSslV3/#ne","text":"[Source] fun box ne( that: _SslOpNoSslV3 val) : Bool val","title":"ne"},{"location":"net-ssl-_SslOpNoSslV3/#parameters_1","text":"that: _SslOpNoSslV3 val","title":"Parameters"},{"location":"net-ssl-_SslOpNoSslV3/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoTlsV1/","text":"_SslOpNoTlsV1 [Source] primitive val _SslOpNoTlsV1 Constructors create [Source] new val create() : _SslOpNoTlsV1 val^ Returns _SslOpNoTlsV1 val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: _SslOpNoTlsV1 val) : Bool val Parameters that: _SslOpNoTlsV1 val Returns Bool val ne [Source] fun box ne( that: _SslOpNoTlsV1 val) : Bool val Parameters that: _SslOpNoTlsV1 val Returns Bool val","title":"primitive _SslOpNoTlsV1"},{"location":"net-ssl-_SslOpNoTlsV1/#_sslopnotlsv1","text":"[Source] primitive val _SslOpNoTlsV1","title":"_SslOpNoTlsV1"},{"location":"net-ssl-_SslOpNoTlsV1/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_SslOpNoTlsV1/#create","text":"[Source] new val create() : _SslOpNoTlsV1 val^","title":"create"},{"location":"net-ssl-_SslOpNoTlsV1/#returns","text":"_SslOpNoTlsV1 val^","title":"Returns"},{"location":"net-ssl-_SslOpNoTlsV1/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_SslOpNoTlsV1/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-_SslOpNoTlsV1/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-_SslOpNoTlsV1/#eq","text":"[Source] fun box eq( that: _SslOpNoTlsV1 val) : Bool val","title":"eq"},{"location":"net-ssl-_SslOpNoTlsV1/#parameters","text":"that: _SslOpNoTlsV1 val","title":"Parameters"},{"location":"net-ssl-_SslOpNoTlsV1/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoTlsV1/#ne","text":"[Source] fun box ne( that: _SslOpNoTlsV1 val) : Bool val","title":"ne"},{"location":"net-ssl-_SslOpNoTlsV1/#parameters_1","text":"that: _SslOpNoTlsV1 val","title":"Parameters"},{"location":"net-ssl-_SslOpNoTlsV1/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoTlsV1u1/","text":"_SslOpNoTlsV1u1 [Source] primitive val _SslOpNoTlsV1u1 Constructors create [Source] new val create() : _SslOpNoTlsV1u1 val^ Returns _SslOpNoTlsV1u1 val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: _SslOpNoTlsV1u1 val) : Bool val Parameters that: _SslOpNoTlsV1u1 val Returns Bool val ne [Source] fun box ne( that: _SslOpNoTlsV1u1 val) : Bool val Parameters that: _SslOpNoTlsV1u1 val Returns Bool val","title":"primitive _SslOpNoTlsV1u1"},{"location":"net-ssl-_SslOpNoTlsV1u1/#_sslopnotlsv1u1","text":"[Source] primitive val _SslOpNoTlsV1u1","title":"_SslOpNoTlsV1u1"},{"location":"net-ssl-_SslOpNoTlsV1u1/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_SslOpNoTlsV1u1/#create","text":"[Source] new val create() : _SslOpNoTlsV1u1 val^","title":"create"},{"location":"net-ssl-_SslOpNoTlsV1u1/#returns","text":"_SslOpNoTlsV1u1 val^","title":"Returns"},{"location":"net-ssl-_SslOpNoTlsV1u1/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_SslOpNoTlsV1u1/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-_SslOpNoTlsV1u1/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-_SslOpNoTlsV1u1/#eq","text":"[Source] fun box eq( that: _SslOpNoTlsV1u1 val) : Bool val","title":"eq"},{"location":"net-ssl-_SslOpNoTlsV1u1/#parameters","text":"that: _SslOpNoTlsV1u1 val","title":"Parameters"},{"location":"net-ssl-_SslOpNoTlsV1u1/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoTlsV1u1/#ne","text":"[Source] fun box ne( that: _SslOpNoTlsV1u1 val) : Bool val","title":"ne"},{"location":"net-ssl-_SslOpNoTlsV1u1/#parameters_1","text":"that: _SslOpNoTlsV1u1 val","title":"Parameters"},{"location":"net-ssl-_SslOpNoTlsV1u1/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoTlsV1u2/","text":"_SslOpNoTlsV1u2 [Source] primitive val _SslOpNoTlsV1u2 Constructors create [Source] new val create() : _SslOpNoTlsV1u2 val^ Returns _SslOpNoTlsV1u2 val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: _SslOpNoTlsV1u2 val) : Bool val Parameters that: _SslOpNoTlsV1u2 val Returns Bool val ne [Source] fun box ne( that: _SslOpNoTlsV1u2 val) : Bool val Parameters that: _SslOpNoTlsV1u2 val Returns Bool val","title":"primitive _SslOpNoTlsV1u2"},{"location":"net-ssl-_SslOpNoTlsV1u2/#_sslopnotlsv1u2","text":"[Source] primitive val _SslOpNoTlsV1u2","title":"_SslOpNoTlsV1u2"},{"location":"net-ssl-_SslOpNoTlsV1u2/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_SslOpNoTlsV1u2/#create","text":"[Source] new val create() : _SslOpNoTlsV1u2 val^","title":"create"},{"location":"net-ssl-_SslOpNoTlsV1u2/#returns","text":"_SslOpNoTlsV1u2 val^","title":"Returns"},{"location":"net-ssl-_SslOpNoTlsV1u2/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_SslOpNoTlsV1u2/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-_SslOpNoTlsV1u2/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-_SslOpNoTlsV1u2/#eq","text":"[Source] fun box eq( that: _SslOpNoTlsV1u2 val) : Bool val","title":"eq"},{"location":"net-ssl-_SslOpNoTlsV1u2/#parameters","text":"that: _SslOpNoTlsV1u2 val","title":"Parameters"},{"location":"net-ssl-_SslOpNoTlsV1u2/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoTlsV1u2/#ne","text":"[Source] fun box ne( that: _SslOpNoTlsV1u2 val) : Bool val","title":"ne"},{"location":"net-ssl-_SslOpNoTlsV1u2/#parameters_1","text":"that: _SslOpNoTlsV1u2 val","title":"Parameters"},{"location":"net-ssl-_SslOpNoTlsV1u2/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoTlsV1u3/","text":"_SslOpNoTlsV1u3 [Source] primitive val _SslOpNoTlsV1u3 Constructors create [Source] new val create() : _SslOpNoTlsV1u3 val^ Returns _SslOpNoTlsV1u3 val^ Public Functions apply [Source] fun val apply() : ULong val Returns ULong val eq [Source] fun box eq( that: _SslOpNoTlsV1u3 val) : Bool val Parameters that: _SslOpNoTlsV1u3 val Returns Bool val ne [Source] fun box ne( that: _SslOpNoTlsV1u3 val) : Bool val Parameters that: _SslOpNoTlsV1u3 val Returns Bool val","title":"primitive _SslOpNoTlsV1u3"},{"location":"net-ssl-_SslOpNoTlsV1u3/#_sslopnotlsv1u3","text":"[Source] primitive val _SslOpNoTlsV1u3","title":"_SslOpNoTlsV1u3"},{"location":"net-ssl-_SslOpNoTlsV1u3/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_SslOpNoTlsV1u3/#create","text":"[Source] new val create() : _SslOpNoTlsV1u3 val^","title":"create"},{"location":"net-ssl-_SslOpNoTlsV1u3/#returns","text":"_SslOpNoTlsV1u3 val^","title":"Returns"},{"location":"net-ssl-_SslOpNoTlsV1u3/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_SslOpNoTlsV1u3/#apply","text":"[Source] fun val apply() : ULong val","title":"apply"},{"location":"net-ssl-_SslOpNoTlsV1u3/#returns_1","text":"ULong val","title":"Returns"},{"location":"net-ssl-_SslOpNoTlsV1u3/#eq","text":"[Source] fun box eq( that: _SslOpNoTlsV1u3 val) : Bool val","title":"eq"},{"location":"net-ssl-_SslOpNoTlsV1u3/#parameters","text":"that: _SslOpNoTlsV1u3 val","title":"Parameters"},{"location":"net-ssl-_SslOpNoTlsV1u3/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-ssl-_SslOpNoTlsV1u3/#ne","text":"[Source] fun box ne( that: _SslOpNoTlsV1u3 val) : Bool val","title":"ne"},{"location":"net-ssl-_SslOpNoTlsV1u3/#parameters_1","text":"that: _SslOpNoTlsV1u3 val","title":"Parameters"},{"location":"net-ssl-_SslOpNoTlsV1u3/#returns_3","text":"Bool val","title":"Returns"},{"location":"net-ssl-_X509Name/","text":"_X509Name [Source] primitive val _X509Name Constructors create [Source] new val create() : _X509Name val^ Returns _X509Name val^ Public Functions eq [Source] fun box eq( that: _X509Name val) : Bool val Parameters that: _X509Name val Returns Bool val ne [Source] fun box ne( that: _X509Name val) : Bool val Parameters that: _X509Name val Returns Bool val","title":"primitive _X509Name"},{"location":"net-ssl-_X509Name/#_x509name","text":"[Source] primitive val _X509Name","title":"_X509Name"},{"location":"net-ssl-_X509Name/#constructors","text":"","title":"Constructors"},{"location":"net-ssl-_X509Name/#create","text":"[Source] new val create() : _X509Name val^","title":"create"},{"location":"net-ssl-_X509Name/#returns","text":"_X509Name val^","title":"Returns"},{"location":"net-ssl-_X509Name/#public-functions","text":"","title":"Public Functions"},{"location":"net-ssl-_X509Name/#eq","text":"[Source] fun box eq( that: _X509Name val) : Bool val","title":"eq"},{"location":"net-ssl-_X509Name/#parameters","text":"that: _X509Name val","title":"Parameters"},{"location":"net-ssl-_X509Name/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-ssl-_X509Name/#ne","text":"[Source] fun box ne( that: _X509Name val) : Bool val","title":"ne"},{"location":"net-ssl-_X509Name/#parameters_1","text":"that: _X509Name val","title":"Parameters"},{"location":"net-ssl-_X509Name/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponytest--index/","text":"PonyTest package The PonyTest package provides a unit testing framework. It is designed to be as simple as possible to use, both for the unit test writer and the user running the tests. To help simplify test writing and distribution this package depends on as few other packages as possible. Currently the required packages are: builtin time collections Each unit test is a class, with a single test function. By default all tests run concurrently. Each test run is provided with a helper object. This provides logging and assertion functions. By default log messages are only shown for tests that fail. When any assertion function fails the test is counted as a fail. However, tests can also indicate failure by raising an error in the test function. Example program To use PonyTest simply write a class for each test and a TestList type that tells the PonyTest object about the tests. Typically the TestList will be Main for the package. The following is a complete program with 2 trivial tests. use ponytest actor Main is TestList new create(env: Env) = PonyTest(env, this) new make() = None fun tag tests(test: PonyTest) = test(_TestAdd) test(_TestSub) class iso _TestAdd is UnitTest fun name():String = addition fun apply(h: TestHelper) = h.assert_eq[U32](4, 2 + 2) class iso _TestSub is UnitTest fun name():String = subtraction fun apply(h: TestHelper) = h.assert_eq[U32](2, 4 - 2) The make() constructor is not needed for this example. However, it allows for easy aggregation of tests (see below) so it is recommended that all test Mains provide it. Main.create() is called only for program invocations on the current package. Main.make() is called during aggregation. If so desired extra code can be added to either of these constructors to perform additional tasks. Test names Tests are identified by names, which are used when printing test results and on the command line to select which tests to run. These names are independent of the names of the test classes in the Pony source code. Arbitrary strings can be used for these names, but for large projects it is strongly recommended to use a hierarchical naming scheme to make it easier to select groups of tests. You can skip any tests whose names start with a given string by using the --exclude=[prefix] command line option. You can run only tests whose names start with a given string by using the --only=[prefix] command line option. Aggregation Often it is desirable to run a collection of unit tests from multiple different source files. For example, if several packages within a bundle each have their own unit tests it may be useful to run all tests for the bundle together. This can be achieved by writing an aggregate test list class, which calls the list function for each package. The following is an example that aggregates the tests from packages foo and bar . use ponytest use foo = foo use bar = bar actor Main is TestList new create(env: Env) = PonyTest(env, this) new make() = None fun tag tests(test: PonyTest) = foo.Main.make().tests(test) bar.Main.make().tests(test) Aggregate test classes may themselves be aggregated. Every test list class may contain any combination of its own tests and aggregated lists. Long tests Simple tests run within a single function. When that function exits, either returning or raising an error, the test is complete. This is not viable for tests that need to use actors. Long tests allow for delayed completion. Any test can call long_test() on its TestHelper to indicate that it needs to keep running. When the test is finally complete it calls complete() on its TestHelper. The complete() function takes a Bool parameter to specify whether the test was a success. If any asserts fail then the test will be considered a failure regardless of the value of this parameter. However, complete() must still be called. Since failing tests may hang, a timeout must be specified for each long test. When the test function exits a timer is started with the specified timeout. If this timer fires before complete() is called the test is marked as a failure and the timeout is reported. On a timeout the timed_out() function is called on the unit test object. This should perform whatever test specific tidy up is required to allow the program to exit. There is no need to call complete() if a timeout occurs, although it is not an error to do so. Note that the timeout is only relevant when a test hangs and would otherwise prevent the test program from completing. Setting a very long timeout on tests that should not be able to hang is perfectly acceptable and will not make the test take any longer if successful. Timeouts should not be used as the standard method of detecting if a test has failed. Exclusion groups By default all tests are run concurrently. This may be a problem for some tests, eg if they manipulate an external file or use a system resource. To fix this issue any number of tests may be put into an exclusion group. No tests that are in the same exclusion group will be run concurrently. Exclusion groups are identified by name, arbitrary strings may be used. Multiple exclusion groups may be used and tests in different groups may run concurrently. Tests that do not specify an exclusion group may be run concurrently with any other tests. The command line option \"--sequential\" prevents any tests from running concurrently, regardless of exclusion groups. This is intended for debugging rather than standard use. Labels Test can have label. Labels are used to filter which tests are run, by setting command line argument --label=[some custom label] . It can be used to separate unit tests from integration tests. By default label is empty. You can set it up by overriding label(): String method in unit test. use ponytest class iso _I8AddTest is UnitTest fun name(): String = _I8AddTest fun label(): String = simple fun apply(h: TestHelper) = h.assert_eq[I8](1, 1) Setting up and tearing down a test environment Set Up Any kind of fixture or environment necessary for executing a UnitTest can be set up either in the tests constructor or in a function called set_up() . set_up() is called before the test is executed. It is partial, if it errors, the test is not executed but reported as failing during set up. The test's TestHelper is handed to set_up() in order to log messages or access the tests Env via TestHelper.env . Tear Down Each unit test object may define a tear_down() function. This is called after the test has finished to allow tearing down of any complex environment that had to be set up for the test. The tear_down() function is called for each test regardless of whether it passed or failed. If a test times out tear_down() will be called after timed_out() returns. When a test is in an exclusion group, the tear_down() call is considered part of the tests run. The next test in the exclusion group will not start until after tear_down() returns on the current test. The test's TestHelper is handed to tear_down() and it is permitted to log messages and call assert functions during tear down. Example The following example creates a temporary directory in the set_up() function and removes it in the tear_down() function, thus simplifying the test function itself: use ponytest use files class iso TempDirTest var tmp_dir: (FilePath | None) = None fun name(): String = temp-dir fun ref set_up(h: TestHelper)? = tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, temp-dir )? fun ref tear_down(h: TestHelper) = try (tmp_dir as FilePath).remove() end fun apply(h: TestHelper)? = let dir = tmp_dir as FilePath // do something inside the temporary directory Public Types trait UnitTest trait TestList interface ITest class TestHelper actor PonyTest Private Types trait _Group actor _ExclusiveGroup actor _SimultaneousGroup primitive _Color","title":"Package"},{"location":"ponytest--index/#ponytest-package","text":"The PonyTest package provides a unit testing framework. It is designed to be as simple as possible to use, both for the unit test writer and the user running the tests. To help simplify test writing and distribution this package depends on as few other packages as possible. Currently the required packages are: builtin time collections Each unit test is a class, with a single test function. By default all tests run concurrently. Each test run is provided with a helper object. This provides logging and assertion functions. By default log messages are only shown for tests that fail. When any assertion function fails the test is counted as a fail. However, tests can also indicate failure by raising an error in the test function.","title":"PonyTest package"},{"location":"ponytest--index/#example-program","text":"To use PonyTest simply write a class for each test and a TestList type that tells the PonyTest object about the tests. Typically the TestList will be Main for the package. The following is a complete program with 2 trivial tests. use ponytest actor Main is TestList new create(env: Env) = PonyTest(env, this) new make() = None fun tag tests(test: PonyTest) = test(_TestAdd) test(_TestSub) class iso _TestAdd is UnitTest fun name():String = addition fun apply(h: TestHelper) = h.assert_eq[U32](4, 2 + 2) class iso _TestSub is UnitTest fun name():String = subtraction fun apply(h: TestHelper) = h.assert_eq[U32](2, 4 - 2) The make() constructor is not needed for this example. However, it allows for easy aggregation of tests (see below) so it is recommended that all test Mains provide it. Main.create() is called only for program invocations on the current package. Main.make() is called during aggregation. If so desired extra code can be added to either of these constructors to perform additional tasks.","title":"Example program"},{"location":"ponytest--index/#test-names","text":"Tests are identified by names, which are used when printing test results and on the command line to select which tests to run. These names are independent of the names of the test classes in the Pony source code. Arbitrary strings can be used for these names, but for large projects it is strongly recommended to use a hierarchical naming scheme to make it easier to select groups of tests. You can skip any tests whose names start with a given string by using the --exclude=[prefix] command line option. You can run only tests whose names start with a given string by using the --only=[prefix] command line option.","title":"Test names"},{"location":"ponytest--index/#aggregation","text":"Often it is desirable to run a collection of unit tests from multiple different source files. For example, if several packages within a bundle each have their own unit tests it may be useful to run all tests for the bundle together. This can be achieved by writing an aggregate test list class, which calls the list function for each package. The following is an example that aggregates the tests from packages foo and bar . use ponytest use foo = foo use bar = bar actor Main is TestList new create(env: Env) = PonyTest(env, this) new make() = None fun tag tests(test: PonyTest) = foo.Main.make().tests(test) bar.Main.make().tests(test) Aggregate test classes may themselves be aggregated. Every test list class may contain any combination of its own tests and aggregated lists.","title":"Aggregation"},{"location":"ponytest--index/#long-tests","text":"Simple tests run within a single function. When that function exits, either returning or raising an error, the test is complete. This is not viable for tests that need to use actors. Long tests allow for delayed completion. Any test can call long_test() on its TestHelper to indicate that it needs to keep running. When the test is finally complete it calls complete() on its TestHelper. The complete() function takes a Bool parameter to specify whether the test was a success. If any asserts fail then the test will be considered a failure regardless of the value of this parameter. However, complete() must still be called. Since failing tests may hang, a timeout must be specified for each long test. When the test function exits a timer is started with the specified timeout. If this timer fires before complete() is called the test is marked as a failure and the timeout is reported. On a timeout the timed_out() function is called on the unit test object. This should perform whatever test specific tidy up is required to allow the program to exit. There is no need to call complete() if a timeout occurs, although it is not an error to do so. Note that the timeout is only relevant when a test hangs and would otherwise prevent the test program from completing. Setting a very long timeout on tests that should not be able to hang is perfectly acceptable and will not make the test take any longer if successful. Timeouts should not be used as the standard method of detecting if a test has failed.","title":"Long tests"},{"location":"ponytest--index/#exclusion-groups","text":"By default all tests are run concurrently. This may be a problem for some tests, eg if they manipulate an external file or use a system resource. To fix this issue any number of tests may be put into an exclusion group. No tests that are in the same exclusion group will be run concurrently. Exclusion groups are identified by name, arbitrary strings may be used. Multiple exclusion groups may be used and tests in different groups may run concurrently. Tests that do not specify an exclusion group may be run concurrently with any other tests. The command line option \"--sequential\" prevents any tests from running concurrently, regardless of exclusion groups. This is intended for debugging rather than standard use.","title":"Exclusion groups"},{"location":"ponytest--index/#labels","text":"Test can have label. Labels are used to filter which tests are run, by setting command line argument --label=[some custom label] . It can be used to separate unit tests from integration tests. By default label is empty. You can set it up by overriding label(): String method in unit test. use ponytest class iso _I8AddTest is UnitTest fun name(): String = _I8AddTest fun label(): String = simple fun apply(h: TestHelper) = h.assert_eq[I8](1, 1)","title":"Labels"},{"location":"ponytest--index/#setting-up-and-tearing-down-a-test-environment","text":"","title":"Setting up and tearing down a test environment"},{"location":"ponytest--index/#set-up","text":"Any kind of fixture or environment necessary for executing a UnitTest can be set up either in the tests constructor or in a function called set_up() . set_up() is called before the test is executed. It is partial, if it errors, the test is not executed but reported as failing during set up. The test's TestHelper is handed to set_up() in order to log messages or access the tests Env via TestHelper.env .","title":"Set Up"},{"location":"ponytest--index/#tear-down","text":"Each unit test object may define a tear_down() function. This is called after the test has finished to allow tearing down of any complex environment that had to be set up for the test. The tear_down() function is called for each test regardless of whether it passed or failed. If a test times out tear_down() will be called after timed_out() returns. When a test is in an exclusion group, the tear_down() call is considered part of the tests run. The next test in the exclusion group will not start until after tear_down() returns on the current test. The test's TestHelper is handed to tear_down() and it is permitted to log messages and call assert functions during tear down.","title":"Tear Down"},{"location":"ponytest--index/#example","text":"The following example creates a temporary directory in the set_up() function and removes it in the tear_down() function, thus simplifying the test function itself: use ponytest use files class iso TempDirTest var tmp_dir: (FilePath | None) = None fun name(): String = temp-dir fun ref set_up(h: TestHelper)? = tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, temp-dir )? fun ref tear_down(h: TestHelper) = try (tmp_dir as FilePath).remove() end fun apply(h: TestHelper)? = let dir = tmp_dir as FilePath // do something inside the temporary directory","title":"Example"},{"location":"ponytest--index/#public-types","text":"trait UnitTest trait TestList interface ITest class TestHelper actor PonyTest","title":"Public Types"},{"location":"ponytest--index/#private-types","text":"trait _Group actor _ExclusiveGroup actor _SimultaneousGroup primitive _Color","title":"Private Types"},{"location":"ponytest-ITest/","text":"ITest [Source] interface ref ITest Public Functions apply [Source] fun box apply() : None val ? Returns None val ?","title":"interface ITest"},{"location":"ponytest-ITest/#itest","text":"[Source] interface ref ITest","title":"ITest"},{"location":"ponytest-ITest/#public-functions","text":"","title":"Public Functions"},{"location":"ponytest-ITest/#apply","text":"[Source] fun box apply() : None val ?","title":"apply"},{"location":"ponytest-ITest/#returns","text":"None val ?","title":"Returns"},{"location":"ponytest-PonyTest/","text":"PonyTest [Source] Main test framework actor that organises tests, collates information and prints results. actor tag PonyTest Constructors create [Source] Create a PonyTest object and use it to run the tests from the given TestList new tag create( env: Env val, list: TestList tag) : PonyTest tag^ Parameters env: Env val list: TestList tag Returns PonyTest tag^ Public Behaviours apply [Source] Run the given test, subject to our filters and options. be apply( test: UnitTest iso) Parameters test: UnitTest iso Private Behaviours _test_started [Source] A test has started running, update status info. The id parameter is the test identifier handed out when we created the test helper. be _test_started( id: USize val) Parameters id: USize val _test_complete [Source] A test has completed, restore its result and update our status info. The id parameter is the test identifier handed out when we created the test helper. be _test_complete( id: USize val, pass: Bool val, log: Array[String val] val) Parameters id: USize val pass: Bool val log: Array [ String val] val _all_tests_applied [Source] All our tests have been handed to apply(), setup for finishing be _all_tests_applied() Private Functions _find_group [Source] Find the group to use for the given group name, subject to the --sequential flag. fun ref _find_group( group_name: String val) : _Group tag Parameters group_name: String val Returns _Group tag _process_opts [Source] Process our command line options. All command line arguments given must be recognised and make sense. State for specified options is stored in object fields. We don't use the options package because we aren't already dependencies. fun ref _process_opts() : None val Returns None val _print_report [Source] The tests are all complete, print out the results. fun box _print_report() : None val Returns None val _plural [Source] Return a \"s\" or an empty string depending on whether the given number is 1. For use when printing possibly plural words, eg \"test\" or \"tests\". fun box _plural( n: USize val) : String val Parameters n: USize val Returns String val","title":"actor PonyTest"},{"location":"ponytest-PonyTest/#ponytest","text":"[Source] Main test framework actor that organises tests, collates information and prints results. actor tag PonyTest","title":"PonyTest"},{"location":"ponytest-PonyTest/#constructors","text":"","title":"Constructors"},{"location":"ponytest-PonyTest/#create","text":"[Source] Create a PonyTest object and use it to run the tests from the given TestList new tag create( env: Env val, list: TestList tag) : PonyTest tag^","title":"create"},{"location":"ponytest-PonyTest/#parameters","text":"env: Env val list: TestList tag","title":"Parameters"},{"location":"ponytest-PonyTest/#returns","text":"PonyTest tag^","title":"Returns"},{"location":"ponytest-PonyTest/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"ponytest-PonyTest/#apply","text":"[Source] Run the given test, subject to our filters and options. be apply( test: UnitTest iso)","title":"apply"},{"location":"ponytest-PonyTest/#parameters_1","text":"test: UnitTest iso","title":"Parameters"},{"location":"ponytest-PonyTest/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"ponytest-PonyTest/#_test_started","text":"[Source] A test has started running, update status info. The id parameter is the test identifier handed out when we created the test helper. be _test_started( id: USize val)","title":"_test_started"},{"location":"ponytest-PonyTest/#parameters_2","text":"id: USize val","title":"Parameters"},{"location":"ponytest-PonyTest/#_test_complete","text":"[Source] A test has completed, restore its result and update our status info. The id parameter is the test identifier handed out when we created the test helper. be _test_complete( id: USize val, pass: Bool val, log: Array[String val] val)","title":"_test_complete"},{"location":"ponytest-PonyTest/#parameters_3","text":"id: USize val pass: Bool val log: Array [ String val] val","title":"Parameters"},{"location":"ponytest-PonyTest/#_all_tests_applied","text":"[Source] All our tests have been handed to apply(), setup for finishing be _all_tests_applied()","title":"_all_tests_applied"},{"location":"ponytest-PonyTest/#private-functions","text":"","title":"Private Functions"},{"location":"ponytest-PonyTest/#_find_group","text":"[Source] Find the group to use for the given group name, subject to the --sequential flag. fun ref _find_group( group_name: String val) : _Group tag","title":"_find_group"},{"location":"ponytest-PonyTest/#parameters_4","text":"group_name: String val","title":"Parameters"},{"location":"ponytest-PonyTest/#returns_1","text":"_Group tag","title":"Returns"},{"location":"ponytest-PonyTest/#_process_opts","text":"[Source] Process our command line options. All command line arguments given must be recognised and make sense. State for specified options is stored in object fields. We don't use the options package because we aren't already dependencies. fun ref _process_opts() : None val","title":"_process_opts"},{"location":"ponytest-PonyTest/#returns_2","text":"None val","title":"Returns"},{"location":"ponytest-PonyTest/#_print_report","text":"[Source] The tests are all complete, print out the results. fun box _print_report() : None val","title":"_print_report"},{"location":"ponytest-PonyTest/#returns_3","text":"None val","title":"Returns"},{"location":"ponytest-PonyTest/#_plural","text":"[Source] Return a \"s\" or an empty string depending on whether the given number is 1. For use when printing possibly plural words, eg \"test\" or \"tests\". fun box _plural( n: USize val) : String val","title":"_plural"},{"location":"ponytest-PonyTest/#parameters_5","text":"n: USize val","title":"Parameters"},{"location":"ponytest-PonyTest/#returns_4","text":"String val","title":"Returns"},{"location":"ponytest-TestHelper/","text":"TestHelper [Source] Per unit test class that provides control, logging and assertion functions. Each unit test is given a TestHelper when it is run. This is val and so can be passed between methods and actors within the test without restriction. The assertion functions check the relevant condition and mark the test as a failure if appropriate. The success or failure of the condition is reported back as a Bool which can be checked if a different code path is needed when that condition fails. All assert functions take an optional message argument. This is simply a string that is printed as part of the error message when the condition fails. It is intended to aid identifying what failed. class val TestHelper Constructors _create [Source] Create a new TestHelper. new val _create( runner: _TestRunner tag, env': Env val) : TestHelper val^ Parameters runner: _TestRunner tag env': Env val Returns TestHelper val^ Public fields let env: Env val [Source] The process environment. This is useful for getting the root authority in order to access the filesystem (See files ) or the network (See net ) in your tests. Public Functions log [Source] Log the given message. The verbose parameter allows messages to be printed only when the --verbose command line option is used. For example, by default assert failures are logged, but passes are not. With --verbose both passes and fails are reported. Logs are printed one test at a time to avoid interleaving log lines from concurrent tests. fun box log( msg: String val, verbose: Bool val = seq) : None val Parameters msg: String val verbose: Bool val = seq Returns None val fail [Source] Flag the test as having failed. fun box fail( msg: String val = seq) : None val Parameters msg: String val = seq Returns None val assert_true [Source] Assert that the given expression is true. fun box assert_true( actual: Bool val, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters actual: Bool val msg: String val = seq loc: SourceLoc val = seq Returns Bool val assert_false [Source] Assert that the given expression is false. fun box assert_false( actual: Bool val, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters actual: Bool val msg: String val = seq loc: SourceLoc val = seq Returns Bool val assert_error [Source] Assert that the given test function throws an error when run. fun box assert_error( test: ITest box, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters test: ITest box msg: String val = seq loc: SourceLoc val = seq Returns Bool val assert_no_error [Source] Assert that the gived test function does not throw an error when run. fun box assert_no_error( test: ITest box, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters test: ITest box msg: String val = seq loc: SourceLoc val = seq Returns Bool val assert_is[A: A] [Source] Assert that the 2 given expressions resolve to the same instance fun box assert_is[A: A]( expect: A, actual: A, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters expect: A actual: A msg: String val = seq loc: SourceLoc val = seq Returns Bool val assert_eq[A: ( Equatable [A] #read Stringable #read)] [Source] Assert that the 2 given expressions are equal. fun box assert_eq[A: (Equatable[A] #read Stringable #read)]( expect: A, actual: A, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters expect: A actual: A msg: String val = seq loc: SourceLoc val = seq Returns Bool val assert_isnt[A: A] [Source] Assert that the 2 given expressions resolve to different instances. fun box assert_isnt[A: A]( not_expect: A, actual: A, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters not_expect: A actual: A msg: String val = seq loc: SourceLoc val = seq Returns Bool val assert_ne[A: ( Equatable [A] #read Stringable #read)] [Source] Assert that the 2 given expressions are not equal. fun box assert_ne[A: (Equatable[A] #read Stringable #read)]( not_expect: A, actual: A, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters not_expect: A actual: A msg: String val = seq loc: SourceLoc val = seq Returns Bool val assert_array_eq[A: ( Equatable [A] #read Stringable #read)] [Source] Assert that the contents of the 2 given ReadSeqs are equal. fun box assert_array_eq[A: (Equatable[A] #read Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = seq loc: SourceLoc val = seq Returns Bool val assert_array_eq_unordered[A: ( Equatable [A] #read Stringable #read)] [Source] Assert that the contents of the 2 given ReadSeqs are equal ignoring order. fun box assert_array_eq_unordered[A: (Equatable[A] #read Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = seq loc: SourceLoc val = seq Returns Bool val long_test [Source] Indicate that this is a long running test that may continue after the test function exits. Once this function is called, complete() must be called to finish the test, unless a timeout occurs. The timeout is specified in nanseconds. fun box long_test( timeout: U64 val) : None val Parameters timeout: U64 val Returns None val complete [Source] MUST be called by each long test to indicate the test has finished, unless a timeout occurs. The \"success\" parameter specifies whether the test succeeded. However if any asserts fail the test will be considered a failure, regardless of the value of this parameter. Once this is called tear_down() may be called at any time. fun box complete( success: Bool val) : None val Parameters success: Bool val Returns None val expect_action [Source] Can be called in a long test to set up expectations for one or more actions that, when all completed, will complete the test. This pattern is useful for cases where you have multiple things that need to happen to complete your test, but don't want to have to collect them all yourself into a single actor that calls the complete method. The order of calls to expect_action don't matter - the actions may be completed in any other order to complete the test. fun box expect_action( name: String val) : None val Parameters name: String val Returns None val complete_action [Source] MUST be called for each action expectation that was set up in a long test to fulfill the expectations. Any expectations that are still outstanding when the long test timeout runs out will be printed by name when it fails. Completing all outstanding actions is enough to finish the test. There's no need to also call the complete method when the actions are finished. Calling the complete method will finish the test immediately, without waiting for any outstanding actions to be completed. fun box complete_action( name: String val) : None val Parameters name: String val Returns None val fail_action [Source] Call to fail an action, which will also cause the entire test to fail immediately, without waiting the rest of the outstanding actions. The name of the failed action will be included in the failure output. Usually the action name should be an expected action set up by a call to expect_action, but failing unexpected actions will also fail the test. fun box fail_action( name: String val) : None val Parameters name: String val Returns None val dispose_when_done [Source] Pass a disposable actor to be disposed of when the test is complete. The actor will be disposed no matter whether the test succeeds or fails. If the test is already tearing down, the actor will be disposed immediately. fun box dispose_when_done( disposable: DisposableActor tag) : None val Parameters disposable: DisposableActor tag Returns None val Private Functions _check_is[A: A] [Source] Check that the 2 given expressions resolve to the same instance fun box _check_is[A: A]( check: String val, expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val Parameters check: String val expect: A actual: A msg: String val loc: SourceLoc val Returns Bool val _check_eq[A: ( Equatable [A] #read Stringable )] [Source] Check that the 2 given expressions are equal. fun box _check_eq[A: (Equatable[A] #read Stringable)]( check: String val, expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val Parameters check: String val expect: A actual: A msg: String val loc: SourceLoc val Returns Bool val _check_isnt[A: A] [Source] Check that the 2 given expressions resolve to different instances. fun box _check_isnt[A: A]( check: String val, not_expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val Parameters check: String val not_expect: A actual: A msg: String val loc: SourceLoc val Returns Bool val _check_ne[A: ( Equatable [A] #read Stringable )] [Source] Check that the 2 given expressions are not equal. fun box _check_ne[A: (Equatable[A] #read Stringable)]( check: String val, not_expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val Parameters check: String val not_expect: A actual: A msg: String val loc: SourceLoc val Returns Bool val _format_loc [Source] fun box _format_loc( loc: SourceLoc val) : String val Parameters loc: SourceLoc val Returns String val _print_array[A: Stringable #read] [Source] Generate a printable string of the contents of the given readseq to use in error messages. fun box _print_array[A: Stringable #read]( array: ReadSeq[A] box) : String val Parameters array: ReadSeq [A] box Returns String val","title":"class TestHelper"},{"location":"ponytest-TestHelper/#testhelper","text":"[Source] Per unit test class that provides control, logging and assertion functions. Each unit test is given a TestHelper when it is run. This is val and so can be passed between methods and actors within the test without restriction. The assertion functions check the relevant condition and mark the test as a failure if appropriate. The success or failure of the condition is reported back as a Bool which can be checked if a different code path is needed when that condition fails. All assert functions take an optional message argument. This is simply a string that is printed as part of the error message when the condition fails. It is intended to aid identifying what failed. class val TestHelper","title":"TestHelper"},{"location":"ponytest-TestHelper/#constructors","text":"","title":"Constructors"},{"location":"ponytest-TestHelper/#_create","text":"[Source] Create a new TestHelper. new val _create( runner: _TestRunner tag, env': Env val) : TestHelper val^","title":"_create"},{"location":"ponytest-TestHelper/#parameters","text":"runner: _TestRunner tag env': Env val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns","text":"TestHelper val^","title":"Returns"},{"location":"ponytest-TestHelper/#public-fields","text":"","title":"Public fields"},{"location":"ponytest-TestHelper/#let-env-env-val","text":"[Source] The process environment. This is useful for getting the root authority in order to access the filesystem (See files ) or the network (See net ) in your tests.","title":"let env: Env val"},{"location":"ponytest-TestHelper/#public-functions","text":"","title":"Public Functions"},{"location":"ponytest-TestHelper/#log","text":"[Source] Log the given message. The verbose parameter allows messages to be printed only when the --verbose command line option is used. For example, by default assert failures are logged, but passes are not. With --verbose both passes and fails are reported. Logs are printed one test at a time to avoid interleaving log lines from concurrent tests. fun box log( msg: String val, verbose: Bool val = seq) : None val","title":"log"},{"location":"ponytest-TestHelper/#parameters_1","text":"msg: String val verbose: Bool val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_1","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#fail","text":"[Source] Flag the test as having failed. fun box fail( msg: String val = seq) : None val","title":"fail"},{"location":"ponytest-TestHelper/#parameters_2","text":"msg: String val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_2","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_true","text":"[Source] Assert that the given expression is true. fun box assert_true( actual: Bool val, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_true"},{"location":"ponytest-TestHelper/#parameters_3","text":"actual: Bool val msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_false","text":"[Source] Assert that the given expression is false. fun box assert_false( actual: Bool val, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_false"},{"location":"ponytest-TestHelper/#parameters_4","text":"actual: Bool val msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_4","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_error","text":"[Source] Assert that the given test function throws an error when run. fun box assert_error( test: ITest box, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_error"},{"location":"ponytest-TestHelper/#parameters_5","text":"test: ITest box msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_5","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_no_error","text":"[Source] Assert that the gived test function does not throw an error when run. fun box assert_no_error( test: ITest box, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_no_error"},{"location":"ponytest-TestHelper/#parameters_6","text":"test: ITest box msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_6","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_is91a-a93","text":"[Source] Assert that the 2 given expressions resolve to the same instance fun box assert_is[A: A]( expect: A, actual: A, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_is[A: A]"},{"location":"ponytest-TestHelper/#parameters_7","text":"expect: A actual: A msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_7","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_eq91a-equatable91a93-read-stringable-read93","text":"[Source] Assert that the 2 given expressions are equal. fun box assert_eq[A: (Equatable[A] #read Stringable #read)]( expect: A, actual: A, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_eq[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponytest-TestHelper/#parameters_8","text":"expect: A actual: A msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_8","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_isnt91a-a93","text":"[Source] Assert that the 2 given expressions resolve to different instances. fun box assert_isnt[A: A]( not_expect: A, actual: A, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_isnt[A: A]"},{"location":"ponytest-TestHelper/#parameters_9","text":"not_expect: A actual: A msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_9","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_ne91a-equatable91a93-read-stringable-read93","text":"[Source] Assert that the 2 given expressions are not equal. fun box assert_ne[A: (Equatable[A] #read Stringable #read)]( not_expect: A, actual: A, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_ne[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponytest-TestHelper/#parameters_10","text":"not_expect: A actual: A msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_10","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_array_eq91a-equatable91a93-read-stringable-read93","text":"[Source] Assert that the contents of the 2 given ReadSeqs are equal. fun box assert_array_eq[A: (Equatable[A] #read Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_array_eq[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponytest-TestHelper/#parameters_11","text":"expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_11","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_array_eq_unordered91a-equatable91a93-read-stringable-read93","text":"[Source] Assert that the contents of the 2 given ReadSeqs are equal ignoring order. fun box assert_array_eq_unordered[A: (Equatable[A] #read Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_array_eq_unordered[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponytest-TestHelper/#parameters_12","text":"expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_12","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#long_test","text":"[Source] Indicate that this is a long running test that may continue after the test function exits. Once this function is called, complete() must be called to finish the test, unless a timeout occurs. The timeout is specified in nanseconds. fun box long_test( timeout: U64 val) : None val","title":"long_test"},{"location":"ponytest-TestHelper/#parameters_13","text":"timeout: U64 val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_13","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#complete","text":"[Source] MUST be called by each long test to indicate the test has finished, unless a timeout occurs. The \"success\" parameter specifies whether the test succeeded. However if any asserts fail the test will be considered a failure, regardless of the value of this parameter. Once this is called tear_down() may be called at any time. fun box complete( success: Bool val) : None val","title":"complete"},{"location":"ponytest-TestHelper/#parameters_14","text":"success: Bool val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_14","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#expect_action","text":"[Source] Can be called in a long test to set up expectations for one or more actions that, when all completed, will complete the test. This pattern is useful for cases where you have multiple things that need to happen to complete your test, but don't want to have to collect them all yourself into a single actor that calls the complete method. The order of calls to expect_action don't matter - the actions may be completed in any other order to complete the test. fun box expect_action( name: String val) : None val","title":"expect_action"},{"location":"ponytest-TestHelper/#parameters_15","text":"name: String val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_15","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#complete_action","text":"[Source] MUST be called for each action expectation that was set up in a long test to fulfill the expectations. Any expectations that are still outstanding when the long test timeout runs out will be printed by name when it fails. Completing all outstanding actions is enough to finish the test. There's no need to also call the complete method when the actions are finished. Calling the complete method will finish the test immediately, without waiting for any outstanding actions to be completed. fun box complete_action( name: String val) : None val","title":"complete_action"},{"location":"ponytest-TestHelper/#parameters_16","text":"name: String val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_16","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#fail_action","text":"[Source] Call to fail an action, which will also cause the entire test to fail immediately, without waiting the rest of the outstanding actions. The name of the failed action will be included in the failure output. Usually the action name should be an expected action set up by a call to expect_action, but failing unexpected actions will also fail the test. fun box fail_action( name: String val) : None val","title":"fail_action"},{"location":"ponytest-TestHelper/#parameters_17","text":"name: String val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_17","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#dispose_when_done","text":"[Source] Pass a disposable actor to be disposed of when the test is complete. The actor will be disposed no matter whether the test succeeds or fails. If the test is already tearing down, the actor will be disposed immediately. fun box dispose_when_done( disposable: DisposableActor tag) : None val","title":"dispose_when_done"},{"location":"ponytest-TestHelper/#parameters_18","text":"disposable: DisposableActor tag","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_18","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#private-functions","text":"","title":"Private Functions"},{"location":"ponytest-TestHelper/#_check_is91a-a93","text":"[Source] Check that the 2 given expressions resolve to the same instance fun box _check_is[A: A]( check: String val, expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val","title":"_check_is[A: A]"},{"location":"ponytest-TestHelper/#parameters_19","text":"check: String val expect: A actual: A msg: String val loc: SourceLoc val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_19","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#_check_eq91a-equatable91a93-read-stringable93","text":"[Source] Check that the 2 given expressions are equal. fun box _check_eq[A: (Equatable[A] #read Stringable)]( check: String val, expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val","title":"_check_eq[A: (Equatable[A] #read &amp; Stringable)]"},{"location":"ponytest-TestHelper/#parameters_20","text":"check: String val expect: A actual: A msg: String val loc: SourceLoc val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_20","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#_check_isnt91a-a93","text":"[Source] Check that the 2 given expressions resolve to different instances. fun box _check_isnt[A: A]( check: String val, not_expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val","title":"_check_isnt[A: A]"},{"location":"ponytest-TestHelper/#parameters_21","text":"check: String val not_expect: A actual: A msg: String val loc: SourceLoc val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_21","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#_check_ne91a-equatable91a93-read-stringable93","text":"[Source] Check that the 2 given expressions are not equal. fun box _check_ne[A: (Equatable[A] #read Stringable)]( check: String val, not_expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val","title":"_check_ne[A: (Equatable[A] #read &amp; Stringable)]"},{"location":"ponytest-TestHelper/#parameters_22","text":"check: String val not_expect: A actual: A msg: String val loc: SourceLoc val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_22","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#_format_loc","text":"[Source] fun box _format_loc( loc: SourceLoc val) : String val","title":"_format_loc"},{"location":"ponytest-TestHelper/#parameters_23","text":"loc: SourceLoc val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_23","text":"String val","title":"Returns"},{"location":"ponytest-TestHelper/#_print_array91a-stringable-read93","text":"[Source] Generate a printable string of the contents of the given readseq to use in error messages. fun box _print_array[A: Stringable #read]( array: ReadSeq[A] box) : String val","title":"_print_array[A: Stringable #read]"},{"location":"ponytest-TestHelper/#parameters_24","text":"array: ReadSeq [A] box","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_24","text":"String val","title":"Returns"},{"location":"ponytest-TestList/","text":"TestList [Source] Source of unit tests for a PonyTest object. See package doc string for further information and example use. trait ref TestList Public Functions tests [Source] Add all the tests in this suite to the given test object. Typically the implementation of this function will be of the form: fun tests(test: PonyTest) = test(_TestClass1) test(_TestClass2) test(_TestClass3) fun tag tests( test: PonyTest tag) : None val Parameters test: PonyTest tag Returns None val","title":"trait TestList"},{"location":"ponytest-TestList/#testlist","text":"[Source] Source of unit tests for a PonyTest object. See package doc string for further information and example use. trait ref TestList","title":"TestList"},{"location":"ponytest-TestList/#public-functions","text":"","title":"Public Functions"},{"location":"ponytest-TestList/#tests","text":"[Source] Add all the tests in this suite to the given test object. Typically the implementation of this function will be of the form: fun tests(test: PonyTest) = test(_TestClass1) test(_TestClass2) test(_TestClass3) fun tag tests( test: PonyTest tag) : None val","title":"tests"},{"location":"ponytest-TestList/#parameters","text":"test: PonyTest tag","title":"Parameters"},{"location":"ponytest-TestList/#returns","text":"None val","title":"Returns"},{"location":"ponytest-UnitTest/","text":"UnitTest [Source] Each unit test class must provide this trait. Simple tests only need to define the name() and apply() functions. The remaining functions specify additional test options. trait ref UnitTest Public Functions name [Source] Report the test name, which is used when printing test results and on the command line to select tests to run. fun box name() : String val Returns String val exclusion_group [Source] Report the test exclusion group, returning an empty string for none. The default body returns an empty string. fun box exclusion_group() : String val Returns String val apply [Source] Run the test. Raising an error is interpreted as a test failure. fun ref apply( h: TestHelper val) : None val ? Parameters h: TestHelper val Returns None val ? timed_out [Source] Tear down a possibly hanging test. Called when the timeout specified by to long_test() expires. There is no need for this function to call complete(false). tear_down() will still be called after this completes. The default is to do nothing. fun ref timed_out( h: TestHelper val) : None val Parameters h: TestHelper val Returns None val set_up [Source] Set up the testing environment before a test method is called. Default is to do nothing. fun ref set_up( h: TestHelper val) : None val ? Parameters h: TestHelper val Returns None val ? tear_down [Source] Tidy up after the test has completed. Called for each run test, whether that test passed, succeeded or timed out. The default is to do nothing. fun ref tear_down( h: TestHelper val) : None val Parameters h: TestHelper val Returns None val label [Source] Report the test label, returning an empty string for none. It can be later use to filter tests which we want to run, by labels. fun box label() : String val Returns String val","title":"trait UnitTest"},{"location":"ponytest-UnitTest/#unittest","text":"[Source] Each unit test class must provide this trait. Simple tests only need to define the name() and apply() functions. The remaining functions specify additional test options. trait ref UnitTest","title":"UnitTest"},{"location":"ponytest-UnitTest/#public-functions","text":"","title":"Public Functions"},{"location":"ponytest-UnitTest/#name","text":"[Source] Report the test name, which is used when printing test results and on the command line to select tests to run. fun box name() : String val","title":"name"},{"location":"ponytest-UnitTest/#returns","text":"String val","title":"Returns"},{"location":"ponytest-UnitTest/#exclusion_group","text":"[Source] Report the test exclusion group, returning an empty string for none. The default body returns an empty string. fun box exclusion_group() : String val","title":"exclusion_group"},{"location":"ponytest-UnitTest/#returns_1","text":"String val","title":"Returns"},{"location":"ponytest-UnitTest/#apply","text":"[Source] Run the test. Raising an error is interpreted as a test failure. fun ref apply( h: TestHelper val) : None val ?","title":"apply"},{"location":"ponytest-UnitTest/#parameters","text":"h: TestHelper val","title":"Parameters"},{"location":"ponytest-UnitTest/#returns_2","text":"None val ?","title":"Returns"},{"location":"ponytest-UnitTest/#timed_out","text":"[Source] Tear down a possibly hanging test. Called when the timeout specified by to long_test() expires. There is no need for this function to call complete(false). tear_down() will still be called after this completes. The default is to do nothing. fun ref timed_out( h: TestHelper val) : None val","title":"timed_out"},{"location":"ponytest-UnitTest/#parameters_1","text":"h: TestHelper val","title":"Parameters"},{"location":"ponytest-UnitTest/#returns_3","text":"None val","title":"Returns"},{"location":"ponytest-UnitTest/#set_up","text":"[Source] Set up the testing environment before a test method is called. Default is to do nothing. fun ref set_up( h: TestHelper val) : None val ?","title":"set_up"},{"location":"ponytest-UnitTest/#parameters_2","text":"h: TestHelper val","title":"Parameters"},{"location":"ponytest-UnitTest/#returns_4","text":"None val ?","title":"Returns"},{"location":"ponytest-UnitTest/#tear_down","text":"[Source] Tidy up after the test has completed. Called for each run test, whether that test passed, succeeded or timed out. The default is to do nothing. fun ref tear_down( h: TestHelper val) : None val","title":"tear_down"},{"location":"ponytest-UnitTest/#parameters_3","text":"h: TestHelper val","title":"Parameters"},{"location":"ponytest-UnitTest/#returns_5","text":"None val","title":"Returns"},{"location":"ponytest-UnitTest/#label","text":"[Source] Report the test label, returning an empty string for none. It can be later use to filter tests which we want to run, by labels. fun box label() : String val","title":"label"},{"location":"ponytest-UnitTest/#returns_6","text":"String val","title":"Returns"},{"location":"ponytest-_Color/","text":"_Color [Source] Strings to embedded in text to specify colours. These are copies of the strings defined in packages/term. They are duplicated here to avoid a dependency. primitive val _Color Constructors create [Source] new val create() : _Color val^ Returns _Color val^ Public Functions reset [Source] Resets all colours and text styles to the default. fun box reset() : String val Returns String val red [Source] Bright red text. fun box red() : String val Returns String val green [Source] Bright green text. fun box green() : String val Returns String val eq [Source] fun box eq( that: _Color val) : Bool val Parameters that: _Color val Returns Bool val ne [Source] fun box ne( that: _Color val) : Bool val Parameters that: _Color val Returns Bool val","title":"primitive _Color"},{"location":"ponytest-_Color/#_color","text":"[Source] Strings to embedded in text to specify colours. These are copies of the strings defined in packages/term. They are duplicated here to avoid a dependency. primitive val _Color","title":"_Color"},{"location":"ponytest-_Color/#constructors","text":"","title":"Constructors"},{"location":"ponytest-_Color/#create","text":"[Source] new val create() : _Color val^","title":"create"},{"location":"ponytest-_Color/#returns","text":"_Color val^","title":"Returns"},{"location":"ponytest-_Color/#public-functions","text":"","title":"Public Functions"},{"location":"ponytest-_Color/#reset","text":"[Source] Resets all colours and text styles to the default. fun box reset() : String val","title":"reset"},{"location":"ponytest-_Color/#returns_1","text":"String val","title":"Returns"},{"location":"ponytest-_Color/#red","text":"[Source] Bright red text. fun box red() : String val","title":"red"},{"location":"ponytest-_Color/#returns_2","text":"String val","title":"Returns"},{"location":"ponytest-_Color/#green","text":"[Source] Bright green text. fun box green() : String val","title":"green"},{"location":"ponytest-_Color/#returns_3","text":"String val","title":"Returns"},{"location":"ponytest-_Color/#eq","text":"[Source] fun box eq( that: _Color val) : Bool val","title":"eq"},{"location":"ponytest-_Color/#parameters","text":"that: _Color val","title":"Parameters"},{"location":"ponytest-_Color/#returns_4","text":"Bool val","title":"Returns"},{"location":"ponytest-_Color/#ne","text":"[Source] fun box ne( that: _Color val) : Bool val","title":"ne"},{"location":"ponytest-_Color/#parameters_1","text":"that: _Color val","title":"Parameters"},{"location":"ponytest-_Color/#returns_5","text":"Bool val","title":"Returns"},{"location":"ponytest-_ExclusiveGroup/","text":"_ExclusiveGroup [Source] Test group in which we only ever have one test running at a time. actor tag _ExclusiveGroup is _Group tag Implements _Group tag Constructors create [Source] new tag create() : _ExclusiveGroup tag^ Returns _ExclusiveGroup tag^ Public Behaviours apply [Source] be apply( runner: _TestRunner tag) Parameters runner: _TestRunner tag Private Behaviours _test_complete [Source] be _test_complete( runner: _TestRunner tag) Parameters runner: _TestRunner tag","title":"actor _ExclusiveGroup"},{"location":"ponytest-_ExclusiveGroup/#_exclusivegroup","text":"[Source] Test group in which we only ever have one test running at a time. actor tag _ExclusiveGroup is _Group tag","title":"_ExclusiveGroup"},{"location":"ponytest-_ExclusiveGroup/#implements","text":"_Group tag","title":"Implements"},{"location":"ponytest-_ExclusiveGroup/#constructors","text":"","title":"Constructors"},{"location":"ponytest-_ExclusiveGroup/#create","text":"[Source] new tag create() : _ExclusiveGroup tag^","title":"create"},{"location":"ponytest-_ExclusiveGroup/#returns","text":"_ExclusiveGroup tag^","title":"Returns"},{"location":"ponytest-_ExclusiveGroup/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"ponytest-_ExclusiveGroup/#apply","text":"[Source] be apply( runner: _TestRunner tag)","title":"apply"},{"location":"ponytest-_ExclusiveGroup/#parameters","text":"runner: _TestRunner tag","title":"Parameters"},{"location":"ponytest-_ExclusiveGroup/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"ponytest-_ExclusiveGroup/#_test_complete","text":"[Source] be _test_complete( runner: _TestRunner tag)","title":"_test_complete"},{"location":"ponytest-_ExclusiveGroup/#parameters_1","text":"runner: _TestRunner tag","title":"Parameters"},{"location":"ponytest-_Group/","text":"_Group [Source] Test exclusion is achieved by organising tests into groups. Each group can be exclusive, ie only one test is run at a time, or simultaneous, ie all tests are run concurrently. trait tag _Group Public Behaviours apply [Source] Run the given test, or queue it and run later, as appropriate. be apply( runner: _TestRunner tag) Parameters runner: _TestRunner tag Private Behaviours _test_complete [Source] The specified test has completed. be _test_complete( runner: _TestRunner tag) Parameters runner: _TestRunner tag","title":"trait _Group"},{"location":"ponytest-_Group/#_group","text":"[Source] Test exclusion is achieved by organising tests into groups. Each group can be exclusive, ie only one test is run at a time, or simultaneous, ie all tests are run concurrently. trait tag _Group","title":"_Group"},{"location":"ponytest-_Group/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"ponytest-_Group/#apply","text":"[Source] Run the given test, or queue it and run later, as appropriate. be apply( runner: _TestRunner tag)","title":"apply"},{"location":"ponytest-_Group/#parameters","text":"runner: _TestRunner tag","title":"Parameters"},{"location":"ponytest-_Group/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"ponytest-_Group/#_test_complete","text":"[Source] The specified test has completed. be _test_complete( runner: _TestRunner tag)","title":"_test_complete"},{"location":"ponytest-_Group/#parameters_1","text":"runner: _TestRunner tag","title":"Parameters"},{"location":"ponytest-_SimultaneousGroup/","text":"_SimultaneousGroup [Source] Test group in which all tests can run concurrently. actor tag _SimultaneousGroup is _Group tag Implements _Group tag Constructors create [Source] new tag create() : _SimultaneousGroup tag^ Returns _SimultaneousGroup tag^ Public Behaviours apply [Source] be apply( runner: _TestRunner tag) Parameters runner: _TestRunner tag Private Behaviours _test_complete [Source] be _test_complete( runner: _TestRunner tag) Parameters runner: _TestRunner tag","title":"actor _SimultaneousGroup"},{"location":"ponytest-_SimultaneousGroup/#_simultaneousgroup","text":"[Source] Test group in which all tests can run concurrently. actor tag _SimultaneousGroup is _Group tag","title":"_SimultaneousGroup"},{"location":"ponytest-_SimultaneousGroup/#implements","text":"_Group tag","title":"Implements"},{"location":"ponytest-_SimultaneousGroup/#constructors","text":"","title":"Constructors"},{"location":"ponytest-_SimultaneousGroup/#create","text":"[Source] new tag create() : _SimultaneousGroup tag^","title":"create"},{"location":"ponytest-_SimultaneousGroup/#returns","text":"_SimultaneousGroup tag^","title":"Returns"},{"location":"ponytest-_SimultaneousGroup/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"ponytest-_SimultaneousGroup/#apply","text":"[Source] be apply( runner: _TestRunner tag)","title":"apply"},{"location":"ponytest-_SimultaneousGroup/#parameters","text":"runner: _TestRunner tag","title":"Parameters"},{"location":"ponytest-_SimultaneousGroup/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"ponytest-_SimultaneousGroup/#_test_complete","text":"[Source] be _test_complete( runner: _TestRunner tag)","title":"_test_complete"},{"location":"ponytest-_SimultaneousGroup/#parameters_1","text":"runner: _TestRunner tag","title":"Parameters"},{"location":"promises--index/","text":"Promises Package A Promise represents a value that will be available at a later time. Promise s can either be fulfilled with a value or rejected. Any number of function handlers can be added to the Promise , to be called when the Promise is fulfilled or rejected. These handlers themselves are also wrapped in Promise s so that they can be chained together in order for the fulfilled value of one Promise to be used to compute a value which will be used to fulfill the next Promise in the chain, or so that if the Promise is rejected then the subsequent reject functions will also be called. The input and output types of a fulfill handler do not have to be the same, so a chain of fulfill handlers can transform the original value into something new. Fulfill and reject handlers can either be specified as classes that implment the Fulfill and Reject interfaces, or as functions with the same signatures as the apply methods in Fulfill and Reject . In the following code, the fulfillment of the Promise causes the execution of several fulfillment functions. The output is: fulfilled + foo fulfilled + bar fulfilled + baz use promises class PrintFulfill is Fulfill[String, String] let _env: Env let _msg: String new create(env: Env, msg: String) = _env = env _msg = msg fun apply(s: String): String = _env.out.print( + .join([s; _msg].values())) s actor Main new create(env: Env) = let promise = Promise[String] promise.next[String](recover PrintFulfill(env, foo ) end) promise.next[String](recover PrintFulfill(env, bar ) end) promise.next[String](recover PrintFulfill(env, baz ) end) promise( fulfilled ) In the following code, the fulfill functions are chained together so that the fulfilled value of the first one is used to generate a value which fulfills the second one, which in turn is used to compute a value which fulfills the third one, which in turn is used to compute a value which fulfills the fourth one. The output is the average length of the words passed on the command line or 0 if there are no command line arguments. use promises primitive Computation fun tag string_to_strings(s: String): Array[String] val = recover s.split() end fun tag strings_to_sizes(sa: Array[String] val): Array[USize] val = recover let len = Array[USize] for s in sa.values() do len.push(s.size()) end len end fun tag sizes_to_avg(sza: Array[USize] val): USize = var acc = USize(0) for sz in sza.values() do acc = acc + sz end acc / sza.size() fun tag output(env: Env, sz: USize): None = env.out.print(sz.string()) actor Main new create(env: Env) = let promise = Promise[String] promise.next[Array[String] val](recover Computation~string_to_strings() end) .next[Array[USize] val](recover Computation~strings_to_sizes() end) .next[USize](recover Computation~sizes_to_avg() end) .next[None](recover Computation~output(env) end) promise( .join(env.args.slice(1).values())) Public Types actor Promise primitive Promises interface Fulfill interface Reject class FulfillIdentity class RejectAlways Private Types actor _Join primitive _None primitive _Pending primitive _Reject class _Then interface _IThen","title":"Package"},{"location":"promises--index/#promises-package","text":"A Promise represents a value that will be available at a later time. Promise s can either be fulfilled with a value or rejected. Any number of function handlers can be added to the Promise , to be called when the Promise is fulfilled or rejected. These handlers themselves are also wrapped in Promise s so that they can be chained together in order for the fulfilled value of one Promise to be used to compute a value which will be used to fulfill the next Promise in the chain, or so that if the Promise is rejected then the subsequent reject functions will also be called. The input and output types of a fulfill handler do not have to be the same, so a chain of fulfill handlers can transform the original value into something new. Fulfill and reject handlers can either be specified as classes that implment the Fulfill and Reject interfaces, or as functions with the same signatures as the apply methods in Fulfill and Reject . In the following code, the fulfillment of the Promise causes the execution of several fulfillment functions. The output is: fulfilled + foo fulfilled + bar fulfilled + baz use promises class PrintFulfill is Fulfill[String, String] let _env: Env let _msg: String new create(env: Env, msg: String) = _env = env _msg = msg fun apply(s: String): String = _env.out.print( + .join([s; _msg].values())) s actor Main new create(env: Env) = let promise = Promise[String] promise.next[String](recover PrintFulfill(env, foo ) end) promise.next[String](recover PrintFulfill(env, bar ) end) promise.next[String](recover PrintFulfill(env, baz ) end) promise( fulfilled ) In the following code, the fulfill functions are chained together so that the fulfilled value of the first one is used to generate a value which fulfills the second one, which in turn is used to compute a value which fulfills the third one, which in turn is used to compute a value which fulfills the fourth one. The output is the average length of the words passed on the command line or 0 if there are no command line arguments. use promises primitive Computation fun tag string_to_strings(s: String): Array[String] val = recover s.split() end fun tag strings_to_sizes(sa: Array[String] val): Array[USize] val = recover let len = Array[USize] for s in sa.values() do len.push(s.size()) end len end fun tag sizes_to_avg(sza: Array[USize] val): USize = var acc = USize(0) for sz in sza.values() do acc = acc + sz end acc / sza.size() fun tag output(env: Env, sz: USize): None = env.out.print(sz.string()) actor Main new create(env: Env) = let promise = Promise[String] promise.next[Array[String] val](recover Computation~string_to_strings() end) .next[Array[USize] val](recover Computation~strings_to_sizes() end) .next[USize](recover Computation~sizes_to_avg() end) .next[None](recover Computation~output(env) end) promise( .join(env.args.slice(1).values()))","title":"Promises Package"},{"location":"promises--index/#public-types","text":"actor Promise primitive Promises interface Fulfill interface Reject class FulfillIdentity class RejectAlways","title":"Public Types"},{"location":"promises--index/#private-types","text":"actor _Join primitive _None primitive _Pending primitive _Reject class _Then interface _IThen","title":"Private Types"},{"location":"promises-Fulfill/","text":"Fulfill[A: Any #share, B: Any #share] [Source] A function from A to B that is called when a promise is fulfilled. interface iso Fulfill[A: Any #share, B: Any #share] Public Functions apply [Source] fun ref apply( value: A) : B ? Parameters value: A Returns B ?","title":"interface Fulfill"},{"location":"promises-Fulfill/#fulfill91a-any-share-b-any-share93","text":"[Source] A function from A to B that is called when a promise is fulfilled. interface iso Fulfill[A: Any #share, B: Any #share]","title":"Fulfill[A: Any #share, B: Any #share]"},{"location":"promises-Fulfill/#public-functions","text":"","title":"Public Functions"},{"location":"promises-Fulfill/#apply","text":"[Source] fun ref apply( value: A) : B ?","title":"apply"},{"location":"promises-Fulfill/#parameters","text":"value: A","title":"Parameters"},{"location":"promises-Fulfill/#returns","text":"B ?","title":"Returns"},{"location":"promises-FulfillIdentity/","text":"FulfillIdentity[A: Any #share] [Source] An identity function for fulfilling promises. class iso FulfillIdentity[A: Any #share] Constructors create [Source] new iso create() : FulfillIdentity[A] iso^ Returns FulfillIdentity [A] iso^ Public Functions apply [Source] fun ref apply( value: A) : A Parameters value: A Returns A","title":"class FulfillIdentity"},{"location":"promises-FulfillIdentity/#fulfillidentity91a-any-share93","text":"[Source] An identity function for fulfilling promises. class iso FulfillIdentity[A: Any #share]","title":"FulfillIdentity[A: Any #share]"},{"location":"promises-FulfillIdentity/#constructors","text":"","title":"Constructors"},{"location":"promises-FulfillIdentity/#create","text":"[Source] new iso create() : FulfillIdentity[A] iso^","title":"create"},{"location":"promises-FulfillIdentity/#returns","text":"FulfillIdentity [A] iso^","title":"Returns"},{"location":"promises-FulfillIdentity/#public-functions","text":"","title":"Public Functions"},{"location":"promises-FulfillIdentity/#apply","text":"[Source] fun ref apply( value: A) : A","title":"apply"},{"location":"promises-FulfillIdentity/#parameters","text":"value: A","title":"Parameters"},{"location":"promises-FulfillIdentity/#returns_1","text":"A","title":"Returns"},{"location":"promises-Promise/","text":"Promise[A: Any #share] [Source] A promise to eventually produce a result of type A. This promise can either be fulfilled or rejected. Any number of promises can be chained after this one. actor tag Promise[A: Any #share] Constructors create [Source] new tag create() : Promise[A] tag^ Returns Promise [A] tag^ Public Behaviours apply [Source] Fulfill the promise. be apply( value: A) Parameters value: A reject [Source] Reject the promise. be reject() Public Functions next[B: Any #share] [Source] Chain a promise after this one. When this promise is fulfilled, the result of type A is passed to the fulfill function, generating in an intermediate result of type B. This is then used to fulfill the next promise in the chain. If there is no fulfill function, or if the fulfill function raises an error, then the next promise in the chain will be rejected. If this promise is rejected, this step's reject function is called with no input, generating an intermediate result of type B which is used to fulfill the next promise in the chain. If there is no reject function, of if the reject function raises an error, then the next promise in the chain will be rejected. fun tag next[B: Any #share]( fulfill: Fulfill[A, B] iso, rejected: Reject[B] iso = seq) : Promise[B] tag Parameters fulfill: Fulfill [A, B] iso rejected: Reject [B] iso = seq Returns Promise [B] tag add[optional B: Any #share] [Source] Add two promises into one promise that returns the result of both when they are fulfilled. If either of the promises is rejected then the new promise is also rejected. fun tag add[optional B: Any #share]( p: Promise[B] tag) : Promise[(A , B)] tag Parameters p: Promise [B] tag Returns Promise [(A , B)] tag join [Source] Create a promise that is fulfilled when the receiver and all promises in the given iterator are fulfilled. If the receiver or any promise in the sequence is rejected then the new promise is also rejected. Join p1 and p2 with an existing promise, p3 . use promises actor Main new create(env: Env) = let p1 = Promise[String val] let p2 = Promise[String val] let p3 = Promise[String val] p3.join([p1; p2].values()) .next[None]({(a: Array[String val] val) = for s in a.values() do env.out.print(s) end }) p2( second ) p3( third ) p1( first ) fun tag join( ps: Iterator[Promise[A] tag] ref) : Promise[Array[A] val] tag Parameters ps: Iterator [ Promise [A] tag] ref Returns Promise [ Array [A] val] tag select [Source] Return a promise that is fulfilled when either promise is fulfilled, resulting in a tuple of its value and the other promise. fun tag select( p: Promise[A] tag) : Promise[(A , Promise[A] tag)] tag Parameters p: Promise [A] tag Returns Promise [(A , Promise [A] tag)] tag timeout [Source] Reject the promise after the given expiration in nanoseconds. fun tag timeout( expiration: U64 val) : None val Parameters expiration: U64 val Returns None val Private Behaviours _attach [Source] Attaches a step asynchronously. If this promise has already been fulfilled or rejected, immediately fulfill or reject the incoming step. Otherwise, keep it in a list. be _attach( attach: _IThen[A] iso) Parameters attach: _IThen [A] iso","title":"actor Promise"},{"location":"promises-Promise/#promise91a-any-share93","text":"[Source] A promise to eventually produce a result of type A. This promise can either be fulfilled or rejected. Any number of promises can be chained after this one. actor tag Promise[A: Any #share]","title":"Promise[A: Any #share]"},{"location":"promises-Promise/#constructors","text":"","title":"Constructors"},{"location":"promises-Promise/#create","text":"[Source] new tag create() : Promise[A] tag^","title":"create"},{"location":"promises-Promise/#returns","text":"Promise [A] tag^","title":"Returns"},{"location":"promises-Promise/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"promises-Promise/#apply","text":"[Source] Fulfill the promise. be apply( value: A)","title":"apply"},{"location":"promises-Promise/#parameters","text":"value: A","title":"Parameters"},{"location":"promises-Promise/#reject","text":"[Source] Reject the promise. be reject()","title":"reject"},{"location":"promises-Promise/#public-functions","text":"","title":"Public Functions"},{"location":"promises-Promise/#next91b-any-share93","text":"[Source] Chain a promise after this one. When this promise is fulfilled, the result of type A is passed to the fulfill function, generating in an intermediate result of type B. This is then used to fulfill the next promise in the chain. If there is no fulfill function, or if the fulfill function raises an error, then the next promise in the chain will be rejected. If this promise is rejected, this step's reject function is called with no input, generating an intermediate result of type B which is used to fulfill the next promise in the chain. If there is no reject function, of if the reject function raises an error, then the next promise in the chain will be rejected. fun tag next[B: Any #share]( fulfill: Fulfill[A, B] iso, rejected: Reject[B] iso = seq) : Promise[B] tag","title":"next[B: Any #share]"},{"location":"promises-Promise/#parameters_1","text":"fulfill: Fulfill [A, B] iso rejected: Reject [B] iso = seq","title":"Parameters"},{"location":"promises-Promise/#returns_1","text":"Promise [B] tag","title":"Returns"},{"location":"promises-Promise/#add91optional-b-any-share93","text":"[Source] Add two promises into one promise that returns the result of both when they are fulfilled. If either of the promises is rejected then the new promise is also rejected. fun tag add[optional B: Any #share]( p: Promise[B] tag) : Promise[(A , B)] tag","title":"add[optional B: Any #share]"},{"location":"promises-Promise/#parameters_2","text":"p: Promise [B] tag","title":"Parameters"},{"location":"promises-Promise/#returns_2","text":"Promise [(A , B)] tag","title":"Returns"},{"location":"promises-Promise/#join","text":"[Source] Create a promise that is fulfilled when the receiver and all promises in the given iterator are fulfilled. If the receiver or any promise in the sequence is rejected then the new promise is also rejected. Join p1 and p2 with an existing promise, p3 . use promises actor Main new create(env: Env) = let p1 = Promise[String val] let p2 = Promise[String val] let p3 = Promise[String val] p3.join([p1; p2].values()) .next[None]({(a: Array[String val] val) = for s in a.values() do env.out.print(s) end }) p2( second ) p3( third ) p1( first ) fun tag join( ps: Iterator[Promise[A] tag] ref) : Promise[Array[A] val] tag","title":"join"},{"location":"promises-Promise/#parameters_3","text":"ps: Iterator [ Promise [A] tag] ref","title":"Parameters"},{"location":"promises-Promise/#returns_3","text":"Promise [ Array [A] val] tag","title":"Returns"},{"location":"promises-Promise/#select","text":"[Source] Return a promise that is fulfilled when either promise is fulfilled, resulting in a tuple of its value and the other promise. fun tag select( p: Promise[A] tag) : Promise[(A , Promise[A] tag)] tag","title":"select"},{"location":"promises-Promise/#parameters_4","text":"p: Promise [A] tag","title":"Parameters"},{"location":"promises-Promise/#returns_4","text":"Promise [(A , Promise [A] tag)] tag","title":"Returns"},{"location":"promises-Promise/#timeout","text":"[Source] Reject the promise after the given expiration in nanoseconds. fun tag timeout( expiration: U64 val) : None val","title":"timeout"},{"location":"promises-Promise/#parameters_5","text":"expiration: U64 val","title":"Parameters"},{"location":"promises-Promise/#returns_5","text":"None val","title":"Returns"},{"location":"promises-Promise/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"promises-Promise/#_attach","text":"[Source] Attaches a step asynchronously. If this promise has already been fulfilled or rejected, immediately fulfill or reject the incoming step. Otherwise, keep it in a list. be _attach( attach: _IThen[A] iso)","title":"_attach"},{"location":"promises-Promise/#parameters_6","text":"attach: _IThen [A] iso","title":"Parameters"},{"location":"promises-Promises/","text":"Promises[A: Any #share] [Source] primitive val Promises[A: Any #share] Constructors create [Source] new val create() : Promises[A] val^ Returns Promises [A] val^ Public Functions join [Source] Create a promise that is fulfilled when all promises in the given sequence are fulfilled. If any promise in the sequence is rejected then the new promise is also rejected. The order that values appear in the final array is based on when each promise is fulfilled and not the order that they are given. Join three existing promises to make a fourth. use promises actor Main new create(env: Env) = let p1 = Promise[String val] let p2 = Promise[String val] let p3 = Promise[String val] Promises[String val].join([p1; p2; p3].values()) .next[None]({(a: Array[String val] val) = for s in a.values() do env.out.print(s) end }) p2( second ) p3( third ) p1( first ) fun box join( ps: Iterator[Promise[A] tag] ref) : Promise[Array[A] val] tag Parameters ps: Iterator [ Promise [A] tag] ref Returns Promise [ Array [A] val] tag eq [Source] fun box eq( that: Promises[A] val) : Bool val Parameters that: Promises [A] val Returns Bool val ne [Source] fun box ne( that: Promises[A] val) : Bool val Parameters that: Promises [A] val Returns Bool val","title":"primitive Promises"},{"location":"promises-Promises/#promises91a-any-share93","text":"[Source] primitive val Promises[A: Any #share]","title":"Promises[A: Any #share]"},{"location":"promises-Promises/#constructors","text":"","title":"Constructors"},{"location":"promises-Promises/#create","text":"[Source] new val create() : Promises[A] val^","title":"create"},{"location":"promises-Promises/#returns","text":"Promises [A] val^","title":"Returns"},{"location":"promises-Promises/#public-functions","text":"","title":"Public Functions"},{"location":"promises-Promises/#join","text":"[Source] Create a promise that is fulfilled when all promises in the given sequence are fulfilled. If any promise in the sequence is rejected then the new promise is also rejected. The order that values appear in the final array is based on when each promise is fulfilled and not the order that they are given. Join three existing promises to make a fourth. use promises actor Main new create(env: Env) = let p1 = Promise[String val] let p2 = Promise[String val] let p3 = Promise[String val] Promises[String val].join([p1; p2; p3].values()) .next[None]({(a: Array[String val] val) = for s in a.values() do env.out.print(s) end }) p2( second ) p3( third ) p1( first ) fun box join( ps: Iterator[Promise[A] tag] ref) : Promise[Array[A] val] tag","title":"join"},{"location":"promises-Promises/#parameters","text":"ps: Iterator [ Promise [A] tag] ref","title":"Parameters"},{"location":"promises-Promises/#returns_1","text":"Promise [ Array [A] val] tag","title":"Returns"},{"location":"promises-Promises/#eq","text":"[Source] fun box eq( that: Promises[A] val) : Bool val","title":"eq"},{"location":"promises-Promises/#parameters_1","text":"that: Promises [A] val","title":"Parameters"},{"location":"promises-Promises/#returns_2","text":"Bool val","title":"Returns"},{"location":"promises-Promises/#ne","text":"[Source] fun box ne( that: Promises[A] val) : Bool val","title":"ne"},{"location":"promises-Promises/#parameters_2","text":"that: Promises [A] val","title":"Parameters"},{"location":"promises-Promises/#returns_3","text":"Bool val","title":"Returns"},{"location":"promises-Reject/","text":"Reject[A: Any #share] [Source] A function on A that is called when a promise is rejected. interface iso Reject[A: Any #share] Public Functions apply [Source] fun ref apply() : A ? Returns A ?","title":"interface Reject"},{"location":"promises-Reject/#reject91a-any-share93","text":"[Source] A function on A that is called when a promise is rejected. interface iso Reject[A: Any #share]","title":"Reject[A: Any #share]"},{"location":"promises-Reject/#public-functions","text":"","title":"Public Functions"},{"location":"promises-Reject/#apply","text":"[Source] fun ref apply() : A ?","title":"apply"},{"location":"promises-Reject/#returns","text":"A ?","title":"Returns"},{"location":"promises-RejectAlways/","text":"RejectAlways[A: Any #share] [Source] A reject that always raises an error. class iso RejectAlways[A: Any #share] Constructors create [Source] new iso create() : RejectAlways[A] iso^ Returns RejectAlways [A] iso^ Public Functions apply [Source] fun ref apply() : A ? Returns A ?","title":"class RejectAlways"},{"location":"promises-RejectAlways/#rejectalways91a-any-share93","text":"[Source] A reject that always raises an error. class iso RejectAlways[A: Any #share]","title":"RejectAlways[A: Any #share]"},{"location":"promises-RejectAlways/#constructors","text":"","title":"Constructors"},{"location":"promises-RejectAlways/#create","text":"[Source] new iso create() : RejectAlways[A] iso^","title":"create"},{"location":"promises-RejectAlways/#returns","text":"RejectAlways [A] iso^","title":"Returns"},{"location":"promises-RejectAlways/#public-functions","text":"","title":"Public Functions"},{"location":"promises-RejectAlways/#apply","text":"[Source] fun ref apply() : A ?","title":"apply"},{"location":"promises-RejectAlways/#returns_1","text":"A ?","title":"Returns"},{"location":"promises-_IThen/","text":"_IThen[A: Any #share] [Source] An interface representing an abstract Then. This allows for any Then that accepts an input of type A, regardless of the output type. interface ref _IThen[A: Any #share] Public Functions apply [Source] fun ref apply( value: A) : None val Parameters value: A Returns None val reject [Source] fun ref reject() : None val Returns None val","title":"interface _IThen"},{"location":"promises-_IThen/#_ithen91a-any-share93","text":"[Source] An interface representing an abstract Then. This allows for any Then that accepts an input of type A, regardless of the output type. interface ref _IThen[A: Any #share]","title":"_IThen[A: Any #share]"},{"location":"promises-_IThen/#public-functions","text":"","title":"Public Functions"},{"location":"promises-_IThen/#apply","text":"[Source] fun ref apply( value: A) : None val","title":"apply"},{"location":"promises-_IThen/#parameters","text":"value: A","title":"Parameters"},{"location":"promises-_IThen/#returns","text":"None val","title":"Returns"},{"location":"promises-_IThen/#reject","text":"[Source] fun ref reject() : None val","title":"reject"},{"location":"promises-_IThen/#returns_1","text":"None val","title":"Returns"},{"location":"promises-_Join/","text":"_Join[A: Any #share] [Source] actor tag _Join[A: Any #share] Constructors create [Source] new tag create( p: Promise[Array[A] val] tag, space: USize val) : _Join[A] tag^ Parameters p: Promise [ Array [A] val] tag space: USize val Returns _Join [A] tag^ Public Behaviours apply [Source] be apply( a: A) Parameters a: A","title":"actor _Join"},{"location":"promises-_Join/#_join91a-any-share93","text":"[Source] actor tag _Join[A: Any #share]","title":"_Join[A: Any #share]"},{"location":"promises-_Join/#constructors","text":"","title":"Constructors"},{"location":"promises-_Join/#create","text":"[Source] new tag create( p: Promise[Array[A] val] tag, space: USize val) : _Join[A] tag^","title":"create"},{"location":"promises-_Join/#parameters","text":"p: Promise [ Array [A] val] tag space: USize val","title":"Parameters"},{"location":"promises-_Join/#returns","text":"_Join [A] tag^","title":"Returns"},{"location":"promises-_Join/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"promises-_Join/#apply","text":"[Source] be apply( a: A)","title":"apply"},{"location":"promises-_Join/#parameters_1","text":"a: A","title":"Parameters"},{"location":"promises-_None/","text":"_None [Source] primitive val _None Constructors create [Source] new val create() : _None val^ Returns _None val^ Public Functions eq [Source] fun box eq( that: _None val) : Bool val Parameters that: _None val Returns Bool val ne [Source] fun box ne( that: _None val) : Bool val Parameters that: _None val Returns Bool val","title":"primitive _None"},{"location":"promises-_None/#_none","text":"[Source] primitive val _None","title":"_None"},{"location":"promises-_None/#constructors","text":"","title":"Constructors"},{"location":"promises-_None/#create","text":"[Source] new val create() : _None val^","title":"create"},{"location":"promises-_None/#returns","text":"_None val^","title":"Returns"},{"location":"promises-_None/#public-functions","text":"","title":"Public Functions"},{"location":"promises-_None/#eq","text":"[Source] fun box eq( that: _None val) : Bool val","title":"eq"},{"location":"promises-_None/#parameters","text":"that: _None val","title":"Parameters"},{"location":"promises-_None/#returns_1","text":"Bool val","title":"Returns"},{"location":"promises-_None/#ne","text":"[Source] fun box ne( that: _None val) : Bool val","title":"ne"},{"location":"promises-_None/#parameters_1","text":"that: _None val","title":"Parameters"},{"location":"promises-_None/#returns_2","text":"Bool val","title":"Returns"},{"location":"promises-_Pending/","text":"_Pending [Source] primitive val _Pending Constructors create [Source] new val create() : _Pending val^ Returns _Pending val^ Public Functions eq [Source] fun box eq( that: _Pending val) : Bool val Parameters that: _Pending val Returns Bool val ne [Source] fun box ne( that: _Pending val) : Bool val Parameters that: _Pending val Returns Bool val","title":"primitive _Pending"},{"location":"promises-_Pending/#_pending","text":"[Source] primitive val _Pending","title":"_Pending"},{"location":"promises-_Pending/#constructors","text":"","title":"Constructors"},{"location":"promises-_Pending/#create","text":"[Source] new val create() : _Pending val^","title":"create"},{"location":"promises-_Pending/#returns","text":"_Pending val^","title":"Returns"},{"location":"promises-_Pending/#public-functions","text":"","title":"Public Functions"},{"location":"promises-_Pending/#eq","text":"[Source] fun box eq( that: _Pending val) : Bool val","title":"eq"},{"location":"promises-_Pending/#parameters","text":"that: _Pending val","title":"Parameters"},{"location":"promises-_Pending/#returns_1","text":"Bool val","title":"Returns"},{"location":"promises-_Pending/#ne","text":"[Source] fun box ne( that: _Pending val) : Bool val","title":"ne"},{"location":"promises-_Pending/#parameters_1","text":"that: _Pending val","title":"Parameters"},{"location":"promises-_Pending/#returns_2","text":"Bool val","title":"Returns"},{"location":"promises-_Reject/","text":"_Reject [Source] primitive val _Reject Constructors create [Source] new val create() : _Reject val^ Returns _Reject val^ Public Functions eq [Source] fun box eq( that: _Reject val) : Bool val Parameters that: _Reject val Returns Bool val ne [Source] fun box ne( that: _Reject val) : Bool val Parameters that: _Reject val Returns Bool val","title":"primitive _Reject"},{"location":"promises-_Reject/#_reject","text":"[Source] primitive val _Reject","title":"_Reject"},{"location":"promises-_Reject/#constructors","text":"","title":"Constructors"},{"location":"promises-_Reject/#create","text":"[Source] new val create() : _Reject val^","title":"create"},{"location":"promises-_Reject/#returns","text":"_Reject val^","title":"Returns"},{"location":"promises-_Reject/#public-functions","text":"","title":"Public Functions"},{"location":"promises-_Reject/#eq","text":"[Source] fun box eq( that: _Reject val) : Bool val","title":"eq"},{"location":"promises-_Reject/#parameters","text":"that: _Reject val","title":"Parameters"},{"location":"promises-_Reject/#returns_1","text":"Bool val","title":"Returns"},{"location":"promises-_Reject/#ne","text":"[Source] fun box ne( that: _Reject val) : Bool val","title":"ne"},{"location":"promises-_Reject/#parameters_1","text":"that: _Reject val","title":"Parameters"},{"location":"promises-_Reject/#returns_2","text":"Bool val","title":"Returns"},{"location":"promises-_Then/","text":"_Then[A: Any #share, B: Any #share] [Source] A step in a promise pipeline. class ref _Then[A: Any #share, B: Any #share] Constructors create [Source] A step is represented by a fulfill function and a reject function. new iso create( fulfill: Fulfill[A, B] iso, rejected: Reject[B] iso) : _Then[A, B] iso^ Parameters fulfill: Fulfill [A, B] iso rejected: Reject [B] iso Returns _Then [A, B] iso^ Public Functions promise [Source] Returns the next promise in the chain. fun box promise() : Promise[B] tag Returns Promise [B] tag apply [Source] Called with the result of the previous promise when it is fulfilled. fun ref apply( value: A) : None val Parameters value: A Returns None val reject [Source] Called when the previous promise is rejected. fun ref reject() : None val Returns None val","title":"class _Then"},{"location":"promises-_Then/#_then91a-any-share-b-any-share93","text":"[Source] A step in a promise pipeline. class ref _Then[A: Any #share, B: Any #share]","title":"_Then[A: Any #share, B: Any #share]"},{"location":"promises-_Then/#constructors","text":"","title":"Constructors"},{"location":"promises-_Then/#create","text":"[Source] A step is represented by a fulfill function and a reject function. new iso create( fulfill: Fulfill[A, B] iso, rejected: Reject[B] iso) : _Then[A, B] iso^","title":"create"},{"location":"promises-_Then/#parameters","text":"fulfill: Fulfill [A, B] iso rejected: Reject [B] iso","title":"Parameters"},{"location":"promises-_Then/#returns","text":"_Then [A, B] iso^","title":"Returns"},{"location":"promises-_Then/#public-functions","text":"","title":"Public Functions"},{"location":"promises-_Then/#promise","text":"[Source] Returns the next promise in the chain. fun box promise() : Promise[B] tag","title":"promise"},{"location":"promises-_Then/#returns_1","text":"Promise [B] tag","title":"Returns"},{"location":"promises-_Then/#apply","text":"[Source] Called with the result of the previous promise when it is fulfilled. fun ref apply( value: A) : None val","title":"apply"},{"location":"promises-_Then/#parameters_1","text":"value: A","title":"Parameters"},{"location":"promises-_Then/#returns_2","text":"None val","title":"Returns"},{"location":"promises-_Then/#reject","text":"[Source] Called when the previous promise is rejected. fun ref reject() : None val","title":"reject"},{"location":"promises-_Then/#returns_3","text":"None val","title":"Returns"},{"location":"random--index/","text":"Random package The Random package provides support generating random numbers. The package provides random number generators you can use in your code, a dice roller and a trait for implementing your own random number generator. If your application does not require a specific generator, use Rand. Seed values can contain up to 128 bits of randomness in the form of two U64s. A common non-cryptographically secure way to seed a generator is with Time.now . let rand = Rand let n = rand.next() Public Types class XorShift128Plus class XorOshiro128Plus type Rand trait Random class MT class Dice","title":"Package"},{"location":"random--index/#random-package","text":"The Random package provides support generating random numbers. The package provides random number generators you can use in your code, a dice roller and a trait for implementing your own random number generator. If your application does not require a specific generator, use Rand. Seed values can contain up to 128 bits of randomness in the form of two U64s. A common non-cryptographically secure way to seed a generator is with Time.now . let rand = Rand let n = rand.next()","title":"Random package"},{"location":"random--index/#public-types","text":"class XorShift128Plus class XorOshiro128Plus type Rand trait Random class MT class Dice","title":"Public Types"},{"location":"random-Dice/","text":"Dice [Source] A simple dice roller. class ref Dice Constructors create [Source] Initialise with a random number generator. new ref create( from: Random ref) : Dice ref^ Parameters from: Random ref Returns Dice ref^ Public fields var r: Random ref [Source] Public Functions apply [Source] Return the sum of count rolls of a die with the given number of sides . The die is numbered from 1 to sides . For example, count = 2 and sides = 6 will return a value between 2 and 12. fun ref apply( count: U64 val, sides: U64 val) : U64 val Parameters count: U64 val sides: U64 val Returns U64 val","title":"class Dice"},{"location":"random-Dice/#dice","text":"[Source] A simple dice roller. class ref Dice","title":"Dice"},{"location":"random-Dice/#constructors","text":"","title":"Constructors"},{"location":"random-Dice/#create","text":"[Source] Initialise with a random number generator. new ref create( from: Random ref) : Dice ref^","title":"create"},{"location":"random-Dice/#parameters","text":"from: Random ref","title":"Parameters"},{"location":"random-Dice/#returns","text":"Dice ref^","title":"Returns"},{"location":"random-Dice/#public-fields","text":"","title":"Public fields"},{"location":"random-Dice/#var-r-random-ref","text":"[Source]","title":"var r: Random ref"},{"location":"random-Dice/#public-functions","text":"","title":"Public Functions"},{"location":"random-Dice/#apply","text":"[Source] Return the sum of count rolls of a die with the given number of sides . The die is numbered from 1 to sides . For example, count = 2 and sides = 6 will return a value between 2 and 12. fun ref apply( count: U64 val, sides: U64 val) : U64 val","title":"apply"},{"location":"random-Dice/#parameters_1","text":"count: U64 val sides: U64 val","title":"Parameters"},{"location":"random-Dice/#returns_1","text":"U64 val","title":"Returns"},{"location":"random-MT/","text":"MT [Source] A Mersenne Twister. This is a non-cryptographic random number generator. This should only be used for legacy applications that require a Mersenne Twister, otherwise use Rand. class ref MT is Random ref Implements Random ref Constructors create [Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = seq, y: U64 val = seq) : MT ref^ Parameters x: U64 val = seq y: U64 val = seq Returns MT ref^ Public Functions next [Source] A random integer in [0, 2^64) fun ref next() : U64 val Returns U64 val has_next [Source] fun tag has_next() : Bool val Returns Bool val u8 [Source] fun ref u8() : U8 val Returns U8 val u16 [Source] fun ref u16() : U16 val Returns U16 val u32 [Source] fun ref u32() : U32 val Returns U32 val u64 [Source] fun ref u64() : U64 val Returns U64 val u128 [Source] fun ref u128() : U128 val Returns U128 val ulong [Source] fun ref ulong() : ULong val Returns ULong val usize [Source] fun ref usize() : USize val Returns USize val i8 [Source] fun ref i8() : I8 val Returns I8 val i16 [Source] fun ref i16() : I16 val Returns I16 val i32 [Source] fun ref i32() : I32 val Returns I32 val i64 [Source] fun ref i64() : I64 val Returns I64 val i128 [Source] fun ref i128() : I128 val Returns I128 val ilong [Source] fun ref ilong() : ILong val Returns ILong val isize [Source] fun ref isize() : ISize val Returns ISize val int[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Real [N] val)] [Source] fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Real[N] val)]( n: N) : N Parameters n: N Returns N real [Source] fun ref real() : F64 val Returns F64 val shuffle[A: A] [Source] fun ref shuffle[A: A]( array: Array[A] ref) : None val Parameters array: Array [A] ref Returns None val Private Functions _populate [Source] Repopulates the state array. fun ref _populate() : None val Returns None val _n [Source] fun tag _n() : USize val Returns USize val _m [Source] fun tag _m() : USize val Returns USize val _n1 [Source] fun tag _n1() : USize val Returns USize val _mask [Source] fun tag _mask( x: U64 val, y: U64 val) : U64 val Parameters x: U64 val y: U64 val Returns U64 val _matrix [Source] fun tag _matrix( x: U64 val) : U64 val Parameters x: U64 val Returns U64 val _mix [Source] fun tag _mix( x: U64 val, y: U64 val) : U64 val Parameters x: U64 val y: U64 val Returns U64 val _lower [Source] fun ref _lower( i: USize val, x: U64 val) : U64 val ? Parameters i: USize val x: U64 val Returns U64 val ? _upper [Source] fun ref _upper( i: USize val, x: U64 val) : U64 val ? Parameters i: USize val x: U64 val Returns U64 val ? _wrap [Source] fun ref _wrap() : U64 val ? Returns U64 val ?","title":"class MT"},{"location":"random-MT/#mt","text":"[Source] A Mersenne Twister. This is a non-cryptographic random number generator. This should only be used for legacy applications that require a Mersenne Twister, otherwise use Rand. class ref MT is Random ref","title":"MT"},{"location":"random-MT/#implements","text":"Random ref","title":"Implements"},{"location":"random-MT/#constructors","text":"","title":"Constructors"},{"location":"random-MT/#create","text":"[Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = seq, y: U64 val = seq) : MT ref^","title":"create"},{"location":"random-MT/#parameters","text":"x: U64 val = seq y: U64 val = seq","title":"Parameters"},{"location":"random-MT/#returns","text":"MT ref^","title":"Returns"},{"location":"random-MT/#public-functions","text":"","title":"Public Functions"},{"location":"random-MT/#next","text":"[Source] A random integer in [0, 2^64) fun ref next() : U64 val","title":"next"},{"location":"random-MT/#returns_1","text":"U64 val","title":"Returns"},{"location":"random-MT/#has_next","text":"[Source] fun tag has_next() : Bool val","title":"has_next"},{"location":"random-MT/#returns_2","text":"Bool val","title":"Returns"},{"location":"random-MT/#u8","text":"[Source] fun ref u8() : U8 val","title":"u8"},{"location":"random-MT/#returns_3","text":"U8 val","title":"Returns"},{"location":"random-MT/#u16","text":"[Source] fun ref u16() : U16 val","title":"u16"},{"location":"random-MT/#returns_4","text":"U16 val","title":"Returns"},{"location":"random-MT/#u32","text":"[Source] fun ref u32() : U32 val","title":"u32"},{"location":"random-MT/#returns_5","text":"U32 val","title":"Returns"},{"location":"random-MT/#u64","text":"[Source] fun ref u64() : U64 val","title":"u64"},{"location":"random-MT/#returns_6","text":"U64 val","title":"Returns"},{"location":"random-MT/#u128","text":"[Source] fun ref u128() : U128 val","title":"u128"},{"location":"random-MT/#returns_7","text":"U128 val","title":"Returns"},{"location":"random-MT/#ulong","text":"[Source] fun ref ulong() : ULong val","title":"ulong"},{"location":"random-MT/#returns_8","text":"ULong val","title":"Returns"},{"location":"random-MT/#usize","text":"[Source] fun ref usize() : USize val","title":"usize"},{"location":"random-MT/#returns_9","text":"USize val","title":"Returns"},{"location":"random-MT/#i8","text":"[Source] fun ref i8() : I8 val","title":"i8"},{"location":"random-MT/#returns_10","text":"I8 val","title":"Returns"},{"location":"random-MT/#i16","text":"[Source] fun ref i16() : I16 val","title":"i16"},{"location":"random-MT/#returns_11","text":"I16 val","title":"Returns"},{"location":"random-MT/#i32","text":"[Source] fun ref i32() : I32 val","title":"i32"},{"location":"random-MT/#returns_12","text":"I32 val","title":"Returns"},{"location":"random-MT/#i64","text":"[Source] fun ref i64() : I64 val","title":"i64"},{"location":"random-MT/#returns_13","text":"I64 val","title":"Returns"},{"location":"random-MT/#i128","text":"[Source] fun ref i128() : I128 val","title":"i128"},{"location":"random-MT/#returns_14","text":"I128 val","title":"Returns"},{"location":"random-MT/#ilong","text":"[Source] fun ref ilong() : ILong val","title":"ilong"},{"location":"random-MT/#returns_15","text":"ILong val","title":"Returns"},{"location":"random-MT/#isize","text":"[Source] fun ref isize() : ISize val","title":"isize"},{"location":"random-MT/#returns_16","text":"ISize val","title":"Returns"},{"location":"random-MT/#int91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"[Source] fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Real[N] val)]( n: N) : N","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-MT/#parameters_1","text":"n: N","title":"Parameters"},{"location":"random-MT/#returns_17","text":"N","title":"Returns"},{"location":"random-MT/#real","text":"[Source] fun ref real() : F64 val","title":"real"},{"location":"random-MT/#returns_18","text":"F64 val","title":"Returns"},{"location":"random-MT/#shuffle91a-a93","text":"[Source] fun ref shuffle[A: A]( array: Array[A] ref) : None val","title":"shuffle[A: A]"},{"location":"random-MT/#parameters_2","text":"array: Array [A] ref","title":"Parameters"},{"location":"random-MT/#returns_19","text":"None val","title":"Returns"},{"location":"random-MT/#private-functions","text":"","title":"Private Functions"},{"location":"random-MT/#_populate","text":"[Source] Repopulates the state array. fun ref _populate() : None val","title":"_populate"},{"location":"random-MT/#returns_20","text":"None val","title":"Returns"},{"location":"random-MT/#_n","text":"[Source] fun tag _n() : USize val","title":"_n"},{"location":"random-MT/#returns_21","text":"USize val","title":"Returns"},{"location":"random-MT/#_m","text":"[Source] fun tag _m() : USize val","title":"_m"},{"location":"random-MT/#returns_22","text":"USize val","title":"Returns"},{"location":"random-MT/#_n1","text":"[Source] fun tag _n1() : USize val","title":"_n1"},{"location":"random-MT/#returns_23","text":"USize val","title":"Returns"},{"location":"random-MT/#_mask","text":"[Source] fun tag _mask( x: U64 val, y: U64 val) : U64 val","title":"_mask"},{"location":"random-MT/#parameters_3","text":"x: U64 val y: U64 val","title":"Parameters"},{"location":"random-MT/#returns_24","text":"U64 val","title":"Returns"},{"location":"random-MT/#_matrix","text":"[Source] fun tag _matrix( x: U64 val) : U64 val","title":"_matrix"},{"location":"random-MT/#parameters_4","text":"x: U64 val","title":"Parameters"},{"location":"random-MT/#returns_25","text":"U64 val","title":"Returns"},{"location":"random-MT/#_mix","text":"[Source] fun tag _mix( x: U64 val, y: U64 val) : U64 val","title":"_mix"},{"location":"random-MT/#parameters_5","text":"x: U64 val y: U64 val","title":"Parameters"},{"location":"random-MT/#returns_26","text":"U64 val","title":"Returns"},{"location":"random-MT/#_lower","text":"[Source] fun ref _lower( i: USize val, x: U64 val) : U64 val ?","title":"_lower"},{"location":"random-MT/#parameters_6","text":"i: USize val x: U64 val","title":"Parameters"},{"location":"random-MT/#returns_27","text":"U64 val ?","title":"Returns"},{"location":"random-MT/#_upper","text":"[Source] fun ref _upper( i: USize val, x: U64 val) : U64 val ?","title":"_upper"},{"location":"random-MT/#parameters_7","text":"i: USize val x: U64 val","title":"Parameters"},{"location":"random-MT/#returns_28","text":"U64 val ?","title":"Returns"},{"location":"random-MT/#_wrap","text":"[Source] fun ref _wrap() : U64 val ?","title":"_wrap"},{"location":"random-MT/#returns_29","text":"U64 val ?","title":"Returns"},{"location":"random-Rand/","text":"Rand [Source] type Rand is XorOshiro128Plus ref Type Alias For XorOshiro128Plus ref","title":"type Rand"},{"location":"random-Rand/#rand","text":"[Source] type Rand is XorOshiro128Plus ref","title":"Rand"},{"location":"random-Rand/#type-alias-for","text":"XorOshiro128Plus ref","title":"Type Alias For"},{"location":"random-Random/","text":"Random [Source] The Random trait should be implemented by all random number generators. The only method you need to implement is fun ref next(): 64 . Once that method has been implemented, the Random trait provides default implementations of conversions to other number types. trait ref Random Constructors create [Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = seq, y: U64 val = seq) : Random ref^ Parameters x: U64 val = seq y: U64 val = seq Returns Random ref^ Public Functions has_next [Source] If used as an iterator, this always has another value. fun tag has_next() : Bool val Returns Bool val next [Source] A random integer in [0, 2^64) fun ref next() : U64 val Returns U64 val u8 [Source] A random integer in [0, 2^8) fun ref u8() : U8 val Returns U8 val u16 [Source] A random integer in [0, 2^16) fun ref u16() : U16 val Returns U16 val u32 [Source] A random integer in [0, 2^32) fun ref u32() : U32 val Returns U32 val u64 [Source] A random integer in [0, 2^64) fun ref u64() : U64 val Returns U64 val u128 [Source] A random integer in [0, 2^128) fun ref u128() : U128 val Returns U128 val ulong [Source] A random integer in [0, ULong.max_value()] fun ref ulong() : ULong val Returns ULong val usize [Source] A random integer in [0, USize.max_value()] fun ref usize() : USize val Returns USize val i8 [Source] A random integer in [-2^7, 2^7) fun ref i8() : I8 val Returns I8 val i16 [Source] A random integer in [-2^15, 2^15) fun ref i16() : I16 val Returns I16 val i32 [Source] A random integer in [-2^31, 2^31) fun ref i32() : I32 val Returns I32 val i64 [Source] A random integer in [-2^63, 2^63) fun ref i64() : I64 val Returns I64 val i128 [Source] A random integer in [-2^127, 2^127) fun ref i128() : I128 val Returns I128 val ilong [Source] A random integer in [ILong.min_value(), ILong.max_value()] fun ref ilong() : ILong val Returns ILong val isize [Source] A random integer in [ISize.min_value(), ISize.max_value()] fun ref isize() : ISize val Returns ISize val int[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Real [N] val)] [Source] A random integer in [0, n) fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Real[N] val)]( n: N) : N Parameters n: N Returns N real [Source] A random number in [0, 1) fun ref real() : F64 val Returns F64 val shuffle[A: A] [Source] Shuffle the elements of the array into a random order, mutating the array. fun ref shuffle[A: A]( array: Array[A] ref) : None val Parameters array: Array [A] ref Returns None val","title":"trait Random"},{"location":"random-Random/#random","text":"[Source] The Random trait should be implemented by all random number generators. The only method you need to implement is fun ref next(): 64 . Once that method has been implemented, the Random trait provides default implementations of conversions to other number types. trait ref Random","title":"Random"},{"location":"random-Random/#constructors","text":"","title":"Constructors"},{"location":"random-Random/#create","text":"[Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = seq, y: U64 val = seq) : Random ref^","title":"create"},{"location":"random-Random/#parameters","text":"x: U64 val = seq y: U64 val = seq","title":"Parameters"},{"location":"random-Random/#returns","text":"Random ref^","title":"Returns"},{"location":"random-Random/#public-functions","text":"","title":"Public Functions"},{"location":"random-Random/#has_next","text":"[Source] If used as an iterator, this always has another value. fun tag has_next() : Bool val","title":"has_next"},{"location":"random-Random/#returns_1","text":"Bool val","title":"Returns"},{"location":"random-Random/#next","text":"[Source] A random integer in [0, 2^64) fun ref next() : U64 val","title":"next"},{"location":"random-Random/#returns_2","text":"U64 val","title":"Returns"},{"location":"random-Random/#u8","text":"[Source] A random integer in [0, 2^8) fun ref u8() : U8 val","title":"u8"},{"location":"random-Random/#returns_3","text":"U8 val","title":"Returns"},{"location":"random-Random/#u16","text":"[Source] A random integer in [0, 2^16) fun ref u16() : U16 val","title":"u16"},{"location":"random-Random/#returns_4","text":"U16 val","title":"Returns"},{"location":"random-Random/#u32","text":"[Source] A random integer in [0, 2^32) fun ref u32() : U32 val","title":"u32"},{"location":"random-Random/#returns_5","text":"U32 val","title":"Returns"},{"location":"random-Random/#u64","text":"[Source] A random integer in [0, 2^64) fun ref u64() : U64 val","title":"u64"},{"location":"random-Random/#returns_6","text":"U64 val","title":"Returns"},{"location":"random-Random/#u128","text":"[Source] A random integer in [0, 2^128) fun ref u128() : U128 val","title":"u128"},{"location":"random-Random/#returns_7","text":"U128 val","title":"Returns"},{"location":"random-Random/#ulong","text":"[Source] A random integer in [0, ULong.max_value()] fun ref ulong() : ULong val","title":"ulong"},{"location":"random-Random/#returns_8","text":"ULong val","title":"Returns"},{"location":"random-Random/#usize","text":"[Source] A random integer in [0, USize.max_value()] fun ref usize() : USize val","title":"usize"},{"location":"random-Random/#returns_9","text":"USize val","title":"Returns"},{"location":"random-Random/#i8","text":"[Source] A random integer in [-2^7, 2^7) fun ref i8() : I8 val","title":"i8"},{"location":"random-Random/#returns_10","text":"I8 val","title":"Returns"},{"location":"random-Random/#i16","text":"[Source] A random integer in [-2^15, 2^15) fun ref i16() : I16 val","title":"i16"},{"location":"random-Random/#returns_11","text":"I16 val","title":"Returns"},{"location":"random-Random/#i32","text":"[Source] A random integer in [-2^31, 2^31) fun ref i32() : I32 val","title":"i32"},{"location":"random-Random/#returns_12","text":"I32 val","title":"Returns"},{"location":"random-Random/#i64","text":"[Source] A random integer in [-2^63, 2^63) fun ref i64() : I64 val","title":"i64"},{"location":"random-Random/#returns_13","text":"I64 val","title":"Returns"},{"location":"random-Random/#i128","text":"[Source] A random integer in [-2^127, 2^127) fun ref i128() : I128 val","title":"i128"},{"location":"random-Random/#returns_14","text":"I128 val","title":"Returns"},{"location":"random-Random/#ilong","text":"[Source] A random integer in [ILong.min_value(), ILong.max_value()] fun ref ilong() : ILong val","title":"ilong"},{"location":"random-Random/#returns_15","text":"ILong val","title":"Returns"},{"location":"random-Random/#isize","text":"[Source] A random integer in [ISize.min_value(), ISize.max_value()] fun ref isize() : ISize val","title":"isize"},{"location":"random-Random/#returns_16","text":"ISize val","title":"Returns"},{"location":"random-Random/#int91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"[Source] A random integer in [0, n) fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Real[N] val)]( n: N) : N","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-Random/#parameters_1","text":"n: N","title":"Parameters"},{"location":"random-Random/#returns_17","text":"N","title":"Returns"},{"location":"random-Random/#real","text":"[Source] A random number in [0, 1) fun ref real() : F64 val","title":"real"},{"location":"random-Random/#returns_18","text":"F64 val","title":"Returns"},{"location":"random-Random/#shuffle91a-a93","text":"[Source] Shuffle the elements of the array into a random order, mutating the array. fun ref shuffle[A: A]( array: Array[A] ref) : None val","title":"shuffle[A: A]"},{"location":"random-Random/#parameters_2","text":"array: Array [A] ref","title":"Parameters"},{"location":"random-Random/#returns_19","text":"None val","title":"Returns"},{"location":"random-XorOshiro128Plus/","text":"XorOshiro128Plus [Source] This is an implementation of xoroshiro128+, as detailed at: http://xoroshiro.di.unimi.it This is currently the default Rand implementation. class ref XorOshiro128Plus is Random ref Implements Random ref Constructors create [Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = seq, y: U64 val = seq) : XorOshiro128Plus ref^ Parameters x: U64 val = seq y: U64 val = seq Returns XorOshiro128Plus ref^ Public Functions next [Source] A random integer in [0, 2^64) fun ref next() : U64 val Returns U64 val has_next fun tag has_next() : Bool val Returns Bool val u8 fun ref u8() : U8 val Returns U8 val u16 fun ref u16() : U16 val Returns U16 val u32 fun ref u32() : U32 val Returns U32 val u64 fun ref u64() : U64 val Returns U64 val u128 fun ref u128() : U128 val Returns U128 val ulong fun ref ulong() : ULong val Returns ULong val usize fun ref usize() : USize val Returns USize val i8 fun ref i8() : I8 val Returns I8 val i16 fun ref i16() : I16 val Returns I16 val i32 fun ref i32() : I32 val Returns I32 val i64 fun ref i64() : I64 val Returns I64 val i128 fun ref i128() : I128 val Returns I128 val ilong fun ref ilong() : ILong val Returns ILong val isize fun ref isize() : ISize val Returns ISize val int[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Real [N] val)] fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Real[N] val)]( n: N) : N Parameters n: N Returns N real fun ref real() : F64 val Returns F64 val shuffle[A: A] fun ref shuffle[A: A]( array: Array[A] ref) : None val Parameters array: Array [A] ref Returns None val","title":"class XorOshiro128Plus"},{"location":"random-XorOshiro128Plus/#xoroshiro128plus","text":"[Source] This is an implementation of xoroshiro128+, as detailed at: http://xoroshiro.di.unimi.it This is currently the default Rand implementation. class ref XorOshiro128Plus is Random ref","title":"XorOshiro128Plus"},{"location":"random-XorOshiro128Plus/#implements","text":"Random ref","title":"Implements"},{"location":"random-XorOshiro128Plus/#constructors","text":"","title":"Constructors"},{"location":"random-XorOshiro128Plus/#create","text":"[Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = seq, y: U64 val = seq) : XorOshiro128Plus ref^","title":"create"},{"location":"random-XorOshiro128Plus/#parameters","text":"x: U64 val = seq y: U64 val = seq","title":"Parameters"},{"location":"random-XorOshiro128Plus/#returns","text":"XorOshiro128Plus ref^","title":"Returns"},{"location":"random-XorOshiro128Plus/#public-functions","text":"","title":"Public Functions"},{"location":"random-XorOshiro128Plus/#next","text":"[Source] A random integer in [0, 2^64) fun ref next() : U64 val","title":"next"},{"location":"random-XorOshiro128Plus/#returns_1","text":"U64 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#has_next","text":"fun tag has_next() : Bool val","title":"has_next"},{"location":"random-XorOshiro128Plus/#returns_2","text":"Bool val","title":"Returns"},{"location":"random-XorOshiro128Plus/#u8","text":"fun ref u8() : U8 val","title":"u8"},{"location":"random-XorOshiro128Plus/#returns_3","text":"U8 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#u16","text":"fun ref u16() : U16 val","title":"u16"},{"location":"random-XorOshiro128Plus/#returns_4","text":"U16 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#u32","text":"fun ref u32() : U32 val","title":"u32"},{"location":"random-XorOshiro128Plus/#returns_5","text":"U32 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#u64","text":"fun ref u64() : U64 val","title":"u64"},{"location":"random-XorOshiro128Plus/#returns_6","text":"U64 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#u128","text":"fun ref u128() : U128 val","title":"u128"},{"location":"random-XorOshiro128Plus/#returns_7","text":"U128 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#ulong","text":"fun ref ulong() : ULong val","title":"ulong"},{"location":"random-XorOshiro128Plus/#returns_8","text":"ULong val","title":"Returns"},{"location":"random-XorOshiro128Plus/#usize","text":"fun ref usize() : USize val","title":"usize"},{"location":"random-XorOshiro128Plus/#returns_9","text":"USize val","title":"Returns"},{"location":"random-XorOshiro128Plus/#i8","text":"fun ref i8() : I8 val","title":"i8"},{"location":"random-XorOshiro128Plus/#returns_10","text":"I8 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#i16","text":"fun ref i16() : I16 val","title":"i16"},{"location":"random-XorOshiro128Plus/#returns_11","text":"I16 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#i32","text":"fun ref i32() : I32 val","title":"i32"},{"location":"random-XorOshiro128Plus/#returns_12","text":"I32 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#i64","text":"fun ref i64() : I64 val","title":"i64"},{"location":"random-XorOshiro128Plus/#returns_13","text":"I64 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#i128","text":"fun ref i128() : I128 val","title":"i128"},{"location":"random-XorOshiro128Plus/#returns_14","text":"I128 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#ilong","text":"fun ref ilong() : ILong val","title":"ilong"},{"location":"random-XorOshiro128Plus/#returns_15","text":"ILong val","title":"Returns"},{"location":"random-XorOshiro128Plus/#isize","text":"fun ref isize() : ISize val","title":"isize"},{"location":"random-XorOshiro128Plus/#returns_16","text":"ISize val","title":"Returns"},{"location":"random-XorOshiro128Plus/#int91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Real[N] val)]( n: N) : N","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorOshiro128Plus/#parameters_1","text":"n: N","title":"Parameters"},{"location":"random-XorOshiro128Plus/#returns_17","text":"N","title":"Returns"},{"location":"random-XorOshiro128Plus/#real","text":"fun ref real() : F64 val","title":"real"},{"location":"random-XorOshiro128Plus/#returns_18","text":"F64 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#shuffle91a-a93","text":"fun ref shuffle[A: A]( array: Array[A] ref) : None val","title":"shuffle[A: A]"},{"location":"random-XorOshiro128Plus/#parameters_2","text":"array: Array [A] ref","title":"Parameters"},{"location":"random-XorOshiro128Plus/#returns_19","text":"None val","title":"Returns"},{"location":"random-XorShift128Plus/","text":"XorShift128Plus [Source] This is an implementation of xorshift+, as detailed at: http://xoroshiro.di.unimi.it This should only be used for legacy applications that specifically require XorShift128Plus, otherwise use Rand. class ref XorShift128Plus is Random ref Implements Random ref Constructors create [Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = seq, y: U64 val = seq) : XorShift128Plus ref^ Parameters x: U64 val = seq y: U64 val = seq Returns XorShift128Plus ref^ Public Functions next [Source] A random integer in [0, 2^64) fun ref next() : U64 val Returns U64 val has_next fun tag has_next() : Bool val Returns Bool val u8 fun ref u8() : U8 val Returns U8 val u16 fun ref u16() : U16 val Returns U16 val u32 fun ref u32() : U32 val Returns U32 val u64 fun ref u64() : U64 val Returns U64 val u128 fun ref u128() : U128 val Returns U128 val ulong fun ref ulong() : ULong val Returns ULong val usize fun ref usize() : USize val Returns USize val i8 fun ref i8() : I8 val Returns I8 val i16 fun ref i16() : I16 val Returns I16 val i32 fun ref i32() : I32 val Returns I32 val i64 fun ref i64() : I64 val Returns I64 val i128 fun ref i128() : I128 val Returns I128 val ilong fun ref ilong() : ILong val Returns ILong val isize fun ref isize() : ISize val Returns ISize val int[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Real [N] val)] fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Real[N] val)]( n: N) : N Parameters n: N Returns N real fun ref real() : F64 val Returns F64 val shuffle[A: A] fun ref shuffle[A: A]( array: Array[A] ref) : None val Parameters array: Array [A] ref Returns None val","title":"class XorShift128Plus"},{"location":"random-XorShift128Plus/#xorshift128plus","text":"[Source] This is an implementation of xorshift+, as detailed at: http://xoroshiro.di.unimi.it This should only be used for legacy applications that specifically require XorShift128Plus, otherwise use Rand. class ref XorShift128Plus is Random ref","title":"XorShift128Plus"},{"location":"random-XorShift128Plus/#implements","text":"Random ref","title":"Implements"},{"location":"random-XorShift128Plus/#constructors","text":"","title":"Constructors"},{"location":"random-XorShift128Plus/#create","text":"[Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = seq, y: U64 val = seq) : XorShift128Plus ref^","title":"create"},{"location":"random-XorShift128Plus/#parameters","text":"x: U64 val = seq y: U64 val = seq","title":"Parameters"},{"location":"random-XorShift128Plus/#returns","text":"XorShift128Plus ref^","title":"Returns"},{"location":"random-XorShift128Plus/#public-functions","text":"","title":"Public Functions"},{"location":"random-XorShift128Plus/#next","text":"[Source] A random integer in [0, 2^64) fun ref next() : U64 val","title":"next"},{"location":"random-XorShift128Plus/#returns_1","text":"U64 val","title":"Returns"},{"location":"random-XorShift128Plus/#has_next","text":"fun tag has_next() : Bool val","title":"has_next"},{"location":"random-XorShift128Plus/#returns_2","text":"Bool val","title":"Returns"},{"location":"random-XorShift128Plus/#u8","text":"fun ref u8() : U8 val","title":"u8"},{"location":"random-XorShift128Plus/#returns_3","text":"U8 val","title":"Returns"},{"location":"random-XorShift128Plus/#u16","text":"fun ref u16() : U16 val","title":"u16"},{"location":"random-XorShift128Plus/#returns_4","text":"U16 val","title":"Returns"},{"location":"random-XorShift128Plus/#u32","text":"fun ref u32() : U32 val","title":"u32"},{"location":"random-XorShift128Plus/#returns_5","text":"U32 val","title":"Returns"},{"location":"random-XorShift128Plus/#u64","text":"fun ref u64() : U64 val","title":"u64"},{"location":"random-XorShift128Plus/#returns_6","text":"U64 val","title":"Returns"},{"location":"random-XorShift128Plus/#u128","text":"fun ref u128() : U128 val","title":"u128"},{"location":"random-XorShift128Plus/#returns_7","text":"U128 val","title":"Returns"},{"location":"random-XorShift128Plus/#ulong","text":"fun ref ulong() : ULong val","title":"ulong"},{"location":"random-XorShift128Plus/#returns_8","text":"ULong val","title":"Returns"},{"location":"random-XorShift128Plus/#usize","text":"fun ref usize() : USize val","title":"usize"},{"location":"random-XorShift128Plus/#returns_9","text":"USize val","title":"Returns"},{"location":"random-XorShift128Plus/#i8","text":"fun ref i8() : I8 val","title":"i8"},{"location":"random-XorShift128Plus/#returns_10","text":"I8 val","title":"Returns"},{"location":"random-XorShift128Plus/#i16","text":"fun ref i16() : I16 val","title":"i16"},{"location":"random-XorShift128Plus/#returns_11","text":"I16 val","title":"Returns"},{"location":"random-XorShift128Plus/#i32","text":"fun ref i32() : I32 val","title":"i32"},{"location":"random-XorShift128Plus/#returns_12","text":"I32 val","title":"Returns"},{"location":"random-XorShift128Plus/#i64","text":"fun ref i64() : I64 val","title":"i64"},{"location":"random-XorShift128Plus/#returns_13","text":"I64 val","title":"Returns"},{"location":"random-XorShift128Plus/#i128","text":"fun ref i128() : I128 val","title":"i128"},{"location":"random-XorShift128Plus/#returns_14","text":"I128 val","title":"Returns"},{"location":"random-XorShift128Plus/#ilong","text":"fun ref ilong() : ILong val","title":"ilong"},{"location":"random-XorShift128Plus/#returns_15","text":"ILong val","title":"Returns"},{"location":"random-XorShift128Plus/#isize","text":"fun ref isize() : ISize val","title":"isize"},{"location":"random-XorShift128Plus/#returns_16","text":"ISize val","title":"Returns"},{"location":"random-XorShift128Plus/#int91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Real[N] val)]( n: N) : N","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorShift128Plus/#parameters_1","text":"n: N","title":"Parameters"},{"location":"random-XorShift128Plus/#returns_17","text":"N","title":"Returns"},{"location":"random-XorShift128Plus/#real","text":"fun ref real() : F64 val","title":"real"},{"location":"random-XorShift128Plus/#returns_18","text":"F64 val","title":"Returns"},{"location":"random-XorShift128Plus/#shuffle91a-a93","text":"fun ref shuffle[A: A]( array: Array[A] ref) : None val","title":"shuffle[A: A]"},{"location":"random-XorShift128Plus/#parameters_2","text":"array: Array [A] ref","title":"Parameters"},{"location":"random-XorShift128Plus/#returns_19","text":"None val","title":"Returns"},{"location":"signals--index/","text":"Signals package The Signals package provides support for handling Unix style signals. For each signal that you want to handle, you need to create a SignalHandler and a corresponding SignalNotify object. Each SignalHandler runs as it own actor and upon receiving the signal will call its corresponding SignalNotify 's apply method. Example program The following program will listen for the TERM signal and output a message to standard out if it is received. use signals actor Main new create(env: Env) = // Create a TERM handler let signal = SignalHandler(TermHandler(env), Sig.term()) // Raise TERM signal signal.raise() class TermHandler is SignalNotify let _env: Env new iso create(env: Env) = _env = env fun ref apply(count: U32): Bool = _env.out.print( TERM signal received ) true Signal portability The Sig primitive provides support for portable signal handling across Linux, FreeBSD and OSX. Signals are not supported on Windows and attempting to use them will cause a compilation error. Shutting down handlers Unlike a TCPConnection and other forms of input receiving, creating a SignalHandler will not keep your program running. As such, you are not required to call dispose on your signal handlers in order to shutdown your program. Public Types interface SignalNotify primitive SignalRaise actor SignalHandler primitive Sig","title":"Package"},{"location":"signals--index/#signals-package","text":"The Signals package provides support for handling Unix style signals. For each signal that you want to handle, you need to create a SignalHandler and a corresponding SignalNotify object. Each SignalHandler runs as it own actor and upon receiving the signal will call its corresponding SignalNotify 's apply method.","title":"Signals package"},{"location":"signals--index/#example-program","text":"The following program will listen for the TERM signal and output a message to standard out if it is received. use signals actor Main new create(env: Env) = // Create a TERM handler let signal = SignalHandler(TermHandler(env), Sig.term()) // Raise TERM signal signal.raise() class TermHandler is SignalNotify let _env: Env new iso create(env: Env) = _env = env fun ref apply(count: U32): Bool = _env.out.print( TERM signal received ) true","title":"Example program"},{"location":"signals--index/#signal-portability","text":"The Sig primitive provides support for portable signal handling across Linux, FreeBSD and OSX. Signals are not supported on Windows and attempting to use them will cause a compilation error.","title":"Signal portability"},{"location":"signals--index/#shutting-down-handlers","text":"Unlike a TCPConnection and other forms of input receiving, creating a SignalHandler will not keep your program running. As such, you are not required to call dispose on your signal handlers in order to shutdown your program.","title":"Shutting down handlers"},{"location":"signals--index/#public-types","text":"interface SignalNotify primitive SignalRaise actor SignalHandler primitive Sig","title":"Public Types"},{"location":"signals-Sig/","text":"Sig [Source] Define the portable signal numbers. Other signals can be used, but they are not guaranteed to be portable. primitive val Sig Constructors create [Source] new val create() : Sig val^ Returns Sig val^ Public Functions hup [Source] fun box hup() : U32 val Returns U32 val int [Source] fun box int() : U32 val Returns U32 val quit [Source] fun box quit() : U32 val Returns U32 val ill [Source] fun box ill() : U32 val Returns U32 val trap [Source] fun box trap() : U32 val Returns U32 val abrt [Source] fun box abrt() : U32 val Returns U32 val emt [Source] fun box emt() : U32 val Returns U32 val fpe [Source] fun box fpe() : U32 val Returns U32 val kill [Source] fun box kill() : U32 val Returns U32 val bus [Source] fun box bus() : U32 val Returns U32 val segv [Source] fun box segv() : U32 val Returns U32 val sys [Source] fun box sys() : U32 val Returns U32 val pipe [Source] fun box pipe() : U32 val Returns U32 val alrm [Source] fun box alrm() : U32 val Returns U32 val term [Source] fun box term() : U32 val Returns U32 val urg [Source] fun box urg() : U32 val Returns U32 val stkflt [Source] fun box stkflt() : U32 val Returns U32 val stop [Source] fun box stop() : U32 val Returns U32 val tstp [Source] fun box tstp() : U32 val Returns U32 val cont [Source] fun box cont() : U32 val Returns U32 val chld [Source] fun box chld() : U32 val Returns U32 val ttin [Source] fun box ttin() : U32 val Returns U32 val ttou [Source] fun box ttou() : U32 val Returns U32 val io [Source] fun box io() : U32 val Returns U32 val xcpu [Source] fun box xcpu() : U32 val Returns U32 val xfsz [Source] fun box xfsz() : U32 val Returns U32 val vtalrm [Source] fun box vtalrm() : U32 val Returns U32 val prof [Source] fun box prof() : U32 val Returns U32 val winch [Source] fun box winch() : U32 val Returns U32 val info [Source] fun box info() : U32 val Returns U32 val pwr [Source] fun box pwr() : U32 val Returns U32 val usr1 [Source] fun box usr1() : U32 val Returns U32 val usr2 [Source] fun box usr2() : U32 val Returns U32 val rt [Source] fun box rt( n: U32 val) : U32 val ? Parameters n: U32 val Returns U32 val ? eq [Source] fun box eq( that: Sig val) : Bool val Parameters that: Sig val Returns Bool val ne [Source] fun box ne( that: Sig val) : Bool val Parameters that: Sig val Returns Bool val","title":"primitive Sig"},{"location":"signals-Sig/#sig","text":"[Source] Define the portable signal numbers. Other signals can be used, but they are not guaranteed to be portable. primitive val Sig","title":"Sig"},{"location":"signals-Sig/#constructors","text":"","title":"Constructors"},{"location":"signals-Sig/#create","text":"[Source] new val create() : Sig val^","title":"create"},{"location":"signals-Sig/#returns","text":"Sig val^","title":"Returns"},{"location":"signals-Sig/#public-functions","text":"","title":"Public Functions"},{"location":"signals-Sig/#hup","text":"[Source] fun box hup() : U32 val","title":"hup"},{"location":"signals-Sig/#returns_1","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#int","text":"[Source] fun box int() : U32 val","title":"int"},{"location":"signals-Sig/#returns_2","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#quit","text":"[Source] fun box quit() : U32 val","title":"quit"},{"location":"signals-Sig/#returns_3","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#ill","text":"[Source] fun box ill() : U32 val","title":"ill"},{"location":"signals-Sig/#returns_4","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#trap","text":"[Source] fun box trap() : U32 val","title":"trap"},{"location":"signals-Sig/#returns_5","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#abrt","text":"[Source] fun box abrt() : U32 val","title":"abrt"},{"location":"signals-Sig/#returns_6","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#emt","text":"[Source] fun box emt() : U32 val","title":"emt"},{"location":"signals-Sig/#returns_7","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#fpe","text":"[Source] fun box fpe() : U32 val","title":"fpe"},{"location":"signals-Sig/#returns_8","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#kill","text":"[Source] fun box kill() : U32 val","title":"kill"},{"location":"signals-Sig/#returns_9","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#bus","text":"[Source] fun box bus() : U32 val","title":"bus"},{"location":"signals-Sig/#returns_10","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#segv","text":"[Source] fun box segv() : U32 val","title":"segv"},{"location":"signals-Sig/#returns_11","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#sys","text":"[Source] fun box sys() : U32 val","title":"sys"},{"location":"signals-Sig/#returns_12","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#pipe","text":"[Source] fun box pipe() : U32 val","title":"pipe"},{"location":"signals-Sig/#returns_13","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#alrm","text":"[Source] fun box alrm() : U32 val","title":"alrm"},{"location":"signals-Sig/#returns_14","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#term","text":"[Source] fun box term() : U32 val","title":"term"},{"location":"signals-Sig/#returns_15","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#urg","text":"[Source] fun box urg() : U32 val","title":"urg"},{"location":"signals-Sig/#returns_16","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#stkflt","text":"[Source] fun box stkflt() : U32 val","title":"stkflt"},{"location":"signals-Sig/#returns_17","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#stop","text":"[Source] fun box stop() : U32 val","title":"stop"},{"location":"signals-Sig/#returns_18","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#tstp","text":"[Source] fun box tstp() : U32 val","title":"tstp"},{"location":"signals-Sig/#returns_19","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#cont","text":"[Source] fun box cont() : U32 val","title":"cont"},{"location":"signals-Sig/#returns_20","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#chld","text":"[Source] fun box chld() : U32 val","title":"chld"},{"location":"signals-Sig/#returns_21","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#ttin","text":"[Source] fun box ttin() : U32 val","title":"ttin"},{"location":"signals-Sig/#returns_22","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#ttou","text":"[Source] fun box ttou() : U32 val","title":"ttou"},{"location":"signals-Sig/#returns_23","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#io","text":"[Source] fun box io() : U32 val","title":"io"},{"location":"signals-Sig/#returns_24","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#xcpu","text":"[Source] fun box xcpu() : U32 val","title":"xcpu"},{"location":"signals-Sig/#returns_25","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#xfsz","text":"[Source] fun box xfsz() : U32 val","title":"xfsz"},{"location":"signals-Sig/#returns_26","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#vtalrm","text":"[Source] fun box vtalrm() : U32 val","title":"vtalrm"},{"location":"signals-Sig/#returns_27","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#prof","text":"[Source] fun box prof() : U32 val","title":"prof"},{"location":"signals-Sig/#returns_28","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#winch","text":"[Source] fun box winch() : U32 val","title":"winch"},{"location":"signals-Sig/#returns_29","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#info","text":"[Source] fun box info() : U32 val","title":"info"},{"location":"signals-Sig/#returns_30","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#pwr","text":"[Source] fun box pwr() : U32 val","title":"pwr"},{"location":"signals-Sig/#returns_31","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#usr1","text":"[Source] fun box usr1() : U32 val","title":"usr1"},{"location":"signals-Sig/#returns_32","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#usr2","text":"[Source] fun box usr2() : U32 val","title":"usr2"},{"location":"signals-Sig/#returns_33","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#rt","text":"[Source] fun box rt( n: U32 val) : U32 val ?","title":"rt"},{"location":"signals-Sig/#parameters","text":"n: U32 val","title":"Parameters"},{"location":"signals-Sig/#returns_34","text":"U32 val ?","title":"Returns"},{"location":"signals-Sig/#eq","text":"[Source] fun box eq( that: Sig val) : Bool val","title":"eq"},{"location":"signals-Sig/#parameters_1","text":"that: Sig val","title":"Parameters"},{"location":"signals-Sig/#returns_35","text":"Bool val","title":"Returns"},{"location":"signals-Sig/#ne","text":"[Source] fun box ne( that: Sig val) : Bool val","title":"ne"},{"location":"signals-Sig/#parameters_2","text":"that: Sig val","title":"Parameters"},{"location":"signals-Sig/#returns_36","text":"Bool val","title":"Returns"},{"location":"signals-SignalHandler/","text":"SignalHandler [Source] Listen for a specific signal. If the wait parameter is true, the program will not terminate until the SignalHandler's dispose method is called, or if the SignalNotify returns false, after handling the signal as this also disposes the SignalHandler and unsubscribes it. actor tag SignalHandler Constructors create [Source] Create a signal handler. new tag create( notify: SignalNotify iso, sig: U32 val, wait: Bool val = seq) : SignalHandler tag^ Parameters notify: SignalNotify iso sig: U32 val wait: Bool val = seq Returns SignalHandler tag^ Public Behaviours raise [Source] Raise the signal. be raise() dispose [Source] Dispose of the signal handler. be dispose() Private Behaviours _event_notify [Source] Called when the signal is received, or when the AsioEventID can be destroyed. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val Private Functions _dispose [Source] Dispose of the AsioEventID. fun ref _dispose() : None val Returns None val","title":"actor SignalHandler"},{"location":"signals-SignalHandler/#signalhandler","text":"[Source] Listen for a specific signal. If the wait parameter is true, the program will not terminate until the SignalHandler's dispose method is called, or if the SignalNotify returns false, after handling the signal as this also disposes the SignalHandler and unsubscribes it. actor tag SignalHandler","title":"SignalHandler"},{"location":"signals-SignalHandler/#constructors","text":"","title":"Constructors"},{"location":"signals-SignalHandler/#create","text":"[Source] Create a signal handler. new tag create( notify: SignalNotify iso, sig: U32 val, wait: Bool val = seq) : SignalHandler tag^","title":"create"},{"location":"signals-SignalHandler/#parameters","text":"notify: SignalNotify iso sig: U32 val wait: Bool val = seq","title":"Parameters"},{"location":"signals-SignalHandler/#returns","text":"SignalHandler tag^","title":"Returns"},{"location":"signals-SignalHandler/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"signals-SignalHandler/#raise","text":"[Source] Raise the signal. be raise()","title":"raise"},{"location":"signals-SignalHandler/#dispose","text":"[Source] Dispose of the signal handler. be dispose()","title":"dispose"},{"location":"signals-SignalHandler/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"signals-SignalHandler/#_event_notify","text":"[Source] Called when the signal is received, or when the AsioEventID can be destroyed. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"signals-SignalHandler/#parameters_1","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"signals-SignalHandler/#private-functions","text":"","title":"Private Functions"},{"location":"signals-SignalHandler/#_dispose","text":"[Source] Dispose of the AsioEventID. fun ref _dispose() : None val","title":"_dispose"},{"location":"signals-SignalHandler/#returns_1","text":"None val","title":"Returns"},{"location":"signals-SignalNotify/","text":"SignalNotify [Source] Notifications for a signal. interface ref SignalNotify Public Functions apply [Source] Called with the the number of times the signal has fired since this was last called. Return false to stop listening for the signal. fun ref apply( count: U32 val) : Bool val Parameters count: U32 val Returns Bool val dispose [Source] Called if the signal is disposed. This is also called if the notifier returns false. fun ref dispose() : None val Returns None val","title":"interface SignalNotify"},{"location":"signals-SignalNotify/#signalnotify","text":"[Source] Notifications for a signal. interface ref SignalNotify","title":"SignalNotify"},{"location":"signals-SignalNotify/#public-functions","text":"","title":"Public Functions"},{"location":"signals-SignalNotify/#apply","text":"[Source] Called with the the number of times the signal has fired since this was last called. Return false to stop listening for the signal. fun ref apply( count: U32 val) : Bool val","title":"apply"},{"location":"signals-SignalNotify/#parameters","text":"count: U32 val","title":"Parameters"},{"location":"signals-SignalNotify/#returns","text":"Bool val","title":"Returns"},{"location":"signals-SignalNotify/#dispose","text":"[Source] Called if the signal is disposed. This is also called if the notifier returns false. fun ref dispose() : None val","title":"dispose"},{"location":"signals-SignalNotify/#returns_1","text":"None val","title":"Returns"},{"location":"signals-SignalRaise/","text":"SignalRaise [Source] Raise a signal. primitive val SignalRaise Constructors create [Source] new val create() : SignalRaise val^ Returns SignalRaise val^ Public Functions apply [Source] fun box apply( sig: U32 val) : None val Parameters sig: U32 val Returns None val eq [Source] fun box eq( that: SignalRaise val) : Bool val Parameters that: SignalRaise val Returns Bool val ne [Source] fun box ne( that: SignalRaise val) : Bool val Parameters that: SignalRaise val Returns Bool val","title":"primitive SignalRaise"},{"location":"signals-SignalRaise/#signalraise","text":"[Source] Raise a signal. primitive val SignalRaise","title":"SignalRaise"},{"location":"signals-SignalRaise/#constructors","text":"","title":"Constructors"},{"location":"signals-SignalRaise/#create","text":"[Source] new val create() : SignalRaise val^","title":"create"},{"location":"signals-SignalRaise/#returns","text":"SignalRaise val^","title":"Returns"},{"location":"signals-SignalRaise/#public-functions","text":"","title":"Public Functions"},{"location":"signals-SignalRaise/#apply","text":"[Source] fun box apply( sig: U32 val) : None val","title":"apply"},{"location":"signals-SignalRaise/#parameters","text":"sig: U32 val","title":"Parameters"},{"location":"signals-SignalRaise/#returns_1","text":"None val","title":"Returns"},{"location":"signals-SignalRaise/#eq","text":"[Source] fun box eq( that: SignalRaise val) : Bool val","title":"eq"},{"location":"signals-SignalRaise/#parameters_1","text":"that: SignalRaise val","title":"Parameters"},{"location":"signals-SignalRaise/#returns_2","text":"Bool val","title":"Returns"},{"location":"signals-SignalRaise/#ne","text":"[Source] fun box ne( that: SignalRaise val) : Bool val","title":"ne"},{"location":"signals-SignalRaise/#parameters_2","text":"that: SignalRaise val","title":"Parameters"},{"location":"signals-SignalRaise/#returns_3","text":"Bool val","title":"Returns"},{"location":"strings--index/","text":"No package doc string provided for strings. Public Types primitive CommonPrefix","title":"Package"},{"location":"strings--index/#public-types","text":"primitive CommonPrefix","title":"Public Types"},{"location":"strings-CommonPrefix/","text":"CommonPrefix [Source] Creates a string that is the common prefix of the supplied strings, possibly empty. primitive val CommonPrefix Constructors create [Source] new val create() : CommonPrefix val^ Returns CommonPrefix val^ Public Functions apply [Source] fun box apply( data: ReadSeq[Stringable box] box) : String iso^ Parameters data: ReadSeq [ Stringable box] box Returns String iso^ eq [Source] fun box eq( that: CommonPrefix val) : Bool val Parameters that: CommonPrefix val Returns Bool val ne [Source] fun box ne( that: CommonPrefix val) : Bool val Parameters that: CommonPrefix val Returns Bool val","title":"primitive CommonPrefix"},{"location":"strings-CommonPrefix/#commonprefix","text":"[Source] Creates a string that is the common prefix of the supplied strings, possibly empty. primitive val CommonPrefix","title":"CommonPrefix"},{"location":"strings-CommonPrefix/#constructors","text":"","title":"Constructors"},{"location":"strings-CommonPrefix/#create","text":"[Source] new val create() : CommonPrefix val^","title":"create"},{"location":"strings-CommonPrefix/#returns","text":"CommonPrefix val^","title":"Returns"},{"location":"strings-CommonPrefix/#public-functions","text":"","title":"Public Functions"},{"location":"strings-CommonPrefix/#apply","text":"[Source] fun box apply( data: ReadSeq[Stringable box] box) : String iso^","title":"apply"},{"location":"strings-CommonPrefix/#parameters","text":"data: ReadSeq [ Stringable box] box","title":"Parameters"},{"location":"strings-CommonPrefix/#returns_1","text":"String iso^","title":"Returns"},{"location":"strings-CommonPrefix/#eq","text":"[Source] fun box eq( that: CommonPrefix val) : Bool val","title":"eq"},{"location":"strings-CommonPrefix/#parameters_1","text":"that: CommonPrefix val","title":"Parameters"},{"location":"strings-CommonPrefix/#returns_2","text":"Bool val","title":"Returns"},{"location":"strings-CommonPrefix/#ne","text":"[Source] fun box ne( that: CommonPrefix val) : Bool val","title":"ne"},{"location":"strings-CommonPrefix/#parameters_2","text":"that: CommonPrefix val","title":"Parameters"},{"location":"strings-CommonPrefix/#returns_3","text":"Bool val","title":"Returns"},{"location":"term--index/","text":"No package doc string provided for term. Public Types interface ReadlineNotify class Readline actor ANSITerm interface ANSINotify primitive ANSI Private Types struct _TermSize primitive _EscapeNone primitive _EscapeStart primitive _EscapeSS3 primitive _EscapeCSI primitive _EscapeMod type _EscapeState class _TermResizeNotify primitive _TIOCGWINSZ","title":"Package"},{"location":"term--index/#public-types","text":"interface ReadlineNotify class Readline actor ANSITerm interface ANSINotify primitive ANSI","title":"Public Types"},{"location":"term--index/#private-types","text":"struct _TermSize primitive _EscapeNone primitive _EscapeStart primitive _EscapeSS3 primitive _EscapeCSI primitive _EscapeMod type _EscapeState class _TermResizeNotify primitive _TIOCGWINSZ","title":"Private Types"},{"location":"term-ANSI/","text":"ANSI [Source] These strings can be embedded in text when writing to a StdStream to create a text-based UI. primitive val ANSI Constructors create [Source] new val create() : ANSI val^ Returns ANSI val^ Public Functions up [Source] Move the cursor up n lines. 0 is the same as 1. fun box up( n: U32 val = seq) : String val Parameters n: U32 val = seq Returns String val down [Source] Move the cursor down n lines. 0 is the same as 1. fun box down( n: U32 val = seq) : String val Parameters n: U32 val = seq Returns String val right [Source] Move the cursor right n columns. 0 is the same as 1. fun box right( n: U32 val = seq) : String val Parameters n: U32 val = seq Returns String val left [Source] Move the cursor left n columns. 0 is the same as 1. fun box left( n: U32 val = seq) : String val Parameters n: U32 val = seq Returns String val cursor [Source] Move the cursor to line y, column x. 0 is the same as 1. This indexes from the top left corner of the screen. fun box cursor( x: U32 val = seq, y: U32 val = seq) : String val Parameters x: U32 val = seq y: U32 val = seq Returns String val clear [Source] Clear the screen and move the cursor to the top left corner. fun box clear() : String val Returns String val erase [Source] Erases everything to the left of the cursor on the line the cursor is on. fun box erase() : String val Returns String val reset [Source] Resets all colours and text styles to the default. fun box reset() : String val Returns String val bold [Source] Bold text. Does nothing on Windows. fun box bold( state: Bool val = seq) : String val Parameters state: Bool val = seq Returns String val underline [Source] Underlined text. Does nothing on Windows. fun box underline( state: Bool val = seq) : String val Parameters state: Bool val = seq Returns String val blink [Source] Blinking text. Does nothing on Windows. fun box blink( state: Bool val = seq) : String val Parameters state: Bool val = seq Returns String val reverse [Source] Swap foreground and background colour. fun box reverse( state: Bool val = seq) : String val Parameters state: Bool val = seq Returns String val black [Source] Black text. fun box black() : String val Returns String val red [Source] Red text. fun box red() : String val Returns String val green [Source] Green text. fun box green() : String val Returns String val yellow [Source] Yellow text. fun box yellow() : String val Returns String val blue [Source] Blue text. fun box blue() : String val Returns String val magenta [Source] Magenta text. fun box magenta() : String val Returns String val cyan [Source] Cyan text. fun box cyan() : String val Returns String val grey [Source] Grey text. fun box grey() : String val Returns String val white [Source] White text. fun box white() : String val Returns String val bright_red [Source] Bright red text. fun box bright_red() : String val Returns String val bright_green [Source] Bright green text. fun box bright_green() : String val Returns String val bright_yellow [Source] Bright yellow text. fun box bright_yellow() : String val Returns String val bright_blue [Source] Bright blue text. fun box bright_blue() : String val Returns String val bright_magenta [Source] Bright magenta text. fun box bright_magenta() : String val Returns String val bright_cyan [Source] Bright cyan text. fun box bright_cyan() : String val Returns String val bright_grey [Source] Bright grey text. fun box bright_grey() : String val Returns String val black_bg [Source] Black background. fun box black_bg() : String val Returns String val red_bg [Source] Red background. fun box red_bg() : String val Returns String val green_bg [Source] Green background. fun box green_bg() : String val Returns String val yellow_bg [Source] Yellow background. fun box yellow_bg() : String val Returns String val blue_bg [Source] Blue background. fun box blue_bg() : String val Returns String val magenta_bg [Source] Magenta background. fun box magenta_bg() : String val Returns String val cyan_bg [Source] Cyan background. fun box cyan_bg() : String val Returns String val grey_bg [Source] Grey background. fun box grey_bg() : String val Returns String val white_bg [Source] White background. fun box white_bg() : String val Returns String val bright_red_bg [Source] Bright red background. fun box bright_red_bg() : String val Returns String val bright_green_bg [Source] Bright green background. fun box bright_green_bg() : String val Returns String val bright_yellow_bg [Source] Bright yellow background. fun box bright_yellow_bg() : String val Returns String val bright_blue_bg [Source] Bright blue background. fun box bright_blue_bg() : String val Returns String val bright_magenta_bg [Source] Bright magenta background. fun box bright_magenta_bg() : String val Returns String val bright_cyan_bg [Source] Bright cyan background. fun box bright_cyan_bg() : String val Returns String val bright_grey_bg [Source] Bright grey background. fun box bright_grey_bg() : String val Returns String val eq [Source] fun box eq( that: ANSI val) : Bool val Parameters that: ANSI val Returns Bool val ne [Source] fun box ne( that: ANSI val) : Bool val Parameters that: ANSI val Returns Bool val","title":"primitive ANSI"},{"location":"term-ANSI/#ansi","text":"[Source] These strings can be embedded in text when writing to a StdStream to create a text-based UI. primitive val ANSI","title":"ANSI"},{"location":"term-ANSI/#constructors","text":"","title":"Constructors"},{"location":"term-ANSI/#create","text":"[Source] new val create() : ANSI val^","title":"create"},{"location":"term-ANSI/#returns","text":"ANSI val^","title":"Returns"},{"location":"term-ANSI/#public-functions","text":"","title":"Public Functions"},{"location":"term-ANSI/#up","text":"[Source] Move the cursor up n lines. 0 is the same as 1. fun box up( n: U32 val = seq) : String val","title":"up"},{"location":"term-ANSI/#parameters","text":"n: U32 val = seq","title":"Parameters"},{"location":"term-ANSI/#returns_1","text":"String val","title":"Returns"},{"location":"term-ANSI/#down","text":"[Source] Move the cursor down n lines. 0 is the same as 1. fun box down( n: U32 val = seq) : String val","title":"down"},{"location":"term-ANSI/#parameters_1","text":"n: U32 val = seq","title":"Parameters"},{"location":"term-ANSI/#returns_2","text":"String val","title":"Returns"},{"location":"term-ANSI/#right","text":"[Source] Move the cursor right n columns. 0 is the same as 1. fun box right( n: U32 val = seq) : String val","title":"right"},{"location":"term-ANSI/#parameters_2","text":"n: U32 val = seq","title":"Parameters"},{"location":"term-ANSI/#returns_3","text":"String val","title":"Returns"},{"location":"term-ANSI/#left","text":"[Source] Move the cursor left n columns. 0 is the same as 1. fun box left( n: U32 val = seq) : String val","title":"left"},{"location":"term-ANSI/#parameters_3","text":"n: U32 val = seq","title":"Parameters"},{"location":"term-ANSI/#returns_4","text":"String val","title":"Returns"},{"location":"term-ANSI/#cursor","text":"[Source] Move the cursor to line y, column x. 0 is the same as 1. This indexes from the top left corner of the screen. fun box cursor( x: U32 val = seq, y: U32 val = seq) : String val","title":"cursor"},{"location":"term-ANSI/#parameters_4","text":"x: U32 val = seq y: U32 val = seq","title":"Parameters"},{"location":"term-ANSI/#returns_5","text":"String val","title":"Returns"},{"location":"term-ANSI/#clear","text":"[Source] Clear the screen and move the cursor to the top left corner. fun box clear() : String val","title":"clear"},{"location":"term-ANSI/#returns_6","text":"String val","title":"Returns"},{"location":"term-ANSI/#erase","text":"[Source] Erases everything to the left of the cursor on the line the cursor is on. fun box erase() : String val","title":"erase"},{"location":"term-ANSI/#returns_7","text":"String val","title":"Returns"},{"location":"term-ANSI/#reset","text":"[Source] Resets all colours and text styles to the default. fun box reset() : String val","title":"reset"},{"location":"term-ANSI/#returns_8","text":"String val","title":"Returns"},{"location":"term-ANSI/#bold","text":"[Source] Bold text. Does nothing on Windows. fun box bold( state: Bool val = seq) : String val","title":"bold"},{"location":"term-ANSI/#parameters_5","text":"state: Bool val = seq","title":"Parameters"},{"location":"term-ANSI/#returns_9","text":"String val","title":"Returns"},{"location":"term-ANSI/#underline","text":"[Source] Underlined text. Does nothing on Windows. fun box underline( state: Bool val = seq) : String val","title":"underline"},{"location":"term-ANSI/#parameters_6","text":"state: Bool val = seq","title":"Parameters"},{"location":"term-ANSI/#returns_10","text":"String val","title":"Returns"},{"location":"term-ANSI/#blink","text":"[Source] Blinking text. Does nothing on Windows. fun box blink( state: Bool val = seq) : String val","title":"blink"},{"location":"term-ANSI/#parameters_7","text":"state: Bool val = seq","title":"Parameters"},{"location":"term-ANSI/#returns_11","text":"String val","title":"Returns"},{"location":"term-ANSI/#reverse","text":"[Source] Swap foreground and background colour. fun box reverse( state: Bool val = seq) : String val","title":"reverse"},{"location":"term-ANSI/#parameters_8","text":"state: Bool val = seq","title":"Parameters"},{"location":"term-ANSI/#returns_12","text":"String val","title":"Returns"},{"location":"term-ANSI/#black","text":"[Source] Black text. fun box black() : String val","title":"black"},{"location":"term-ANSI/#returns_13","text":"String val","title":"Returns"},{"location":"term-ANSI/#red","text":"[Source] Red text. fun box red() : String val","title":"red"},{"location":"term-ANSI/#returns_14","text":"String val","title":"Returns"},{"location":"term-ANSI/#green","text":"[Source] Green text. fun box green() : String val","title":"green"},{"location":"term-ANSI/#returns_15","text":"String val","title":"Returns"},{"location":"term-ANSI/#yellow","text":"[Source] Yellow text. fun box yellow() : String val","title":"yellow"},{"location":"term-ANSI/#returns_16","text":"String val","title":"Returns"},{"location":"term-ANSI/#blue","text":"[Source] Blue text. fun box blue() : String val","title":"blue"},{"location":"term-ANSI/#returns_17","text":"String val","title":"Returns"},{"location":"term-ANSI/#magenta","text":"[Source] Magenta text. fun box magenta() : String val","title":"magenta"},{"location":"term-ANSI/#returns_18","text":"String val","title":"Returns"},{"location":"term-ANSI/#cyan","text":"[Source] Cyan text. fun box cyan() : String val","title":"cyan"},{"location":"term-ANSI/#returns_19","text":"String val","title":"Returns"},{"location":"term-ANSI/#grey","text":"[Source] Grey text. fun box grey() : String val","title":"grey"},{"location":"term-ANSI/#returns_20","text":"String val","title":"Returns"},{"location":"term-ANSI/#white","text":"[Source] White text. fun box white() : String val","title":"white"},{"location":"term-ANSI/#returns_21","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_red","text":"[Source] Bright red text. fun box bright_red() : String val","title":"bright_red"},{"location":"term-ANSI/#returns_22","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_green","text":"[Source] Bright green text. fun box bright_green() : String val","title":"bright_green"},{"location":"term-ANSI/#returns_23","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_yellow","text":"[Source] Bright yellow text. fun box bright_yellow() : String val","title":"bright_yellow"},{"location":"term-ANSI/#returns_24","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_blue","text":"[Source] Bright blue text. fun box bright_blue() : String val","title":"bright_blue"},{"location":"term-ANSI/#returns_25","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_magenta","text":"[Source] Bright magenta text. fun box bright_magenta() : String val","title":"bright_magenta"},{"location":"term-ANSI/#returns_26","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_cyan","text":"[Source] Bright cyan text. fun box bright_cyan() : String val","title":"bright_cyan"},{"location":"term-ANSI/#returns_27","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_grey","text":"[Source] Bright grey text. fun box bright_grey() : String val","title":"bright_grey"},{"location":"term-ANSI/#returns_28","text":"String val","title":"Returns"},{"location":"term-ANSI/#black_bg","text":"[Source] Black background. fun box black_bg() : String val","title":"black_bg"},{"location":"term-ANSI/#returns_29","text":"String val","title":"Returns"},{"location":"term-ANSI/#red_bg","text":"[Source] Red background. fun box red_bg() : String val","title":"red_bg"},{"location":"term-ANSI/#returns_30","text":"String val","title":"Returns"},{"location":"term-ANSI/#green_bg","text":"[Source] Green background. fun box green_bg() : String val","title":"green_bg"},{"location":"term-ANSI/#returns_31","text":"String val","title":"Returns"},{"location":"term-ANSI/#yellow_bg","text":"[Source] Yellow background. fun box yellow_bg() : String val","title":"yellow_bg"},{"location":"term-ANSI/#returns_32","text":"String val","title":"Returns"},{"location":"term-ANSI/#blue_bg","text":"[Source] Blue background. fun box blue_bg() : String val","title":"blue_bg"},{"location":"term-ANSI/#returns_33","text":"String val","title":"Returns"},{"location":"term-ANSI/#magenta_bg","text":"[Source] Magenta background. fun box magenta_bg() : String val","title":"magenta_bg"},{"location":"term-ANSI/#returns_34","text":"String val","title":"Returns"},{"location":"term-ANSI/#cyan_bg","text":"[Source] Cyan background. fun box cyan_bg() : String val","title":"cyan_bg"},{"location":"term-ANSI/#returns_35","text":"String val","title":"Returns"},{"location":"term-ANSI/#grey_bg","text":"[Source] Grey background. fun box grey_bg() : String val","title":"grey_bg"},{"location":"term-ANSI/#returns_36","text":"String val","title":"Returns"},{"location":"term-ANSI/#white_bg","text":"[Source] White background. fun box white_bg() : String val","title":"white_bg"},{"location":"term-ANSI/#returns_37","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_red_bg","text":"[Source] Bright red background. fun box bright_red_bg() : String val","title":"bright_red_bg"},{"location":"term-ANSI/#returns_38","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_green_bg","text":"[Source] Bright green background. fun box bright_green_bg() : String val","title":"bright_green_bg"},{"location":"term-ANSI/#returns_39","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_yellow_bg","text":"[Source] Bright yellow background. fun box bright_yellow_bg() : String val","title":"bright_yellow_bg"},{"location":"term-ANSI/#returns_40","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_blue_bg","text":"[Source] Bright blue background. fun box bright_blue_bg() : String val","title":"bright_blue_bg"},{"location":"term-ANSI/#returns_41","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_magenta_bg","text":"[Source] Bright magenta background. fun box bright_magenta_bg() : String val","title":"bright_magenta_bg"},{"location":"term-ANSI/#returns_42","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_cyan_bg","text":"[Source] Bright cyan background. fun box bright_cyan_bg() : String val","title":"bright_cyan_bg"},{"location":"term-ANSI/#returns_43","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_grey_bg","text":"[Source] Bright grey background. fun box bright_grey_bg() : String val","title":"bright_grey_bg"},{"location":"term-ANSI/#returns_44","text":"String val","title":"Returns"},{"location":"term-ANSI/#eq","text":"[Source] fun box eq( that: ANSI val) : Bool val","title":"eq"},{"location":"term-ANSI/#parameters_9","text":"that: ANSI val","title":"Parameters"},{"location":"term-ANSI/#returns_45","text":"Bool val","title":"Returns"},{"location":"term-ANSI/#ne","text":"[Source] fun box ne( that: ANSI val) : Bool val","title":"ne"},{"location":"term-ANSI/#parameters_10","text":"that: ANSI val","title":"Parameters"},{"location":"term-ANSI/#returns_46","text":"Bool val","title":"Returns"},{"location":"term-ANSINotify/","text":"ANSINotify [Source] Receive input from an ANSITerm. interface ref ANSINotify Public Functions apply [Source] fun ref apply( term: ANSITerm ref, input: U8 val) : None val Parameters term: ANSITerm ref input: U8 val Returns None val up [Source] fun ref up( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters ctrl: Bool val alt: Bool val shift: Bool val Returns None val down [Source] fun ref down( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters ctrl: Bool val alt: Bool val shift: Bool val Returns None val left [Source] fun ref left( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters ctrl: Bool val alt: Bool val shift: Bool val Returns None val right [Source] fun ref right( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters ctrl: Bool val alt: Bool val shift: Bool val Returns None val delete [Source] fun ref delete( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters ctrl: Bool val alt: Bool val shift: Bool val Returns None val insert [Source] fun ref insert( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters ctrl: Bool val alt: Bool val shift: Bool val Returns None val home [Source] fun ref home( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters ctrl: Bool val alt: Bool val shift: Bool val Returns None val end_key [Source] fun ref end_key( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters ctrl: Bool val alt: Bool val shift: Bool val Returns None val page_up [Source] fun ref page_up( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters ctrl: Bool val alt: Bool val shift: Bool val Returns None val page_down [Source] fun ref page_down( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters ctrl: Bool val alt: Bool val shift: Bool val Returns None val fn_key [Source] fun ref fn_key( i: U8 val, ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters i: U8 val ctrl: Bool val alt: Bool val shift: Bool val Returns None val prompt [Source] fun ref prompt( term: ANSITerm ref, value: String val) : None val Parameters term: ANSITerm ref value: String val Returns None val size [Source] fun ref size( rows: U16 val, cols: U16 val) : None val Parameters rows: U16 val cols: U16 val Returns None val closed [Source] fun ref closed() : None val Returns None val","title":"interface ANSINotify"},{"location":"term-ANSINotify/#ansinotify","text":"[Source] Receive input from an ANSITerm. interface ref ANSINotify","title":"ANSINotify"},{"location":"term-ANSINotify/#public-functions","text":"","title":"Public Functions"},{"location":"term-ANSINotify/#apply","text":"[Source] fun ref apply( term: ANSITerm ref, input: U8 val) : None val","title":"apply"},{"location":"term-ANSINotify/#parameters","text":"term: ANSITerm ref input: U8 val","title":"Parameters"},{"location":"term-ANSINotify/#returns","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#up","text":"[Source] fun ref up( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"up"},{"location":"term-ANSINotify/#parameters_1","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_1","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#down","text":"[Source] fun ref down( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"down"},{"location":"term-ANSINotify/#parameters_2","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_2","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#left","text":"[Source] fun ref left( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"left"},{"location":"term-ANSINotify/#parameters_3","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_3","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#right","text":"[Source] fun ref right( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"right"},{"location":"term-ANSINotify/#parameters_4","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_4","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#delete","text":"[Source] fun ref delete( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"delete"},{"location":"term-ANSINotify/#parameters_5","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_5","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#insert","text":"[Source] fun ref insert( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"insert"},{"location":"term-ANSINotify/#parameters_6","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_6","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#home","text":"[Source] fun ref home( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"home"},{"location":"term-ANSINotify/#parameters_7","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_7","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#end_key","text":"[Source] fun ref end_key( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"end_key"},{"location":"term-ANSINotify/#parameters_8","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_8","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#page_up","text":"[Source] fun ref page_up( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"page_up"},{"location":"term-ANSINotify/#parameters_9","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_9","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#page_down","text":"[Source] fun ref page_down( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"page_down"},{"location":"term-ANSINotify/#parameters_10","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_10","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#fn_key","text":"[Source] fun ref fn_key( i: U8 val, ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"fn_key"},{"location":"term-ANSINotify/#parameters_11","text":"i: U8 val ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_11","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#prompt","text":"[Source] fun ref prompt( term: ANSITerm ref, value: String val) : None val","title":"prompt"},{"location":"term-ANSINotify/#parameters_12","text":"term: ANSITerm ref value: String val","title":"Parameters"},{"location":"term-ANSINotify/#returns_12","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#size","text":"[Source] fun ref size( rows: U16 val, cols: U16 val) : None val","title":"size"},{"location":"term-ANSINotify/#parameters_13","text":"rows: U16 val cols: U16 val","title":"Parameters"},{"location":"term-ANSINotify/#returns_13","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#closed","text":"[Source] fun ref closed() : None val","title":"closed"},{"location":"term-ANSINotify/#returns_14","text":"None val","title":"Returns"},{"location":"term-ANSITerm/","text":"ANSITerm [Source] Handles ANSI escape codes from stdin. actor tag ANSITerm Constructors create [Source] Create a new ANSI term. new tag create( notify: ANSINotify iso, source: DisposableActor tag, timers: Timers tag = seq) : ANSITerm tag^ Parameters notify: ANSINotify iso source: DisposableActor tag timers: Timers tag = seq Returns ANSITerm tag^ Public Behaviours apply [Source] Receives input from stdin. be apply( data: Array[U8 val] iso) Parameters data: Array [ U8 val] iso prompt [Source] Pass a prompt along to the notifier. be prompt( value: String val) Parameters value: String val size [Source] be size() dispose [Source] Stop accepting input, inform the notifier we have closed, and dispose of our source. be dispose() Private Behaviours _timeout [Source] Our timer since receiving an ESC has expired. Send the buffered data as if it was not an escape sequence. be _timeout() Private Functions _size [Source] Pass the window size to the notifier. fun ref _size() : None val Returns None val _mod [Source] Set the modifier bools. fun ref _mod() : (Bool val , Bool val , Bool val) Returns ( Bool val , Bool val , Bool val) _keypad [Source] An extended key. fun ref _keypad() : None val Returns None val _up [Source] Up arrow. fun ref _up() : None val Returns None val _down [Source] Down arrow. fun ref _down() : None val Returns None val _left [Source] Left arrow. fun ref _left() : None val Returns None val _right [Source] Right arrow. fun ref _right() : None val Returns None val _delete [Source] Delete key. fun ref _delete() : None val Returns None val _insert [Source] Insert key. fun ref _insert() : None val Returns None val _home [Source] Home key. fun ref _home() : None val Returns None val _end [Source] End key. fun ref _end() : None val Returns None val _page_up [Source] Page up key. fun ref _page_up() : None val Returns None val _page_down [Source] Page down key. fun ref _page_down() : None val Returns None val _fn_key [Source] Function key. fun ref _fn_key( i: U8 val) : None val Parameters i: U8 val Returns None val _esc_flush [Source] Pass a partial or unrecognised escape sequence to the notifier. fun ref _esc_flush() : None val Returns None val _esc_clear [Source] Clear the escape state. fun ref _esc_clear() : None val Returns None val","title":"actor ANSITerm"},{"location":"term-ANSITerm/#ansiterm","text":"[Source] Handles ANSI escape codes from stdin. actor tag ANSITerm","title":"ANSITerm"},{"location":"term-ANSITerm/#constructors","text":"","title":"Constructors"},{"location":"term-ANSITerm/#create","text":"[Source] Create a new ANSI term. new tag create( notify: ANSINotify iso, source: DisposableActor tag, timers: Timers tag = seq) : ANSITerm tag^","title":"create"},{"location":"term-ANSITerm/#parameters","text":"notify: ANSINotify iso source: DisposableActor tag timers: Timers tag = seq","title":"Parameters"},{"location":"term-ANSITerm/#returns","text":"ANSITerm tag^","title":"Returns"},{"location":"term-ANSITerm/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"term-ANSITerm/#apply","text":"[Source] Receives input from stdin. be apply( data: Array[U8 val] iso)","title":"apply"},{"location":"term-ANSITerm/#parameters_1","text":"data: Array [ U8 val] iso","title":"Parameters"},{"location":"term-ANSITerm/#prompt","text":"[Source] Pass a prompt along to the notifier. be prompt( value: String val)","title":"prompt"},{"location":"term-ANSITerm/#parameters_2","text":"value: String val","title":"Parameters"},{"location":"term-ANSITerm/#size","text":"[Source] be size()","title":"size"},{"location":"term-ANSITerm/#dispose","text":"[Source] Stop accepting input, inform the notifier we have closed, and dispose of our source. be dispose()","title":"dispose"},{"location":"term-ANSITerm/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"term-ANSITerm/#_timeout","text":"[Source] Our timer since receiving an ESC has expired. Send the buffered data as if it was not an escape sequence. be _timeout()","title":"_timeout"},{"location":"term-ANSITerm/#private-functions","text":"","title":"Private Functions"},{"location":"term-ANSITerm/#_size","text":"[Source] Pass the window size to the notifier. fun ref _size() : None val","title":"_size"},{"location":"term-ANSITerm/#returns_1","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_mod","text":"[Source] Set the modifier bools. fun ref _mod() : (Bool val , Bool val , Bool val)","title":"_mod"},{"location":"term-ANSITerm/#returns_2","text":"( Bool val , Bool val , Bool val)","title":"Returns"},{"location":"term-ANSITerm/#_keypad","text":"[Source] An extended key. fun ref _keypad() : None val","title":"_keypad"},{"location":"term-ANSITerm/#returns_3","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_up","text":"[Source] Up arrow. fun ref _up() : None val","title":"_up"},{"location":"term-ANSITerm/#returns_4","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_down","text":"[Source] Down arrow. fun ref _down() : None val","title":"_down"},{"location":"term-ANSITerm/#returns_5","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_left","text":"[Source] Left arrow. fun ref _left() : None val","title":"_left"},{"location":"term-ANSITerm/#returns_6","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_right","text":"[Source] Right arrow. fun ref _right() : None val","title":"_right"},{"location":"term-ANSITerm/#returns_7","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_delete","text":"[Source] Delete key. fun ref _delete() : None val","title":"_delete"},{"location":"term-ANSITerm/#returns_8","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_insert","text":"[Source] Insert key. fun ref _insert() : None val","title":"_insert"},{"location":"term-ANSITerm/#returns_9","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_home","text":"[Source] Home key. fun ref _home() : None val","title":"_home"},{"location":"term-ANSITerm/#returns_10","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_end","text":"[Source] End key. fun ref _end() : None val","title":"_end"},{"location":"term-ANSITerm/#returns_11","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_page_up","text":"[Source] Page up key. fun ref _page_up() : None val","title":"_page_up"},{"location":"term-ANSITerm/#returns_12","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_page_down","text":"[Source] Page down key. fun ref _page_down() : None val","title":"_page_down"},{"location":"term-ANSITerm/#returns_13","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_fn_key","text":"[Source] Function key. fun ref _fn_key( i: U8 val) : None val","title":"_fn_key"},{"location":"term-ANSITerm/#parameters_3","text":"i: U8 val","title":"Parameters"},{"location":"term-ANSITerm/#returns_14","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_esc_flush","text":"[Source] Pass a partial or unrecognised escape sequence to the notifier. fun ref _esc_flush() : None val","title":"_esc_flush"},{"location":"term-ANSITerm/#returns_15","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_esc_clear","text":"[Source] Clear the escape state. fun ref _esc_clear() : None val","title":"_esc_clear"},{"location":"term-ANSITerm/#returns_16","text":"None val","title":"Returns"},{"location":"term-Readline/","text":"Readline [Source] Line editing, history, and tab completion. class ref Readline is ANSINotify ref Implements ANSINotify ref Constructors create [Source] Create a readline handler to be passed to stdin. It begins blocked. Set an initial prompt on the ANSITerm to begin processing. new iso create( notify: ReadlineNotify iso, out: OutStream tag, path: (FilePath val | None val) = seq, maxlen: USize val = seq) : Readline iso^ Parameters notify: ReadlineNotify iso out: OutStream tag path: ( FilePath val | None val) = seq maxlen: USize val = seq Returns Readline iso^ Public Functions apply [Source] Receives input. fun ref apply( term: ANSITerm ref, input: U8 val) : None val Parameters term: ANSITerm ref input: U8 val Returns None val prompt [Source] Set a new prompt, unblock, and handle the pending queue. fun ref prompt( term: ANSITerm ref, value: String val) : None val Parameters term: ANSITerm ref value: String val Returns None val closed [Source] No more input is available. fun ref closed() : None val Returns None val up [Source] Previous line. fun ref up( ctrl: Bool val = seq, alt: Bool val = seq, shift: Bool val = seq) : None val Parameters ctrl: Bool val = seq alt: Bool val = seq shift: Bool val = seq Returns None val down [Source] Next line. fun ref down( ctrl: Bool val = seq, alt: Bool val = seq, shift: Bool val = seq) : None val Parameters ctrl: Bool val = seq alt: Bool val = seq shift: Bool val = seq Returns None val left [Source] Move left. fun ref left( ctrl: Bool val = seq, alt: Bool val = seq, shift: Bool val = seq) : None val Parameters ctrl: Bool val = seq alt: Bool val = seq shift: Bool val = seq Returns None val right [Source] Move right. fun ref right( ctrl: Bool val = seq, alt: Bool val = seq, shift: Bool val = seq) : None val Parameters ctrl: Bool val = seq alt: Bool val = seq shift: Bool val = seq Returns None val home [Source] Beginning of the line. fun ref home( ctrl: Bool val = seq, alt: Bool val = seq, shift: Bool val = seq) : None val Parameters ctrl: Bool val = seq alt: Bool val = seq shift: Bool val = seq Returns None val end_key [Source] End of the line. fun ref end_key( ctrl: Bool val = seq, alt: Bool val = seq, shift: Bool val = seq) : None val Parameters ctrl: Bool val = seq alt: Bool val = seq shift: Bool val = seq Returns None val delete [Source] Forward delete. fun ref delete( ctrl: Bool val = seq, alt: Bool val = seq, shift: Bool val = seq) : None val Parameters ctrl: Bool val = seq alt: Bool val = seq shift: Bool val = seq Returns None val insert fun ref insert( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters ctrl: Bool val alt: Bool val shift: Bool val Returns None val page_up fun ref page_up( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters ctrl: Bool val alt: Bool val shift: Bool val Returns None val page_down fun ref page_down( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters ctrl: Bool val alt: Bool val shift: Bool val Returns None val fn_key fun ref fn_key( i: U8 val, ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters i: U8 val ctrl: Bool val alt: Bool val shift: Bool val Returns None val size fun ref size( rows: U16 val, cols: U16 val) : None val Parameters rows: U16 val cols: U16 val Returns None val Private Functions _backspace [Source] Backward delete. fun ref _backspace() : None val Returns None val _clear [Source] Clear the screen. fun ref _clear() : None val Returns None val _swap [Source] Swap the previous character with the current one. fun ref _swap() : None val Returns None val _delete_prev_word [Source] Delete the previous word. fun ref _delete_prev_word() : None val Returns None val _tab [Source] Tab completion. TODO: Improve this. fun ref _tab() : None val Returns None val _dispatch [Source] Send a finished line to the notifier. fun ref _dispatch( term: ANSITerm tag) : None val Parameters term: ANSITerm tag Returns None val _handle_line [Source] Dispatch a single line. fun ref _handle_line( term: ANSITerm tag, line: String val) : None val Parameters term: ANSITerm tag line: String val Returns None val _refresh_line [Source] Refresh the line on screen. fun ref _refresh_line() : None val Returns None val _add_history [Source] Add a line to the history, trimming an earlier line if necessary. fun ref _add_history( line: String val) : None val Parameters line: String val Returns None val _load_history [Source] Load the history from a file. fun ref _load_history() : None val Returns None val _save_history [Source] Write the history back to a file. fun box _save_history() : None val Returns None val","title":"class Readline"},{"location":"term-Readline/#readline","text":"[Source] Line editing, history, and tab completion. class ref Readline is ANSINotify ref","title":"Readline"},{"location":"term-Readline/#implements","text":"ANSINotify ref","title":"Implements"},{"location":"term-Readline/#constructors","text":"","title":"Constructors"},{"location":"term-Readline/#create","text":"[Source] Create a readline handler to be passed to stdin. It begins blocked. Set an initial prompt on the ANSITerm to begin processing. new iso create( notify: ReadlineNotify iso, out: OutStream tag, path: (FilePath val | None val) = seq, maxlen: USize val = seq) : Readline iso^","title":"create"},{"location":"term-Readline/#parameters","text":"notify: ReadlineNotify iso out: OutStream tag path: ( FilePath val | None val) = seq maxlen: USize val = seq","title":"Parameters"},{"location":"term-Readline/#returns","text":"Readline iso^","title":"Returns"},{"location":"term-Readline/#public-functions","text":"","title":"Public Functions"},{"location":"term-Readline/#apply","text":"[Source] Receives input. fun ref apply( term: ANSITerm ref, input: U8 val) : None val","title":"apply"},{"location":"term-Readline/#parameters_1","text":"term: ANSITerm ref input: U8 val","title":"Parameters"},{"location":"term-Readline/#returns_1","text":"None val","title":"Returns"},{"location":"term-Readline/#prompt","text":"[Source] Set a new prompt, unblock, and handle the pending queue. fun ref prompt( term: ANSITerm ref, value: String val) : None val","title":"prompt"},{"location":"term-Readline/#parameters_2","text":"term: ANSITerm ref value: String val","title":"Parameters"},{"location":"term-Readline/#returns_2","text":"None val","title":"Returns"},{"location":"term-Readline/#closed","text":"[Source] No more input is available. fun ref closed() : None val","title":"closed"},{"location":"term-Readline/#returns_3","text":"None val","title":"Returns"},{"location":"term-Readline/#up","text":"[Source] Previous line. fun ref up( ctrl: Bool val = seq, alt: Bool val = seq, shift: Bool val = seq) : None val","title":"up"},{"location":"term-Readline/#parameters_3","text":"ctrl: Bool val = seq alt: Bool val = seq shift: Bool val = seq","title":"Parameters"},{"location":"term-Readline/#returns_4","text":"None val","title":"Returns"},{"location":"term-Readline/#down","text":"[Source] Next line. fun ref down( ctrl: Bool val = seq, alt: Bool val = seq, shift: Bool val = seq) : None val","title":"down"},{"location":"term-Readline/#parameters_4","text":"ctrl: Bool val = seq alt: Bool val = seq shift: Bool val = seq","title":"Parameters"},{"location":"term-Readline/#returns_5","text":"None val","title":"Returns"},{"location":"term-Readline/#left","text":"[Source] Move left. fun ref left( ctrl: Bool val = seq, alt: Bool val = seq, shift: Bool val = seq) : None val","title":"left"},{"location":"term-Readline/#parameters_5","text":"ctrl: Bool val = seq alt: Bool val = seq shift: Bool val = seq","title":"Parameters"},{"location":"term-Readline/#returns_6","text":"None val","title":"Returns"},{"location":"term-Readline/#right","text":"[Source] Move right. fun ref right( ctrl: Bool val = seq, alt: Bool val = seq, shift: Bool val = seq) : None val","title":"right"},{"location":"term-Readline/#parameters_6","text":"ctrl: Bool val = seq alt: Bool val = seq shift: Bool val = seq","title":"Parameters"},{"location":"term-Readline/#returns_7","text":"None val","title":"Returns"},{"location":"term-Readline/#home","text":"[Source] Beginning of the line. fun ref home( ctrl: Bool val = seq, alt: Bool val = seq, shift: Bool val = seq) : None val","title":"home"},{"location":"term-Readline/#parameters_7","text":"ctrl: Bool val = seq alt: Bool val = seq shift: Bool val = seq","title":"Parameters"},{"location":"term-Readline/#returns_8","text":"None val","title":"Returns"},{"location":"term-Readline/#end_key","text":"[Source] End of the line. fun ref end_key( ctrl: Bool val = seq, alt: Bool val = seq, shift: Bool val = seq) : None val","title":"end_key"},{"location":"term-Readline/#parameters_8","text":"ctrl: Bool val = seq alt: Bool val = seq shift: Bool val = seq","title":"Parameters"},{"location":"term-Readline/#returns_9","text":"None val","title":"Returns"},{"location":"term-Readline/#delete","text":"[Source] Forward delete. fun ref delete( ctrl: Bool val = seq, alt: Bool val = seq, shift: Bool val = seq) : None val","title":"delete"},{"location":"term-Readline/#parameters_9","text":"ctrl: Bool val = seq alt: Bool val = seq shift: Bool val = seq","title":"Parameters"},{"location":"term-Readline/#returns_10","text":"None val","title":"Returns"},{"location":"term-Readline/#insert","text":"fun ref insert( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"insert"},{"location":"term-Readline/#parameters_10","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-Readline/#returns_11","text":"None val","title":"Returns"},{"location":"term-Readline/#page_up","text":"fun ref page_up( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"page_up"},{"location":"term-Readline/#parameters_11","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-Readline/#returns_12","text":"None val","title":"Returns"},{"location":"term-Readline/#page_down","text":"fun ref page_down( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"page_down"},{"location":"term-Readline/#parameters_12","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-Readline/#returns_13","text":"None val","title":"Returns"},{"location":"term-Readline/#fn_key","text":"fun ref fn_key( i: U8 val, ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"fn_key"},{"location":"term-Readline/#parameters_13","text":"i: U8 val ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-Readline/#returns_14","text":"None val","title":"Returns"},{"location":"term-Readline/#size","text":"fun ref size( rows: U16 val, cols: U16 val) : None val","title":"size"},{"location":"term-Readline/#parameters_14","text":"rows: U16 val cols: U16 val","title":"Parameters"},{"location":"term-Readline/#returns_15","text":"None val","title":"Returns"},{"location":"term-Readline/#private-functions","text":"","title":"Private Functions"},{"location":"term-Readline/#_backspace","text":"[Source] Backward delete. fun ref _backspace() : None val","title":"_backspace"},{"location":"term-Readline/#returns_16","text":"None val","title":"Returns"},{"location":"term-Readline/#_clear","text":"[Source] Clear the screen. fun ref _clear() : None val","title":"_clear"},{"location":"term-Readline/#returns_17","text":"None val","title":"Returns"},{"location":"term-Readline/#_swap","text":"[Source] Swap the previous character with the current one. fun ref _swap() : None val","title":"_swap"},{"location":"term-Readline/#returns_18","text":"None val","title":"Returns"},{"location":"term-Readline/#_delete_prev_word","text":"[Source] Delete the previous word. fun ref _delete_prev_word() : None val","title":"_delete_prev_word"},{"location":"term-Readline/#returns_19","text":"None val","title":"Returns"},{"location":"term-Readline/#_tab","text":"[Source] Tab completion. TODO: Improve this. fun ref _tab() : None val","title":"_tab"},{"location":"term-Readline/#returns_20","text":"None val","title":"Returns"},{"location":"term-Readline/#_dispatch","text":"[Source] Send a finished line to the notifier. fun ref _dispatch( term: ANSITerm tag) : None val","title":"_dispatch"},{"location":"term-Readline/#parameters_15","text":"term: ANSITerm tag","title":"Parameters"},{"location":"term-Readline/#returns_21","text":"None val","title":"Returns"},{"location":"term-Readline/#_handle_line","text":"[Source] Dispatch a single line. fun ref _handle_line( term: ANSITerm tag, line: String val) : None val","title":"_handle_line"},{"location":"term-Readline/#parameters_16","text":"term: ANSITerm tag line: String val","title":"Parameters"},{"location":"term-Readline/#returns_22","text":"None val","title":"Returns"},{"location":"term-Readline/#_refresh_line","text":"[Source] Refresh the line on screen. fun ref _refresh_line() : None val","title":"_refresh_line"},{"location":"term-Readline/#returns_23","text":"None val","title":"Returns"},{"location":"term-Readline/#_add_history","text":"[Source] Add a line to the history, trimming an earlier line if necessary. fun ref _add_history( line: String val) : None val","title":"_add_history"},{"location":"term-Readline/#parameters_17","text":"line: String val","title":"Parameters"},{"location":"term-Readline/#returns_24","text":"None val","title":"Returns"},{"location":"term-Readline/#_load_history","text":"[Source] Load the history from a file. fun ref _load_history() : None val","title":"_load_history"},{"location":"term-Readline/#returns_25","text":"None val","title":"Returns"},{"location":"term-Readline/#_save_history","text":"[Source] Write the history back to a file. fun box _save_history() : None val","title":"_save_history"},{"location":"term-Readline/#returns_26","text":"None val","title":"Returns"},{"location":"term-ReadlineNotify/","text":"ReadlineNotify [Source] Notifier for readline. interface ref ReadlineNotify Public Functions apply [Source] Receives finished lines. The next prompt is set by fulfilling the promise. If the promise is rejected, readline will stop handling input. fun ref apply( line: String val, prompt: Promise[String val] tag) : None val Parameters line: String val prompt: Promise [ String val] tag Returns None val tab [Source] Return tab completion possibilities. fun ref tab( line: String val) : Seq[String val] box Parameters line: String val Returns Seq [ String val] box","title":"interface ReadlineNotify"},{"location":"term-ReadlineNotify/#readlinenotify","text":"[Source] Notifier for readline. interface ref ReadlineNotify","title":"ReadlineNotify"},{"location":"term-ReadlineNotify/#public-functions","text":"","title":"Public Functions"},{"location":"term-ReadlineNotify/#apply","text":"[Source] Receives finished lines. The next prompt is set by fulfilling the promise. If the promise is rejected, readline will stop handling input. fun ref apply( line: String val, prompt: Promise[String val] tag) : None val","title":"apply"},{"location":"term-ReadlineNotify/#parameters","text":"line: String val prompt: Promise [ String val] tag","title":"Parameters"},{"location":"term-ReadlineNotify/#returns","text":"None val","title":"Returns"},{"location":"term-ReadlineNotify/#tab","text":"[Source] Return tab completion possibilities. fun ref tab( line: String val) : Seq[String val] box","title":"tab"},{"location":"term-ReadlineNotify/#parameters_1","text":"line: String val","title":"Parameters"},{"location":"term-ReadlineNotify/#returns_1","text":"Seq [ String val] box","title":"Returns"},{"location":"term-_EscapeCSI/","text":"_EscapeCSI [Source] primitive val _EscapeCSI Constructors create [Source] new val create() : _EscapeCSI val^ Returns _EscapeCSI val^ Public Functions eq [Source] fun box eq( that: _EscapeCSI val) : Bool val Parameters that: _EscapeCSI val Returns Bool val ne [Source] fun box ne( that: _EscapeCSI val) : Bool val Parameters that: _EscapeCSI val Returns Bool val","title":"primitive _EscapeCSI"},{"location":"term-_EscapeCSI/#_escapecsi","text":"[Source] primitive val _EscapeCSI","title":"_EscapeCSI"},{"location":"term-_EscapeCSI/#constructors","text":"","title":"Constructors"},{"location":"term-_EscapeCSI/#create","text":"[Source] new val create() : _EscapeCSI val^","title":"create"},{"location":"term-_EscapeCSI/#returns","text":"_EscapeCSI val^","title":"Returns"},{"location":"term-_EscapeCSI/#public-functions","text":"","title":"Public Functions"},{"location":"term-_EscapeCSI/#eq","text":"[Source] fun box eq( that: _EscapeCSI val) : Bool val","title":"eq"},{"location":"term-_EscapeCSI/#parameters","text":"that: _EscapeCSI val","title":"Parameters"},{"location":"term-_EscapeCSI/#returns_1","text":"Bool val","title":"Returns"},{"location":"term-_EscapeCSI/#ne","text":"[Source] fun box ne( that: _EscapeCSI val) : Bool val","title":"ne"},{"location":"term-_EscapeCSI/#parameters_1","text":"that: _EscapeCSI val","title":"Parameters"},{"location":"term-_EscapeCSI/#returns_2","text":"Bool val","title":"Returns"},{"location":"term-_EscapeMod/","text":"_EscapeMod [Source] primitive val _EscapeMod Constructors create [Source] new val create() : _EscapeMod val^ Returns _EscapeMod val^ Public Functions eq [Source] fun box eq( that: _EscapeMod val) : Bool val Parameters that: _EscapeMod val Returns Bool val ne [Source] fun box ne( that: _EscapeMod val) : Bool val Parameters that: _EscapeMod val Returns Bool val","title":"primitive _EscapeMod"},{"location":"term-_EscapeMod/#_escapemod","text":"[Source] primitive val _EscapeMod","title":"_EscapeMod"},{"location":"term-_EscapeMod/#constructors","text":"","title":"Constructors"},{"location":"term-_EscapeMod/#create","text":"[Source] new val create() : _EscapeMod val^","title":"create"},{"location":"term-_EscapeMod/#returns","text":"_EscapeMod val^","title":"Returns"},{"location":"term-_EscapeMod/#public-functions","text":"","title":"Public Functions"},{"location":"term-_EscapeMod/#eq","text":"[Source] fun box eq( that: _EscapeMod val) : Bool val","title":"eq"},{"location":"term-_EscapeMod/#parameters","text":"that: _EscapeMod val","title":"Parameters"},{"location":"term-_EscapeMod/#returns_1","text":"Bool val","title":"Returns"},{"location":"term-_EscapeMod/#ne","text":"[Source] fun box ne( that: _EscapeMod val) : Bool val","title":"ne"},{"location":"term-_EscapeMod/#parameters_1","text":"that: _EscapeMod val","title":"Parameters"},{"location":"term-_EscapeMod/#returns_2","text":"Bool val","title":"Returns"},{"location":"term-_EscapeNone/","text":"_EscapeNone [Source] primitive val _EscapeNone Constructors create [Source] new val create() : _EscapeNone val^ Returns _EscapeNone val^ Public Functions eq [Source] fun box eq( that: _EscapeNone val) : Bool val Parameters that: _EscapeNone val Returns Bool val ne [Source] fun box ne( that: _EscapeNone val) : Bool val Parameters that: _EscapeNone val Returns Bool val","title":"primitive _EscapeNone"},{"location":"term-_EscapeNone/#_escapenone","text":"[Source] primitive val _EscapeNone","title":"_EscapeNone"},{"location":"term-_EscapeNone/#constructors","text":"","title":"Constructors"},{"location":"term-_EscapeNone/#create","text":"[Source] new val create() : _EscapeNone val^","title":"create"},{"location":"term-_EscapeNone/#returns","text":"_EscapeNone val^","title":"Returns"},{"location":"term-_EscapeNone/#public-functions","text":"","title":"Public Functions"},{"location":"term-_EscapeNone/#eq","text":"[Source] fun box eq( that: _EscapeNone val) : Bool val","title":"eq"},{"location":"term-_EscapeNone/#parameters","text":"that: _EscapeNone val","title":"Parameters"},{"location":"term-_EscapeNone/#returns_1","text":"Bool val","title":"Returns"},{"location":"term-_EscapeNone/#ne","text":"[Source] fun box ne( that: _EscapeNone val) : Bool val","title":"ne"},{"location":"term-_EscapeNone/#parameters_1","text":"that: _EscapeNone val","title":"Parameters"},{"location":"term-_EscapeNone/#returns_2","text":"Bool val","title":"Returns"},{"location":"term-_EscapeSS3/","text":"_EscapeSS3 [Source] primitive val _EscapeSS3 Constructors create [Source] new val create() : _EscapeSS3 val^ Returns _EscapeSS3 val^ Public Functions eq [Source] fun box eq( that: _EscapeSS3 val) : Bool val Parameters that: _EscapeSS3 val Returns Bool val ne [Source] fun box ne( that: _EscapeSS3 val) : Bool val Parameters that: _EscapeSS3 val Returns Bool val","title":"primitive _EscapeSS3"},{"location":"term-_EscapeSS3/#_escapess3","text":"[Source] primitive val _EscapeSS3","title":"_EscapeSS3"},{"location":"term-_EscapeSS3/#constructors","text":"","title":"Constructors"},{"location":"term-_EscapeSS3/#create","text":"[Source] new val create() : _EscapeSS3 val^","title":"create"},{"location":"term-_EscapeSS3/#returns","text":"_EscapeSS3 val^","title":"Returns"},{"location":"term-_EscapeSS3/#public-functions","text":"","title":"Public Functions"},{"location":"term-_EscapeSS3/#eq","text":"[Source] fun box eq( that: _EscapeSS3 val) : Bool val","title":"eq"},{"location":"term-_EscapeSS3/#parameters","text":"that: _EscapeSS3 val","title":"Parameters"},{"location":"term-_EscapeSS3/#returns_1","text":"Bool val","title":"Returns"},{"location":"term-_EscapeSS3/#ne","text":"[Source] fun box ne( that: _EscapeSS3 val) : Bool val","title":"ne"},{"location":"term-_EscapeSS3/#parameters_1","text":"that: _EscapeSS3 val","title":"Parameters"},{"location":"term-_EscapeSS3/#returns_2","text":"Bool val","title":"Returns"},{"location":"term-_EscapeStart/","text":"_EscapeStart [Source] primitive val _EscapeStart Constructors create [Source] new val create() : _EscapeStart val^ Returns _EscapeStart val^ Public Functions eq [Source] fun box eq( that: _EscapeStart val) : Bool val Parameters that: _EscapeStart val Returns Bool val ne [Source] fun box ne( that: _EscapeStart val) : Bool val Parameters that: _EscapeStart val Returns Bool val","title":"primitive _EscapeStart"},{"location":"term-_EscapeStart/#_escapestart","text":"[Source] primitive val _EscapeStart","title":"_EscapeStart"},{"location":"term-_EscapeStart/#constructors","text":"","title":"Constructors"},{"location":"term-_EscapeStart/#create","text":"[Source] new val create() : _EscapeStart val^","title":"create"},{"location":"term-_EscapeStart/#returns","text":"_EscapeStart val^","title":"Returns"},{"location":"term-_EscapeStart/#public-functions","text":"","title":"Public Functions"},{"location":"term-_EscapeStart/#eq","text":"[Source] fun box eq( that: _EscapeStart val) : Bool val","title":"eq"},{"location":"term-_EscapeStart/#parameters","text":"that: _EscapeStart val","title":"Parameters"},{"location":"term-_EscapeStart/#returns_1","text":"Bool val","title":"Returns"},{"location":"term-_EscapeStart/#ne","text":"[Source] fun box ne( that: _EscapeStart val) : Bool val","title":"ne"},{"location":"term-_EscapeStart/#parameters_1","text":"that: _EscapeStart val","title":"Parameters"},{"location":"term-_EscapeStart/#returns_2","text":"Bool val","title":"Returns"},{"location":"term-_EscapeState/","text":"_EscapeState [Source] type _EscapeState is (_EscapeNone val | _EscapeStart val | _EscapeSS3 val | _EscapeCSI val | _EscapeMod val) Type Alias For ( _EscapeNone val | _EscapeStart val | _EscapeSS3 val | _EscapeCSI val | _EscapeMod val)","title":"type _EscapeState"},{"location":"term-_EscapeState/#_escapestate","text":"[Source] type _EscapeState is (_EscapeNone val | _EscapeStart val | _EscapeSS3 val | _EscapeCSI val | _EscapeMod val)","title":"_EscapeState"},{"location":"term-_EscapeState/#type-alias-for","text":"( _EscapeNone val | _EscapeStart val | _EscapeSS3 val | _EscapeCSI val | _EscapeMod val)","title":"Type Alias For"},{"location":"term-_TIOCGWINSZ/","text":"_TIOCGWINSZ [Source] primitive val _TIOCGWINSZ Constructors create [Source] new val create() : _TIOCGWINSZ val^ Returns _TIOCGWINSZ val^ Public Functions apply [Source] fun box apply() : ULong val Returns ULong val eq [Source] fun box eq( that: _TIOCGWINSZ val) : Bool val Parameters that: _TIOCGWINSZ val Returns Bool val ne [Source] fun box ne( that: _TIOCGWINSZ val) : Bool val Parameters that: _TIOCGWINSZ val Returns Bool val","title":"primitive _TIOCGWINSZ"},{"location":"term-_TIOCGWINSZ/#_tiocgwinsz","text":"[Source] primitive val _TIOCGWINSZ","title":"_TIOCGWINSZ"},{"location":"term-_TIOCGWINSZ/#constructors","text":"","title":"Constructors"},{"location":"term-_TIOCGWINSZ/#create","text":"[Source] new val create() : _TIOCGWINSZ val^","title":"create"},{"location":"term-_TIOCGWINSZ/#returns","text":"_TIOCGWINSZ val^","title":"Returns"},{"location":"term-_TIOCGWINSZ/#public-functions","text":"","title":"Public Functions"},{"location":"term-_TIOCGWINSZ/#apply","text":"[Source] fun box apply() : ULong val","title":"apply"},{"location":"term-_TIOCGWINSZ/#returns_1","text":"ULong val","title":"Returns"},{"location":"term-_TIOCGWINSZ/#eq","text":"[Source] fun box eq( that: _TIOCGWINSZ val) : Bool val","title":"eq"},{"location":"term-_TIOCGWINSZ/#parameters","text":"that: _TIOCGWINSZ val","title":"Parameters"},{"location":"term-_TIOCGWINSZ/#returns_2","text":"Bool val","title":"Returns"},{"location":"term-_TIOCGWINSZ/#ne","text":"[Source] fun box ne( that: _TIOCGWINSZ val) : Bool val","title":"ne"},{"location":"term-_TIOCGWINSZ/#parameters_1","text":"that: _TIOCGWINSZ val","title":"Parameters"},{"location":"term-_TIOCGWINSZ/#returns_3","text":"Bool val","title":"Returns"},{"location":"term-_TermResizeNotify/","text":"_TermResizeNotify [Source] class ref _TermResizeNotify is SignalNotify ref Implements SignalNotify ref Constructors create [Source] new ref create( term: ANSITerm tag) : _TermResizeNotify ref^ Parameters term: ANSITerm tag Returns _TermResizeNotify ref^ Public Functions apply [Source] fun box apply( times: U32 val) : Bool val Parameters times: U32 val Returns Bool val dispose [Source] fun ref dispose() : None val Returns None val","title":"class _TermResizeNotify"},{"location":"term-_TermResizeNotify/#_termresizenotify","text":"[Source] class ref _TermResizeNotify is SignalNotify ref","title":"_TermResizeNotify"},{"location":"term-_TermResizeNotify/#implements","text":"SignalNotify ref","title":"Implements"},{"location":"term-_TermResizeNotify/#constructors","text":"","title":"Constructors"},{"location":"term-_TermResizeNotify/#create","text":"[Source] new ref create( term: ANSITerm tag) : _TermResizeNotify ref^","title":"create"},{"location":"term-_TermResizeNotify/#parameters","text":"term: ANSITerm tag","title":"Parameters"},{"location":"term-_TermResizeNotify/#returns","text":"_TermResizeNotify ref^","title":"Returns"},{"location":"term-_TermResizeNotify/#public-functions","text":"","title":"Public Functions"},{"location":"term-_TermResizeNotify/#apply","text":"[Source] fun box apply( times: U32 val) : Bool val","title":"apply"},{"location":"term-_TermResizeNotify/#parameters_1","text":"times: U32 val","title":"Parameters"},{"location":"term-_TermResizeNotify/#returns_1","text":"Bool val","title":"Returns"},{"location":"term-_TermResizeNotify/#dispose","text":"[Source] fun ref dispose() : None val","title":"dispose"},{"location":"term-_TermResizeNotify/#returns_2","text":"None val","title":"Returns"},{"location":"term-_TermSize/","text":"_TermSize [Source] struct ref _TermSize Constructors create [Source] new iso create() : _TermSize iso^ Returns _TermSize iso^ Public fields var row: U16 val [Source] var col: U16 val [Source] var xpixel: U16 val [Source] var ypixel: U16 val [Source]","title":"struct _TermSize"},{"location":"term-_TermSize/#_termsize","text":"[Source] struct ref _TermSize","title":"_TermSize"},{"location":"term-_TermSize/#constructors","text":"","title":"Constructors"},{"location":"term-_TermSize/#create","text":"[Source] new iso create() : _TermSize iso^","title":"create"},{"location":"term-_TermSize/#returns","text":"_TermSize iso^","title":"Returns"},{"location":"term-_TermSize/#public-fields","text":"","title":"Public fields"},{"location":"term-_TermSize/#var-row-u16-val","text":"[Source]","title":"var row: U16 val"},{"location":"term-_TermSize/#var-col-u16-val","text":"[Source]","title":"var col: U16 val"},{"location":"term-_TermSize/#var-xpixel-u16-val","text":"[Source]","title":"var xpixel: U16 val"},{"location":"term-_TermSize/#var-ypixel-u16-val","text":"[Source]","title":"var ypixel: U16 val"},{"location":"time--index/","text":"Time Package The Time Package provides classes and methods for timing operations, dealing with dates and times, and scheduling tasks. Public Types actor Timers interface TimerNotify class Timer primitive Time class PosixDate primitive Nanos Private Types type _Clock primitive _ClockRealtime primitive _ClockMonotonic class _TimingWheel","title":"Package"},{"location":"time--index/#time-package","text":"The Time Package provides classes and methods for timing operations, dealing with dates and times, and scheduling tasks.","title":"Time Package"},{"location":"time--index/#public-types","text":"actor Timers interface TimerNotify class Timer primitive Time class PosixDate primitive Nanos","title":"Public Types"},{"location":"time--index/#private-types","text":"type _Clock primitive _ClockRealtime primitive _ClockMonotonic class _TimingWheel","title":"Private Types"},{"location":"time-Nanos/","text":"Nanos [Source] Collection of utility functions for converting various durations of time to nanoseconds, for passing to other functions in the time package. primitive val Nanos Constructors create [Source] new val create() : Nanos val^ Returns Nanos val^ Public Functions from_seconds [Source] fun box from_seconds( t: U64 val) : U64 val Parameters t: U64 val Returns U64 val from_millis [Source] fun box from_millis( t: U64 val) : U64 val Parameters t: U64 val Returns U64 val from_micros [Source] fun box from_micros( t: U64 val) : U64 val Parameters t: U64 val Returns U64 val from_seconds_f [Source] fun box from_seconds_f( t: F64 val) : U64 val Parameters t: F64 val Returns U64 val from_millis_f [Source] fun box from_millis_f( t: F64 val) : U64 val Parameters t: F64 val Returns U64 val from_micros_f [Source] fun box from_micros_f( t: F64 val) : U64 val Parameters t: F64 val Returns U64 val from_wall_clock [Source] fun box from_wall_clock( wall: (I64 val , I64 val)) : U64 val Parameters wall: ( I64 val , I64 val) Returns U64 val eq [Source] fun box eq( that: Nanos val) : Bool val Parameters that: Nanos val Returns Bool val ne [Source] fun box ne( that: Nanos val) : Bool val Parameters that: Nanos val Returns Bool val","title":"primitive Nanos"},{"location":"time-Nanos/#nanos","text":"[Source] Collection of utility functions for converting various durations of time to nanoseconds, for passing to other functions in the time package. primitive val Nanos","title":"Nanos"},{"location":"time-Nanos/#constructors","text":"","title":"Constructors"},{"location":"time-Nanos/#create","text":"[Source] new val create() : Nanos val^","title":"create"},{"location":"time-Nanos/#returns","text":"Nanos val^","title":"Returns"},{"location":"time-Nanos/#public-functions","text":"","title":"Public Functions"},{"location":"time-Nanos/#from_seconds","text":"[Source] fun box from_seconds( t: U64 val) : U64 val","title":"from_seconds"},{"location":"time-Nanos/#parameters","text":"t: U64 val","title":"Parameters"},{"location":"time-Nanos/#returns_1","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_millis","text":"[Source] fun box from_millis( t: U64 val) : U64 val","title":"from_millis"},{"location":"time-Nanos/#parameters_1","text":"t: U64 val","title":"Parameters"},{"location":"time-Nanos/#returns_2","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_micros","text":"[Source] fun box from_micros( t: U64 val) : U64 val","title":"from_micros"},{"location":"time-Nanos/#parameters_2","text":"t: U64 val","title":"Parameters"},{"location":"time-Nanos/#returns_3","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_seconds_f","text":"[Source] fun box from_seconds_f( t: F64 val) : U64 val","title":"from_seconds_f"},{"location":"time-Nanos/#parameters_3","text":"t: F64 val","title":"Parameters"},{"location":"time-Nanos/#returns_4","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_millis_f","text":"[Source] fun box from_millis_f( t: F64 val) : U64 val","title":"from_millis_f"},{"location":"time-Nanos/#parameters_4","text":"t: F64 val","title":"Parameters"},{"location":"time-Nanos/#returns_5","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_micros_f","text":"[Source] fun box from_micros_f( t: F64 val) : U64 val","title":"from_micros_f"},{"location":"time-Nanos/#parameters_5","text":"t: F64 val","title":"Parameters"},{"location":"time-Nanos/#returns_6","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_wall_clock","text":"[Source] fun box from_wall_clock( wall: (I64 val , I64 val)) : U64 val","title":"from_wall_clock"},{"location":"time-Nanos/#parameters_6","text":"wall: ( I64 val , I64 val)","title":"Parameters"},{"location":"time-Nanos/#returns_7","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#eq","text":"[Source] fun box eq( that: Nanos val) : Bool val","title":"eq"},{"location":"time-Nanos/#parameters_7","text":"that: Nanos val","title":"Parameters"},{"location":"time-Nanos/#returns_8","text":"Bool val","title":"Returns"},{"location":"time-Nanos/#ne","text":"[Source] fun box ne( that: Nanos val) : Bool val","title":"ne"},{"location":"time-Nanos/#parameters_8","text":"that: Nanos val","title":"Parameters"},{"location":"time-Nanos/#returns_9","text":"Bool val","title":"Returns"},{"location":"time-PosixDate/","text":"PosixDate [Source] Represents a proleptic Gregorian date and time, without specifying a time zone. The day of month, month, day of week, and day of year are all indexed from 1, i.e. January is 1, Monday is 1. class ref PosixDate Constructors create [Source] Create a date from a POSIX time. Negative arguments will be changed to zero. new ref create( seconds: I64 val = seq, nanoseconds: I64 val = seq) : PosixDate ref^ Parameters seconds: I64 val = seq nanoseconds: I64 val = seq Returns PosixDate ref^ Public fields var nsec: I32 val [Source] var sec: I32 val [Source] var min: I32 val [Source] var hour: I32 val [Source] var day_of_month: I32 val [Source] var month: I32 val [Source] var year: I32 val [Source] var day_of_week: I32 val [Source] var day_of_year: I32 val [Source] Public Functions time [Source] Return a POSIX time. Treats the date as UTC. fun box time() : I64 val Returns I64 val normal [Source] Normalise all the fields of the date. For example, if the hour is 24, it is set to 0 and the day is advanced. This allows fields to be changed naively, eg. adding 1000 to hours to advance the time by 1000 hours, and then normalising the date. fun ref normal() : None val Returns None val format [Source] Format the time as for strftime. fun box format( fmt: String val) : String val Parameters fmt: String val Returns String val Private Functions _negative_to_zero [Source] fun box _negative_to_zero( value: I64 val) : I64 val Parameters value: I64 val Returns I64 val","title":"class PosixDate"},{"location":"time-PosixDate/#posixdate","text":"[Source] Represents a proleptic Gregorian date and time, without specifying a time zone. The day of month, month, day of week, and day of year are all indexed from 1, i.e. January is 1, Monday is 1. class ref PosixDate","title":"PosixDate"},{"location":"time-PosixDate/#constructors","text":"","title":"Constructors"},{"location":"time-PosixDate/#create","text":"[Source] Create a date from a POSIX time. Negative arguments will be changed to zero. new ref create( seconds: I64 val = seq, nanoseconds: I64 val = seq) : PosixDate ref^","title":"create"},{"location":"time-PosixDate/#parameters","text":"seconds: I64 val = seq nanoseconds: I64 val = seq","title":"Parameters"},{"location":"time-PosixDate/#returns","text":"PosixDate ref^","title":"Returns"},{"location":"time-PosixDate/#public-fields","text":"","title":"Public fields"},{"location":"time-PosixDate/#var-nsec-i32-val","text":"[Source]","title":"var nsec: I32 val"},{"location":"time-PosixDate/#var-sec-i32-val","text":"[Source]","title":"var sec: I32 val"},{"location":"time-PosixDate/#var-min-i32-val","text":"[Source]","title":"var min: I32 val"},{"location":"time-PosixDate/#var-hour-i32-val","text":"[Source]","title":"var hour: I32 val"},{"location":"time-PosixDate/#var-day_of_month-i32-val","text":"[Source]","title":"var day_of_month: I32 val"},{"location":"time-PosixDate/#var-month-i32-val","text":"[Source]","title":"var month: I32 val"},{"location":"time-PosixDate/#var-year-i32-val","text":"[Source]","title":"var year: I32 val"},{"location":"time-PosixDate/#var-day_of_week-i32-val","text":"[Source]","title":"var day_of_week: I32 val"},{"location":"time-PosixDate/#var-day_of_year-i32-val","text":"[Source]","title":"var day_of_year: I32 val"},{"location":"time-PosixDate/#public-functions","text":"","title":"Public Functions"},{"location":"time-PosixDate/#time","text":"[Source] Return a POSIX time. Treats the date as UTC. fun box time() : I64 val","title":"time"},{"location":"time-PosixDate/#returns_1","text":"I64 val","title":"Returns"},{"location":"time-PosixDate/#normal","text":"[Source] Normalise all the fields of the date. For example, if the hour is 24, it is set to 0 and the day is advanced. This allows fields to be changed naively, eg. adding 1000 to hours to advance the time by 1000 hours, and then normalising the date. fun ref normal() : None val","title":"normal"},{"location":"time-PosixDate/#returns_2","text":"None val","title":"Returns"},{"location":"time-PosixDate/#format","text":"[Source] Format the time as for strftime. fun box format( fmt: String val) : String val","title":"format"},{"location":"time-PosixDate/#parameters_1","text":"fmt: String val","title":"Parameters"},{"location":"time-PosixDate/#returns_3","text":"String val","title":"Returns"},{"location":"time-PosixDate/#private-functions","text":"","title":"Private Functions"},{"location":"time-PosixDate/#_negative_to_zero","text":"[Source] fun box _negative_to_zero( value: I64 val) : I64 val","title":"_negative_to_zero"},{"location":"time-PosixDate/#parameters_2","text":"value: I64 val","title":"Parameters"},{"location":"time-PosixDate/#returns_4","text":"I64 val","title":"Returns"},{"location":"time-Time/","text":"Time [Source] A collection of ways to fetch the current time. primitive val Time Constructors create [Source] new val create() : Time val^ Returns Time val^ Public Functions now [Source] The wall-clock adjusted system time with nanoseconds. Return: (seconds, nanoseconds) fun box now() : (I64 val , I64 val) Returns ( I64 val , I64 val) seconds [Source] The wall-clock adjusted system time. fun box seconds() : I64 val Returns I64 val millis [Source] Monotonic unadjusted milliseconds. fun box millis() : U64 val Returns U64 val micros [Source] Monotonic unadjusted microseconds. fun box micros() : U64 val Returns U64 val nanos [Source] Monotonic unadjusted nanoseconds. fun box nanos() : U64 val Returns U64 val cycles [Source] Processor cycle count. Don't use this for performance timing, as it does not control for out-of-order execution. fun box cycles() : U64 val Returns U64 val perf_begin [Source] Get a cycle count for beginning a performance testing block. This will will prevent instructions from before this call leaking into the block and instructions after this call being executed earlier. fun box perf_begin() : U64 val Returns U64 val perf_end [Source] Get a cycle count for ending a performance testing block. This will will prevent instructions from after this call leaking into the block and instructions before this call being executed later. fun box perf_end() : U64 val Returns U64 val eq [Source] fun box eq( that: Time val) : Bool val Parameters that: Time val Returns Bool val ne [Source] fun box ne( that: Time val) : Bool val Parameters that: Time val Returns Bool val Private Functions _clock_gettime [Source] Return a clock time on linux and bsd. fun box _clock_gettime( clock: (_ClockRealtime val | _ClockMonotonic val)) : (I64 val , I64 val) Parameters clock: ( _ClockRealtime val | _ClockMonotonic val) Returns ( I64 val , I64 val) _query_performance_counter [Source] Return QPC and QPF. fun box _query_performance_counter() : (U64 val , U64 val) Returns ( U64 val , U64 val)","title":"primitive Time"},{"location":"time-Time/#time","text":"[Source] A collection of ways to fetch the current time. primitive val Time","title":"Time"},{"location":"time-Time/#constructors","text":"","title":"Constructors"},{"location":"time-Time/#create","text":"[Source] new val create() : Time val^","title":"create"},{"location":"time-Time/#returns","text":"Time val^","title":"Returns"},{"location":"time-Time/#public-functions","text":"","title":"Public Functions"},{"location":"time-Time/#now","text":"[Source] The wall-clock adjusted system time with nanoseconds. Return: (seconds, nanoseconds) fun box now() : (I64 val , I64 val)","title":"now"},{"location":"time-Time/#returns_1","text":"( I64 val , I64 val)","title":"Returns"},{"location":"time-Time/#seconds","text":"[Source] The wall-clock adjusted system time. fun box seconds() : I64 val","title":"seconds"},{"location":"time-Time/#returns_2","text":"I64 val","title":"Returns"},{"location":"time-Time/#millis","text":"[Source] Monotonic unadjusted milliseconds. fun box millis() : U64 val","title":"millis"},{"location":"time-Time/#returns_3","text":"U64 val","title":"Returns"},{"location":"time-Time/#micros","text":"[Source] Monotonic unadjusted microseconds. fun box micros() : U64 val","title":"micros"},{"location":"time-Time/#returns_4","text":"U64 val","title":"Returns"},{"location":"time-Time/#nanos","text":"[Source] Monotonic unadjusted nanoseconds. fun box nanos() : U64 val","title":"nanos"},{"location":"time-Time/#returns_5","text":"U64 val","title":"Returns"},{"location":"time-Time/#cycles","text":"[Source] Processor cycle count. Don't use this for performance timing, as it does not control for out-of-order execution. fun box cycles() : U64 val","title":"cycles"},{"location":"time-Time/#returns_6","text":"U64 val","title":"Returns"},{"location":"time-Time/#perf_begin","text":"[Source] Get a cycle count for beginning a performance testing block. This will will prevent instructions from before this call leaking into the block and instructions after this call being executed earlier. fun box perf_begin() : U64 val","title":"perf_begin"},{"location":"time-Time/#returns_7","text":"U64 val","title":"Returns"},{"location":"time-Time/#perf_end","text":"[Source] Get a cycle count for ending a performance testing block. This will will prevent instructions from after this call leaking into the block and instructions before this call being executed later. fun box perf_end() : U64 val","title":"perf_end"},{"location":"time-Time/#returns_8","text":"U64 val","title":"Returns"},{"location":"time-Time/#eq","text":"[Source] fun box eq( that: Time val) : Bool val","title":"eq"},{"location":"time-Time/#parameters","text":"that: Time val","title":"Parameters"},{"location":"time-Time/#returns_9","text":"Bool val","title":"Returns"},{"location":"time-Time/#ne","text":"[Source] fun box ne( that: Time val) : Bool val","title":"ne"},{"location":"time-Time/#parameters_1","text":"that: Time val","title":"Parameters"},{"location":"time-Time/#returns_10","text":"Bool val","title":"Returns"},{"location":"time-Time/#private-functions","text":"","title":"Private Functions"},{"location":"time-Time/#_clock_gettime","text":"[Source] Return a clock time on linux and bsd. fun box _clock_gettime( clock: (_ClockRealtime val | _ClockMonotonic val)) : (I64 val , I64 val)","title":"_clock_gettime"},{"location":"time-Time/#parameters_2","text":"clock: ( _ClockRealtime val | _ClockMonotonic val)","title":"Parameters"},{"location":"time-Time/#returns_11","text":"( I64 val , I64 val)","title":"Returns"},{"location":"time-Time/#_query_performance_counter","text":"[Source] Return QPC and QPF. fun box _query_performance_counter() : (U64 val , U64 val)","title":"_query_performance_counter"},{"location":"time-Time/#returns_12","text":"( U64 val , U64 val)","title":"Returns"},{"location":"time-Timer/","text":"Timer [Source] The Timer class represents a timer that fires after an expiration time, and then fires at an interval. When a Timer fires, it calls the apply method of the TimerNotify object that was passed to it when it was created. The following example waits 5 seconds and then fires every 2 seconds, and when it fires the TimerNotify object prints how many times it has been called: use time actor Main new create(env: Env) = let timers = Timers let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000) timers(consume timer) class Notify is TimerNotify let _env: Env var _counter: U32 = 0 new iso create(env: Env) = _env = env fun ref apply(timer: Timer, count: U64): Bool = _env.out.print(_counter.string()) _counter = _counter + 1 true class ref Timer Constructors create [Source] Create a new timer. The expiration time should be a nanosecond count until the first expiration. The interval should also be in nanoseconds. new iso create( notify: TimerNotify iso, expiration: U64 val, interval: U64 val = seq) : Timer iso^ Parameters notify: TimerNotify iso expiration: U64 val interval: U64 val = seq Returns Timer iso^ abs [Source] Creates a new timer with an absolute expiration time rather than a relative time. The expiration time is wall-clock adjusted system time. new ref abs( notify: TimerNotify ref, expiration: (I64 val , I64 val), interval: U64 val = seq) : Timer ref^ Parameters notify: TimerNotify ref expiration: ( I64 val , I64 val) interval: U64 val = seq Returns Timer ref^ Private Functions _cancel [Source] Remove the timer from any list. fun ref _cancel() : None val Returns None val _get_node [Source] Returns the list node pointing to the timer. Used to schedule the timer in a queue. fun ref _get_node() : ListNode[Timer ref] ref Returns ListNode [ Timer ref] ref _slop [Source] Apply slop bits to the expiration time and interval. This reduces the precision by the given number of bits, effectively quantizing time. fun ref _slop( bits: USize val) : None val Parameters bits: USize val Returns None val _fire [Source] A timer is fired if its expiration time is in the past. The notifier is called with a count based on the elapsed time since expiration and the timer interval. The expiration time is set to the next expiration. Returns true if the timer should be rescheduled, false otherwise. fun ref _fire( current: U64 val) : Bool val Parameters current: U64 val Returns Bool val _next [Source] Returns the next expiration time. fun box _next() : U64 val Returns U64 val _abs_expiration_time [Source] Converts a wall-clock adjusted system time to absolute expiration time fun tag _abs_expiration_time( wall: (I64 val , I64 val)) : U64 val Parameters wall: ( I64 val , I64 val) Returns U64 val","title":"class Timer"},{"location":"time-Timer/#timer","text":"[Source] The Timer class represents a timer that fires after an expiration time, and then fires at an interval. When a Timer fires, it calls the apply method of the TimerNotify object that was passed to it when it was created. The following example waits 5 seconds and then fires every 2 seconds, and when it fires the TimerNotify object prints how many times it has been called: use time actor Main new create(env: Env) = let timers = Timers let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000) timers(consume timer) class Notify is TimerNotify let _env: Env var _counter: U32 = 0 new iso create(env: Env) = _env = env fun ref apply(timer: Timer, count: U64): Bool = _env.out.print(_counter.string()) _counter = _counter + 1 true class ref Timer","title":"Timer"},{"location":"time-Timer/#constructors","text":"","title":"Constructors"},{"location":"time-Timer/#create","text":"[Source] Create a new timer. The expiration time should be a nanosecond count until the first expiration. The interval should also be in nanoseconds. new iso create( notify: TimerNotify iso, expiration: U64 val, interval: U64 val = seq) : Timer iso^","title":"create"},{"location":"time-Timer/#parameters","text":"notify: TimerNotify iso expiration: U64 val interval: U64 val = seq","title":"Parameters"},{"location":"time-Timer/#returns","text":"Timer iso^","title":"Returns"},{"location":"time-Timer/#abs","text":"[Source] Creates a new timer with an absolute expiration time rather than a relative time. The expiration time is wall-clock adjusted system time. new ref abs( notify: TimerNotify ref, expiration: (I64 val , I64 val), interval: U64 val = seq) : Timer ref^","title":"abs"},{"location":"time-Timer/#parameters_1","text":"notify: TimerNotify ref expiration: ( I64 val , I64 val) interval: U64 val = seq","title":"Parameters"},{"location":"time-Timer/#returns_1","text":"Timer ref^","title":"Returns"},{"location":"time-Timer/#private-functions","text":"","title":"Private Functions"},{"location":"time-Timer/#_cancel","text":"[Source] Remove the timer from any list. fun ref _cancel() : None val","title":"_cancel"},{"location":"time-Timer/#returns_2","text":"None val","title":"Returns"},{"location":"time-Timer/#_get_node","text":"[Source] Returns the list node pointing to the timer. Used to schedule the timer in a queue. fun ref _get_node() : ListNode[Timer ref] ref","title":"_get_node"},{"location":"time-Timer/#returns_3","text":"ListNode [ Timer ref] ref","title":"Returns"},{"location":"time-Timer/#_slop","text":"[Source] Apply slop bits to the expiration time and interval. This reduces the precision by the given number of bits, effectively quantizing time. fun ref _slop( bits: USize val) : None val","title":"_slop"},{"location":"time-Timer/#parameters_2","text":"bits: USize val","title":"Parameters"},{"location":"time-Timer/#returns_4","text":"None val","title":"Returns"},{"location":"time-Timer/#_fire","text":"[Source] A timer is fired if its expiration time is in the past. The notifier is called with a count based on the elapsed time since expiration and the timer interval. The expiration time is set to the next expiration. Returns true if the timer should be rescheduled, false otherwise. fun ref _fire( current: U64 val) : Bool val","title":"_fire"},{"location":"time-Timer/#parameters_3","text":"current: U64 val","title":"Parameters"},{"location":"time-Timer/#returns_5","text":"Bool val","title":"Returns"},{"location":"time-Timer/#_next","text":"[Source] Returns the next expiration time. fun box _next() : U64 val","title":"_next"},{"location":"time-Timer/#returns_6","text":"U64 val","title":"Returns"},{"location":"time-Timer/#_abs_expiration_time","text":"[Source] Converts a wall-clock adjusted system time to absolute expiration time fun tag _abs_expiration_time( wall: (I64 val , I64 val)) : U64 val","title":"_abs_expiration_time"},{"location":"time-Timer/#parameters_4","text":"wall: ( I64 val , I64 val)","title":"Parameters"},{"location":"time-Timer/#returns_7","text":"U64 val","title":"Returns"},{"location":"time-TimerNotify/","text":"TimerNotify [Source] Notifications for timer. interface ref TimerNotify Public Functions apply [Source] Called with the the number of times the timer has fired since this was last called. Usually, the value of count will be 1. If it is not 1, it means that the timer isn't firing on schedule. For example, if your timer is set to fire every 10 milliseconds, and count is 2, that means it has been between 20-29 milliseconds since the last time your timer fired. Non 1 values for a timer are rare and indicate a system under heavy load. Return true to reschedule the timer (if it has an interval), or false to cancel the timer (even if it has an interval). fun ref apply( timer: Timer ref, count: U64 val) : Bool val Parameters timer: Timer ref count: U64 val Returns Bool val cancel [Source] Called if the timer is cancelled. This is also called if the notifier returns false from its apply method. fun ref cancel( timer: Timer ref) : None val Parameters timer: Timer ref Returns None val","title":"interface TimerNotify"},{"location":"time-TimerNotify/#timernotify","text":"[Source] Notifications for timer. interface ref TimerNotify","title":"TimerNotify"},{"location":"time-TimerNotify/#public-functions","text":"","title":"Public Functions"},{"location":"time-TimerNotify/#apply","text":"[Source] Called with the the number of times the timer has fired since this was last called. Usually, the value of count will be 1. If it is not 1, it means that the timer isn't firing on schedule. For example, if your timer is set to fire every 10 milliseconds, and count is 2, that means it has been between 20-29 milliseconds since the last time your timer fired. Non 1 values for a timer are rare and indicate a system under heavy load. Return true to reschedule the timer (if it has an interval), or false to cancel the timer (even if it has an interval). fun ref apply( timer: Timer ref, count: U64 val) : Bool val","title":"apply"},{"location":"time-TimerNotify/#parameters","text":"timer: Timer ref count: U64 val","title":"Parameters"},{"location":"time-TimerNotify/#returns","text":"Bool val","title":"Returns"},{"location":"time-TimerNotify/#cancel","text":"[Source] Called if the timer is cancelled. This is also called if the notifier returns false from its apply method. fun ref cancel( timer: Timer ref) : None val","title":"cancel"},{"location":"time-TimerNotify/#parameters_1","text":"timer: Timer ref","title":"Parameters"},{"location":"time-TimerNotify/#returns_1","text":"None val","title":"Returns"},{"location":"time-Timers/","text":"Timers [Source] A hierarchical set of timing wheels. actor tag Timers Constructors create [Source] Create a timer handler with the specified number of slop bits. No slop bits means trying for nanosecond resolution. 10 slop bits is approximately microsecond resolution, 20 slop bits is approximately millisecond resolution. new tag create( slop: USize val = seq) : Timers tag^ Parameters slop: USize val = seq Returns Timers tag^ Public Behaviours apply [Source] Sets a timer. Fire it if need be, schedule it on the right timing wheel, then rearm the timer. be apply( timer: Timer iso) Parameters timer: Timer iso cancel [Source] Cancels a timer. be cancel( timer: Timer tag) Parameters timer: Timer tag dispose [Source] Dispose of this set of timing wheels. be dispose() Private Behaviours _event_notify [Source] When the event fires, advance the timing wheels. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val Private Functions _advance [Source] Update the current time, process all the timing wheels, and set the event for the next time we need to advance. fun ref _advance() : None val Returns None val _fire [Source] Fire a timer if necessary, then schedule it on the correct timing wheel based on how long it is until it expires. fun ref _fire( timer: Timer ref) : None val Parameters timer: Timer ref Returns None val _next [Source] Return the next time at which the timing wheels should be advanced. This is adjusted for slop, so it yields nanoseconds. If no events are pending, this returns -1. fun box _next() : U64 val Returns U64 val _set_time [Source] Set the current time with precision reduced by the slop bits. Return the elapsed time. fun ref _set_time() : U64 val Returns U64 val _get_wheel [Source] Get the hierarchical timing wheel for the given time until expiration. fun ref _get_wheel( rem: U64 val) : _TimingWheel ref ? Parameters rem: U64 val Returns _TimingWheel ref ? _expiration_max [Source] Get the maximum time the timing wheels cover. Anything beyond this is scheduled on the last timing wheel. fun tag _expiration_max() : U64 val Returns U64 val _wheels [Source] fun tag _wheels() : USize val Returns USize val _bits [Source] fun tag _bits() : USize val Returns USize val","title":"actor Timers"},{"location":"time-Timers/#timers","text":"[Source] A hierarchical set of timing wheels. actor tag Timers","title":"Timers"},{"location":"time-Timers/#constructors","text":"","title":"Constructors"},{"location":"time-Timers/#create","text":"[Source] Create a timer handler with the specified number of slop bits. No slop bits means trying for nanosecond resolution. 10 slop bits is approximately microsecond resolution, 20 slop bits is approximately millisecond resolution. new tag create( slop: USize val = seq) : Timers tag^","title":"create"},{"location":"time-Timers/#parameters","text":"slop: USize val = seq","title":"Parameters"},{"location":"time-Timers/#returns","text":"Timers tag^","title":"Returns"},{"location":"time-Timers/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"time-Timers/#apply","text":"[Source] Sets a timer. Fire it if need be, schedule it on the right timing wheel, then rearm the timer. be apply( timer: Timer iso)","title":"apply"},{"location":"time-Timers/#parameters_1","text":"timer: Timer iso","title":"Parameters"},{"location":"time-Timers/#cancel","text":"[Source] Cancels a timer. be cancel( timer: Timer tag)","title":"cancel"},{"location":"time-Timers/#parameters_2","text":"timer: Timer tag","title":"Parameters"},{"location":"time-Timers/#dispose","text":"[Source] Dispose of this set of timing wheels. be dispose()","title":"dispose"},{"location":"time-Timers/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"time-Timers/#_event_notify","text":"[Source] When the event fires, advance the timing wheels. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"time-Timers/#parameters_3","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"time-Timers/#private-functions","text":"","title":"Private Functions"},{"location":"time-Timers/#_advance","text":"[Source] Update the current time, process all the timing wheels, and set the event for the next time we need to advance. fun ref _advance() : None val","title":"_advance"},{"location":"time-Timers/#returns_1","text":"None val","title":"Returns"},{"location":"time-Timers/#_fire","text":"[Source] Fire a timer if necessary, then schedule it on the correct timing wheel based on how long it is until it expires. fun ref _fire( timer: Timer ref) : None val","title":"_fire"},{"location":"time-Timers/#parameters_4","text":"timer: Timer ref","title":"Parameters"},{"location":"time-Timers/#returns_2","text":"None val","title":"Returns"},{"location":"time-Timers/#_next","text":"[Source] Return the next time at which the timing wheels should be advanced. This is adjusted for slop, so it yields nanoseconds. If no events are pending, this returns -1. fun box _next() : U64 val","title":"_next"},{"location":"time-Timers/#returns_3","text":"U64 val","title":"Returns"},{"location":"time-Timers/#_set_time","text":"[Source] Set the current time with precision reduced by the slop bits. Return the elapsed time. fun ref _set_time() : U64 val","title":"_set_time"},{"location":"time-Timers/#returns_4","text":"U64 val","title":"Returns"},{"location":"time-Timers/#_get_wheel","text":"[Source] Get the hierarchical timing wheel for the given time until expiration. fun ref _get_wheel( rem: U64 val) : _TimingWheel ref ?","title":"_get_wheel"},{"location":"time-Timers/#parameters_5","text":"rem: U64 val","title":"Parameters"},{"location":"time-Timers/#returns_5","text":"_TimingWheel ref ?","title":"Returns"},{"location":"time-Timers/#_expiration_max","text":"[Source] Get the maximum time the timing wheels cover. Anything beyond this is scheduled on the last timing wheel. fun tag _expiration_max() : U64 val","title":"_expiration_max"},{"location":"time-Timers/#returns_6","text":"U64 val","title":"Returns"},{"location":"time-Timers/#_wheels","text":"[Source] fun tag _wheels() : USize val","title":"_wheels"},{"location":"time-Timers/#returns_7","text":"USize val","title":"Returns"},{"location":"time-Timers/#_bits","text":"[Source] fun tag _bits() : USize val","title":"_bits"},{"location":"time-Timers/#returns_8","text":"USize val","title":"Returns"},{"location":"time-_Clock/","text":"_Clock [Source] type _Clock is (_ClockRealtime val | _ClockMonotonic val) Type Alias For ( _ClockRealtime val | _ClockMonotonic val)","title":"type _Clock"},{"location":"time-_Clock/#_clock","text":"[Source] type _Clock is (_ClockRealtime val | _ClockMonotonic val)","title":"_Clock"},{"location":"time-_Clock/#type-alias-for","text":"( _ClockRealtime val | _ClockMonotonic val)","title":"Type Alias For"},{"location":"time-_ClockMonotonic/","text":"_ClockMonotonic [Source] primitive val _ClockMonotonic Constructors create [Source] new val create() : _ClockMonotonic val^ Returns _ClockMonotonic val^ Public Functions apply [Source] fun box apply() : U32 val Returns U32 val eq [Source] fun box eq( that: _ClockMonotonic val) : Bool val Parameters that: _ClockMonotonic val Returns Bool val ne [Source] fun box ne( that: _ClockMonotonic val) : Bool val Parameters that: _ClockMonotonic val Returns Bool val","title":"primitive _ClockMonotonic"},{"location":"time-_ClockMonotonic/#_clockmonotonic","text":"[Source] primitive val _ClockMonotonic","title":"_ClockMonotonic"},{"location":"time-_ClockMonotonic/#constructors","text":"","title":"Constructors"},{"location":"time-_ClockMonotonic/#create","text":"[Source] new val create() : _ClockMonotonic val^","title":"create"},{"location":"time-_ClockMonotonic/#returns","text":"_ClockMonotonic val^","title":"Returns"},{"location":"time-_ClockMonotonic/#public-functions","text":"","title":"Public Functions"},{"location":"time-_ClockMonotonic/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"time-_ClockMonotonic/#returns_1","text":"U32 val","title":"Returns"},{"location":"time-_ClockMonotonic/#eq","text":"[Source] fun box eq( that: _ClockMonotonic val) : Bool val","title":"eq"},{"location":"time-_ClockMonotonic/#parameters","text":"that: _ClockMonotonic val","title":"Parameters"},{"location":"time-_ClockMonotonic/#returns_2","text":"Bool val","title":"Returns"},{"location":"time-_ClockMonotonic/#ne","text":"[Source] fun box ne( that: _ClockMonotonic val) : Bool val","title":"ne"},{"location":"time-_ClockMonotonic/#parameters_1","text":"that: _ClockMonotonic val","title":"Parameters"},{"location":"time-_ClockMonotonic/#returns_3","text":"Bool val","title":"Returns"},{"location":"time-_ClockRealtime/","text":"_ClockRealtime [Source] primitive val _ClockRealtime Constructors create [Source] new val create() : _ClockRealtime val^ Returns _ClockRealtime val^ Public Functions apply [Source] fun box apply() : U32 val Returns U32 val eq [Source] fun box eq( that: _ClockRealtime val) : Bool val Parameters that: _ClockRealtime val Returns Bool val ne [Source] fun box ne( that: _ClockRealtime val) : Bool val Parameters that: _ClockRealtime val Returns Bool val","title":"primitive _ClockRealtime"},{"location":"time-_ClockRealtime/#_clockrealtime","text":"[Source] primitive val _ClockRealtime","title":"_ClockRealtime"},{"location":"time-_ClockRealtime/#constructors","text":"","title":"Constructors"},{"location":"time-_ClockRealtime/#create","text":"[Source] new val create() : _ClockRealtime val^","title":"create"},{"location":"time-_ClockRealtime/#returns","text":"_ClockRealtime val^","title":"Returns"},{"location":"time-_ClockRealtime/#public-functions","text":"","title":"Public Functions"},{"location":"time-_ClockRealtime/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"time-_ClockRealtime/#returns_1","text":"U32 val","title":"Returns"},{"location":"time-_ClockRealtime/#eq","text":"[Source] fun box eq( that: _ClockRealtime val) : Bool val","title":"eq"},{"location":"time-_ClockRealtime/#parameters","text":"that: _ClockRealtime val","title":"Parameters"},{"location":"time-_ClockRealtime/#returns_2","text":"Bool val","title":"Returns"},{"location":"time-_ClockRealtime/#ne","text":"[Source] fun box ne( that: _ClockRealtime val) : Bool val","title":"ne"},{"location":"time-_ClockRealtime/#parameters_1","text":"that: _ClockRealtime val","title":"Parameters"},{"location":"time-_ClockRealtime/#returns_3","text":"Bool val","title":"Returns"},{"location":"time-_TimingWheel/","text":"_TimingWheel [Source] A timing wheel in a hierarchical set of timing wheels. Each wheel covers 6 bits of precision. class ref _TimingWheel Constructors create [Source] Create a timing wheel at the given hierarchical level. new ref create( index: USize val) : _TimingWheel ref^ Parameters index: USize val Returns _TimingWheel ref^ Public Functions schedule [Source] Schedule a timer on this wheel. Mark the bit indicating that the given slot has timers in its list. fun ref schedule( timer: Timer ref) : None val Parameters timer: Timer ref Returns None val advance [Source] Remove pending timers from this timing wheel and put them on the pending list supplied. Needs the current time and the elapsed time since the previous advance. Returns true if the next timing wheel in the hierarchy should be advanced. fun ref advance( list: List[Timer ref] ref, current: U64 val, elapsed: U64 val) : Bool val Parameters list: List [ Timer ref] ref current: U64 val elapsed: U64 val Returns Bool val next [Source] Given a current time, return the next time at which this timing wheel should be advanced. Returns -1 if no timers are on this timing wheel. fun box next( current: U64 val) : U64 val Parameters current: U64 val Returns U64 val clear [Source] Cancels all pending timers. fun ref clear() : None val Returns None val Private Functions _slot [Source] Return the slot for a given time. fun box _slot( time: U64 val) : U64 val Parameters time: U64 val Returns U64 val _bits [Source] fun tag _bits() : USize val Returns USize val _max [Source] fun tag _max() : USize val Returns USize val _mask [Source] fun tag _mask() : U64 val Returns U64 val","title":"class _TimingWheel"},{"location":"time-_TimingWheel/#_timingwheel","text":"[Source] A timing wheel in a hierarchical set of timing wheels. Each wheel covers 6 bits of precision. class ref _TimingWheel","title":"_TimingWheel"},{"location":"time-_TimingWheel/#constructors","text":"","title":"Constructors"},{"location":"time-_TimingWheel/#create","text":"[Source] Create a timing wheel at the given hierarchical level. new ref create( index: USize val) : _TimingWheel ref^","title":"create"},{"location":"time-_TimingWheel/#parameters","text":"index: USize val","title":"Parameters"},{"location":"time-_TimingWheel/#returns","text":"_TimingWheel ref^","title":"Returns"},{"location":"time-_TimingWheel/#public-functions","text":"","title":"Public Functions"},{"location":"time-_TimingWheel/#schedule","text":"[Source] Schedule a timer on this wheel. Mark the bit indicating that the given slot has timers in its list. fun ref schedule( timer: Timer ref) : None val","title":"schedule"},{"location":"time-_TimingWheel/#parameters_1","text":"timer: Timer ref","title":"Parameters"},{"location":"time-_TimingWheel/#returns_1","text":"None val","title":"Returns"},{"location":"time-_TimingWheel/#advance","text":"[Source] Remove pending timers from this timing wheel and put them on the pending list supplied. Needs the current time and the elapsed time since the previous advance. Returns true if the next timing wheel in the hierarchy should be advanced. fun ref advance( list: List[Timer ref] ref, current: U64 val, elapsed: U64 val) : Bool val","title":"advance"},{"location":"time-_TimingWheel/#parameters_2","text":"list: List [ Timer ref] ref current: U64 val elapsed: U64 val","title":"Parameters"},{"location":"time-_TimingWheel/#returns_2","text":"Bool val","title":"Returns"},{"location":"time-_TimingWheel/#next","text":"[Source] Given a current time, return the next time at which this timing wheel should be advanced. Returns -1 if no timers are on this timing wheel. fun box next( current: U64 val) : U64 val","title":"next"},{"location":"time-_TimingWheel/#parameters_3","text":"current: U64 val","title":"Parameters"},{"location":"time-_TimingWheel/#returns_3","text":"U64 val","title":"Returns"},{"location":"time-_TimingWheel/#clear","text":"[Source] Cancels all pending timers. fun ref clear() : None val","title":"clear"},{"location":"time-_TimingWheel/#returns_4","text":"None val","title":"Returns"},{"location":"time-_TimingWheel/#private-functions","text":"","title":"Private Functions"},{"location":"time-_TimingWheel/#_slot","text":"[Source] Return the slot for a given time. fun box _slot( time: U64 val) : U64 val","title":"_slot"},{"location":"time-_TimingWheel/#parameters_4","text":"time: U64 val","title":"Parameters"},{"location":"time-_TimingWheel/#returns_5","text":"U64 val","title":"Returns"},{"location":"time-_TimingWheel/#_bits","text":"[Source] fun tag _bits() : USize val","title":"_bits"},{"location":"time-_TimingWheel/#returns_6","text":"USize val","title":"Returns"},{"location":"time-_TimingWheel/#_max","text":"[Source] fun tag _max() : USize val","title":"_max"},{"location":"time-_TimingWheel/#returns_7","text":"USize val","title":"Returns"},{"location":"time-_TimingWheel/#_mask","text":"[Source] fun tag _mask() : U64 val","title":"_mask"},{"location":"time-_TimingWheel/#returns_8","text":"U64 val","title":"Returns"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/_client_conn_handler/","text":"use buffered use net class _ClientConnHandler is TCPConnectionNotify This is the network notification handler for the client. It passes received data to the `HTTPParser` to assemble response `Payload` objects. let _session: _ClientConnection let _buffer: Reader = Reader let _parser: HTTPParser var _delivered: Bool = false new iso create(client: _ClientConnection) = The response builder needs to know which Session to forward parsed information to. _session = client _parser = HTTPParser.response(_session) fun ref connected(conn: TCPConnection ref) = Tell the client we have connected. _session._connected(conn) fun ref connect_failed(conn: TCPConnection ref) = The connection could not be established. Tell the client not to proceed. _session._connect_failed(conn) fun ref auth_failed(conn: TCPConnection ref) = SSL authentication failed. Tell the client not to proceed. _session._auth_failed(conn) fun ref received(conn: TCPConnection ref, data: Array[U8] iso, times: USize): Bool = Pass a received chunk of data to the `HTTPParser`. // TODO: inactivity timer _buffer.append(consume data) // Let the parser take a look at what has been received. match _parser.parse(_buffer) // Any syntax errors will terminate the connection. | ParseError = conn.close() end true fun ref closed(conn: TCPConnection ref) = The connection has closed, possibly prematurely. _parser.closed(_buffer) _buffer.clear() _session._closed(conn) fun ref throttled(conn: TCPConnection ref) = TCP connection wants us to stop sending. We do not do anything with this here; just pass it on to the `HTTPSession`. _session.throttled() fun ref unthrottle(conn: TCPConnection ref) = TCP can accept more data now. We just pass this on to the `HTTPSession` _session.unthrottled()","title":"_client_conn_handler.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/_client_connection/","text":"use collections use net use net/ssl primitive _ConnConnecting actor _ClientConnection is HTTPSession Manages a persistent and possibly pipelined TCP connection to an HTTP server. This is where pipelining happens, if it has been enabled by the `Client`. Only safe requests (GET, HEAD, OPTIONS) are sent to the server if *any* responses are still pending. The `HTTPHandler.send_body` notification function will be called if/when the `HTTPSession` is ready to receive body data for `POST` operations in transfer modes other than `Oneshot`. ### Receiving Responses Reception is handled through an `HTTPHandler` instance. `HTTPHandler.apply` signals the arrival of a message with headers. How the body data is obtained depends on the `transfer` mode. * For `StreamTranfer` and `ChunkedTransfer` modes, there will be any number of `HTTPHandler.chunk` notifications, followed by an `HTTPHandler.finished` notification. * For `OneShotTransfer` mode, the client application just needs to call `Payload.body` once to get the entire body. ## The HandlerFactory The `Client` class will try to re-use sessions. If it needs to create a new session, based on the request URL, it will do that, and then it will need a new instance of the caller's `HTTPHandler` class. Since the client application code does not know in advance when this will be necessary, it passes in a `HandlerFactory` that creates the actual `HTTPHandler`, customized for the client application's needs. let _auth: TCPConnectionAuth let _host: String let _service: String let _sslctx: (SSLContext | None) let _pipeline: Bool let _app_handler: HTTPHandler let _unsent: List[Payload val] = _unsent.create() let _sent: List[Payload val] = _sent.create() var _safewait: Bool = false var _conn: (TCPConnection | None | _ConnConnecting) = None var _nobackpressure: Bool = true // TCP backpressure indicator new create( auth: TCPConnectionAuth, host: String, service: String, sslctx: (SSLContext | None) = None, pipeline: Bool = true, handlermaker: HandlerFactory val) = Create a connection for the given host and service. We also create an instance of the client application's HTTPHandler. _auth = auth _host = host _service = service _sslctx = sslctx _pipeline = pipeline _app_handler = handlermaker(this) be apply(request: Payload val) = Schedule a request to be sent by adding it to the `unsent` queue for this session. _unsent.push(consume request) _send_pending() be cancel(request: Payload val) = Cancel a request. // We look for it first in the unsent queue. If it is there, // we just remove it. try for node in _unsent.nodes() do if node()? is request then node . remove().pop()? return end end // It might have been sent already, but no response received // yet. In that case we have to close the connection so that // the server finds out. for node in _sent.nodes() do if node()? is request then try (_conn as TCPConnection).dispose() end _conn = None node . remove().pop()? break end end end be _deliver(response: Payload val) = Deal with a new Response coming back from the server. Since the session operates in a FIFO manner, the Request corresponding to this Response is the oldest one on the `_sent` list. We take it off that list and call its handler. It becomes the 'currently being delivered' response and subsequent body data has to go there as well, if there is any. try let request = _sent.shift()? _app_handler(response) // If that request has no body data coming, we can go look // for more requests to send. if response.transfer_mode is OneshotTransfer then _send_pending() end end be _connected(conn: TCPConnection) = The connection to the server has been established. Send pending requests. _nobackpressure = true _conn = conn _send_pending() be _connect_failed(conn: TCPConnection) = The connection couldn't be established. Cancel all pending requests. _cancel_all() _conn = None be _auth_failed(conn: TCPConnection) = The connection couldn't be authenticated. Cancel all pending requests. _cancel_all() _conn = None be _closed(conn: TCPConnection) = The connection to the server has closed prematurely. Cancel everything. if conn is _conn then _cancel_all() _conn = None end be write(data: ByteSeq val) = Write a low-level byte stream. The `Payload` objects call this to generate their wire representation. match _conn | let c: TCPConnection = c.write(data) end be _chunk(data: ByteSeq val) = Called when *inbound* body data has arrived for the currently inbound `Payload`. This should be passed directly to the application's `HTTPHandler.chunk` method. _app_handler.chunk(data) be _finish() = Indicates that the last *inbound* body chunk has been sent to `_chunk`. This is passed on to the front end. _send_pending is called to detect that _unsent and _sent are emptye and that _conn can be disposed. _app_handler.finished() _send_pending() be finish() = We are done sending a request with a long body. None be dispose() = Cancels all requests and disposes the tcp connection. _cancel_all() match _conn | let c: TCPConnection = c.dispose() end _conn = None be throttled() = The connection to the server can not accept data for a while. We set a local flag too so we do not send anything on the queue. _nobackpressure = false _app_handler.throttled() be unthrottled() = The connection to the server can now accept more data. _nobackpressure = true _app_handler.unthrottled() _send_pending() fun ref _send_pending() = Send pending requests to the server. If the connection is closed, open it. If we have nothing to send and we aren't waiting on any responses, close the connection. if _unsent.size() == 0 then if _sent.size() == 0 then try (_conn as TCPConnection).dispose() _conn = None end end return end // If waiting for response to an unsafe request, do not send more requests. // TODO this check has to be in Client so that the apply fails. if _safewait then return end try // Get the existing connection, if it is there. let conn = _conn as TCPConnection try // Send requests until backpressure makes us stop, or we // send an unsafe request. while _nobackpressure do // Take a request off the unsent queue and notice whether // it is safe. let request = _unsent.shift()? let safereq = request.is_safe() // Send all of the request that is possible for now. request._write(true, conn) // If there is a folow-on body, tell client to send it now. if request.has_body() then match request.transfer_mode | OneshotTransfer = finish() else _app_handler.need_body() end else finish() end // Put the request on the list of things we are waiting for. _sent.push(consume request) // If it was not 'safe', send no more for now. if not safereq then _safewait = true break end end end else // Oops, the connection is closed. Open it and try sending // again when it becomes active. _new_conn() end fun ref _new_conn() = Creates a new connection. `ResponseBuilder` is the notification class that will send back a `_connected` call when the connection has been made. match _conn | let _: None = try let ctx = _sslctx as SSLContext let ssl = ctx.client(_host)? TCPConnection( _auth, SSLConnection(_ClientConnHandler(this), consume ssl), _host, _service) else TCPConnection( _auth, _ClientConnHandler(this), _host, _service) end _conn = _ConnConnecting end fun ref _cancel_all() = Cancel all pending requests. try while true do _unsent.pop()? //TODO send fail response end end for node in _sent.nodes() do node.remove() try node.pop()? end //TODO send fail response end be _mute() = The application can not handle any more data for a while. try (_conn as TCPConnection).mute() end be _unmute() = The application can accept more data. try (_conn as TCPConnection).unmute() end","title":"_client_connection.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/_host_service/","text":"use collections class val _HostService is (Hashable Equatable[_HostService]) let scheme: String let host: String let service: String new val create(scheme': String, host': String, service': String) = scheme = scheme' host = host' service = service' fun hash(): USize = scheme.hash() xor host.hash() xor service.hash() fun eq(that: _HostService box): Bool = (scheme == that.scheme) and (host == that.host) and (service == that.service)","title":"_host_service.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/_server_conn_handler/","text":"use buffered use net class _ServerConnHandler is TCPConnectionNotify This is the network notification handler for the server. It uses `PayloadBuilder` to assemble request `Payload` objects using received chunks of data. Functions in this class execute within the `TCPConnection` actor. let _handlermaker: HandlerFactory val let _logger: Logger let _reversedns: (DNSLookupAuth | None) let _buffer: Reader = Reader var _parser: (HTTPParser | None) = None var _session: (_ServerConnection | None) = None let _registry: HTTPServer tag new iso create( handlermaker: HandlerFactory val, logger: Logger, reversedns: (DNSLookupAuth | None), registry: HTTPServer) = Initialize the context for parsing incoming HTTP requests. _logger = logger _reversedns = reversedns _handlermaker = handlermaker _registry = registry fun ref accepted(conn: TCPConnection ref) = Accept the incoming TCP connection and create the actor that will manage further communication, and the message parser that feeds it. (let host, let port) = try conn.remote_address().name(_reversedns)? else ( - , - ) end _registry.register_session(conn) _session = _ServerConnection(_handlermaker, _logger, conn, host) try _parser = HTTPParser.request(_session as _ServerConnection) end fun ref received( conn: TCPConnection ref, data: Array[U8] iso, times: USize) : Bool = Pass chunks of data to the `HTTPParser` for this session. It will then pass completed information on the the `HTTPSession`. // TODO: inactivity timer // add a reset API to Timers _buffer.append(consume data) match _parser | let b: HTTPParser = // Let the parser take a look at what has been received. match b.parse(_buffer) // Any syntax errors will terminate the connection. | ParseError = conn.close() end end true fun ref throttled(conn: TCPConnection ref) = Notification that the TCP connection to the client can not accept data for a while. try (_session as _ServerConnection).throttled() end fun ref unthrottled(conn: TCPConnection ref) = Notification that the TCP connection can resume accepting data. try (_session as _ServerConnection).unthrottled() end fun ref closed(conn: TCPConnection ref) = The connection has been closed. Abort the session. _registry.unregister_session(conn) try (_session as _ServerConnection).cancel(Payload.request()) end fun ref connect_failed(conn: TCPConnection ref) = The connect has failed. TODO: is it a case for server-side? None","title":"_server_conn_handler.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/_server_connection/","text":"use net use collections actor _ServerConnection is HTTPSession Manages a stream of requests coming into a server from a single client, dispatches those request to a back-end, and returns the responses back to the client. let _backend: HTTPHandler let _logger: Logger let _conn: TCPConnection let _client_ip: String let _pending: List[Payload val] = _pending.create() var _active_request: (Payload val | None) = None var _active_response: (Payload val | None) = None var _keepalive: Bool = true var _body_bytes_sent: USize = 0 new create( handlermaker: HandlerFactory val, logger: Logger, conn: TCPConnection, client_ip: String) = Create a connection actor to manage communication with to a new client. We also create an instance of the application's back-end handler that will process incoming requests. _backend = handlermaker(this) _logger = logger _conn = conn _client_ip = client_ip be _deliver(request: Payload val) = Dispatch requests. At the time this behavior is called for StreamTransfer and ChunkTransfer encodings, only the headers of the request may have been received. Receiving and dealing with the body, which could be quite large in POST methods, is up to the chosen application handler. The client can send several requests without waiting for a response, but they are only passed to the back end one at a time. Only when all of the response to a processed request has been sent is the next request processed. let frozen_request = recover val consume request end if _active_request is None then // Backend is not busy, so pass this request on for processing. _active_request = frozen_request _keepalive = try frozen_request( Connection )? != close else frozen_request.proto != HTTP/1.0 end _body_bytes_sent = 0 _backend(frozen_request) else _pending.push(frozen_request) // Backpressure incoming requests if the queue grows too much. // The backpressure prevents filling up memory with queued // requests in the case of a runaway client. if _pending.size() 2 then _conn.mute() end end be _chunk(data: ByteSeq val) = Receive some `request` body data, which we pass on to the handler. _body_bytes_sent = _body_bytes_sent + data.size() _backend.chunk(consume data) be _finish() = Inidcates that the last *inbound* body chunk has been sent to `_chunk`. This is passed on to the back end. _backend.finished() be dispose() = Close the connection from the server end. _conn.dispose() be cancel(msg: Payload val) = Cancel the current response. The connection has closed. match _active_response | let p: Payload val = finish() _backend.cancelled() end be _closed() = _backend.finished() _conn.unmute() be apply(response: Payload val) = Initiate transmission of the HTTP Response message for the current Request. _conn.unmute() _active_response = response _send(response) // Clear all pending after an error response. if (response.status == 0) or (response.status = 300) then _pending.clear() end fun ref _dispatch_pending() = If we have pending requests, dispatch the next one. try let request = _pending.pop()? _active_request = request _backend(consume request) else _active_request = None end fun ref _send(response: Payload val) = Send a single response. let okstatus = (response.status 300) response._write(_keepalive and okstatus, _conn) if response.has_body() then match response.transfer_mode | OneshotTransfer = finish() // Already sent else _backend.need_body() // To be sent later end else finish() end be write(data: ByteSeq val) = Write low level outbound raw byte stream. _body_bytes_sent = _body_bytes_sent + data.size() _conn.write(data) be finish() = We are done sending a response. We can close the connection if `keepalive` was not requested. try _logger(_client_ip, _body_bytes_sent, (_active_request as Payload val), (_active_response as Payload val)) end _active_request = None _active_response = None if not _keepalive then _conn.dispose() _pending.clear() end be throttled() = TCP connection can not accept data for a while. _backend.throttled() be unthrottled() = TCP connection can not accept data for a while. _backend.unthrottled() be _mute() = _conn.mute() be _unmute() = _conn.unmute()","title":"_server_connection.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/_server_listener/","text":"use net use net/ssl class _ServerListener is TCPListenNotify Manages the listening socket for an HTTP server. Incoming requests are assembled and dispatched. let _server: HTTPServer let _sslctx: (SSLContext | None) let _handlermaker: HandlerFactory val let _logger: Logger let _reversedns: (DNSLookupAuth | None) new iso create( server: HTTPServer, sslctx: (SSLContext | None), handler: HandlerFactory val, // Makes a unique session handler logger: Logger, reversedns: (DNSLookupAuth | None)) = Creates a new listening socket manager. _server = server _sslctx = sslctx _handlermaker = handler _logger = logger _reversedns = reversedns fun ref listening(listen: TCPListener ref) = Inform the server of the bound IP address. _server._listening(listen.local_address()) fun ref not_listening(listen: TCPListener ref) = Inform the server we failed to listen. _server._not_listening() fun ref closed(listen: TCPListener ref) = Inform the server we have stopped listening. _server._closed() fun ref connected(listen: TCPListener ref): TCPConnectionNotify iso^ = Create a notifier for a specific HTTP socket. A new instance of the back-end Handler is passed along so it can be used on each `Payload`. try let ctx = _sslctx as SSLContext let ssl = ctx.server()? SSLConnection( _ServerConnHandler(_handlermaker, _logger, _reversedns, _server), consume ssl) else _ServerConnHandler(_handlermaker, _logger, _reversedns, _server) end","title":"_server_listener.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/_test/","text":"use ponytest use net use collections use buffered use time actor PrivateTests is TestList new create(env: Env) = PonyTest(env, this) new make() = None fun tag tests(test: PonyTest) = test(_Encode) test(_EncodeBad) test(_EncodeIPv6) test(_EncodeClean) test(_Check) test(_CheckBad) test(_CheckScheme) test(_CheckIPv6) test(_Decode) test(_DecodeBad) test(_BuildBasic) test(_BuildMissingParts) test(_BuildBad) test(_BuildNoEncoding) test(_Valid) test(_ToStringFun) test(_HTTPConnTest) test(_HTTPParserNoBodyTest) test(_HTTPParserOneshotBodyTest) class iso _Encode is UnitTest fun name(): String = http/URLEncode.encode fun apply(h: TestHelper) ? = // Unreserved chars, decoded. h.assert_eq[String]( Aa4-._~Aa4-._~ , URLEncode.encode( Aa4-._~%41%61%34%2D%2E%5F%7E , URLPartUser)?) h.assert_eq[String]( F_12x , URLEncode.encode( F_1%32x , URLPartPassword)?) h.assert_eq[String]( F_12x , URLEncode.encode( F_1%32x , URLPartHost)?) h.assert_eq[String]( F_12x , URLEncode.encode( F_1%32x , URLPartPath)?) h.assert_eq[String]( F_12x , URLEncode.encode( F_1%32x , URLPartQuery)?) h.assert_eq[String]( F_12x , URLEncode.encode( F_1%32x , URLPartFragment)?) // Sub-delimiters, left encoded or not as original. h.assert_eq[String]( !$ '()*+,;=%21%24%26%27%28%29%2A%2B%2C%3B%3D , URLEncode.encode( !$ '()*+,;=%21%24%26%27%28%29%2A%2B%2C%3B%3D , URLPartUser)?) h.assert_eq[String]( ,%2C , URLEncode.encode( ,%2C , URLPartPassword)?) h.assert_eq[String]( ,%2C , URLEncode.encode( ,%2C , URLPartHost)?) h.assert_eq[String]( ,%2C , URLEncode.encode( ,%2C , URLPartPath)?) h.assert_eq[String]( ,%2C , URLEncode.encode( ,%2C , URLPartQuery)?) h.assert_eq[String]( ,%2C , URLEncode.encode( ,%2C , URLPartFragment)?) // Misc characters, encoded. h.assert_eq[String]( %23%3C%3E%5B%5D%7B%7D%7C%5E%20 + %23%3C%3E%5B%5D%7B%7D%7C%5E%25 , URLEncode.encode( # []{}|^ %23%3C%3E%5B%5D%7B%7D%7C%5E%25 , URLPartUser)?) h.assert_eq[String]( %23%23 , URLEncode.encode( #%23 , URLPartPassword)?) h.assert_eq[String]( %23%23 , URLEncode.encode( #%23 , URLPartHost)?) h.assert_eq[String]( %23%23 , URLEncode.encode( #%23 , URLPartPath)?) h.assert_eq[String]( %23%23 , URLEncode.encode( #%23 , URLPartQuery)?) h.assert_eq[String]( %23%23 , URLEncode.encode( #%23 , URLPartFragment)?) // Delimiters, whether encoded depends on URL part. h.assert_eq[String]( %3A%40%2F%3F , URLEncode.encode( :@/? , URLPartUser)?) h.assert_eq[String]( :%40%2F%3F , URLEncode.encode( :@/? , URLPartPassword)?) h.assert_eq[String]( %3A%40%2F%3F , URLEncode.encode( :@/? , URLPartHost)?) h.assert_eq[String]( :@/%3F , URLEncode.encode( :@/? , URLPartPath)?) h.assert_eq[String]( :@/? , URLEncode.encode( :@/? , URLPartQuery)?) h.assert_eq[String]( :@/? , URLEncode.encode( :@/? , URLPartFragment)?) class iso _EncodeBad is UnitTest fun name(): String = http/URLEncode.encode_bad fun apply(h: TestHelper) = h.assert_error({() ? = URLEncode.encode( %2G , URLPartUser)? }) h.assert_error({() ? = URLEncode.encode( %xx , URLPartUser)? }) h.assert_error({() ? = URLEncode.encode( %2 , URLPartUser)? }) class iso _EncodeIPv6 is UnitTest fun name(): String = http/URLEncode.encode_ipv6 fun apply(h: TestHelper) ? = // Allowed hex digits, '.' and ':' only, between '[' and ']'. h.assert_eq[String]( [1::A.B] , URLEncode.encode( [1::A.B] , URLPartHost)?) h.assert_error({() ? = URLEncode.encode( [G] , URLPartHost)? }) h.assert_error({() ? = URLEncode.encode( [/] , URLPartHost)? }) h.assert_error({() ? = URLEncode.encode( [%32] , URLPartHost)? }) h.assert_error({() ? = URLEncode.encode( [1]2 , URLPartHost)? }) h.assert_error({() ? = URLEncode.encode( [1 , URLPartHost)? }) h.assert_eq[String]( 1%5D , URLEncode.encode( 1] , URLPartHost)?) class iso _EncodeClean is UnitTest fun name(): String = http/URLEncode.encode_clean fun apply(h: TestHelper) ? = // No percent encoding in source string. h.assert_eq[String]( F_1x , URLEncode.encode( F_1x , URLPartQuery, false)?) h.assert_eq[String]( %2541 , URLEncode.encode( %41 , URLPartQuery, false)?) h.assert_eq[String]( %25 , URLEncode.encode( % , URLPartQuery, false)?) class iso _Check is UnitTest fun name(): String = http/URLEncode.check fun apply(h: TestHelper) = // Unreserved chars, legal encoded or not. h.assert_eq[Bool](true, URLEncode.check( Aa4-._~%41%61%34%2D%2E%5F%7E , URLPartUser)) h.assert_eq[Bool](true, URLEncode.check( F_1%32x , URLPartPassword)) h.assert_eq[Bool](true, URLEncode.check( F_1%32x , URLPartHost)) h.assert_eq[Bool](true, URLEncode.check( F_1%32x , URLPartPath)) h.assert_eq[Bool](true, URLEncode.check( F_1%32x , URLPartQuery)) h.assert_eq[Bool](true, URLEncode.check( F_1%32x , URLPartFragment)) // Sub-delimiters, legal encoded or not. h.assert_eq[Bool](true, URLEncode.check( !$ '()*+,;=%21%24%26%27%28%29%2A%2B%2C%3B%3D , URLPartUser)) h.assert_eq[Bool](true, URLEncode.check( ,%2C , URLPartPassword)) h.assert_eq[Bool](true, URLEncode.check( ,%2C , URLPartHost)) h.assert_eq[Bool](true, URLEncode.check( ,%2C , URLPartPath)) h.assert_eq[Bool](true, URLEncode.check( ,%2C , URLPartQuery)) h.assert_eq[Bool](true, URLEncode.check( ,%2C , URLPartFragment)) // Misc characters, must be encoded. h.assert_eq[Bool](true, URLEncode.check( %23%3C%3E%5B%5D%7B%7D%7C%5E%25 , URLPartUser)) h.assert_eq[Bool](false, URLEncode.check( , URLPartUser)) h.assert_eq[Bool](false, URLEncode.check( , URLPartUser)) h.assert_eq[Bool](false, URLEncode.check( | , URLPartUser)) h.assert_eq[Bool](false, URLEncode.check( ^ , URLPartUser)) h.assert_eq[Bool](true, URLEncode.check( %23%3C , URLPartPassword)) h.assert_eq[Bool](false, URLEncode.check( , URLPartPassword)) h.assert_eq[Bool](true, URLEncode.check( %23%3C , URLPartHost)) h.assert_eq[Bool](false, URLEncode.check( , URLPartHost)) h.assert_eq[Bool](true, URLEncode.check( %23%3C , URLPartPath)) h.assert_eq[Bool](false, URLEncode.check( , URLPartPath)) h.assert_eq[Bool](true, URLEncode.check( %23%3C , URLPartQuery)) h.assert_eq[Bool](false, URLEncode.check( , URLPartQuery)) h.assert_eq[Bool](true, URLEncode.check( %23%3C , URLPartFragment)) h.assert_eq[Bool](false, URLEncode.check( , URLPartFragment)) // Delimiters, whether need to be encoded depends on URL part. h.assert_eq[Bool](true, URLEncode.check( %3A%40%2F%3F , URLPartUser)) h.assert_eq[Bool](false, URLEncode.check( : , URLPartUser)) h.assert_eq[Bool](false, URLEncode.check( @ , URLPartUser)) h.assert_eq[Bool](false, URLEncode.check( / , URLPartUser)) h.assert_eq[Bool](false, URLEncode.check( ? , URLPartUser)) h.assert_eq[Bool](true, URLEncode.check( :%40%2F%3F , URLPartPassword)) h.assert_eq[Bool](false, URLEncode.check( @ , URLPartPassword)) h.assert_eq[Bool](false, URLEncode.check( / , URLPartPassword)) h.assert_eq[Bool](false, URLEncode.check( ? , URLPartPassword)) h.assert_eq[Bool](true, URLEncode.check( %3A%40%2F%3F , URLPartHost)) h.assert_eq[Bool](false, URLEncode.check( : , URLPartHost)) h.assert_eq[Bool](false, URLEncode.check( @ , URLPartHost)) h.assert_eq[Bool](false, URLEncode.check( / , URLPartHost)) h.assert_eq[Bool](false, URLEncode.check( ? , URLPartHost)) h.assert_eq[Bool](true, URLEncode.check( :@/%3F , URLPartPath)) h.assert_eq[Bool](false, URLEncode.check( ? , URLPartPath)) h.assert_eq[Bool](true, URLEncode.check( :@/? , URLPartQuery)) h.assert_eq[Bool](true, URLEncode.check( :@/? , URLPartFragment)) class iso _CheckBad is UnitTest fun name(): String = http/URLEncode.check_bad fun apply(h: TestHelper) = h.assert_eq[Bool](false, URLEncode.check( %2G , URLPartUser)) h.assert_eq[Bool](false, URLEncode.check( %xx , URLPartUser)) h.assert_eq[Bool](false, URLEncode.check( %2 , URLPartUser)) class iso _CheckScheme is UnitTest fun name(): String = http/URLEncode.check_scheme fun apply(h: TestHelper) = h.assert_eq[Bool](true, URLEncode.check_scheme( Aa4-+. )) h.assert_eq[Bool](false, URLEncode.check_scheme( _ )) h.assert_eq[Bool](false, URLEncode.check_scheme( : )) h.assert_eq[Bool](false, URLEncode.check_scheme( %41 )) class iso _CheckIPv6 is UnitTest fun name(): String = http/URLEncode.check_ipv6 fun apply(h: TestHelper) = // Allowed hex digits, '.' and ':' only, between '[' and ']'. h.assert_eq[Bool](true, URLEncode.check( [1::A.B] , URLPartHost)) h.assert_eq[Bool](false, URLEncode.check( [G] , URLPartHost)) h.assert_eq[Bool](false, URLEncode.check( [/] , URLPartHost)) h.assert_eq[Bool](false, URLEncode.check( [%32] , URLPartHost)) h.assert_eq[Bool](false, URLEncode.check( [1]2 , URLPartHost)) h.assert_eq[Bool](false, URLEncode.check( [1 , URLPartHost)) h.assert_eq[Bool](false, URLEncode.check( 1] , URLPartHost)) class iso _Decode is UnitTest fun name(): String = http/URLEncode.decode fun apply(h: TestHelper) ? = h.assert_eq[String]( Aa4-._~Aa4-._~ , URLEncode.decode( Aa4-._~%41%61%34%2D%2E%5F%7E )?) h.assert_eq[String]( F_12x , URLEncode.decode( F_1%32x )?) h.assert_eq[String]( !$ '()* ,;=!$ '()*+,;= , URLEncode.decode( !$ '()*+,;=%21%24%26%27%28%29%2A%2B%2C%3B%3D )?) h.assert_eq[String]( # []{}|^ # []{}|^ % , URLEncode.decode( # []{}|^ %23%3C%3E%5B%5D%7B%7D%7C%5E%20%25 )?) class iso _DecodeBad is UnitTest fun name(): String = http/URLEncode.decode_bad fun apply(h: TestHelper) = h.assert_error({() ? = URLEncode.decode( %2G )? }) h.assert_error({() ? = URLEncode.decode( %xx )? }) h.assert_error({() ? = URLEncode.decode( %2 )? }) class iso _BuildBasic is UnitTest fun name(): String = http/URL.build_basic fun apply(h: TestHelper) ? = _Test(h, URL.build( https://user:password@host.name:12345/path?query#fragment )?, https , user , password , host.name , 12345, /path , query , fragment ) _Test(h, URL.build( http://rosettacode.org/wiki/Category]Pony )?, http , , , rosettacode.org , 80, /wiki/Category%5DPony , , ) _Test(h, URL.build( https://en.wikipedia.org/wiki/Polymorphism_ + (computer_science)#Parametric_polymorphism )?, https , , , en.wikipedia.org , 443, /wiki/Polymorphism_(computer_science) , , Parametric_polymorphism ) _Test(h, URL.build( http://user@host )?, http , user , , host , 80, / , , ) class iso _BuildMissingParts is UnitTest fun name(): String = http/URL.build_missing_parts fun apply(h: TestHelper) ? = _Test(h, URL.build( https://user@host.name/path#fragment )?, https , user , , host.name , 443, /path , , fragment ) _Test(h, URL.build( https://user@host.name#fragment )?, https , user , , host.name , 443, / , , fragment ) _Test(h, URL.build( //host.name/path )?, , , , host.name , 0, /path , , ) _Test(h, URL.build( /path )?, , , , , 0, /path , , ) _Test(h, URL.build( ?query )?, , , , , 0, / , query , ) _Test(h, URL.build( #fragment )?, , , , , 0, / , , fragment ) _Test(h, URL.build( https://host.name/path#frag?ment )?, https , , , host.name , 443, /path , , frag?ment ) _Test(h, URL.build( https://user@host.name?quer/y#fragment )?, https , user , , host.name , 443, / , quer/y , fragment ) class iso _BuildBad is UnitTest fun name(): String = http/URL.build_bad fun apply(h: TestHelper) = h.assert_error({() ? = URL.build( htt_ps://user@host.name/path#fragment )? }) h.assert_error({() ? = URL.build( https://[11::24_]/path )? }) h.assert_error({() ? = URL.build( https://[11::24/path )? }) h.assert_error({() ? = URL.build( https://host%2Gname/path )? }) h.assert_error({() ? = URL.build( https://hostname/path% )? }) class iso _BuildNoEncoding is UnitTest fun name(): String = http/URL.build_no_encoding fun apply(h: TestHelper) ? = _Test(h, URL.build( https://host.name/path%32path , false)?, https , , , host.name , 443, /path%2532path , , ) class iso _Valid is UnitTest fun name(): String = http/URL.valid fun apply(h: TestHelper) ? = _Test(h, URL.valid( https://user:password@host.name:12345/path?query#fragment )?, https , user , password , host.name , 12345, /path , query , fragment ) h.assert_error({() ? = URL.valid( http://rosettacode.org/wiki/Category[Pony] )? }) h.assert_error({() ? = URL.valid( https://en.wikipedia|org/wiki/Polymorphism_ + (computer_science)#Parametric_polymorphism )? }) _Test(h, URL.valid( http://user@host )?, http , user , , host , 80, / , , ) class iso _ToStringFun is UnitTest fun name(): String = http/URL.to_string fun apply(h: TestHelper) ? = h.assert_eq[String]( https://user:password@host.name:12345/path?query#fragment , URL.build( https://user:password@host.name:12345/path?query#fragment )? .string()) h.assert_eq[String]( http://rosettacode.org/wiki/Category%5DPony , URL.build( http://rosettacode.org/wiki/Category]Pony )?.string()) h.assert_eq[String]( http://user@host/ , URL.build( http://user@host )?.string()) // Default ports should be omitted. h.assert_eq[String]( http://host.name/path , URL.build( http://host.name:80/path )?.string()) primitive _Test fun apply( h: TestHelper, url: URL, scheme: String, user: String, password: String, host: String, port: U16, path: String, query: String, fragment: String) = h.assert_eq[String](scheme, url.scheme) h.assert_eq[String](user, url.user) h.assert_eq[String](password, url.password) h.assert_eq[String](host, url.host) h.assert_eq[U16](port, url.port) h.assert_eq[String](path, url.path) h.assert_eq[String](query, url.query) h.assert_eq[String](fragment, url.fragment) // Actor and classes to test the HTTPClient and modified _HTTPConnection. class _HTTPConnTestHandler is HTTPHandler var n_received: U32 = 0 let h: TestHelper new create(h': TestHelper) = h = h' h.complete_action( client handler create called ) fun ref apply(payload: Payload val): Any = n_received = n_received + 1 h.complete_action( client handler apply called + n_received.string()) fun ref chunk(data: ByteSeq val) = h.log( _HTTPConnTestHandler.chunk called ) class val _HTTPConnTestHandlerFactory is HandlerFactory let h: TestHelper new val create(h': TestHelper) = h = h' fun apply(session: HTTPSession): HTTPHandler ref^ = h.dispose_when_done(session) h.complete_action( client factory apply called ) _HTTPConnTestHandler(h) class iso _HTTPConnTest is UnitTest fun name(): String = http/_HTTPConnection._new_conn fun label(): String = conn-fix fun ref apply(h: TestHelper) ? = // Set expectations. h.expect_action( client factory apply called ) h.expect_action( client handler create called ) h.expect_action( client handler apply called 1 ) h.expect_action( client handler apply called 2 ) h.expect_action( server writing reponse 1 ) h.expect_action( server writing reponse 2 ) h.expect_action( server listening ) h.expect_action( server listen connected ) h.expect_action( server connection accepted ) h.expect_action( server connection closed ) let worker = object var client: (HTTPClient iso | None) = None be listening(service: String) = try // Need two or more request to check if the fix works. let loops: USize = 2 // let service: String val = 12345 h.log( received service: [ + service + ] ) let us = http://localhost: + service h.log( URL: + us) let url = URL.build(us)? h.log( url.string()= + url.string()) let hf = _HTTPConnTestHandlerFactory(h) client = recover iso HTTPClient(h.env.root as TCPConnectionAuth) end for _ in Range(0, loops) do let payload: Payload iso = Payload.request( GET , url) payload.set_length(0) try (client as HTTPClient iso)(consume payload, hf)? end end else h.log( Error in worker.listening ) h.complete(false) end // try end // object // Start the fake server. h.dispose_when_done( TCPListener.ip4( h.env.root as AmbientAuth, _FixedResponseHTTPServerNotify( h, {(p: String val) = worker.listening(p) None }, recover [ as String val: HTTP/1.1 200 OK Server: pony_fake_server Content-Length: 0 Status: 200 OK ] end ), , // all interfaces 0 // random service ) ) // Start a long test for 5 seconds. h.long_test(5_000_000_000) primitive _FixedResponseHTTPServerNotify Test http server that spits out fixed responses. apply returns a TCPListenNotify object. fun apply( h': TestHelper, f: {(String val)} iso, r: Array[String val] val) : TCPListenNotify iso^ = recover object iso is TCPListenNotify let h: TestHelper = h' let listen_cb: {(String val)} iso = consume f let response: Array[String val] val = r fun ref listening(listen: TCPListener ref) = try // Get the service as numeric. let name = listen.local_address().name()? h.log( listening on: + name._1 + : + name._2) listen_cb(name._2) h.dispose_when_done(listen) h.complete_action( server listening ) end fun ref not_listening(listen: TCPListener ref) = h.fail_action( server listening ) h.log( not_listening ) fun ref closed(listen: TCPListener ref) = h.log( closed ) fun ref connected(listen: TCPListener ref): TCPConnectionNotify iso^ = h.complete_action( server listen connected ) recover object iso is TCPConnectionNotify // let response': Array[String val] val = response let reader: Reader iso = Reader var nr: USize = 0 fun ref received( conn: TCPConnection ref, data: Array[U8] iso, times: USize) : Bool = reader.append(consume data) while true do var blank = false try let l = reader.line()? let l_size = l.size() h.log( received line: + consume l) if l_size == 0 then // Write the response. nr = nr + 1 for r in response.values() do h.log( [ + r + ] ) conn.write(r + \\r\\n ) end h.complete_action( server writing reponse + nr.string()) end else h.log( breaking ) break end end // while true fun ref accepted(conn: TCPConnection ref) = h.complete_action( server connection accepted ) h.dispose_when_done(conn) fun ref closed(conn: TCPConnection ref) = h.complete_action( server connection closed ) fun ref connecting(conn: TCPConnection ref, count: U32) = h.log( connecting ) None fun ref connect_failed(conn: TCPConnection ref) = h.log( connect_failed ) None fun ref throttled(conn: TCPConnection ref) = h.log( throttled ) fun ref unthrottled(conn: TCPConnection ref) = h.log( unthrottled ) end // object end // recover end // object end // recover class iso _HTTPParserNoBodyTest is UnitTest fun name(): String = http/_HttpParser.NoBody fun ref apply(h: TestHelper) = let test_session = object is HTTPSession be apply(payload: Payload val) = None be finish() = None be dispose() = None be write(byteseq: ByteSeq val) = None be _mute() = None be _unmute() = None be cancel(msg: Payload val) = None be _deliver(payload: Payload val) = h.complete_action( _deliver ) be _chunk(data: ByteSeq val) = h.fail( HTTPSession._chunk called. ) be _finish() = h.fail( HTTPSession._finish called. ) end let parser = HTTPParser.request(test_session) let payload: String = \\r\\n .join([ GET /get HTTP/1.1 Host: httpbin.org User-Agent: curl/7.58.0 Accept: */* ].values()) h.long_test(2_000_000_000) h.expect_action( _deliver ) let reader: Reader = Reader reader.append(payload) match parser.parse(reader) | ParseError = h.fail( parser failed to parse request ) end class iso _HTTPParserOneshotBodyTest is UnitTest fun name(): String = http/_HttpParser.OneshotBody fun ref apply(h: TestHelper) = let test_session = object is HTTPSession be apply(payload: Payload val) = None be finish() = None be dispose() = None be write(byteseq: ByteSeq val) = None be _mute() = None be _unmute() = None be cancel(msg: Payload val) = None be _deliver(payload: Payload val) = h.complete_action( _deliver ) be _chunk(data: ByteSeq val) = h.fail( HTTPSession._chunk called. ) be _finish() = h.fail( HTTPSession._finish called. ) end let parser = HTTPParser.request(test_session) let payload: String = \\r\\n .join([ POST /post HTTP/1.1 Host: httpbin.org User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-GB,en;q=0.5 Accept-Encoding: gzip, deflate Referer: http://httpbin.org/forms/post Content-Type: application/x-www-form-urlencoded Content-Length: 174 Cookie: _gauges_unique_hour=1; _gauges_unique_day=1; _gauges_unique_month=1; _gauges_unique_year=1; _gauges_unique=1 Connection: keep-alive Upgrade-Insecure-Requests: 1 custname=Pony+Mc+Ponyface custtel=%2B490123456789 custemail=pony%40ponylang.org size=large topping=bacon topping=cheese topping=onion delivery= comments=This+is+a+stupid+test ].values()) h.long_test(2_000_000_000) h.expect_action( _deliver ) let reader: Reader = Reader reader.append(payload) match parser.parse(reader) | ParseError = h.fail( parser failed to parse request ) end","title":"_test.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/client/","text":"use collections use net use net/ssl class HTTPClient Manages a group of HTTP connections on behalf of a client application. A client should create one instance of this class. let _auth: TCPConnectionAuth let _sslctx: SSLContext let _pipeline: Bool let _sessions: Map[_HostService, _ClientConnection] = _sessions.create() new create( auth: TCPConnectionAuth, sslctx: (SSLContext | None) = None, pipeline: Bool = true) = Create the context in which all HTTP sessions will originate. _auth = auth _sslctx = try sslctx as SSLContext else recover let newssl = SSLContext newssl.set_client_verify(false) newssl end end _pipeline = pipeline fun ref apply( request: Payload trn, handlermaker: HandlerFactory val) : Payload val ? = Schedule a request on an HTTP session. If a new connection is created, a new instance of the application's Receive Handler will be created for it. A `val` copy of the `Payload` is returned, and it can not be modified after this point. This is useful in Stream and Chunked transfer modes, so that the application can follow up with calls to `Client.send_body`. let session = _get_session(request.url, handlermaker)? let mode = request.transfer_mode request.session = session let valrequest: Payload val = consume request session(valrequest) valrequest fun ref dispose() = Disposes the sessions and cancels all pending requests. for s in _sessions.values() do s.dispose() end _sessions.clear() /* fun ref cancel(request: Payload val) = Cancel a request. match request.session | let s _ClientConnection tag = s.cancel(request) end */ fun ref _get_session( url: URL, handlermaker: HandlerFactory val) : _ClientConnection ? = Gets or creates an HTTP Session for the given URL. If a new session is created, a new Receive Handler instance is created too. let hs = _HostService(url.scheme, url.host, url.port.string()) try // Look for an existing session _sessions(hs)? else // or create a new session of the correct type. let session = match url.scheme | http = _ClientConnection(_auth, hs.host, hs.service, None, _pipeline, handlermaker) | https = _ClientConnection(_auth, hs.host, hs.service, _sslctx, _pipeline, handlermaker) else error end _sessions(hs) = session session end fun ref send_body(data: ByteSeq val, session: HTTPSession) = session.write(data) class _SessionGuard Enforces the rule that an 'unsafe' request monopolizes the HTTPSession. A 'safe' request does not modify a resource state on the server, and such a request has no body. let _session: HTTPSession let _sent: List[Payload val] = List[Payload val] var _lastreqsafe: Bool = true var current: (Payload val | None) = None new iso create(session: HTTPSession) = _session = session fun ref submit(request: Payload val) ? = Accept a request for transmission to the server. This will fail if the request is not safe and the HTTPSession is busy. Due to the possibly large body size, these requests can not be queued. let thisreqsafe = request.is_safe() // If the channel is idle, just send this request. if _sent.size() == 0 then _lastreqsafe = thisreqsafe current = request _session(request) return end // Channel is not idle. But we can send it anyway if // both the last request and this one are safe. if _lastreqsafe and thisreqsafe then _sent.push(request) _session(request) return end // Channel can not accept another request now. error","title":"client.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/common_log/","text":"use time class CommonLog is Logger Logs HTTP requests in the common log format. let _out: OutStream new val create(out: OutStream) = _out = out fun val apply( ip: String, body_size: USize, request: Payload val, response: Payload val) = let list = recover Array[String](24) end list.push(ip) list.push( - ) list.push(_entry(request.url.user)) try // this one should never fail let time =_log_time()? list.push( [ ) list.push(time) list.push( ] \\ ) end list.push(request.method) list.push( ) list.push(request.url.path) if request.url.query.size() 0 then list.push( ? ) list.push(request.url.query) end if request.url.fragment.size() 0 then list.push( # ) list.push(request.url.fragment) end list.push( ) list.push(request.proto) list.push( \\ ) list.push(response.status.string()) list.push( ) list.push(body_size.string()) list.push( \\ ) try list.push(request( Referrer )?) end list.push( \\ \\ ) try list.push(request( User-Agent )?) end list.push( \\ \\n ) _out.writev(consume list) fun _entry(s: String): String = if s.size() 0 then s else - end fun _log_time(): String ? = PosixDate(Time.seconds()).format( %d/%b/%Y:%H:%M:%S +0000 )?","title":"common_log.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/contents_log/","text":"class ContentsLog is Logger Logs the contents of HTTP requests and responses. let _out: OutStream new val create(out: OutStream) = _out = out fun val apply( ip: String, body_size: USize, request: Payload val, response: Payload val) = let list = recover Array[ByteSeq] end list.push( REQUEST\\n ) list.push(request.method) list.push( ) list.push(request.url.path) if request.url.query.size() 0 then list.push( ? ) list.push(request.url.query) end if request.url.fragment.size() 0 then list.push( # ) list.push(request.url.fragment) end list.push( ) list.push(request.proto) list.push( \\n ) for (k, v) in request.headers().pairs() do list.push(k) list.push( : ) list.push(v) list.push( \\n ) end try list.append(request.body()?) end list.push( \\n ) list.push( RESPONSE\\n ) list.push(response.proto) list.push( ) list.push(response.status.string()) list.push( ) list.push(response.method) list.push( \\n ) for (k, v) in response.headers().pairs() do list.push(k) list.push( : ) list.push(v) list.push( \\n ) end try list.append(response.body()?) end list.push( \\n\\n ) _out.writev(consume list)","title":"contents_log.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/discard_log/","text":"primitive DiscardLog Doesn't log anything. fun val apply( ip: String, body_size: USize, request: Payload val, response: Payload val) = None","title":"discard_log.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/http_handler/","text":"This package includes all the support functions necessary to build client and server applications for the HTTP protocol. The important interfaces an application needs to deal with are: * [HTTPSession](http-HTTPSession), the API to an HTTP connection. * [HTTPHandler](http-HTTPHandler), the interface to a handler you need to write that will receive notifications from the `HTTPSession`. * [HandlerFactory](http-HandlerFactory), the interface to a class you need to write that creates instances of your `HTTPHandler`. * [Payload](http-Payload), the class that represents a single HTTP message, with its headers. If you are writing a client, you will need to deal with the [HTTPClient](http-HTTPClient) class. If you are writing a server, you will need to deal with the [HTTPServer](http-HTTPServer) class. interface HTTPHandler This is the interface through which HTTP messages are delivered *to* application code. On the server, this will be HTTP Requests (GET, HEAD, DELETE, POST, etc) sent from a client. On the client, this will be the HTTP Responses coming back from the server. The protocol is largely symmetrical and the same interface definition is used, though what processing happens behind the interface will of course vary. This interface delivers asynchronous events when receiving an HTTP message (called a `Payload`). Calls to these methods are made in the context of the `HTTPSession` actor so most of them should be passing data on to a processing actor. Each `HTTPSession` must have a unique instance of the handler. The application code does not necessarily know when an `HTTPSession` is created, so the application must provide an instance of `HandlerFactory` that will be called at the appropriate time. fun ref apply(payload: Payload val): Any = None Notification of an incoming message. On the client, these will be responses coming from the server. On the server these will be requests coming from the client. The `Payload` object carries HTTP headers and the method, URL, and status codes. Only one HTTP message will be processed at a time, and that starts with a call to this method. This would be a good time to create an actor to deal with subsequent information pertaining to this message. fun ref chunk(data: ByteSeq val) = None Notification of incoming body data. The body belongs to the most recent `Payload` delivered by an `apply` notification. fun ref finished() = None Notification that no more body chunks are coming. Delivery of this HTTP message is complete. fun ref cancelled() = None Notification that the communication link has broken in the middle of transferring the payload. Everything received so far should be discarded. Any transmissions should be terminated. fun ref throttled() = None Notification that the session temporarily can not accept more data. fun ref unthrottled() = None Notification that the session can resume accepting data. fun ref need_body() = None Notification that the HTTPSession is ready for Stream or Chunked body data. interface HandlerFactory The TCP connections that underlie HTTP sessions get created within the `http` package at times that the application code can not predict. Yet, the application code has to provide custom hooks into these connections as they are created. To accomplish this, the application code provides an instance of a `class` that implements this interface. The `HandlerFactory.apply` method will be called when a new `HTTPSession` is created, giving the application a chance to create an instance of its own `HTTPHandler`. This happens on both client and server ends. fun apply(session: HTTPSession): HTTPHandler ref^ Called by the `HTTPSession` when it needs a new instance of the application's `HTTPHandler`. It is suggested that the `session` value be passed to the constructor for the new `HTTPHandler` so that it is available for making `throttle` and `unthrottle` calls.","title":"http_handler.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/http_parser/","text":"use buffered use net use encode/base64 // The parser internal state indicates what it expects to see next // in the input stream. primitive _ExpectRequest primitive _ExpectResponse primitive _ExpectHeaders primitive _ExpectContentLength primitive _ExpectChunkStart primitive _ExpectChunk primitive _ExpectChunkEnd primitive _ExpectBody primitive _ExpectReady primitive _ExpectError type _PayloadState is ( _ExpectRequest // Request method and URL | _ExpectResponse // Response status | _ExpectHeaders // More headers | _ExpectContentLength // Body text, limited by Content-Length | _ExpectChunkStart // The start of a 'chunked' piece of body text | _ExpectChunk // More of a continuing body 'chunk' | _ExpectChunkEnd // The CRLF at the end of a 'chunk' | _ExpectBody // Any body, which might not be there | _ExpectReady // All done with the message | _ExpectError // Not valid HTTP format ) primitive ParseError class HTTPParser This is the HTTP parser that builds a message `Payload` object representing either a Request or a Response from received chunks of data. let _client: Bool let _session: HTTPSession var _state: _PayloadState // Parser state var _payload: Payload iso // The Payload under construction var _expected_length: USize = 0 var _chunked: Bool = false var _chunk_end: Bool = false var _delivered: Bool = false new request(session': HTTPSession) = Expect HTTP requests to arrive on a session. _client = false _session = session' _payload = Payload.request() _expected_length = 0 _chunked = false _chunk_end = false _state = _ExpectRequest new response(session': HTTPSession) = Expect HTTP responses to arrive on a session. _client = true _session = session' _payload = Payload.response() _expected_length = 0 _chunked = false _chunk_end = false _state = _ExpectResponse fun ref parse(buffer: Reader): (ParseError | None) = Analyze new data based on the parser's current internal state. match _state | _ExpectRequest = _parse_request(buffer) | _ExpectResponse = _parse_response(buffer) | _ExpectHeaders = _parse_headers(buffer) | _ExpectBody = // We are expecting a message body. Now we decide exactly // which encoding to look for. if _chunked then _state = _ExpectChunkStart _parse_chunk_start(buffer) else _state = _ExpectContentLength _parse_content_length(buffer) end | _ExpectChunkStart = _parse_chunk_start(buffer) | _ExpectChunk = _parse_chunk(buffer) | _ExpectChunkEnd = _parse_chunk_end(buffer) | _ExpectContentLength = _parse_content_length(buffer) end fun ref _deliver() = The parser is finished with the message headers so we can push it to the `HTTPSession`. The body may come later. let body_follows = match _payload.transfer_mode | ChunkedTransfer = true else (_expected_length 0) end // Set up `_payload` for the next message. let payload = _payload = Payload._empty(_client) _session._deliver(consume payload) if not body_follows then restart() end fun ref restart() = Restart parser state for the next message. It will be of the same kind as the last one. _expected_length = 0 _chunked = false _chunk_end = false _state = if _client then _ExpectResponse else _ExpectRequest end fun ref closed(buffer: Reader) = The connection has closed, which may signal that all remaining data is the payload body. if _state is _ExpectBody then _expected_length = buffer.size() try let bytes = buffer.block(_expected_length)? let chunk: ByteSeq = recover val consume bytes end match _payload.transfer_mode | OneshotTransfer = _payload.add_chunk(chunk) else _session._chunk(chunk) end _state = _ExpectReady end end fun ref _parse_request(buffer: Reader): (ParseError | None) = Look for Method URL Proto , the first line of an HTTP 'request' message. // Reset expectations _expected_length = 0 _chunked = false _payload.session = _session try let line = buffer.line()? let method_end = line.find( )? _payload.method = line.substring(0, method_end) let url_end = line.find( , method_end + 1)? _payload.url = URL.valid(line.substring(method_end + 1, url_end))? _payload.proto = line.substring(url_end + 1) _state = _ExpectHeaders parse(buffer) else ParseError end fun ref _parse_response(buffer: Reader): (ParseError | None) = Look for Proto Code Description , the first line of an HTTP 'response' message. // Reset expectations _expected_length = 0 _chunked = false _payload.session = _session try let line = buffer.line()? let proto_end = line.find( )? _payload.proto = line.substring(0, proto_end) _payload.status = line.read_int[U16](proto_end + 1)?._1 let status_end = line.find( , proto_end + 1)? _payload.method = line.substring(status_end + 1) _state = _ExpectHeaders parse(buffer) else ParseError end fun ref _parse_headers(buffer: Reader): (ParseError | None) = Look for: Key : Value or the empty line that marks the end of all the headers. while true do // Try to get another line out of the available buffer. // If this fails it is not a syntax error; we just wait for more. try let line = buffer.line()? if line.size() == 0 then // An empty line marks the end of the headers. Set state // appropriately. _set_header_end() if _state isnt _ExpectBody then // deliver for chunked or streamed transfer // accumulate the body in the Payload for OneshotTransfer _deliver() end parse(buffer) else // A non-empty line *must* be a header. error if not. try _process_header(consume line)? else _state = _ExpectError break end end // line-size check else // Failed to get a line. We stay in _ExpectHeader state. return end // try end // looping over all headers in this buffer // Breaking out of that loop means an error. if _state is _ExpectError then ParseError end fun ref _process_header(line: String) ? = Save a header value. Raise an error on not finding the colon or can't interpret the value. let i = line.find( : )? let key = line.substring(0, i) key.strip() let key2: String val = consume key let value = line.substring(i + 1) value.strip() let value2: String val = consume value // Examine certain headers describing the encoding. match key2.lower() | content-length = // Explicit body length. _expected_length = value2.read_int[USize]()?._1 // On the receiving end, there is no difference // between Oneshot and Stream transfers except how // we store it. TODO eliminate this? _payload.transfer_mode = if _expected_length 10_000 then StreamTransfer else OneshotTransfer end | transfer-encoding = // Incremental body lengths. try value2.find( chunked )? _payload.transfer_mode = ChunkedTransfer _chunked = true else _state = _ExpectError end | Host = // TODO: set url host and service None | authorization = _setauth(value2) end // match certain headers _payload(key2) = value2 fun ref _setauth(auth: String) = Fill in username and password from an authentication header. try let parts = auth.split( ) let authscheme = parts(0)? match authscheme.lower() | basic = let autharg = parts(1)? let userpass = Base64.decode[String iso](autharg)? let uparts = userpass.split( : ) _payload.username = uparts(0)? _payload.password = uparts(1)? end end fun ref _set_header_end() = Line size is zero, so we have reached the end of the headers. Certain status codes mean there is no body. if (_payload.status == 204) // no content or (_payload.status == 304) // not modified or ((_payload.status 0) and (_payload.status 200)) then _state = _ExpectReady else // If chunked mode or length 0 then some body data will follow. // In any case we can pass the completed `Payload` on to the // session for processing. _state = match _payload.transfer_mode | ChunkedTransfer = _ExpectChunkStart else if _expected_length == 0 then _ExpectReady else _ExpectBody end end end // else no special status fun ref _parse_content_length(buffer: Reader) = Look for `_expected_length` bytes set by having seen a `Content-Length` header. We may not see it all at once but we process the lesser of what we need and what is available in the buffer. let available = buffer.size() let usable = available.min(_expected_length) try let bytes = buffer.block(usable)? let body = recover val consume bytes end _expected_length = _expected_length - usable match _payload.transfer_mode | OneshotTransfer = // in oneshot transfer we actually fill the body of the payload _payload.add_chunk(body) else _session._chunk(body) end // All done with this message if we have processed the entire body. if _expected_length == 0 then match _payload.transfer_mode | OneshotTransfer = // we have all the body, finally deliver it _deliver() else // explicitly finish the session in chunked and stream mode _session._finish() end restart() end end fun ref _parse_chunk_start(buffer: Reader): (ParseError | None) = Look for the beginning of a chunk, which is a length in hex on a line terminated by CRLF. An explicit length of zero marks the end of the entire chunked message body. let line = try buffer.line()? else return ParseError end if line.size() 0 then // This should be the length of the next chunk. _expected_length = try line.read_int[USize](0, 16)?._1 else return ParseError end // A chunk explicitly of length zero marks the end of the body. if _expected_length 0 then _state = _ExpectChunk else // We already have the CRLF after the zero, so we are all done. _session._finish() restart() end parse(buffer) else // Anything other than a length is an error. _expected_length = 0 _state = _ExpectError ParseError end fun ref _parse_chunk(buffer: Reader) = Look for a chunk of the size set by `_parse_chunk_start`. We may not see it all at once but we process the lesser of what we need and what is available in the buffer. ChunkedTransfer mode always delivers directly to the HTTPSession handler. let available = buffer.size() let usable = available.min(_expected_length) try let chunk = buffer.block(usable)? _session._chunk(consume chunk) _expected_length = _expected_length - usable // If we have all of the chunk, look for the trailing CRLF. // Otherwise we will keep working on this chunk. if _expected_length == 0 then _state = _ExpectChunkEnd parse(buffer) end end fun ref _parse_chunk_end(buffer: Reader) = Look for the CRLF that ends every chunk. AFter that we look for the next chunk, or that was the special ending chunk. try let line = buffer.line()? if _chunk_end then _session._finish() restart() else _state = _ExpectChunkStart parse(buffer) end end /* Saved for debugging. fun ref _say() = match _state | _ExpectRequest = Debug.out( -Request method and URL ) | _ExpectResponse = Debug.out( -Response status ) | _ExpectHeaders = Debug.out( -More headers ) | _ExpectContentLength = Debug.out( -Body text, limited by Content-Length ) | _ExpectChunkStart = Debug.out( -The start of a 'chunked' piece of body text ) | _ExpectChunk = Debug.out( -More of a continuing body 'chunk' ) | _ExpectChunkEnd = Debug.out( -The CRLF at the end of a 'chunk' ) | _ExpectBody = Debug.out( -Any body, which might not be there ) | _ExpectReady = Debug.out( -All done with the message ) | _ExpectError = Debug.out( -Not valid HTTP format ) end */","title":"http_parser.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/http_session/","text":"interface tag HTTPSession An HTTP Session is the external API to the communication link between client and server. A session can only transfer one message at a time in each direction. The client and server each have their own ways of implementing this interface, but to application code (either in the client or in the server 'back end') this interface provides a common view of how information is passed *into* the `http` package. be apply(payload: Payload val) Start sending a request or response. The `Payload` must have all its essential fields filled in at this point, because ownership is being transferred to the session actor. This begins an outbound message. be finish() Indicate that all *outbound* `add_chunk` calls have been made and submission of the HTTP message is complete. be dispose() Close the connection from this end. be write(data: ByteSeq val) Write raw byte stream to the outbound TCP connection. be _mute() Stop delivering *incoming* data to the handler. This may not be effective instantly. be _unmute() Resume delivering incoming data to the handler. be cancel(msg: Payload val) Tell the session to stop sending an *outbound* message. be _deliver(payload: Payload val) The appropriate Payload Builder will call this from the `TCPConnection` actor to start delivery of a new *inbound* message. If the `Payload`s `transfer_mode` is `OneshotTransfer`, this is the only notification that will happen for the message. Otherwise there will be one or more `_chunk` calls followed by a `_finish` call. be _chunk(data: ByteSeq val) Deliver a piece of *inbound* body data to the application `HTTPHandler` This is called by the PayloadBuilder. be _finish() Inidcates that the last *inbound* body chunk has been sent to `_chunk`. This is called by the PayloadBuilder.","title":"http_session.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/mimetypes/","text":"primitive MimeTypes Provide mapping from file names to MIME types. TODO load from /etc/mime.types fun apply(name: String): String val^ = Mapping is based on the file type, following the last period in the name. try // This will fail if no period is found. let dotpos = (name.rfind( . , -1, 0)? + 1).usize() match name.trim(dotpos).lower() | html = text/html | jpg = image/jpeg | jpeg = image/jpeg | png = image/png | css = text/css | ico = image/x-icon | js = application/javascript | mp3 = audio/mpeg3 | m3u = audio/mpegurl | ogg = audio/ogg | doc = application/msword | gif = image/gif | txt = text/plain | wav = audio/wav else application/octet-stream // None of the above end else application/octet-stream // No filetype end","title":"mimetypes.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/payload/","text":"use collections use net use format primitive ChunkedTransfer primitive StreamTransfer primitive OneshotTransfer type TransferMode is (ChunkedTransfer | StreamTransfer | OneshotTransfer) class trn Payload This class represent a single HTTP message, which can be either a `request` or a `response`. ### Transfer Modes HTTP provides two ways to encode the transmission of a message 'body', of any size. This package supports both of them: 2. **StreamTransfer**. This is used for payload bodies where the exact length is known in advance, including most transfers of files. It is selected by calling `Payload.set_length` with an integer bytecount. Appication buffer sizes determine how much data is fed to the TCP connection at once, but the total amount must match this size. 3. **ChunkedTransfer**. This is used when the payload length can not be known in advance, but can be large. It is selected by calling `Payload.set_length` with a parameter of `None`. On the TCP link this mode can be detected because there is no `Content-Length` header at all, being replaced by the `Transfer-Encoding: chunked` header. In addition, the message body is separated into chunks, each with its own bytecount. As with `StreamTransfer` mode, transmission can be spread out over time with the difference that it is the original data source that determines the chunk size. If `Payload.set_length` is never called at all, a variation on `StreamTransfer` called `OneshotTransfer` is used. In this case, all of the message body is placed into the message at once, using `Payload.add_chunk` calls. The size will be determined when the message is submitted for transmission. Care must be taken not to consume too much memory, especially on a server where there can be multiple messages in transit at once. The type of transfer being used by an incoming message can be determined from its `transfer_mode` field, which will be one of the [TransferMode](http-TransferMode) types. ### Sequence For example, to send a message of possibly large size: 1. Create the message with a call to `Payload.request` or `Payload.response`. 2. Set the `session` field of the message. 2. Call `Payload.set_length` to indicate the length of the body. 3. Add any additional headers that may be required, such as `Content-type`. 4. Submit the message for transmission by calling the either the `HTTPSession.apply` method (in servers) or the `HTTPCLient.apply` method in clients. 5. Wait for the `send_body` notification. 6. Make any number of calls to `Payload.send_chunk`. 7. Call `Payload.finish`. To send a message of small, reasonable size (say, under 20KB), this simplified method can be used instead: 1. Create the message with a call to `Payload.request` or `Payload.response`. 2. Set the `session` field of the message. 3. Add any additional headers that may be required, such as `Content-type`. 4. Call `add_chunk` one or more times to add body data. 4. Submit the message for transmission by calling the either the [HTTPSession](http-HTTPSession)`.apply` method (in servers) or the [HTTPClient](http-HTTPClient)`.apply` method in clients. var proto: String = HTTP/1.1 The HTTP protocol string var status: U16 Internal representation of the response [Status](http-Status). Will be `0` for HTTP requests. var method: String The HTTP Method. `GET`, `POST`, `DELETE`, `OPTIONS`, ... For HTTP responses this will be the status string, for a `200` status this will be `200 OK`, for `404`, `404 Not Found` etc.. var url: URL The HTTP request [URL](http-URL). It will be used for the HTTP path and the `Host` header. The `user` and `password` fields are ignored. For HTTP responses this will be an empty [URL](http-URL). var _body_length: USize = 0 var transfer_mode: TransferMode = OneshotTransfer Determines the transfer mode of this message. In case of outgoing requests or responses, use `set_length` to control the transfer mode. In case of incoming requests, this field determines how the request is transferred. var session: (HTTPSession | None) = None embed _headers: Map[String, String] = _headers.create() embed _body: Array[ByteSeq val] = _body.create() let _response: Bool var username: String = The username extracted from an `Authentication` header of an HTTP request received via [HTTPServer](http-HTTPServer). This is not used and not sent using [HTTPClient](http-HTTPClient), use `update` to set an `Authentication` header instead. var password: String = The password extracted from an `Authentication` header of an HTTP request received via [HTTPServer](http-HTTPServer). This is not used and not sent using [HTTPClient](http-HTTPClient), use `update` to set an `Authentication` header instead. new iso request(method': String = GET , url': URL = URL) = Create an HTTP `request` message. status = 0 method = method' url = url' _response = false new iso response(status': Status = StatusOK) = Create an HTTP `response` message. status = status'() method = status'.string() url = URL _response = true new iso _empty(response': Bool = true) = Create an empty HTTP payload. status = 0 method = url = URL _response = response' fun apply(key: String): String ? = Get a header. _headers(key)? fun is_safe(): Bool = A request method is safe if it does not modify state in the resource. These methods can be guaranteed not to have any body data. Return true for a safe request method, false otherwise. match method | GET | HEAD | OPTIONS = true else false end fun body(): this- Array[ByteSeq] ? = Get the body in `OneshotTransfer` mode. In the other modes it raises an error. match transfer_mode | OneshotTransfer = _body else error end fun ref set_length(bytecount: (USize | None)) = Set the body length when known in advance. This determines the transfer mode that will be used. A parameter of 'None' will use Chunked Transfer Encoding. A numeric value will use Streamed transfer. Not calling this function at all will use Oneshot transfer. match bytecount | None = transfer_mode = ChunkedTransfer _headers( Transfer-Encoding ) = chunked | let n: USize = try not _headers.contains( Content-Length ) then _headers( Content-Length ) = n.string() end _body_length = n transfer_mode = StreamTransfer end fun ref update(key: String, value: String): Payload ref^ = Set any header. If we've already received the header, append the value as a comma separated list, as per RFC 2616 section 4.2. match _headers(key) = value | let prev: String = _headers(key) = prev + , + value end this fun headers(): this- Map[String, String] = Get all the headers. _headers fun body_size(): (USize | None) = Get the total intended size of the body. `ServerConnection` accumulates actual size transferred for logging. match transfer_mode | ChunkedTransfer = None else _body_length end fun ref add_chunk(data: ByteSeq val): Payload ref^ = This is how application code adds data to the body in `OneshotTransfer` mode. For large bodies, call `set_length` and use `send_chunk` instead. _body.push(data) _body_length = _body_length + data.size() this fun box send_chunk(data: ByteSeq val) = This is how application code sends body data in `StreamTransfer` and `ChunkedTransfer` modes. For smaller body lengths, `add_chunk` in `Oneshot` mode can be used instead. match session | let s: HTTPSession = match transfer_mode | ChunkedTransfer = // Wrap some body data in the Chunked Transfer Encoding format, // which is the length in hex, the data, and a CRLF. It is // important to never send a chunk of length zero, as that is // how the end of the body is signalled. s.write(Format.int[USize](data.size(), FormatHexBare)) s.write( \\r\\n ) s.write(data) s.write( \\r\\n ) | StreamTransfer = // In stream mode just send the data. Its length should have // already been accounted for by `set_length`. s.write(data) end end fun val finish() = Mark the end of body transmission. This does not do anything, and is unnecessary, in Oneshot mode. match session | let s: HTTPSession = match transfer_mode | ChunkedTransfer = s.write( 0\\r\\n\\r\\n ) s.finish() | StreamTransfer = s.finish() end end fun val respond(response': Payload) = Start sending a response from the server to the client. try (session as HTTPSession)(consume response') end fun val _client_fail() = Start sending an error response. None /* Not sure if we need this. Nobody calls it. But something like: try (session as HTTPSession)( Payload.response(StatusInternalServerError)) end */ fun val _write(keepalive: Bool = true, conn: TCPConnection tag) = Writes the payload to an HTTPSession. Requests and Responses differ only in the first line of text - everything after that is the same format. if _response then _write_response(keepalive, conn) else _write_request(keepalive, conn) end _write_common(conn) fun val _write_request(keepalive: Bool, conn: TCPConnection tag) = Writes the 'request' parts of an HTTP message. conn.write(method + + url.path) if url.query.size() 0 then conn.write( ? + url.query) end if url.fragment.size() 0 then conn.write( # + url.fragment) end conn.write( + proto + \\r\\n ) if not keepalive then conn.write( Connection: close\\r\\n ) end conn.write( Host: + url.host + : + url.port.string() + \\r\\n ) fun val _write_common(conn: TCPConnection tag) = Writes the parts of an HTTP message common to both requests and responses. _write_headers(conn) // In oneshot mode we send the entire stored body. if transfer_mode is OneshotTransfer then for piece in _body.values() do conn.write(piece) end end fun val _write_response(keepalive: Bool, conn: TCPConnection tag) = Write the response-specific parts of an HTTP message. This is the status line, consisting of the protocol name, the status value, and a string representation of the status (carried in the `method` field). Since writing it out is an actor behavior call, we go to the trouble of packaging it into a single string before sending. let statusline = recover String(proto.size() + status.string().size() + method.size() + 4) end statusline . append(proto) . append( ) . append(status.string()) . append( ) . append(method) . append( \\r\\n ) conn.write(consume statusline) if keepalive then conn.write( Connection: keep-alive\\r\\n ) end fun _write_headers(conn: TCPConnection tag) = Write all of the HTTP headers to the comm link. var saw_length: Bool = false for (k, v) in _headers.pairs() do if (k != Host ) then if k == Content-Length then saw_length = true end conn.write(k + : + v + \\r\\n ) end end if (not saw_length) and (transfer_mode is OneshotTransfer) then conn.write( Content-Length: + _body_length.string() + \\r\\n ) end // Blank line before the body. conn.write( \\r\\n ) fun box has_body(): Bool = Determines whether a message has a body portion. if _response then // Errors never have bodies. if (status == 204) // no content or (status == 304) // not modified or ((status 0) and (status 200)) or (status 400) then false else true end else match transfer_mode | ChunkedTransfer = true else (_body_length 0) end end","title":"payload.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/server/","text":"use collections use net use net/ssl actor HTTPServer Runs an HTTP server. ### Server operation Information flow into the Server is as follows: 1. `Server` listens for incoming TCP connections. 2. `RequestBuilder` is the notification class for new connections. It creates a `ServerConnection` actor and receives all the raw data from TCP. It uses the `HTTPParser` to assemble complete `Payload` objects which are passed off to the `ServerConnection`. 3. The `ServerConnection` actor deals with *completely formed* requests that have been parsed by the `HTTPParser`. This is where requests get dispatched to the caller-provided Handler. With streaming content, dispatch to the application's back end Handler has to happen *before* all of the body has been received. This has to be carefully choreographed because a `Payload` is an `iso` object and can only belong to one actor at a time, yet the `RequestBuilder` is running within the `TCPConnection` actor while the `RequestHandler` is running under the `ServerConnection` actor. Each incoming bufferful of body data, a `ByteSeq val`, is handed off to `ServerConnection`, to be passed on to the back end Handler. 1. It turns out that the issues in sending a request and a response are the same, as are the issues in receiving them. Therefore the same notification interface, `HTTPHandler` is used on both ends, and the same sending interface `HTTPSession` is used. This makes the code easier to read as well. 1. `HTTPHandler.apply()` will be the way the client/server is informed of a new response/request message. All of the headers will be present so that the request can be dispatched for correct processing. Subsequent calls to a new function `HTTPHandler.chunk` will provide the body data, if any. This stream will be terminated by a call to the new function `HTTPHandler.finished`. 2. Pipelining of requests is to optimize the transmission of requests over slow links (such as over satellites), not to cause simultaneous execution on the server within one session. Multiple received simple requests (`GET`, `HEAD`, and `OPTIONS`) are queued in the server and passed to the back end application one at a time. If a client wants true parallel execution of requests, it should use multiple sessions (which many browsers actually do already). Since processing of a streaming response can take a relatively long time, acting on additional requests in the meantime does nothing but use up memory since responses would have to be queued. And if the server is being used to stream media, it is possible that these additional requests will themselves generate large responses. Instead we will just let the requests queue up until a maximum queue length is reached (a small number) at which point we will back-pressure the inbound TCP stream. let _notify: ServerNotify var _handler_maker: HandlerFactory val var _logger: Logger let _reversedns: (DNSLookupAuth | None) let _sslctx: (SSLContext | None) let _listen: TCPListener var _address: NetAddress var _dirty_routes: Bool = false let _sessions: SetIs[TCPConnection tag] = SetIs[TCPConnection tag] new create(auth: TCPListenerAuth, notify: ServerNotify iso, handler: HandlerFactory val, logger: Logger = DiscardLog, host: String = , service: String = 0 , limit: USize = 0, sslctx: (SSLContext | None) = None, reversedns: (DNSLookupAuth | None) = None) = Create a server bound to the given host and service. To do this we listen for incoming TCP connections, with a notification handler that will create a server session actor for each one. _notify = consume notify _handler_maker = handler _logger = logger _reversedns = reversedns _sslctx = sslctx _listen = TCPListener(auth, _ServerListener(this, sslctx, _handler_maker, _logger, _reversedns), host, service, limit) _address = recover NetAddress end be register_session(conn: TCPConnection) = _sessions.set(conn) be unregister_session(conn: TCPConnection) = _sessions.unset(conn) be set_handler(handler: HandlerFactory val) = Replace the request handler. _handler_maker = handler _listen.set_notify( _ServerListener(this, _sslctx, _handler_maker, _logger, _reversedns)) be set_logger(logger: Logger) = Replace the logger. _logger = logger _listen.set_notify( _ServerListener(this, _sslctx, _handler_maker, _logger, _reversedns)) be dispose() = Shut down the server gracefully. To do this we have to eliminate and source of further inputs. So we stop listening for new incoming TCP connections, and close any that still exist. _listen.dispose() for conn in _sessions.values() do conn.dispose() end fun local_address(): NetAddress = Returns the locally bound address. _address be _listening(address: NetAddress) = Called when we are listening. _address = address _notify.listening(this) be _not_listening() = Called when we fail to listen. _notify.not_listening(this) be _closed() = Called when we stop listening. _notify.closed(this)","title":"server.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/server_notify/","text":"interface val Logger Handles logging request/response pairs. fun val apply( ip: String, body_size: USize, request: Payload val, response: Payload val) : Any = Called after the server has handled a request. interface ServerNotify Notifications about the creation and closing of `TCPConnection`s within HTTP servers. fun ref listening(server: HTTPServer ref) = Called when we are listening. None fun ref not_listening(server: HTTPServer ref) = Called when we fail to listen. None fun ref closed(server: HTTPServer ref) = Called when we stop listening. None","title":"server_notify.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/status/","text":"trait val Status fun apply(): U16 fun string(): String primitive StatusContinue is Status fun apply(): U16 = 100 fun string(): String = 100 Continue primitive StatusSwitchingProtocols is Status fun apply(): U16 = 101 fun string(): String = 101 Switching Protocols primitive StatusOK is Status fun apply(): U16 = 200 fun string(): String = 200 OK primitive StatusCreated is Status fun apply(): U16 = 201 fun string(): String = 201 Created primitive StatusAccepted is Status fun apply(): U16 = 202 fun string(): String = 202 Accepted primitive StatusNonAuthoritativeInfo is Status fun apply(): U16 = 203 fun string(): String = 203 Non-Authoritative Information primitive StatusNoContent is Status fun apply(): U16 = 204 fun string(): String = 204 No Content primitive StatusResetContent is Status fun apply(): U16 = 205 fun string(): String = 205 Reset Content primitive StatusPartialContent is Status fun apply(): U16 = 206 fun string(): String = 206 Partial Content primitive StatusMultipleChoices is Status fun apply(): U16 = 300 fun string(): String = 300 Multiple Choices primitive StatusMovedPermanently is Status fun apply(): U16 = 301 fun string(): String = 301 Moved Permanently primitive StatusFound is Status fun apply(): U16 = 302 fun string(): String = 302 Found primitive StatusSeeOther is Status fun apply(): U16 = 303 fun string(): String = 303 See Other primitive StatusNotModified is Status fun apply(): U16 = 304 fun string(): String = 304 Not Modified primitive StatusUseProxy is Status fun apply(): U16 = 305 fun string(): String = 305 Use Proxy primitive StatusTemporaryRedirect is Status fun apply(): U16 = 307 fun string(): String = 307 Temporary Redirect primitive StatusBadRequest is Status fun apply(): U16 = 400 fun string(): String = 400 Bad Request primitive StatusUnauthorized is Status fun apply(): U16 = 401 fun string(): String = 401 Unauthorized primitive StatusPaymentRequired is Status fun apply(): U16 = 402 fun string(): String = 402 Payment Required primitive StatusForbidden is Status fun apply(): U16 = 403 fun string(): String = 403 Forbidden primitive StatusNotFound is Status fun apply(): U16 = 404 fun string(): String = 404 Not Found primitive StatusMethodNotAllowed is Status fun apply(): U16 = 405 fun string(): String = 405 Method Not Allowed primitive StatusNotAcceptable is Status fun apply(): U16 = 406 fun string(): String = 406 Not Acceptable primitive StatusProxyAuthRequired is Status fun apply(): U16 = 407 fun string(): String = 407 Proxy Authentication Required primitive StatusRequestTimeout is Status fun apply(): U16 = 408 fun string(): String = 408 Request Timeout primitive StatusConflict is Status fun apply(): U16 = 409 fun string(): String = 409 Conflict primitive StatusGone is Status fun apply(): U16 = 410 fun string(): String = 410 Gone primitive StatusLengthRequired is Status fun apply(): U16 = 411 fun string(): String = 411 Length Required primitive StatusPreconditionFailed is Status fun apply(): U16 = 412 fun string(): String = 412 Precondition Failed primitive StatusRequestEntityTooLarge is Status fun apply(): U16 = 413 fun string(): String = 413 Request Entity Too Large primitive StatusRequestURITooLong is Status fun apply(): U16 = 414 fun string(): String = 414 Request URI Too Long primitive StatusUnsupportedMediaType is Status fun apply(): U16 = 415 fun string(): String = 415 Unsupported Media Type primitive StatusRequestedRangeNotSatisfiable is Status fun apply(): U16 = 416 fun string(): String = 416 Requested Range Not Satisfiable primitive StatusExpectationFailed is Status fun apply(): U16 = 417 fun string(): String = 417 Expectation Failed primitive StatusTeapot is Status fun apply(): U16 = 418 fun string(): String = 418 I'm a teapot primitive StatusPreconditionRequired is Status fun apply(): U16 = 428 fun string(): String = 428 Precondition Required primitive StatusTooManyRequests is Status fun apply(): U16 = 429 fun string(): String = 429 Too Many Requests primitive StatusRequestHeaderFieldsTooLarge is Status fun apply(): U16 = 431 fun string(): String = 431 Request Header Fields Too Large primitive StatusUnavailableForLegalReasons is Status fun apply(): U16 = 451 fun string(): String = 451 Unavailable For Legal Reasons primitive StatusInternalServerError is Status fun apply(): U16 = 500 fun string(): String = 500 Internal Server Error primitive StatusNotImplemented is Status fun apply(): U16 = 501 fun string(): String = 501 Not Implemented primitive StatusBadGateway is Status fun apply(): U16 = 502 fun string(): String = 502 Bad Gateway primitive StatusServiceUnavailable is Status fun apply(): U16 = 503 fun string(): String = 503 Service Unavailable primitive StatusGatewayTimeout is Status fun apply(): U16 = 504 fun string(): String = 504 Gateway Timeout primitive StatusHTTPVersionNotSupported is Status fun apply(): U16 = 505 fun string(): String = 505 HTTP Version Not Supported primitive StatusNetworkAuthenticationRequired is Status fun apply(): U16 = 511 fun string(): String = 511 Network Authentication Required","title":"status.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/url/","text":"class val URL Holds the components of a URL. These are always stored as valid, URL-encoded values. var scheme: String = URL scheme. If the given URL does not provide a scheme, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.1). var user: String = URL user as part of the URLs authority component: ``` authority = [ user [ : password ] @ ] host [ : port ] ``` If the URL does not provide user information, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.2.1). var password: String = URL password as part of the URLs authority component: ``` authority = [ user [ : password ] @ ] host [ : port ] ``` If the URL does not provide a password, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.2.1). var host: String = URL host as part of the URLs authority component: ``` authority = [ user [ : password ] @ ] host [ : port ] ``` If the URL does not provide a host, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.2.2). var port: U16 = 0 URL port as part of the URLs authority component: ``` authority = [ user [ : password ] @ ] host [ : port ] ``` If the URL does not provide a port, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.2.3). var path: String = URL path component. If the URL does not provide a path component, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.3). var query: String = URL query component. If the URL does not provide a query component, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.4). var fragment: String = Url fragment identifier component. If the URL does not provide a fragment identifier component, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.5). new val create() = Create an empty URL. None new val build(from: String, percent_encoded: Bool = true) ? = Parse the URL string into its components. If it isn't URL encoded, encode it. If existing URL encoding is invalid, raise an error. _parse(from)? if not URLEncode.check_scheme(scheme) then error end user = URLEncode.encode(user, URLPartUser, percent_encoded)? password = URLEncode.encode(password, URLPartPassword, percent_encoded)? host = URLEncode.encode(host, URLPartHost, percent_encoded)? path = URLEncode.encode(path, URLPartPath, percent_encoded)? query = URLEncode.encode(query, URLPartQuery, percent_encoded)? fragment = URLEncode.encode(fragment, URLPartFragment, percent_encoded)? new val valid(from: String) ? = Parse the URL string into its components. If it isn't URL encoded, raise an error. _parse(from)? if not is_valid() then error end fun is_valid(): Bool = Return true if all elements are correctly URL encoded. URLEncode.check_scheme(scheme) and URLEncode.check(user, URLPartUser) and URLEncode.check(password, URLPartPassword) and URLEncode.check(host, URLPartHost) and URLEncode.check(path, URLPartPath) and URLEncode.check(query, URLPartQuery) and URLEncode.check(fragment, URLPartFragment) fun string(): String iso^ = Combine the components into a string. let len = scheme.size() + 3 + user.size() + 1 + password.size() + 1 + host.size() + 6 + path.size() + 1 + query.size() + 1 + fragment.size() let s = recover String(len) end if scheme.size() 0 then s.append(scheme) s.append( : ) end if (user.size() 0) or (host.size() 0) then s.append( // ) end if user.size() 0 then s.append(user) if password.size() 0 then s.append( : ) s.append(password) end s.append( @ ) end if host.size() 0 then s.append(host) // Do not output port if it's the scheme default. if port != default_port() then s.append( : ) s.append(port.string()) end end s.append(path) if query.size() 0 then s.append( ? ) s.append(query) end if fragment.size() 0 then s.append( # ) s.append(fragment) end consume s fun val join(that: URL): URL = Using this as a base URL, concatenate with another, possibly relative, URL in the same way a browser does for a link. // TODO: this fun default_port(): U16 = Report the default port for our scheme. Returns 0 for unrecognised schemes. match scheme | http = 80 | https = 443 else 0 end fun ref _parse(from: String) ? = Parse the given string as a URL. Raises an error on invalid port number. (var offset, scheme) = _parse_scheme(from) (offset, let authority) = _parse_part(from, // , /?# , offset) (offset, path) = _parse_part(from, , ?# , offset) (offset, query) = _parse_part(from, ? , # , offset) (offset, fragment) = _parse_part(from, # , , offset) if path.size() == 0 then // An empty path is a root path. path = / end (var userinfo, var hostport) = _split(authority, '@') if hostport.size() == 0 then // No '@' found, hostport is whole of authority. hostport = userinfo = end (user, password) = _split(userinfo, ':') (host, var port_str) = _parse_hostport(hostport) port = if port_str.size() 0 then port_str.u16()? else default_port() end fun _parse_scheme(from: String): (/*offset*/ISize, /*scheme*/String) = Find the scheme, if any, at the start of the given string. The offset of the part following the scheme is returned. // We have a scheme only if we have a ':' before any of /?# . try var i = USize(0) while i from.size() do let c = from(i)? if c == ':' then // Scheme found. return ((i + 1).isize(), from.substring(0, i.isize())) end if (c == '/') or (c == '?') or (c == '#') then // No scheme. return (0, ) end i = i + 1 end end // End of string reached without finding any relevant terminators. (0, ) fun _parse_part( from: String, prefix: String, terminators: String, offset: ISize) : (/*offset*/ISize, /*part*/String) = Attempt to parse the specified part out of the given string. Only attempt the parse if the given prefix is found first. Pass if no prefix is needed. The part ends when any one of the given terminator characters is found, or the end of the input is reached. The offset of the terminator is returned, if one is found. if (prefix.size() 0) and (not from.at(prefix, offset)) then // Prefix not found. return (offset, ) end let start = offset + prefix.size().isize() try var i = start.usize() while i from.size() do let c = from(i)? var j = USize(0) while j terminators.size() do if terminators(j)? == c then // Terminator found. return (i.isize(), from.substring(start, i.isize())) end j = j + 1 end i = i + 1 end end // No terminator found, take whole string. (from.size().isize(), from.substring(start)) fun _split(src: String, separator: U8): (String, String) = Split the given string in 2 around the first instance of the specified separator. If the string does not contain the separator then the first resulting string is the whole src and the second is empty. try var i = USize(0) while i src.size() do if src(i)? == separator then // Separator found. return (src.substring(0, i.isize()), src.substring((i + 1).isize())) end i = i + 1 end end // Separator not found. (src, ) fun _parse_hostport(hostport: String): (/*host*/String, /*port*/String) = Split the given host and port string into the host and port parts. try if (hostport.size() == 0) or (hostport(0)? != '[') then // This is not an IPv6 format host, just split at the first ':'. return _split(hostport, ':') end // This is an IPv6 format host, need to find the ']' var i = USize(0) var terminator = U8(']') while i hostport.size() do if hostport(i)? == terminator then if terminator == ':' then // ':' found, now we can separate the host and port return (hostport.substring(0, i.isize()), hostport.substring((i + 1).isize())) end // ']' found, now find ':' terminator = ':' end i = i + 1 end end // ':' not found, we have no port. (hostport, )","title":"url.pony"},{"location":"src/-tmp-tmp_0vJBxwE5k8-http-0_2_0-http/url_encode/","text":"primitive URLPartUser primitive URLPartPassword primitive URLPartHost primitive URLPartPath primitive URLPartQuery primitive URLPartFragment type URLPart is ( URLPartUser | URLPartPassword | URLPartHost | URLPartPath | URLPartQuery | URLPartFragment ) primitive URLEncode Functions for checking, encoding, and decoding parts of URLs. fun encode(from: String, part: URLPart, percent_encoded: Bool = true) : String ? = URL encode and normilase the given string. The percent_encoded parameter indicates how '%' characters should be interpretted. true = given string is already at least partially encoded, so '%'s indicate an encoded character. false = given string is not yet encoded at all, so '%'s are just '%'s. An error is raised on invalid existing encoding or illegal characters that cannot be encoded. if _is_host_ipv6(from, part)? then return from end let out = recover String(from.size()) end var i = USize(0) while i from.size() do var c = from(i)? var should_encode = false if (c == '%') and percent_encoded then // Treat % as an encoded character. // _unhex() will throw on bad / missing hex digit. c = (_unhex(from(i + 1)?)? 4) or _unhex(from(i + 2)?)? should_encode = not _normal_decode(c, part) i = i + 3 else // Not an encoded character. should_encode = not _is_char_legal(c, part) i = i + 1 end if should_encode then out.push('%') out.push(_hex(c 4)?) out.push(_hex(c and 0xF)?) else out.push(c) end end out fun decode(from: String): String ? = URL decode a string. Raise an error on invalid URL encoded. let out = recover String(from.size()) end var i = USize(0) while i from.size() do let c = from(i)? if c == '%' then // _unhex() will throw on bad / missing hex digit. let value = (_unhex(from(i + 1)?)? 4) or _unhex(from(i + 2)?)? out.push(value) i = i + 3 elseif c == '+' then out.push(' ') i = i + 1 else out.push(c) i = i + 1 end end out fun check_scheme(scheme: String): Bool = Check that the given string is a valid scheme. try var i = USize(0) while i scheme.size() do let c = scheme(i)? if ((c 'a') or (c 'z')) and ((c 'A') or (c 'Z')) and ((c '0') or (c '9')) and (c != '-') and (c != '+') and (c != '.') then return false end i = i + 1 end end true fun check(from: String, part: URLPart): Bool = Check that the given string is valid to be the given URL part without further encoding. Canonical form is not checked for, merely validity. try if _is_host_ipv6(from, part)? then return true end else return false end try var i = USize(0) while i from.size() do let c = from(i)? if c == '%' then // Character is encoded. // _unhex() will throw on bad / missing hex digit. _unhex(from(i + 1)?)? _unhex(from(i + 2)?)? i = i + 3 elseif _is_char_legal(c, part) then i = i + 1 else return false end end true else false end fun _is_char_legal(value: U8, part: URLPart): Bool = Determine whether the given character is legal to appear in the specified URL part. // The unreserved and sub-delim characters are always allowed. if ((value = 'a') and (value = 'z')) or ((value = 'A') and (value = 'Z')) or ((value = '0') and (value = '9')) or (value == '-') or (value == '.') or (value == '_') or (value == '~') or (value == '!') or (value == '$') or (value == ' ') or (value == '\\'') or (value == '(') or (value == ')') or (value == '*') or (value == '+') or (value == ',') or (value == ';') or (value == '=') then return true end // Which general delims are allowed depends on the part. match part | URLPartPassword = (value == ':') | URLPartPath = (value == ':') or (value == '@') or (value == '/') | URLPartQuery = (value == ':') or (value == '@') or (value == '/') or (value == '?') | URLPartFragment = (value == ':') or (value == '@') or (value == '/') or (value == '?') else false end fun _normal_decode(value: U8, part: URLPart): Bool = Determine whether the given character should be decoded to give normal form. Some characters, such as sub-delims, are valid to have either in encoded or unencoded form. These should be left as they are when normalising. This will return false for such characters. // The unreserved characters should always be decoded. if ((value = 'a') and (value = 'z')) or ((value = 'A') and (value = 'Z')) or ((value = '0') and (value = '9')) or (value == '-') or (value == '_') or (value == '.') or (value == '~') then return true end // Which general delims to decode depends on the part. match part | URLPartPassword = (value == ':') | URLPartPath = (value == ':') or (value == '@') or (value == '/') | URLPartQuery = (value == ':') or (value == '@') or (value == '/') or (value == '?') | URLPartFragment = (value == ':') or (value == '@') or (value == '/') or (value == '?') else false end fun _is_host_ipv6(host: String, part: URLPart): Bool ? = Check whether the given string is a valid IPv6 format host. Returns: true if string is a valid IPv6 format host. false if string is not an IPv6 foramt host at all. Raises an error if string is an invalid IPv6 format host. try if (part isnt URLPartHost) or (host.size() == 0) or (host(0)? != '[') then return false end end // We are an IPv6 format host, ie a host starting with a '['. var i = USize(1) while i (host.size() - 1) do let c = host(i)? // Only hex digits, ':' and '.' and allowed. if ((c 'a') or (c 'f')) and ((c 'A') or (c 'F')) and ((c '0') or (c '9')) and (c != ':') and (c != '.') then error end i = i + 1 end // Must end with a ']'. if host(host.size() - 1)? != ']' then error end true fun _hex(value: U8): U8 ? = Turn 4 bits into a hex value. if value 10 then value + '0' elseif value 16 then (value + 'A') - 10 else error end fun _unhex(value: U8): U8 ? = Turn a hex value into 4 bits. if (value = '0') and (value = '9') then value - '0' elseif (value = 'A') and (value = 'F') then (value - 'A') + 10 elseif (value = 'a') and (value = 'f') then (value - 'a') + 10 else error end","title":"url_encode.pony"},{"location":"src/assert/assert/","text":"# Assert package Contains runtime assertions. If you are looking for assertion that only run when your code was compiled with the `debug` flag, check out `Assert`. For assertions that are always enabled, check out `Fact`. primitive Assert This is a debug only assertion. If the test is false, it will print any supplied error message to stderr and raise an error. fun apply(test: Bool, msg: String = ) ? = ifdef debug then Fact(test, msg)? end primitive Fact This is an assertion that is always enabled. If the test is false, it will print any supplied error message to stderr and raise an error. fun apply(test: Bool, msg: String = ) ? = if not test then if msg.size() 0 then @fprintf[I32](@pony_os_stderr[Pointer[U8]](), %s\\n .cstring(), msg.cstring()) end error end","title":"assert.pony"},{"location":"src/buffered/reader/","text":"use collections class Reader Store network data and provide a parsing interface. `Reader` provides a way to extract typed data from a sequence of bytes. The `Reader` manages the underlying data structures to provide a read cursor over a contiguous sequence of bytes. It is useful for decoding data that is received over a network or stored in a file. Chunk of bytes are added to the `Reader` using the `append` method, and typed data is extracted using the getter methods. For example, suppose we have a UDP-based network data protocol where messages consist of the following: * `list_size` - the number of items in the following list of items as a big-endian 32-bit integer * zero or more items of the following data: * a big-endian 64-bit floating point number * a string that starts with a big-endian 32-bit integer that specifies the length of the string, followed by a number of bytes that represent the string A message would be something like this: ``` [message_length][list_size][float1][string1][float2][string2]... ``` The following program uses a `Reader` to decode a message of this type and print them: ```pony use buffered use collections class Notify is InputNotify let _env: Env new create(env: Env) = _env = env fun ref apply(data: Array[U8] iso) = let rb = Reader rb.append(consume data) try while true do let len = rb.i32_be()? let items = rb.i32_be()?.usize() for range in Range(0, items) do let f = rb.f32_be()? let str_len = rb.i32_be()?.usize() let str = String.from_array(rb.block(str_len)?) _env.out.print( [( + f.string() + ), ( + str + )] ) end end end actor Main new create(env: Env) = env.input(recover Notify(env) end, 1024) ``` embed _chunks: List[(Array[U8] val, USize)] = _chunks.create() var _available: USize = 0 fun size(): USize = Return the number of available bytes. _available fun ref clear() = Discard all pending data. _chunks.clear() _available = 0 fun ref append(data: ByteSeq) = Add a chunk of data. let data_array = match data | let data': Array[U8] val = data' | let data': String = data'.array() end _available = _available + data_array.size() _chunks.push((data_array, 0)) fun ref skip(n: USize) ? = Skip n bytes. if _available = n then _available = _available - n var rem = n while rem 0 do let node = _chunks.head()? (var data, var offset) = node()? let avail = data.size() - offset if avail rem then node()? = (data, offset + rem) break end rem = rem - avail _chunks.shift()? end else error end fun ref block(len: USize): Array[U8] iso^ ? = Return a block as a contiguous chunk of memory. Will throw an error if you request a block larger than what is currently stored in the `Reader`. if _available len then error end _available = _available - len var out = recover Array[U8] . undefined(len) end var i = USize(0) while i len do let node = _chunks.head()? (let data, let offset) = node()? let avail = data.size() - offset let need = len - i let copy_len = need.min(avail) out = recover let r = consume ref out data.copy_to(r, offset, i, copy_len) consume r end if avail need then node()? = (data, offset + need) break end i = i + copy_len _chunks.shift()? end out fun ref read_until(separator: U8): Array[U8] iso^ ? = Find the first occurrence of the separator and return the block of bytes before its position. The separator is not included in the returned array, but it is removed from the buffer. To read a line of text, prefer line() that handles \\n and \\r\\n. let b = block(_distance_of(separator)? - 1)? u8()? b fun ref line(keep_line_breaks: Bool = false): String iso^ ? = Return a \\n or \\r\\n terminated line as a string. By default the newline is not included in the returned string, but it is removed from the buffer. Set `keep_line_breaks` to `true` to keep the line breaks in the returned line. let len = _search_length()? _available = _available - len var out = recover String(len) end var i = USize(0) while i len do let node = _chunks.head()? (let data, let offset) = node()? let avail = data.size() - offset let need = len - i let copy_len = need.min(avail) out.append(data, offset, copy_len) if avail need then node()? = (data, offset + need) break end i = i + copy_len _chunks.shift()? end let trunc_len: USize = if keep_line_breaks then 0 elseif (len = 2) and (out.at_offset(-2)? == '\\r') then 2 else 1 end out.truncate(len - trunc_len) consume out fun ref u8(): U8 ? = Get a U8. Raise an error if there isn't enough data. if _available = 1 then _byte()? else error end fun ref i8(): I8 ? = Get an I8. u8()?.i8() fun ref u16_be(): U16 ? = Get a big-endian U16. let num_bytes = U16(0).bytewidth() if _available = num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) = num_bytes then let r = ifdef bigendian then data.read_u16(offset)? else data.read_u16(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed (u8()?.u16() 8) or u8()?.u16() end else error end fun ref u16_le(): U16 ? = Get a little-endian U16. let num_bytes = U16(0).bytewidth() if _available = num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) = num_bytes then let r = ifdef littleendian then data.read_u16(offset)? else data.read_u16(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed u8()?.u16() or (u8()?.u16() 8) end else error end fun ref i16_be(): I16 ? = Get a big-endian I16. u16_be()?.i16() fun ref i16_le(): I16 ? = Get a little-endian I16. u16_le()?.i16() fun ref u32_be(): U32 ? = Get a big-endian U32. let num_bytes = U32(0).bytewidth() if _available = num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) = num_bytes then let r = ifdef bigendian then data.read_u32(offset)? else data.read_u32(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed (u8()?.u32() 24) or (u8()?.u32() 16) or (u8()?.u32() 8) or u8()?.u32() end else error end fun ref u32_le(): U32 ? = Get a little-endian U32. let num_bytes = U32(0).bytewidth() if _available = num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) = num_bytes then let r = ifdef littleendian then data.read_u32(offset)? else data.read_u32(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed u8()?.u32() or (u8()?.u32() 8) or (u8()?.u32() 16) or (u8()?.u32() 24) end else error end fun ref i32_be(): I32 ? = Get a big-endian I32. u32_be()?.i32() fun ref i32_le(): I32 ? = Get a little-endian I32. u32_le()?.i32() fun ref u64_be(): U64 ? = Get a big-endian U64. let num_bytes = U64(0).bytewidth() if _available = num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) = num_bytes then let r = ifdef bigendian then data.read_u64(offset)? else data.read_u64(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed (u8()?.u64() 56) or (u8()?.u64() 48) or (u8()?.u64() 40) or (u8()?.u64() 32) or (u8()?.u64() 24) or (u8()?.u64() 16) or (u8()?.u64() 8) or u8()?.u64() end else error end fun ref u64_le(): U64 ? = Get a little-endian U64. let num_bytes = U64(0).bytewidth() if _available = num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) = num_bytes then let r = ifdef littleendian then data.read_u64(offset)? else data.read_u64(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed u8()?.u64() or (u8()?.u64() 8) or (u8()?.u64() 16) or (u8()?.u64() 24) or (u8()?.u64() 32) or (u8()?.u64() 40) or (u8()?.u64() 48) or (u8()?.u64() 56) end else error end fun ref i64_be(): I64 ? = Get a big-endian I64. u64_be()?.i64() fun ref i64_le(): I64 ? = Get a little-endian I64. u64_le()?.i64() fun ref u128_be(): U128 ? = Get a big-endian U128. let num_bytes = U128(0).bytewidth() if _available = num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) = num_bytes then let r = ifdef bigendian then data.read_u128(offset)? else data.read_u128(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed (u8()?.u128() 120) or (u8()?.u128() 112) or (u8()?.u128() 104) or (u8()?.u128() 96) or (u8()?.u128() 88) or (u8()?.u128() 80) or (u8()?.u128() 72) or (u8()?.u128() 64) or (u8()?.u128() 56) or (u8()?.u128() 48) or (u8()?.u128() 40) or (u8()?.u128() 32) or (u8()?.u128() 24) or (u8()?.u128() 16) or (u8()?.u128() 8) or u8()?.u128() end else error end fun ref u128_le(): U128 ? = Get a little-endian U128. let num_bytes = U128(0).bytewidth() if _available = num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) = num_bytes then let r = ifdef littleendian then data.read_u128(offset)? else data.read_u128(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed u8()?.u128() or (u8()?.u128() 8) or (u8()?.u128() 16) or (u8()?.u128() 24) or (u8()?.u128() 32) or (u8()?.u128() 40) or (u8()?.u128() 48) or (u8()?.u128() 56) or (u8()?.u128() 64) or (u8()?.u128() 72) or (u8()?.u128() 80) or (u8()?.u128() 88) or (u8()?.u128() 96) or (u8()?.u128() 104) or (u8()?.u128() 112) or (u8()?.u128() 120) end else error end fun ref i128_be(): I128 ? = Get a big-endian I129. u128_be()?.i128() fun ref i128_le(): I128 ? = Get a little-endian I128. u128_le()?.i128() fun ref f32_be(): F32 ? = Get a big-endian F32. F32.from_bits(u32_be()?) fun ref f32_le(): F32 ? = Get a little-endian F32. F32.from_bits(u32_le()?) fun ref f64_be(): F64 ? = Get a big-endian F64. F64.from_bits(u64_be()?) fun ref f64_le(): F64 ? = Get a little-endian F64. F64.from_bits(u64_le()?) fun ref _byte(): U8 ? = Get a single byte. let node = _chunks.head()? (var data, var offset) = node()? let r = data(offset)? offset = offset + 1 _available = _available - 1 if offset data.size() then node()? = (data, offset) else _chunks.shift()? end r fun box peek_u8(offset: USize = 0): U8 ? = Peek at a U8 at the given offset. Raise an error if there isn't enough data. _peek_byte(offset)? fun box peek_i8(offset: USize = 0): I8 ? = Peek at an I8. peek_u8(offset)?.i8() fun box peek_u16_be(offset: USize = 0): U16 ? = Peek at a big-endian U16. (peek_u8(offset)?.u16() 8) or peek_u8(offset + 1)?.u16() fun box peek_u16_le(offset: USize = 0): U16 ? = Peek at a little-endian U16. peek_u8(offset)?.u16() or (peek_u8(offset + 1)?.u16() 8) fun box peek_i16_be(offset: USize = 0): I16 ? = Peek at a big-endian I16. peek_u16_be(offset)?.i16() fun box peek_i16_le(offset: USize = 0): I16 ? = Peek at a little-endian I16. peek_u16_le(offset)?.i16() fun box peek_u32_be(offset: USize = 0): U32 ? = Peek at a big-endian U32. (peek_u16_be(offset)?.u32() 16) or peek_u16_be(offset + 2)?.u32() fun box peek_u32_le(offset: USize = 0): U32 ? = Peek at a little-endian U32. peek_u16_le(offset)?.u32() or (peek_u16_le(offset + 2)?.u32() 16) fun box peek_i32_be(offset: USize = 0): I32 ? = Peek at a big-endian I32. peek_u32_be(offset)?.i32() fun box peek_i32_le(offset: USize = 0): I32 ? = Peek at a little-endian I32. peek_u32_le(offset)?.i32() fun box peek_u64_be(offset: USize = 0): U64 ? = Peek at a big-endian U64. (peek_u32_be(offset)?.u64() 32) or peek_u32_be(offset + 4)?.u64() fun box peek_u64_le(offset: USize = 0): U64 ? = Peek at a little-endian U64. peek_u32_le(offset)?.u64() or (peek_u32_le(offset + 4)?.u64() 32) fun box peek_i64_be(offset: USize = 0): I64 ? = Peek at a big-endian I64. peek_u64_be(offset)?.i64() fun box peek_i64_le(offset: USize = 0): I64 ? = Peek at a little-endian I64. peek_u64_le(offset)?.i64() fun box peek_u128_be(offset: USize = 0): U128 ? = Peek at a big-endian U128. (peek_u64_be(offset)?.u128() 64) or peek_u64_be(offset + 8)?.u128() fun box peek_u128_le(offset: USize = 0): U128 ? = Peek at a little-endian U128. peek_u64_le(offset)?.u128() or (peek_u64_le(offset + 8)?.u128() 64) fun box peek_i128_be(offset: USize = 0): I128 ? = Peek at a big-endian I129. peek_u128_be(offset)?.i128() fun box peek_i128_le(offset: USize = 0): I128 ? = Peek at a little-endian I128. peek_u128_le(offset)?.i128() fun box peek_f32_be(offset: USize = 0): F32 ? = Peek at a big-endian F32. F32.from_bits(peek_u32_be(offset)?) fun box peek_f32_le(offset: USize = 0): F32 ? = Peek at a little-endian F32. F32.from_bits(peek_u32_le(offset)?) fun box peek_f64_be(offset: USize = 0): F64 ? = Peek at a big-endian F64. F64.from_bits(peek_u64_be(offset)?) fun box peek_f64_le(offset: USize = 0): F64 ? = Peek at a little-endian F64. F64.from_bits(peek_u64_le(offset)?) fun box _peek_byte(offset: USize = 0): U8 ? = Get the byte at the given offset without moving the cursor forward. Raise an error if the given offset is not yet available. var offset' = offset var iter = _chunks.nodes() while true do let node = iter.next()? (var data, var node_offset) = node()? offset' = offset' + node_offset let data_size = data.size() if offset' = data_size then offset' = offset' - data_size else return data(offset')? end end error fun ref _distance_of(byte: U8): USize ? = Get the distance to the first occurrence of the given byte if _chunks.size() == 0 then error end var node = _chunks.head()? var search_len: USize = 0 while true do (var data, var offset) = node()? try let len = (search_len + data.find(byte, offset)? + 1) - offset search_len = 0 return len end search_len = search_len + (data.size() - offset) if not node.has_next() then break end node = node.next() as ListNode[(Array[U8] val, USize)] end error fun ref _search_length(): USize ? = Get the length of a pending line. Raise an error if there is no pending line. _distance_of('\\n')?","title":"reader.pony"},{"location":"src/buffered/writer/","text":"class Writer A buffer for building messages. `Writer` provides an way to create byte sequences using common data encodings. The `Writer` manages the underlying arrays and sizes. It is useful for encoding data to send over a network or store in a file. Once a message has been built you can call `done()` to get the message's `ByteSeq`s, and you can then reuse the `Writer` for creating a new message. For example, suppose we have a TCP-based network data protocol where messages consist of the following: * `message_length` - the number of bytes in the message as a big-endian 32-bit integer * `list_size` - the number of items in the following list of items as a big-endian 32-bit integer * zero or more items of the following data: * a big-endian 64-bit floating point number * a string that starts with a big-endian 32-bit integer that specifies the length of the string, followed by a number of bytes that represent the string A message would be something like this: ``` [message_length][list_size][float1][string1][float2][string2]... ``` The following program uses a write buffer to encode an array of tuples as a message of this type: ```pony use buffered actor Main new create(env: Env) = let wb = Writer let messages = [[(F32(3597.82), Anderson ); (F32(-7979.3), Graham )] [(F32(3.14159), Hopper ); (F32(-83.83), Jones )]] for items in messages.values() do wb.i32_be((items.size() / 2).i32()) for (f, s) in items.values() do wb.f32_be(f) wb.i32_be(s.size().i32()) wb.write(s.array()) end let wb_msg = Writer wb_msg.i32_be(wb.size().i32()) wb_msg.writev(wb.done()) env.out.writev(wb_msg.done()) end ``` var _chunks: Array[ByteSeq] iso = recover Array[ByteSeq] end var _current: Array[U8] iso = recover Array[U8] end var _size: USize = 0 fun ref reserve_chunks(size': USize) = Reserve space for size' chunks. This needs to be recalled after every call to `done` as `done` resets the chunks. _chunks.reserve(size') fun ref reserve_current(size': USize) = Reserve space for size bytes in `_current`. _current.reserve(_current.size() + size') fun size(): USize = _size fun ref u8(data: U8) = Write a byte to the buffer. let num_bytes = U8(0).bytewidth() _current.push_u8(data) _size = _size + num_bytes fun ref u16_le(data: U16) = Write a U16 to the buffer in little-endian byte order. let num_bytes = U16(0).bytewidth() ifdef littleendian then _current.push_u16(data) else _current.push_u16(data.bswap()) end _size = _size + num_bytes fun ref u16_be(data: U16) = Write a U16 to the buffer in big-endian byte order. let num_bytes = U16(0).bytewidth() ifdef bigendian then _current.push_u16(data) else _current.push_u16(data.bswap()) end _size = _size + num_bytes fun ref i16_le(data: I16) = Write an I16 to the buffer in little-endian byte order. u16_le(data.u16()) fun ref i16_be(data: I16) = Write an I16 to the buffer in big-endian byte order. u16_be(data.u16()) fun ref u32_le(data: U32) = Write a U32 to the buffer in little-endian byte order. let num_bytes = U32(0).bytewidth() ifdef littleendian then _current.push_u32(data) else _current.push_u32(data.bswap()) end _size = _size + num_bytes fun ref u32_be(data: U32) = Write a U32 to the buffer in big-endian byte order. let num_bytes = U32(0).bytewidth() ifdef bigendian then _current.push_u32(data) else _current.push_u32(data.bswap()) end _size = _size + num_bytes fun ref i32_le(data: I32) = Write an I32 to the buffer in little-endian byte order. u32_le(data.u32()) fun ref i32_be(data: I32) = Write an I32 to the buffer in big-endian byte order. u32_be(data.u32()) fun ref f32_le(data: F32) = Write an F32 to the buffer in little-endian byte order. u32_le(data.bits()) fun ref f32_be(data: F32) = Write an F32 to the buffer in big-endian byte order. u32_be(data.bits()) fun ref u64_le(data: U64) = Write a U64 to the buffer in little-endian byte order. let num_bytes = U64(0).bytewidth() ifdef littleendian then _current.push_u64(data) else _current.push_u64(data.bswap()) end _size = _size + num_bytes fun ref u64_be(data: U64) = Write a U64 to the buffer in big-endian byte order. let num_bytes = U64(0).bytewidth() ifdef bigendian then _current.push_u64(data) else _current.push_u64(data.bswap()) end _size = _size + num_bytes fun ref i64_le(data: I64) = Write an I64 to the buffer in little-endian byte order. u64_le(data.u64()) fun ref i64_be(data: I64) = Write an I64 to the buffer in big-endian byte order. u64_be(data.u64()) fun ref f64_le(data: F64) = Write an F64 to the buffer in little-endian byte order. u64_le(data.bits()) fun ref f64_be(data: F64) = Write an F64 to the buffer in big-endian byte order. u64_be(data.bits()) fun ref u128_le(data: U128) = Write a U128 to the buffer in little-endian byte order. let num_bytes = U128(0).bytewidth() ifdef littleendian then _current.push_u128(data) else _current.push_u128(data.bswap()) end _size = _size + num_bytes fun ref u128_be(data: U128) = Write a U128 to the buffer in big-endian byte order. let num_bytes = U128(0).bytewidth() ifdef bigendian then _current.push_u128(data) else _current.push_u128(data.bswap()) end _size = _size + num_bytes fun ref i128_le(data: I128) = Write an I128 to the buffer in little-endian byte order. u128_le(data.u128()) fun ref i128_be(data: I128) = Write an I128 to the buffer in big-endian byte order. u128_be(data.u128()) fun ref write(data: ByteSeq) = Write a ByteSeq to the buffer. // if `data` is 1 cacheline or less in size // copy it into the existing `_current` array // to coalesce multiple tiny arrays // into a single bigger array if data.size() = 64 then match data | let d: String = let a = d.array() _current.copy_from(a, 0, _current.size(), a.size()) | let d: Array[U8] val = _current.copy_from(d, 0, _current.size(), d.size()) end _size = _size + data.size() else _append_current() _chunks.push(data) _size = _size + data.size() end fun ref writev(data: ByteSeqIter) = Write ByteSeqs to the buffer. for chunk in data.values() do write(chunk) end fun ref done(): Array[ByteSeq] iso^ = Return an array of buffered ByteSeqs and reset the Writer's buffer. _append_current() _size = 0 _chunks = recover Array[ByteSeq] end fun ref _append_current() = if _current.size() 0 then _chunks.push(_current = recover Array[U8] end) end","title":"writer.pony"},{"location":"src/builtin/_partial_arithmetic/","text":"trait _PartialArithmetic fun add_partial[T: (Integer[T] val Int)](x: T, y: T): T? = (let r: T, let overflow: Bool) = x.addc(y) if overflow then error else r end fun sub_partial[T: (Integer[T] val Int)](x: T, y: T): T? = (let r: T, let overflow: Bool) = x.subc(y) if overflow then error else r end fun mul_partial[T: (Integer[T] val Int)](x: T, y: T): T? = (let r: T, let overflow: Bool) = x.mulc(y) if overflow then error else r end primitive _UnsignedPartialArithmetic is _PartialArithmetic fun div_checked[T: _UnsignedInteger[T] val](x: T, y: T): (T, Bool) = (x / y, (y == T.from[U8](0))) fun rem_checked[T: _UnsignedInteger[T] val](x: T, y: T): (T, Bool) = (x % y, y == T.from[U8](0)) fun div_partial[T: _UnsignedInteger[T] val](x: T, y: T): T? = if (y == T.from[U8](0)) then error else x /~ y end fun rem_partial[T: _UnsignedInteger[T] val](x: T, y: T): T? = if (y == T.from[U8](0)) then error else x %~ y end fun divrem_partial[T: _UnsignedInteger[T] val](x: T, y: T): (T, T)? = if (y == T.from[U8](0)) then error else (x /~ y, x %~ y) end primitive _SignedPartialArithmetic is _PartialArithmetic fun div_checked[T: (_SignedInteger[T, U] val Signed), U: _UnsignedInteger[U] val](x: T, y: T): (T, Bool) = (x / y, (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value()))) fun rem_checked[T: (_SignedInteger[T, U] val Signed), U: _UnsignedInteger[U] val](x: T, y: T): (T, Bool) = (x % y, (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value()))) fun div_partial[T: (_SignedInteger[T, U] val Signed), U: _UnsignedInteger[U] val](x: T, y: T): T? = if (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value())) then error else x /~ y end fun rem_partial[T: (_SignedInteger[T, U] val Signed), U: _UnsignedInteger[U] val](x: T, y: T): T? = if (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value())) then error else x %~ y end fun divrem_partial[T: (_SignedInteger[T, U] val Signed), U: _UnsignedInteger[U] val](x: T, y: T): (T, T)? = if (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value())) then error else (x/~y, x %~ y) end fun neg_partial[T: (_SignedInteger[T, U] val Signed), U: _UnsignedInteger[U] val](x: T): T? = if x == T.min_value() then error else -~x end","title":"_partial_arithmetic.pony"},{"location":"src/builtin/_to_string/","text":"primitive _ToString Worker type providing simple to string conversions for numbers. fun _u64(x: U64, neg: Bool): String iso^ = let table = 0123456789 let base: U64 = 10 recover var s = String(31) var value = x try if value == 0 then s.push(table(0)?) else while value != 0 do let index = ((value = value / base) - (value * base)) s.push(table(index.usize())?) end end end if neg then s.push('-') end s . reverse_in_place() end fun _u128(x: U128, neg: Bool): String iso^ = let table = 0123456789 let base: U128 = 10 recover var s = String(31) var value = x try if value == 0 then s.push(table(0)?) else while value != 0 do let index = (value = value / base) - (value * base) s.push(table(index.usize())?) end end end if neg then s.push('-') end s . reverse_in_place() end fun _f64(x: F64): String iso^ = recover var s = String(31) var f = String(31) . append( %g ) ifdef windows then @_snprintf[I32](s.cstring(), s.space(), f.cstring(), x) else @snprintf[I32](s.cstring(), s.space(), f.cstring(), x) end s . recalc() end","title":"_to_string.pony"},{"location":"src/builtin/ambient_auth/","text":"primitive AmbientAuth This type represents the root capability. When a Pony program starts, the Env passed to the Main actor contains an instance of the root capability. Ambient access to the root capability is denied outside of the builtin package. Inside the builtin package, only Env creates a Root. The root capability can be used by any package that wants to establish a principle of least authority. A typical usage is to have a parameter on a constructor for some resource that expects a limiting capability specific to the package, but will also accept the root capability as representing unlimited access. new _create() = None","title":"ambient_auth.pony"},{"location":"src/builtin/any/","text":"interface tag Any","title":"any.pony"},{"location":"src/builtin/array/","text":"class Array[A] is Seq[A] Contiguous, resizable memory to store elements of type A. ## Usage Creating an Array of String. ```pony let array: Array[String] = [ dog ; cat ; wombat ] // array.size() == 3 // array.space() = 3 ``` Creating an empty Array of String, which may hold at least 10 elements before requesting more space. ```pony let array = Array(10) // array.size() == 0 // array.space() = 10 ``` Accessing elements can be done via the `apply(i: USize): this- A ?` method. The provided index might be out of bounds so `apply` is partial and has to be called within a try-catch block or inside another partial method. ```pony let array: Array[String] = [ dog ; cat ; wombat ] let is_second_element_wobat = try // indexes start from 0, so 1 is the second element array(1)? == wombat else false end ``` Adding and removing elements to and from the end of the Array can be done via `push` and `pop` methods. You could treat the array as a FIFO queue using those methods. ```pony while (array.size() 0) do let elem = array.pop()? // do something with element end ``` Modifying the Array can be done via `update`, `insert` and `delete` methods which alter the Array at an arbitrary index, moving elements left (when deleting) or right (when inserting) as necessary. Iterating over the elements of an Array can be done using the `values` method. ```pony for element in array.values() do // do something with element end ``` ## Memory allocation Array allocates contiguous memory. It always allocates at least enough memory space to hold all of its elements. Space is the number of elements the Array can hold without allocating more memory. The `space()` method returns the number of elements an Array can hold. The `size()` method returns the number of elements the Array holds. Different data types require different amounts of memory. Array[U64] with size of 6 will take more memory than an Array[U8] of the same size. When creating an Array or adding more elements will calculate the next power of 2 of the requested number of elements and allocate that much space, with a lower bound of space for 8 elements. Here's a few examples of the space allocated when initialising an Array with various number of elements: | size | space | |------|-------| | 0 | 0 | | 1 | 8 | | 8 | 8 | | 9 | 16 | | 16 | 16 | | 17 | 32 | Call the `compact()` method to ask the GC to reclaim unused space. There are no guarantees that the GC will actually reclaim any space. var _size: USize var _alloc: USize var _ptr: Pointer[A] new create(len: USize = 0) = Create an array with zero elements, but space for len elements. _size = 0 if len 0 then _alloc = len.next_pow2().max(len).max(8) _ptr = Pointer[A]._alloc(_alloc) else _alloc = 0 _ptr = Pointer[A] end new init(from: A^, len: USize) = Create an array of len elements, all initialised to the given value. _size = len if len 0 then _alloc = len.next_pow2().max(len).max(8) _ptr = Pointer[A]._alloc(_alloc) var i: USize = 0 while i len do _ptr._update(i, from) i = i + 1 end else _alloc = 0 _ptr = Pointer[A] end new from_cpointer(ptr: Pointer[A], len: USize, alloc: USize = 0) = Create an array from a C-style pointer and length. The contents are not copied. _size = len if alloc len then _alloc = alloc else _alloc = len end _ptr = ptr fun _copy_to( ptr: Pointer[this- A!], copy_len: USize, from_offset: USize = 0, to_offset: USize = 0) = Copy copy_len elements from this to that at specified offsets. _ptr._offset(from_offset)._copy_to(ptr._offset(to_offset), copy_len) fun cpointer(offset: USize = 0): Pointer[A] tag = Return the underlying C-style pointer. _ptr._offset(offset) fun size(): USize = The number of elements in the array. _size fun space(): USize = The available space in the array. _alloc fun ref reserve(len: USize) = Reserve space for len elements, including whatever elements are already in the array. Array space grows geometrically. if _alloc len then _alloc = len.next_pow2().max(len).max(8) _ptr = _ptr._realloc(_alloc) end fun box _element_size(): USize = Element size in bytes for an element. _ptr._element_size() fun ref compact() = Try to remove unused space, making it available for garbage collection. The request may be ignored. if _size = (512 / _ptr._element_size()) then if _size.next_pow2() != _alloc.next_pow2() then _alloc = _size.next_pow2() let old_ptr = _ptr = Pointer[A]._alloc(_alloc) old_ptr._copy_to(_ptr._convert[A!](), _size) end elseif _size _alloc then _alloc = _size let old_ptr = _ptr = Pointer[A]._alloc(_alloc) old_ptr._copy_to(_ptr._convert[A!](), _size) end fun ref undefined[B: (A Real[B] val Number) = A](len: USize) = Resize to len elements, populating previously empty elements with random memory. This is only allowed for an array of numbers. reserve(len) _size = len fun box read_u8[B: (A Real[B] val U8) = A](offset: USize): U8 ? = Reads a U8 from offset. This is only allowed for an array of U8s. if offset _size then _ptr._offset(offset)._convert[U8]()._apply(0) else error end fun box read_u16[B: (A Real[B] val U8) = A](offset: USize): U16 ? = Reads a U16 from offset. This is only allowed for an array of U8s. let u16_bytes = U16(0).bytewidth() if (offset + u16_bytes) = _size then _ptr._offset(offset)._convert[U16]()._apply(0) else error end fun box read_u32[B: (A Real[B] val U8) = A](offset: USize): U32 ? = Reads a U32 from offset. This is only allowed for an array of U8s. let u32_bytes = U32(0).bytewidth() if (offset + u32_bytes) = _size then _ptr._offset(offset)._convert[U32]()._apply(0) else error end fun box read_u64[B: (A Real[B] val U8) = A](offset: USize): U64 ? = Reads a U64 from offset. This is only allowed for an array of U8s. let u64_bytes = U64(0).bytewidth() if (offset + u64_bytes) = _size then _ptr._offset(offset)._convert[U64]()._apply(0) else error end fun box read_u128[B: (A Real[B] val U8) = A](offset: USize): U128 ? = Reads a U128 from offset. This is only allowed for an array of U8s. let u128_bytes = U128(0).bytewidth() if (offset + u128_bytes) = _size then _ptr._offset(offset)._convert[U128]()._apply(0) else error end fun apply(i: USize): this- A ? = Get the i-th element, raising an error if the index is out of bounds. if i _size then _ptr._apply(i) else error end fun ref update_u8[B: (A Real[B] val U8) = A](offset: USize, value: U8): U8 ? = Write a U8 at offset. This is only allowed for an array of U8s. if offset _size then _ptr._offset(offset)._convert[U8]()._update(0, value) else error end fun ref update_u16[B: (A Real[B] val U8) = A](offset: USize, value: U16): U16 ? = Write a U16 at offset. This is only allowed for an array of U8s. let u16_bytes = U16(0).bytewidth() if (offset + u16_bytes) = _size then _ptr._offset(offset)._convert[U16]()._update(0, value) else error end fun ref update_u32[B: (A Real[B] val U8) = A](offset: USize, value: U32): U32 ? = Write a U32 at offset. This is only allowed for an array of U8s. let u32_bytes = U32(0).bytewidth() if (offset + u32_bytes) = _size then _ptr._offset(offset)._convert[U32]()._update(0, value) else error end fun ref update_u64[B: (A Real[B] val U8) = A](offset: USize, value: U64): U64 ? = Write a U64 at offset. This is only allowed for an array of U8s. let u64_bytes = U64(0).bytewidth() if (offset + u64_bytes) = _size then _ptr._offset(offset)._convert[U64]()._update(0, value) else error end fun ref update_u128[B: (A Real[B] val U8) = A](offset: USize, value: U128): U128 ? = Write a U128 at offset. This is only allowed for an array of U8s. let u128_bytes = U128(0).bytewidth() if (offset + u128_bytes) = _size then _ptr._offset(offset)._convert[U128]()._update(0, value) else error end fun ref update(i: USize, value: A): A^ ? = Change the i-th element, raising an error if the index is out of bounds. if i _size then _ptr._update(i, consume value) else error end fun ref insert(i: USize, value: A) ? = Insert an element into the array. Elements after this are moved up by one index, extending the array. An out of bounds index raises an error. if i = _size then reserve(_size + 1) _ptr._offset(i)._insert(1, _size - i) _ptr._update(i, consume value) _size = _size + 1 else error end fun ref delete(i: USize): A^ ? = Delete an element from the array. Elements after this are moved down by one index, compacting the array. An out of bounds index raises an error. The deleted element is returned. if i _size then _size = _size - 1 _ptr._offset(i)._delete(1, _size - i) else error end fun ref truncate(len: USize) = Truncate an array to the given length, discarding excess elements. If the array is already smaller than len, do nothing. _size = _size.min(len) fun ref trim_in_place(from: USize = 0, to: USize = -1) = Trim the array to a portion of itself, covering `from` until `to`. Unlike slice, the operation does not allocate a new array nor copy elements. let last = _size.min(to) let offset = last.min(from) let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. _alloc = if last == _size then _alloc - offset else size' end _size = size' // if _alloc == 0 then we've trimmed all the memory originally allocated. // if we do _ptr._offset, we will spill into memory not allocated/owned // by this array and could potentially cause a segfault if we cross // a pagemap boundary into a pagemap address that hasn't been allocated // yet when `reserve` is called next. if _alloc == 0 then _ptr = Pointer[A] else _ptr = _ptr._offset(offset) end fun val trim(from: USize = 0, to: USize = -1): Array[A] val = Return a shared portion of this array, covering `from` until `to`. Both the original and the new array are immutable, as they share memory. The operation does not allocate a new array pointer nor copy elements. let last = _size.min(to) let offset = last.min(from) recover let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. let alloc = if last == _size then _alloc - offset else size' end if size' 0 then from_cpointer(_ptr._offset(offset)._unsafe(), size', alloc) else create() end end fun iso chop(split_point: USize): (Array[A] iso^, Array[A] iso^) = Chops the array in half at the split point requested and returns both the left and right portions. The original array is trimmed in place and returned as the right portion. If the split point is larger than the array, the left portion is the original array and the right portion is a new empty array. Both arrays are isolated and mutable, as they do not share memory. The operation does not allocate a new array pointer nor copy elements. let start_ptr = _ptr let size' = _size.min(split_point) let alloc = if size' == _size then _alloc else split_point end trim_in_place(split_point) let left = recover if size' 0 then from_cpointer(start_ptr._unsafe(), size', alloc) else create() end end (consume left, consume this) fun ref copy_from[B: (A Real[B] val U8) = A]( src: Array[U8] box, src_idx: USize, dst_idx: USize, len: USize) = Copy len elements from src(src_idx) to this(dst_idx). Only works for Array[U8]. reserve(dst_idx + len) src._ptr._offset(src_idx)._copy_to(_ptr._convert[U8]()._offset(dst_idx), len) if _size (dst_idx + len) then _size = dst_idx + len end fun copy_to( dst: Array[this- A!], src_idx: USize, dst_idx: USize, len: USize) = Copy len elements from this(src_idx) to dst(dst_idx). dst.reserve(dst_idx + len) _ptr._offset(src_idx)._copy_to(dst._ptr._offset(dst_idx), len) if dst._size (dst_idx + len) then dst._size = dst_idx + len end fun ref remove(i: USize, n: USize) = Remove n elements from the array, beginning at index i. if i _size then let count = n.min(_size - i) _size = _size - count _ptr._offset(i)._delete(count, _size - i) end fun ref clear() = Remove all elements from the array. _size = 0 fun ref push_u8[B: (A Real[B] val U8) = A](value: U8) = Add a U8 to the end of the array. This is only allowed for an array of U8s. let u8_bytes = U8(0).bytewidth() reserve(_size + u8_bytes) _ptr._offset(_size)._convert[U8]()._update(0, value) _size = _size + u8_bytes fun ref push_u16[B: (A Real[B] val U8) = A](value: U16) = Add a U16 to the end of the array. This is only allowed for an array of U8s. let u16_bytes = U16(0).bytewidth() reserve(_size + u16_bytes) _ptr._offset(_size)._convert[U16]()._update(0, value) _size = _size + u16_bytes fun ref push_u32[B: (A Real[B] val U8) = A](value: U32) = Add a U32 to the end of the array. This is only allowed for an array of U8s. let u32_bytes = U32(0).bytewidth() reserve(_size + u32_bytes) _ptr._offset(_size)._convert[U32]()._update(0, value) _size = _size + u32_bytes fun ref push_u64[B: (A Real[B] val U8) = A](value: U64) = Add a U64 to the end of the array. This is only allowed for an array of U8s. let u64_bytes = U64(0).bytewidth() reserve(_size + u64_bytes) _ptr._offset(_size)._convert[U64]()._update(0, value) _size = _size + u64_bytes fun ref push_u128[B: (A Real[B] val U8) = A](value: U128) = Add a U128 to the end of the array. This is only allowed for an array of U8s. let u128_bytes = U128(0).bytewidth() reserve(_size + u128_bytes) _ptr._offset(_size)._convert[U128]()._update(0, value) _size = _size + u128_bytes fun ref push(value: A) = Add an element to the end of the array. reserve(_size + 1) _ptr._update(_size, consume value) _size = _size + 1 fun ref pop(): A^ ? = Remove an element from the end of the array. The removed element is returned. delete(_size - 1)? fun ref unshift(value: A) = Add an element to the beginning of the array. try insert(0, consume value)? end fun ref shift(): A^ ? = Remove an element from the beginning of the array. The removed element is returned. delete(0)? fun ref append( seq: (ReadSeq[A] ReadElement[A^]), offset: USize = 0, len: USize = -1) = Append the elements from a sequence, starting from the given offset. if offset = seq.size() then return end let copy_len = len.min(seq.size() - offset) reserve(_size + copy_len) var n = USize(0) try while n copy_len do _ptr._update(_size + n, seq(offset + n)?) n = n + 1 end end _size = _size + n fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) = Add len iterated elements to the end of the array, starting from the given offset. var n = USize(0) try while n offset do if iter.has_next() then iter.next()? else return end n = n + 1 end end n = 0 // If a concrete len is specified, we take the caller at their word // and reserve that much space, even though we can't verify that the // iterator actually has that many elements available. Reserving ahead // of time lets us take a fast path of direct pointer access. if len != -1 then reserve(_size + len) try while n len do if iter.has_next() then _ptr._update(_size + n, iter.next()?) else break end n = n + 1 end end _size = _size + n else try while n len do if iter.has_next() then push(iter.next()?) else break end n = n + 1 end end end fun find( value: A!, offset: USize = 0, nth: USize = 0, predicate: {(box- A!, box- A!): Bool} val = {(l, r) = l is r }) : USize ? = Find the `nth` appearance of `value` from the beginning of the array, starting at `offset` and examining higher indices, and using the supplied `predicate` for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the first element of the array, returns the first instance of `value` found, and uses object identity for comparison. var i = offset var n = USize(0) while i _size do if predicate(_ptr._apply(i), value) then if n == nth then return i end n = n + 1 end i = i + 1 end error fun contains( value: A!, predicate: {(box- A!, box- A!): Bool} val = {(l: box- A!, r: box- A!): Bool = l is r }) : Bool = Returns true if the array contains `value`, false otherwise. The default predicate checks for matches by identity. To search for matches by structural equality, pass an object literal such as `{(l, r) = l == r}`. var i = USize(0) while i _size do if predicate(_ptr._apply(i), value) then return true end i = i + 1 end false fun rfind( value: A!, offset: USize = -1, nth: USize = 0, predicate: {(box- A!, box- A!): Bool} val = {(l: box- A!, r: box- A!): Bool = l is r }) : USize ? = Find the `nth` appearance of `value` from the end of the array, starting at `offset` and examining lower indices, and using the supplied `predicate` for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the last element of the array, returns the first instance of `value` found, and uses object identity for comparison. if _size 0 then var i = if offset = _size then _size - 1 else offset end var n = USize(0) repeat if predicate(_ptr._apply(i), value) then if n == nth then return i end n = n + 1 end until (i = i - 1) == 0 end end error fun clone(): Array[this- A!]^ = Clone the array. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. let out = Array[this- A!](_size) _ptr._copy_to(out._ptr, _size) out._size = _size out fun slice( from: USize = 0, to: USize = -1, step: USize = 1) : Array[this- A!]^ = Create a new array that is a clone of a portion of this array. The range is exclusive and saturated. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. let out = Array[this- A!] let last = _size.min(to) let len = last - from if (last from) and (step 0) then out.reserve((len + (step - 1)) / step) if step == 1 then copy_to(out, from, 0, len) else try var i = from while i last do out.push(this(i)?) i = i + step end end end end out fun permute(indices: Iterator[USize]): Array[this- A!]^ ? = Create a new array with the elements permuted. Permute to an arbitrary order that may include duplicates. An out of bounds index raises an error. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. let out = Array[this- A!] for i in indices do out.push(this(i)?) end out fun reverse(): Array[this- A!]^ = Create a new array with the elements in reverse order. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. clone() . reverse_in_place() fun ref reverse_in_place() = Reverse the array in place. if _size 1 then var i: USize = 0 var j = _size - 1 while i j do let x = _ptr._apply(i) _ptr._update(i, _ptr._apply(j)) _ptr._update(j, x) i = i + 1 j = j - 1 end end fun ref swap_elements(i: USize, j: USize) ? = Swap the element at index i with the element at index j. If either i or j are out of bounds, an error is raised. if (i = _size) or (j = _size) then error end let x = _ptr._apply(i) _ptr._update(i, _ptr._apply(j)) _ptr._update(j, consume x) fun keys(): ArrayKeys[A, this- Array[A]]^ = Return an iterator over the indices in the array. ArrayKeys[A, this- Array[A]](this) fun values(): ArrayValues[A, this- Array[A]]^ = Return an iterator over the values in the array. ArrayValues[A, this- Array[A]](this) fun pairs(): ArrayPairs[A, this- Array[A]]^ = Return an iterator over the (index, value) pairs in the array. ArrayPairs[A, this- Array[A]](this) class ArrayKeys[A, B: Array[A] #read] is Iterator[USize] let _array: B var _i: USize new create(array: B) = _array = array _i = 0 fun has_next(): Bool = _i _array.size() fun ref next(): USize = if _i _array.size() then _i = _i + 1 else _i end class ArrayValues[A, B: Array[A] #read] is Iterator[B- A] let _array: B var _i: USize new create(array: B) = _array = array _i = 0 fun has_next(): Bool = _i _array.size() fun ref next(): B- A ? = _array(_i = _i + 1)? fun ref rewind(): ArrayValues[A, B] = _i = 0 this class ArrayPairs[A, B: Array[A] #read] is Iterator[(USize, B- A)] let _array: B var _i: USize new create(array: B) = _array = array _i = 0 fun has_next(): Bool = _i _array.size() fun ref next(): (USize, B- A) ? = (_i, _array(_i = _i + 1)?)","title":"array.pony"},{"location":"src/builtin/asio_event/","text":"type AsioEventID is Pointer[AsioEvent] tag interface tag AsioEventNotify be _event_notify(event: AsioEventID, flags: U32, arg: U32) primitive AsioEvent Functions for asynchronous event notification. fun none(): AsioEventID = An empty event. AsioEventID fun readable(flags: U32): Bool = Returns true if the flags contain the readable flag. (flags and (1 0)) != 0 fun writeable(flags: U32): Bool = Returns true if the flags contain the writeable flag. (flags and (1 1)) != 0 fun disposable(flags: U32): Bool = Returns true if the event should be disposed of. flags == 0 fun dispose(): U32 = 0 fun read(): U32 = 1 0 fun write(): U32 = 1 1 fun timer(): U32 = 1 2 fun signal(): U32 = 1 3 fun read_write(): U32 = read() or write() fun oneshot(): U32 = 1 8 fun read_write_oneshot(): U32 = read() or write() or oneshot()","title":"asio_event.pony"},{"location":"src/builtin/bool/","text":"primitive Bool is Stringable new create(from: Bool) = from fun eq(y: Bool): Bool = this == y fun ne(y: Bool): Bool = this != y fun op_and(y: Bool): Bool = this and y fun op_or(y: Bool): Bool = this or y fun op_xor(y: Bool): Bool = this xor y fun op_not(): Bool = not this fun string(): String iso^ = (if this then true else false end).string()","title":"bool.pony"},{"location":"src/builtin/compare/","text":"primitive Less is Equatable[Compare] fun string(): String iso^ = Less .string() primitive Equal is Equatable[Compare] fun string(): String iso^ = Equal .string() primitive Greater is Equatable[Compare] fun string(): String iso^ = Greater .string() type Compare is (Less | Equal | Greater) interface HasEq[A] fun eq(that: box- A): Bool interface Equatable[A: Equatable[A] #read] fun eq(that: box- A): Bool = this is that fun ne(that: box- A): Bool = not eq(that) interface Comparable[A: Comparable[A] #read] is Equatable[A] fun lt(that: box- A): Bool fun le(that: box- A): Bool = lt(that) or eq(that) fun ge(that: box- A): Bool = not lt(that) fun gt(that: box- A): Bool = not le(that) fun compare(that: box- A): Compare = if eq(that) then Equal elseif lt(that) then Less else Greater end","title":"compare.pony"},{"location":"src/builtin/do_not_optimise/","text":"primitive DoNotOptimise Contains functions preventing some compiler optimisations, namely dead code removal. This is useful for benchmarking purposes. fun apply[A](obj: A) = Prevent the compiler from optimising out obj and any computation it is derived from. This doesn't prevent constant propagation. compile_intrinsic fun observe() = Prevent the compiler from optimising out writes to an object marked by the apply function. compile_intrinsic","title":"do_not_optimise.pony"},{"location":"src/builtin/env/","text":"class val Env An environment holds the command line and other values injected into the program by default by the runtime. let root: (AmbientAuth | None) The root capability. Can be `None` for artificially constructed `Env` instances. let input: InputStream Stdin represented as an actor. let out: OutStream Stdout let err: OutStream Stderr let args: Array[String] val The command line used to start the program. let vars: Array[String] val The program's environment variables. let exitcode: {(I32)} val Sets the environment's exit code. The exit code of the root environment will be the exit code of the application, which defaults to 0. new _create( argc: U32, argv: Pointer[Pointer[U8]] val, envp: Pointer[Pointer[U8]] val) = Builds an environment from the command line. This is done before the Main actor is created. root = AmbientAuth._create() @pony_os_stdout_setup[None]() input = Stdin._create(@pony_os_stdin_setup[Bool]()) out = StdStream._out() err = StdStream._err() args = _strings_from_pointers(argv, argc.usize()) vars = _strings_from_pointers(envp, _count_strings(envp)) exitcode = {(code: I32) = @pony_exitcode[None](code) } new val create( root': (AmbientAuth | None), input': InputStream, out': OutStream, err': OutStream, args': Array[String] val, vars': Array[String] val, exitcode': {(I32)} val) = Build an artificial environment. A root capability may be supplied. root = root' input = input' out = out' err = err' args = args' vars = vars' exitcode = exitcode' fun tag _count_strings(data: Pointer[Pointer[U8]] val): USize = if data.is_null() then return 0 end var i: USize = 0 while let entry = data._apply(i) not entry.is_null() do i = i + 1 end i fun tag _strings_from_pointers( data: Pointer[Pointer[U8]] val, len: USize) : Array[String] iso^ = let array = recover Array[String](len) end var i: USize = 0 while i len do let entry = data._apply(i = i + 1) array.push(recover String.copy_cstring(entry) end) end array","title":"env.pony"},{"location":"src/builtin/float/","text":"primitive F32 is FloatingPoint[F32] new create(value: F32 = 0) = value new pi() = 3.14159265358979323846 new e() = 2.71828182845904523536 new _nan() = compile_intrinsic new _inf(negative: Bool) = compile_intrinsic new from_bits(i: U32) = compile_intrinsic fun bits(): U32 = compile_intrinsic new from[B: (Number Real[B] val)](a: B) = a.f32() new min_value() = Minimum negative value representable. from_bits(0xFF7FFFFF) new max_value() = Maximum positive value representable. from_bits(0x7F7FFFFF) new min_normalised() = Minimum positive value representable at full precision (ie a normalised number). from_bits(0x00800000) new epsilon() = Minimum positive value such that (1 + epsilon) != 1. from_bits(0x34000000) fun tag radix(): U8 = Exponent radix. 2 fun tag precision2(): U8 = Mantissa precision in bits. 24 fun tag precision10(): U8 = Mantissa precision in decimal digits. 6 fun tag min_exp2(): I16 = Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). -125 fun tag min_exp10(): I16 = Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). -37 fun tag max_exp2(): I16 = Maximum exponent value such that (2^exponent) - 1 is representable. 128 fun tag max_exp10(): I16 = Maximum exponent value such that (10^exponent) - 1 is representable. 38 fun abs(): F32 = @ llvm.fabs.f32 [F32](this) fun ceil(): F32 = @ llvm.ceil.f32 [F32](this) fun floor(): F32 = @ llvm.floor.f32 [F32](this) fun round(): F32 = @ llvm.round.f32 [F32](this) fun trunc(): F32 = @ llvm.trunc.f32 [F32](this) fun min(y: F32): F32 = if this y then this else y end fun max(y: F32): F32 = if this y then this else y end fun finite(): Bool = Check whether this number is finite, ie not +/-infinity and not NaN. // True if exponent is not all 1s (bits() and 0x7F800000) != 0x7F800000 fun infinite(): Bool = Check whether this number is +/-infinity // True if exponent is all 1s and mantissa is 0 ((bits() and 0x7F800000) == 0x7F800000) and // exp ((bits() and 0x007FFFFF) == 0) // mantissa fun nan(): Bool = Check whether this number is NaN. // True if exponent is all 1s and mantissa is non-0 ((bits() and 0x7F800000) == 0x7F800000) and // exp ((bits() and 0x007FFFFF) != 0) // mantissa fun ldexp(x: F32, exponent: I32): F32 = @ldexpf[F32](x, exponent) fun frexp(): (F32, U32) = var exponent: U32 = 0 var mantissa = @frexp[F64](f64(), addressof exponent) (mantissa.f32(), exponent) fun log(): F32 = @ llvm.log.f32 [F32](this) fun log2(): F32 = @ llvm.log2.f32 [F32](this) fun log10(): F32 = @ llvm.log10.f32 [F32](this) fun logb(): F32 = @logbf[F32](this) fun pow(y: F32): F32 = @ llvm.pow.f32 [F32](this, y) fun powi(y: I32): F32 = ifdef windows then pow(y.f32()) else @ llvm.powi.f32 [F32](this, y) end fun sqrt(): F32 = if this 0.0 then _nan() else @ llvm.sqrt.f32 [F32](this) end fun sqrt_unsafe(): F32 = Unsafe operation. If this is negative, the result is undefined. @ llvm.sqrt.f32 [F32](this) fun cbrt(): F32 = @cbrtf[F32](this) fun exp(): F32 = @ llvm.exp.f32 [F32](this) fun exp2(): F32 = @ llvm.exp2.f32 [F32](this) fun cos(): F32 = @ llvm.cos.f32 [F32](this) fun sin(): F32 = @ llvm.sin.f32 [F32](this) fun tan(): F32 = @tanf[F32](this) fun cosh(): F32 = @coshf[F32](this) fun sinh(): F32 = @sinhf[F32](this) fun tanh(): F32 = @tanhf[F32](this) fun acos(): F32 = @acosf[F32](this) fun asin(): F32 = @asinf[F32](this) fun atan(): F32 = @atanf[F32](this) fun atan2(y: F32): F32 = @atan2f[F32](this, y) fun acosh(): F32 = @acoshf[F32](this) fun asinh(): F32 = @asinhf[F32](this) fun atanh(): F32 = @atanhf[F32](this) fun copysign(sign: F32): F32 = @ llvm.copysign.f32 [F32](this, sign) fun hash(): USize = bits().hash() fun hash64(): U64 = bits().hash64() fun i128(): I128 = f64().i128() fun u128(): U128 = f64().u128() fun i128_unsafe(): I128 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. f64_unsafe().i128_unsafe() fun u128_unsafe(): U128 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. f64_unsafe().u128_unsafe() primitive F64 is FloatingPoint[F64] new create(value: F64 = 0) = value new pi() = 3.14159265358979323846 new e() = 2.71828182845904523536 new _nan() = compile_intrinsic new _inf(negative: Bool) = compile_intrinsic new from_bits(i: U64) = compile_intrinsic fun bits(): U64 = compile_intrinsic new from[B: (Number Real[B] val)](a: B) = a.f64() new min_value() = Minimum negative value representable. from_bits(0xFFEF_FFFF_FFFF_FFFF) new max_value() = Maximum positive value representable. from_bits(0x7FEF_FFFF_FFFF_FFFF) new min_normalised() = Minimum positive value representable at full precision (ie a normalised number). from_bits(0x0010_0000_0000_0000) new epsilon() = Minimum positive value such that (1 + epsilon) != 1. from_bits(0x3CB0_0000_0000_0000) fun tag radix(): U8 = Exponent radix. 2 fun tag precision2(): U8 = Mantissa precision in bits. 53 fun tag precision10(): U8 = Mantissa precision in decimal digits. 15 fun tag min_exp2(): I16 = Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). -1021 fun tag min_exp10(): I16 = Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). -307 fun tag max_exp2(): I16 = Maximum exponent value such that (2^exponent) - 1 is representable. 1024 fun tag max_exp10(): I16 = Maximum exponent value such that (10^exponent) - 1 is representable. 308 fun abs(): F64 = @ llvm.fabs.f64 [F64](this) fun ceil(): F64 = @ llvm.ceil.f64 [F64](this) fun floor(): F64 = @ llvm.floor.f64 [F64](this) fun round(): F64 = @ llvm.round.f64 [F64](this) fun trunc(): F64 = @ llvm.trunc.f64 [F64](this) fun min(y: F64): F64 = if this y then this else y end fun max(y: F64): F64 = if this y then this else y end fun finite(): Bool = Check whether this number is finite, ie not +/-infinity and not NaN. // True if exponent is not all 1s (bits() and 0x7FF0_0000_0000_0000) != 0x7FF0_0000_0000_0000 fun infinite(): Bool = Check whether this number is +/-infinity // True if exponent is all 1s and mantissa is 0 ((bits() and 0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000) and // exp ((bits() and 0x000F_FFFF_FFFF_FFFF) == 0) // mantissa fun nan(): Bool = Check whether this number is NaN. // True if exponent is all 1s and mantissa is non-0 ((bits() and 0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000) and // exp ((bits() and 0x000F_FFFF_FFFF_FFFF) != 0) // mantissa fun ldexp(x: F64, exponent: I32): F64 = @ldexp[F64](x, exponent) fun frexp(): (F64, U32) = var exponent: U32 = 0 var mantissa = @frexp[F64](this, addressof exponent) (mantissa, exponent) fun log(): F64 = @ llvm.log.f64 [F64](this) fun log2(): F64 = @ llvm.log2.f64 [F64](this) fun log10(): F64 = @ llvm.log10.f64 [F64](this) fun logb(): F64 = @logb[F64](this) fun pow(y: F64): F64 = @ llvm.pow.f64 [F64](this, y) fun powi(y: I32): F64 = ifdef windows then pow(y.f64()) else @ llvm.powi.f64 [F64](this, y) end fun sqrt(): F64 = if this 0.0 then _nan() else @ llvm.sqrt.f64 [F64](this) end fun sqrt_unsafe(): F64 = Unsafe operation. If this is negative, the result is undefined. @ llvm.sqrt.f64 [F64](this) fun cbrt(): F64 = @cbrt[F64](this) fun exp(): F64 = @ llvm.exp.f64 [F64](this) fun exp2(): F64 = @ llvm.exp2.f64 [F64](this) fun cos(): F64 = @ llvm.cos.f64 [F64](this) fun sin(): F64 = @ llvm.sin.f64 [F64](this) fun tan(): F64 = @tan[F64](this) fun cosh(): F64 = @cosh[F64](this) fun sinh(): F64 = @sinh[F64](this) fun tanh(): F64 = @tanh[F64](this) fun acos(): F64 = @acos[F64](this) fun asin(): F64 = @asin[F64](this) fun atan(): F64 = @atan[F64](this) fun atan2(y: F64): F64 = @atan2[F64](this, y) fun acosh(): F64 = @acosh[F64](this) fun asinh(): F64 = @asinh[F64](this) fun atanh(): F64 = @atanh[F64](this) fun copysign(sign: F64): F64 = @ llvm.copysign.f64 [F64](this, sign) fun hash(): USize = bits().hash() fun hash64(): U64 = bits().hash64() fun i128(): I128 = if this I128.max_value().f64() then return I128.max_value() elseif this I128.min_value().f64() then return I128.min_value() end let bit = bits() let high = (bit 32).u32() let ex = ((high and 0x7FF00000) 20) - 1023 if ex 0 then return 0 end let s = ((high and 0x80000000) 31).i128() var r = ((bit and 0x000FFFFFFFFFFFFF) or 0x0010000000000000).i128() let ex' = ex.u128() if ex' 52 then r = r (ex' - 52) else r = r (52 - ex') end (r xor s) - s fun u128(): U128 = if this U128.max_value().f64() then return U128.max_value() elseif this U128.min_value().f64() then return U128.min_value() end let bit = bits() let high = (bit 32).u32() let ex = ((high and 0x7FF00000) 20) - 1023 if (ex 0) or ((high and 0x80000000) != 0) then return 0 end var r = ((bit and 0x000FFFFFFFFFFFFF) or 0x0010000000000000).u128() let ex' = ex.u128() if ex' 52 then r = r (ex' - 52) else r = r (52 - ex') end r.u128() fun i128_unsafe(): I128 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. i128() fun u128_unsafe(): U128 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. u128() type Float is (F32 | F64)","title":"float.pony"},{"location":"src/builtin/iterator/","text":"interface Iterator[A] Iterators generate a series of values, one value at a time on each call to `next()`. An Iterator is considered exhausted, once its `has_next()` method returns `false`. Thus every call to `next()` should be preceeded with a call to `has_next()` to check for exhaustiveness. ## Usage Given the rules for using Iterators mentioned above, basic usage of an iterator looks like this: ```pony while iterator.has_next() do let elem = iterator.next()? // do something with elem end ``` The `For`-loop provides a more concise way of iteration: ```pony for elem in iterator do // do something with elem end ``` Iteration using `While` is more flexible as it allows to continue iterating if a call to `next()` errors. The `For`-loop does not allow this. ## Implementing Iterators Iterator implementations need to adhere to the following rules to be considered well-behaved: * If the Iterator is exhausted, `has_next()` needs to return `false`. * Once `has_next()` returned `false` it is not allowed to switch back to `true` (Unless the Iterator supports rewinding) * `has_next()` does not change its returned value if `next()` has not been called. That means, that between two calls to `next()` any number of calls to `has_next()` need to return the same value. (Unless the Iterator supports rewinding) * A call to `next()` erroring does not necessarily denote exhaustiveness. ### Example ```pony // Generates values from `from` to 0 class ref Countdown is Iterator[USize] var _cur: USize var _has_next: Bool = true new ref create(from: USize) = _cur = from fun ref has_next(): Bool = _has_next fun ref next(): USize = let elem = _cur = _cur - 1 if elem == 0 then _has_next = false end elem ``` fun ref has_next(): Bool Returns `true` if this Iterator is not yet exhausted. That means that a value returned from a subsequent call to `next()` is a valid part of this iterator. Returns `false` if this Iterator is exhausted. The behavior of `next()` after this function returned `false` is undefined, it might throw an error or return values which are not part of this Iterator. fun ref next(): A ? Generate the next value. This might error, which does not necessarily mean that the Iterator is exhausted.","title":"iterator.pony"},{"location":"src/builtin/maybe_pointer/","text":"struct MaybePointer[A] A MaybePointer[A] is used to encode a possibly-null type. It should _only_ be used for structs that need to be passed to and from the C FFI. An optional type for anything that isn't a struct should be encoded as a union type, for example (A | None). new create(that: A) = This re-encodes the type of `that` from A to MaybePointer[A], allowing `that` to be assigned to a field or variable of type MaybePointer[A]. It doesn't allocate a wrapper object: there is no containing object for `that`. compile_intrinsic new none() = This returns a null pointer typed as a MaybePointer[A]. compile_intrinsic fun apply(): this- A ? = This re-encodes the type of `this` from MaybePointer[A] to A, allowing `this` to be assigned to a field of variable of type A. If `this` is a null pointer, an error is raised. compile_intrinsic fun is_none(): Bool = Returns true if `this` is null (ie apply would raise an error). compile_intrinsic","title":"maybe_pointer.pony"},{"location":"src/builtin/none/","text":"primitive None is Stringable fun string(): String iso^ = None .string()","title":"none.pony"},{"location":"src/builtin/platform/","text":"primitive Platform fun bsd(): Bool = freebsd() or dragonfly() or openbsd() fun freebsd(): Bool = compile_intrinsic fun dragonfly(): Bool = compile_intrinsic fun openbsd(): Bool = compile_intrinsic fun linux(): Bool = compile_intrinsic fun osx(): Bool = compile_intrinsic fun posix(): Bool = bsd() or linux() or osx() fun windows(): Bool = compile_intrinsic fun x86(): Bool = compile_intrinsic fun arm(): Bool = compile_intrinsic fun lp64(): Bool = compile_intrinsic fun llp64(): Bool = compile_intrinsic fun ilp32(): Bool = compile_intrinsic fun bigendian(): Bool = compile_intrinsic fun littleendian(): Bool = compile_intrinsic fun native128(): Bool = compile_intrinsic fun debug(): Bool = compile_intrinsic","title":"platform.pony"},{"location":"src/builtin/pointer/","text":"struct Pointer[A] A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be included in a union or intersection, or be a subtype of any interface. Most functions on a Pointer[A] are private to maintain memory safety. new create() = A null pointer. compile_intrinsic new _alloc(len: USize) = Space for len instances of A. compile_intrinsic fun ref _realloc(len: USize): Pointer[A] = Keep the contents, but reserve space for len instances of A. compile_intrinsic fun tag _unsafe(): Pointer[A] ref = Unsafe change in reference capability. compile_intrinsic fun _convert[B](): this- Pointer[B] = Convert from Pointer[A] to Pointer[B]. compile_intrinsic fun _apply(i: USize): this- A = Retrieve index i. compile_intrinsic fun ref _update(i: USize, value: A!): A^ = Set index i and return the previous value. compile_intrinsic fun _offset(n: USize): this- Pointer[A] = Return a pointer to the n-th element. compile_intrinsic fun tag _element_size(): USize = Return the size of a single element in an array of type A. compile_intrinsic fun ref _insert(n: USize, len: USize): Pointer[A] = Creates space for n new elements at the head, moving following elements. The array length before this should be len, and the available space should be at least n + len. compile_intrinsic fun ref _delete(n: USize, len: USize): A^ = Delete n elements from the head of pointer, compact remaining elements of the underlying array. The array length before this should be n + len. Returns the first deleted element. compile_intrinsic fun _copy_to(that: Pointer[this- A!], n: USize): this- Pointer[A] = Copy n elements from this to that. compile_intrinsic fun tag usize(): USize = Convert the pointer into an integer. compile_intrinsic fun tag is_null(): Bool = Return true for a null pointer, false for anything else. compile_intrinsic fun tag eq(that: Pointer[A] tag): Bool = Return true if this address is that address. compile_intrinsic fun tag lt(that: Pointer[A] tag): Bool = Return true if this address is less than that address. compile_intrinsic fun tag ne(that: Pointer[A] tag): Bool = not eq(that) fun tag le(that: Pointer[A] tag): Bool = lt(that) or eq(that) fun tag ge(that: Pointer[A] tag): Bool = not lt(that) fun tag gt(that: Pointer[A] tag): Bool = not le(that) fun tag hash(): USize = Returns a hash of the address. usize().hash() fun tag hash64(): U64 = Returns a 64-bit hash of the address. usize().hash64()","title":"pointer.pony"},{"location":"src/builtin/read_seq/","text":"interface box ReadSeq[A] The readable interface of a sequence. fun size(): USize Returns the number of elements in the sequence. fun apply(i: USize): this- A ? Returns the i-th element of the sequence. Raises an error if the index is out of bounds. Note that this returns this- A, not A. fun values(): Iterator[this- A]^ Returns an iterator over the elements of the sequence. Note that this iterates over this- A, not A. interface box ReadElement[A] Used to show that a ReadSeq can return an element of a specific unmodified type. fun apply(i: USize): A ?","title":"read_seq.pony"},{"location":"src/builtin/real/","text":"trait val _ArithmeticConvertible fun i8(): I8 = compile_intrinsic fun i16(): I16 = compile_intrinsic fun i32(): I32 = compile_intrinsic fun i64(): I64 = compile_intrinsic fun i128(): I128 = compile_intrinsic fun ilong(): ILong = compile_intrinsic fun isize(): ISize = compile_intrinsic fun u8(): U8 = compile_intrinsic fun u16(): U16 = compile_intrinsic fun u32(): U32 = compile_intrinsic fun u64(): U64 = compile_intrinsic fun u128(): U128 = compile_intrinsic fun ulong(): ULong = compile_intrinsic fun usize(): USize = compile_intrinsic fun f32(): F32 = compile_intrinsic fun f64(): F64 = compile_intrinsic fun i8_unsafe(): I8 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun i16_unsafe(): I16 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun i32_unsafe(): I32 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun i64_unsafe(): I64 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun i128_unsafe(): I128 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun ilong_unsafe(): ILong = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun isize_unsafe(): ISize = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun u8_unsafe(): U8 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun u16_unsafe(): U16 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun u32_unsafe(): U32 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun u64_unsafe(): U64 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun u128_unsafe(): U128 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun ulong_unsafe(): ULong = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun usize_unsafe(): USize = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun f32_unsafe(): F32 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun f64_unsafe(): F64 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic trait val Real[A: Real[A] val] is (Stringable _ArithmeticConvertible Comparable[A]) new val create(value: A) new val from[B: (Number Real[B] val)](a: B) new val min_value() new val max_value() fun add(y: A): A = this + y fun sub(y: A): A = this - y fun mul(y: A): A = this * y fun div(y: A): A = this / y fun divrem(y: A): (A, A) = (this / y, this % y) fun rem(y: A): A = this % y fun neg(): A = -this fun eq(y: box- A): Bool = this == y fun ne(y: box- A): Bool = this != y fun lt(y: box- A): Bool = this y fun le(y: box- A): Bool = this = y fun ge(y: box- A): Bool = this = y fun gt(y: box- A): Bool = this y fun min(y: A): A fun max(y: A): A fun hash(): USize = var x = usize() ifdef ilp32 then x = (not x) + (x 15) x = x xor (x 12) x = x + (x 2) x = x xor (x 4) x = (x + (x 3)) + (x 11) x = x xor (x 16) x else hash64().usize() end fun hash64(): U64 = var x = u64() x = (not x) + (x 21) x = x xor (x 24) x = (x + (x 3)) + (x 8) x = x xor (x 14) x = (x + (x 2)) + (x 4) x = x xor (x 28) x = x + (x 31) x fun _value(): A = compile_intrinsic trait val Integer[A: Integer[A] val] is Real[A] fun add_unsafe(y: A): A = Unsafe operation. If the operation overflows, the result is undefined. this +~ y fun sub_unsafe(y: A): A = Unsafe operation. If the operation overflows, the result is undefined. this -~ y fun mul_unsafe(y: A): A = Unsafe operation. If the operation overflows, the result is undefined. this *~ y fun div_unsafe(y: A): A = Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. this /~ y fun divrem_unsafe(y: A): (A, A) = Calculates the quotient of this number and `y` and the remainder. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. (this /~ y, this %~ y) fun rem_unsafe(y: A): A = Calculates the remainder of this number divided by `y`. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. this %~ y fun add_partial(y: A): A ? Add y to this number. If the operation overflows this function errors. fun sub_partial(y: A): A ? Subtract y from this number. If the operation overflows/underflows this function errors. fun mul_partial(y: A): A ? Multiply y with this number. If the operation overflows this function errors. fun div_partial(y: A): A ? Divides this number by y. If y is `0` this function errors. fun rem_partial(y: A): A ? Calculates the remainder of this number divided by y. If y is `0` this function errors. fun divrem_partial(y: A): (A, A) ? Divides this number by y and calculates the remainder of the operation. If y is `0` this function errors. fun neg_unsafe(): A = Unsafe operation. If the operation overflows, the result is undefined. -~this fun addc(y: A): (A, Bool) Add `y` to this integer and return the result and a flag indicating overflow. fun subc(y: A): (A, Bool) Subtract `y` from this integer and return the result and a flag indicating overflow. fun mulc(y: A): (A, Bool) Multiply `y` with this integer and return the result and a flag indicating overflow. fun divc(y: A): (A, Bool) Divide this integer by `y` and return the result and a flag indicating overflow or division by zero. fun remc(y: A): (A, Bool) Calculated the ramainder of this number dividec by y and return the result and a flag indicating division by zero or overflow. fun op_and(y: A): A = this and y fun op_or(y: A): A = this or y fun op_xor(y: A): A = this xor y fun op_not(): A = not this fun bit_reverse(): A Reverse the order of the bits within the integer. For example, 0b11101101 (237) would return 0b10110111 (183). fun bswap(): A trait val _SignedInteger[A: _SignedInteger[A, B] val, B: _UnsignedInteger[B] val] is Integer[A] fun abs(): B fun shl(y: B): A = this y fun shr(y: B): A = this y fun shl_unsafe(y: B): A = Unsafe operation. If bits differing from the final sign bit are shifted-out, the result is undefined. this ~ y fun shr_unsafe(y: B): A = Unsafe operation. If non-zero bits are shifted-out, the result is undefined. this ~ y fun popcount(): B fun clz(): B fun ctz(): B fun clz_unsafe(): B Unsafe operation. If this is 0, the result is undefined. fun ctz_unsafe(): B Unsafe operation. If this is 0, the result is undefined. fun bitwidth(): B fun bytewidth(): USize fun string(): String iso^ = _ToString._u64(abs().u64(), i64() 0) trait val _UnsignedInteger[A: _UnsignedInteger[A] val] is Integer[A] fun abs(): A fun shl(y: A): A = this y fun shr(y: A): A = this y fun shl_unsafe(y: A): A = Unsafe operation. If non-zero bits are shifted-out, the result is undefined. this ~ y fun shr_unsafe(y: A): A = Unsafe operation. If non-zero bits are shifted-out, the result is undefined. this ~ y fun rotl(y: A): A = let y' = y % bitwidth() if y' == y'.min_value() then this._value() else (this y') or (this (bitwidth() - y')) end fun rotr(y: A): A = let y' = y % bitwidth() if y' == y'.min_value() then this._value() else (this y') or (this (bitwidth() - y')) end fun popcount(): A fun clz(): A fun ctz(): A fun clz_unsafe(): A Count leading zeroes. Unsafe operation. If this is 0, the result is undefined. fun ctz_unsafe(): A Count trailing zeroes. Unsafe operation. If this is 0, the result is undefined. fun bitwidth(): A fun bytewidth(): USize fun string(): String iso^ = _ToString._u64(u64(), false) trait val FloatingPoint[A: FloatingPoint[A] val] is Real[A] new val min_normalised() new val epsilon() fun tag radix(): U8 fun tag precision2(): U8 fun tag precision10(): U8 fun tag min_exp2(): I16 fun tag min_exp10(): I16 fun tag max_exp2(): I16 fun tag max_exp10(): I16 fun add_unsafe(y: A): A = Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this +~ y fun sub_unsafe(y: A): A = Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this -~ y fun mul_unsafe(y: A): A = Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this *~ y fun div_unsafe(y: A): A = Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this /~ y fun divrem_unsafe(y: A): (A, A) = Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. (this /~ y, this %~ y) fun rem_unsafe(y: A): A = Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this %~ y fun neg_unsafe(): A = Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. -~this fun eq_unsafe(y: box- A): Bool = Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this ==~ y fun ne_unsafe(y: box- A): Bool = Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this !=~ y fun lt_unsafe(y: box- A): Bool = Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this ~ y fun le_unsafe(y: box- A): Bool = Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this =~ y fun ge_unsafe(y: box- A): Bool = Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this =~ y fun gt_unsafe(y: box- A): Bool = Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this ~ y fun abs(): A fun ceil(): A fun floor(): A fun round(): A fun trunc(): A fun finite(): Bool fun infinite(): Bool fun nan(): Bool fun ldexp(x: A, exponent: I32): A fun frexp(): (A, U32) fun log(): A fun log2(): A fun log10(): A fun logb(): A fun pow(y: A): A fun powi(y: I32): A fun sqrt(): A fun sqrt_unsafe(): A Unsafe operation. If this is negative, the result is undefined. fun cbrt(): A fun exp(): A fun exp2(): A fun cos(): A fun sin(): A fun tan(): A fun cosh(): A fun sinh(): A fun tanh(): A fun acos(): A fun asin(): A fun atan(): A fun atan2(y: A): A fun acosh(): A fun asinh(): A fun atanh(): A fun copysign(sign: A): A fun string(): String iso^ = _ToString._f64(f64()) type Number is (Int | Float) type Int is (Signed | Unsigned)","title":"real.pony"},{"location":"src/builtin/seq/","text":"interface Seq[A] A sequence of elements. new create(len: USize = 0) Create a sequence, reserving space for len elements. fun ref reserve(len: USize) Reserve space for len elements. fun size(): USize Returns the number of elements in the sequence. fun apply(i: USize): this- A ? Returns the i-th element of the sequence. Raises an error if the index is out of bounds. fun ref update(i: USize, value: A): A^ ? Replaces the i-th element of the sequence. Returns the previous value. Raises an error if the index is out of bounds. fun ref clear() Removes all elements from the sequence. fun ref push(value: A) Adds an element to the end of the sequence. fun ref pop(): A^ ? Removes an element from the end of the sequence. fun ref unshift(value: A) Adds an element to the beginning of the sequence. fun ref shift(): A^ ? Removes an element from the beginning of the sequence. fun ref append( seq: (ReadSeq[A] ReadElement[A^]), offset: USize = 0, len: USize = -1) Add len elements to the end of the list, starting from the given offset. fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) Add len iterated elements to the end of the list, starting from the given offset. fun ref truncate(len: USize) Truncate the sequence to the given length, discarding excess elements. If the sequence is already smaller than len, do nothing. fun values(): Iterator[this- A]^ Returns an iterator over the elements of the sequence.","title":"seq.pony"},{"location":"src/builtin/signed/","text":"primitive I8 is _SignedInteger[I8, U8] new create(value: I8) = value new from[A: (Number Real[A] val)](a: A) = a.i8() new min_value() = -0x80 new max_value() = 0x7F fun abs(): U8 = if this 0 then (-this).u8() else this.u8() end fun bit_reverse(): I8 = @ llvm.bitreverse.i8 [I8](this) fun bswap(): I8 = this fun popcount(): U8 = @ llvm.ctpop.i8 [U8](this) fun clz(): U8 = @ llvm.ctlz.i8 [U8](this, false) fun ctz(): U8 = @ llvm.cttz.i8 [U8](this, false) fun clz_unsafe(): U8 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i8 [U8](this, true) fun ctz_unsafe(): U8 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i8 [U8](this, true) fun bitwidth(): U8 = 8 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: I8): I8 = if this y then this else y end fun max(y: I8): I8 = if this y then this else y end fun addc(y: I8): (I8, Bool) = @ llvm.sadd.with.overflow.i8 [(I8, Bool)](this, y) fun subc(y: I8): (I8, Bool) = @ llvm.ssub.with.overflow.i8 [(I8, Bool)](this, y) fun mulc(y: I8): (I8, Bool) = @ llvm.smul.with.overflow.i8 [(I8, Bool)](this, y) fun divc(y: I8): (I8, Bool) = _SignedPartialArithmetic.div_checked[I8, U8](this, y) fun remc(y: I8): (I8, Bool) = _SignedPartialArithmetic.rem_checked[I8, U8](this, y) fun add_partial(y: I8): I8 ? = _SignedPartialArithmetic.add_partial[I8](this, y)? fun sub_partial(y: I8): I8 ? = _SignedPartialArithmetic.sub_partial[I8](this, y)? fun mul_partial(y: I8): I8 ? = _SignedPartialArithmetic.mul_partial[I8](this, y)? fun div_partial(y: I8): I8 ? = _SignedPartialArithmetic.div_partial[I8, U8](this, y)? fun rem_partial(y: I8): I8 ? = _SignedPartialArithmetic.rem_partial[I8, U8](this, y)? fun divrem_partial(y: I8): (I8, I8) ? = _SignedPartialArithmetic.divrem_partial[I8, U8](this, y)? primitive I16 is _SignedInteger[I16, U16] new create(value: I16) = value new from[A: (Number Real[A] val)](a: A) = a.i16() new min_value() = -0x8000 new max_value() = 0x7FFF fun abs(): U16 = if this 0 then (-this).u16() else this.u16() end fun bit_reverse(): I16 = @ llvm.bitreverse.i16 [I16](this) fun bswap(): I16 = @ llvm.bswap.i16 [I16](this) fun popcount(): U16 = @ llvm.ctpop.i16 [U16](this) fun clz(): U16 = @ llvm.ctlz.i16 [U16](this, false) fun ctz(): U16 = @ llvm.cttz.i16 [U16](this, false) fun clz_unsafe(): U16 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i16 [U16](this, true) fun ctz_unsafe(): U16 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i16 [U16](this, true) fun bitwidth(): U16 = 16 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: I16): I16 = if this y then this else y end fun max(y: I16): I16 = if this y then this else y end fun addc(y: I16): (I16, Bool) = @ llvm.sadd.with.overflow.i16 [(I16, Bool)](this, y) fun subc(y: I16): (I16, Bool) = @ llvm.ssub.with.overflow.i16 [(I16, Bool)](this, y) fun mulc(y: I16): (I16, Bool) = @ llvm.smul.with.overflow.i16 [(I16, Bool)](this, y) fun divc(y: I16): (I16, Bool) = _SignedPartialArithmetic.div_checked[I16, U16](this, y) fun remc(y: I16): (I16, Bool) = _SignedPartialArithmetic.rem_checked[I16, U16](this, y) fun add_partial(y: I16): I16 ? = _SignedPartialArithmetic.add_partial[I16](this, y)? fun sub_partial(y: I16): I16 ? = _SignedPartialArithmetic.sub_partial[I16](this, y)? fun mul_partial(y: I16): I16 ? = _SignedPartialArithmetic.mul_partial[I16](this, y)? fun div_partial(y: I16): I16 ? = _SignedPartialArithmetic.div_partial[I16, U16](this, y)? fun rem_partial(y: I16): I16 ? = _SignedPartialArithmetic.rem_partial[I16, U16](this, y)? fun divrem_partial(y: I16): (I16, I16) ? = _SignedPartialArithmetic.divrem_partial[I16, U16](this, y)? primitive I32 is _SignedInteger[I32, U32] new create(value: I32) = value new from[A: (Number Real[A] val)](a: A) = a.i32() new min_value() = -0x8000_0000 new max_value() = 0x7FFF_FFFF fun abs(): U32 = if this 0 then (-this).u32() else this.u32() end fun bit_reverse(): I32 = @ llvm.bitreverse.i32 [I32](this) fun bswap(): I32 = @ llvm.bswap.i32 [I32](this) fun popcount(): U32 = @ llvm.ctpop.i32 [U32](this) fun clz(): U32 = @ llvm.ctlz.i32 [U32](this, false) fun ctz(): U32 = @ llvm.cttz.i32 [U32](this, false) fun clz_unsafe(): U32 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i32 [U32](this, true) fun ctz_unsafe(): U32 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i32 [U32](this, true) fun bitwidth(): U32 = 32 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: I32): I32 = if this y then this else y end fun max(y: I32): I32 = if this y then this else y end fun addc(y: I32): (I32, Bool) = @ llvm.sadd.with.overflow.i32 [(I32, Bool)](this, y) fun subc(y: I32): (I32, Bool) = @ llvm.ssub.with.overflow.i32 [(I32, Bool)](this, y) fun mulc(y: I32): (I32, Bool) = @ llvm.smul.with.overflow.i32 [(I32, Bool)](this, y) fun divc(y: I32): (I32, Bool) = _SignedPartialArithmetic.div_checked[I32, U32](this, y) fun remc(y: I32): (I32, Bool) = _SignedPartialArithmetic.rem_checked[I32, U32](this, y) fun add_partial(y: I32): I32 ? = _SignedPartialArithmetic.add_partial[I32](this, y)? fun sub_partial(y: I32): I32 ? = _SignedPartialArithmetic.sub_partial[I32](this, y)? fun mul_partial(y: I32): I32 ? = _SignedPartialArithmetic.mul_partial[I32](this, y)? fun div_partial(y: I32): I32 ? = _SignedPartialArithmetic.div_partial[I32, U32](this, y)? fun rem_partial(y: I32): I32 ? = _SignedPartialArithmetic.rem_partial[I32, U32](this, y)? fun divrem_partial(y: I32): (I32, I32) ? = _SignedPartialArithmetic.divrem_partial[I32, U32](this, y)? primitive I64 is _SignedInteger[I64, U64] new create(value: I64) = value new from[A: (Number Real[A] val)](a: A) = a.i64() new min_value() = -0x8000_0000_0000_0000 new max_value() = 0x7FFF_FFFF_FFFF_FFFF fun abs(): U64 = if this 0 then (-this).u64() else this.u64() end fun bit_reverse(): I64 = @ llvm.bitreverse.i64 [I64](this) fun bswap(): I64 = @ llvm.bswap.i64 [I64](this) fun popcount(): U64 = @ llvm.ctpop.i64 [U64](this) fun clz(): U64 = @ llvm.ctlz.i64 [U64](this, false) fun ctz(): U64 = @ llvm.cttz.i64 [U64](this, false) fun clz_unsafe(): U64 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i64 [U64](this, true) fun ctz_unsafe(): U64 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i64 [U64](this, true) fun bitwidth(): U64 = 64 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: I64): I64 = if this y then this else y end fun max(y: I64): I64 = if this y then this else y end fun hash(): USize = u64().hash() fun addc(y: I64): (I64, Bool) = @ llvm.sadd.with.overflow.i64 [(I64, Bool)](this, y) fun subc(y: I64): (I64, Bool) = @ llvm.ssub.with.overflow.i64 [(I64, Bool)](this, y) fun mulc(y: I64): (I64, Bool) = _SignedCheckedArithmetic._mulc[U64, I64](this, y) fun divc(y: I64): (I64, Bool) = _SignedPartialArithmetic.div_checked[I64, U64](this, y) fun remc(y: I64): (I64, Bool) = _SignedPartialArithmetic.rem_checked[I64, U64](this, y) fun add_partial(y: I64): I64 ? = _SignedPartialArithmetic.add_partial[I64](this, y)? fun sub_partial(y: I64): I64 ? = _SignedPartialArithmetic.sub_partial[I64](this, y)? fun mul_partial(y: I64): I64 ? = _SignedPartialArithmetic.mul_partial[I64](this, y)? fun div_partial(y: I64): I64 ? = _SignedPartialArithmetic.div_partial[I64, U64](this, y)? fun rem_partial(y: I64): I64 ? = _SignedPartialArithmetic.rem_partial[I64, U64](this, y)? fun divrem_partial(y: I64): (I64, I64) ? = _SignedPartialArithmetic.divrem_partial[I64, U64](this, y)? primitive ILong is _SignedInteger[ILong, ULong] new create(value: ILong) = value new from[A: (Number Real[A] val)](a: A) = a.ilong() new min_value() = ifdef ilp32 or llp64 then -0x8000_0000 else -0x8000_0000_0000_0000 end new max_value() = ifdef ilp32 or llp64 then 0x7FFF_FFFF else 0x7FFF_FFFF_FFFF_FFFF end fun abs(): ULong = if this 0 then (-this).ulong() else this.ulong() end fun bit_reverse(): ILong = ifdef ilp32 or llp64 then @ llvm.bitreverse.i32 [ILong](this) else @ llvm.bitreverse.i64 [ILong](this) end fun bswap(): ILong = ifdef ilp32 or llp64 then @ llvm.bswap.i32 [ILong](this) else @ llvm.bswap.i64 [ILong](this) end fun popcount(): ULong = ifdef ilp32 or llp64 then @ llvm.ctpop.i32 [ULong](this) else @ llvm.ctpop.i64 [ULong](this) end fun clz(): ULong = ifdef ilp32 or llp64 then @ llvm.ctlz.i32 [ULong](this, false) else @ llvm.ctlz.i64 [ULong](this, false) end fun ctz(): ULong = ifdef ilp32 or llp64 then @ llvm.cttz.i32 [ULong](this, false) else @ llvm.cttz.i64 [ULong](this, false) end fun clz_unsafe(): ULong = ifdef ilp32 or llp64 then @ llvm.ctlz.i32 [ULong](this, true) else @ llvm.ctlz.i64 [ULong](this, true) end fun ctz_unsafe(): ULong = ifdef ilp32 or llp64 then @ llvm.cttz.i32 [ULong](this, false) else @ llvm.cttz.i64 [ULong](this, true) end fun bitwidth(): ULong = ifdef ilp32 or llp64 then 32 else 64 end fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: ILong): ILong = if this y then this else y end fun max(y: ILong): ILong = if this y then this else y end fun hash(): USize = ulong().hash() fun addc(y: ILong): (ILong, Bool) = ifdef ilp32 or llp64 then @ llvm.sadd.with.overflow.i32 [(ILong, Bool)](this, y) else @ llvm.sadd.with.overflow.i64 [(ILong, Bool)](this, y) end fun subc(y: ILong): (ILong, Bool) = ifdef ilp32 or llp64 then @ llvm.ssub.with.overflow.i32 [(ILong, Bool)](this, y) else @ llvm.ssub.with.overflow.i64 [(ILong, Bool)](this, y) end fun mulc(y: ILong): (ILong, Bool) = ifdef ilp32 or llp64 then @ llvm.smul.with.overflow.i32 [(ILong, Bool)](this, y) else _SignedCheckedArithmetic._mulc[ULong, ILong](this, y) end fun divc(y: ILong): (ILong, Bool) = _SignedPartialArithmetic.div_checked[ILong, ULong](this, y) fun remc(y: ILong): (ILong, Bool) = _SignedPartialArithmetic.rem_checked[ILong, ULong](this, y) fun add_partial(y: ILong): ILong ? = _SignedPartialArithmetic.add_partial[ILong](this, y)? fun sub_partial(y: ILong): ILong ? = _SignedPartialArithmetic.sub_partial[ILong](this, y)? fun mul_partial(y: ILong): ILong ? = _SignedPartialArithmetic.mul_partial[ILong](this, y)? fun div_partial(y: ILong): ILong ? = _SignedPartialArithmetic.div_partial[ILong, ULong](this, y)? fun rem_partial(y: ILong): ILong ? = _SignedPartialArithmetic.rem_partial[ILong, ULong](this, y)? fun divrem_partial(y: ILong): (ILong, ILong) ? = _SignedPartialArithmetic.divrem_partial[ILong, ULong](this, y)? primitive ISize is _SignedInteger[ISize, USize] new create(value: ISize) = value new from[A: (Number Real[A] val)](a: A) = a.isize() new min_value() = ifdef ilp32 then -0x8000_0000 else -0x8000_0000_0000_0000 end new max_value() = ifdef ilp32 then 0x7FFF_FFFF else 0x7FFF_FFFF_FFFF_FFFF end fun abs(): USize = if this 0 then (-this).usize() else this.usize() end fun bit_reverse(): ISize = ifdef ilp32 then @ llvm.bitreverse.i32 [ISize](this) else @ llvm.bitreverse.i64 [ISize](this) end fun bswap(): ISize = ifdef ilp32 then @ llvm.bswap.i32 [ISize](this) else @ llvm.bswap.i64 [ISize](this) end fun popcount(): USize = ifdef ilp32 then @ llvm.ctpop.i32 [USize](this) else @ llvm.ctpop.i64 [USize](this) end fun clz(): USize = ifdef ilp32 then @ llvm.ctlz.i32 [USize](this, false) else @ llvm.ctlz.i64 [USize](this, false) end fun ctz(): USize = ifdef ilp32 then @ llvm.cttz.i32 [USize](this, false) else @ llvm.cttz.i64 [USize](this, false) end fun clz_unsafe(): USize = ifdef ilp32 then @ llvm.ctlz.i32 [USize](this, true) else @ llvm.ctlz.i64 [USize](this, true) end fun ctz_unsafe(): USize = ifdef ilp32 then @ llvm.cttz.i32 [USize](this, true) else @ llvm.cttz.i64 [USize](this, true) end fun bitwidth(): USize = ifdef ilp32 then 32 else 64 end fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: ISize): ISize = if this y then this else y end fun max(y: ISize): ISize = if this y then this else y end fun addc(y: ISize): (ISize, Bool) = ifdef ilp32 then @ llvm.sadd.with.overflow.i32 [(ISize, Bool)](this, y) else @ llvm.sadd.with.overflow.i64 [(ISize, Bool)](this, y) end fun subc(y: ISize): (ISize, Bool) = ifdef ilp32 then @ llvm.ssub.with.overflow.i32 [(ISize, Bool)](this, y) else @ llvm.ssub.with.overflow.i64 [(ISize, Bool)](this, y) end fun mulc(y: ISize): (ISize, Bool) = ifdef ilp32 then @ llvm.smul.with.overflow.i32 [(ISize, Bool)](this, y) else _SignedCheckedArithmetic._mulc[USize, ISize](this, y) end fun divc(y: ISize): (ISize, Bool) = _SignedPartialArithmetic.div_checked[ISize, USize](this, y) fun remc(y: ISize): (ISize, Bool) = _SignedPartialArithmetic.rem_checked[ISize, USize](this, y) fun add_partial(y: ISize): ISize ? = _SignedPartialArithmetic.add_partial[ISize](this, y)? fun sub_partial(y: ISize): ISize ? = _SignedPartialArithmetic.sub_partial[ISize](this, y)? fun mul_partial(y: ISize): ISize ? = _SignedPartialArithmetic.mul_partial[ISize](this, y)? fun div_partial(y: ISize): ISize ? = _SignedPartialArithmetic.div_partial[ISize, USize](this, y)? fun rem_partial(y: ISize): ISize ? = _SignedPartialArithmetic.rem_partial[ISize, USize](this, y)? fun divrem_partial(y: ISize): (ISize, ISize) ? = _SignedPartialArithmetic.divrem_partial[ISize, USize](this, y)? primitive I128 is _SignedInteger[I128, U128] new create(value: I128) = value new from[A: (Number Real[A] val)](a: A) = a.i128() new min_value() = -0x8000_0000_0000_0000_0000_0000_0000_0000 new max_value() = 0x7FFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF fun abs(): U128 = if this 0 then (-this).u128() else this.u128() end fun bit_reverse(): I128 = @ llvm.bitreverse.i128 [I128](this) fun bswap(): I128 = @ llvm.bswap.i128 [I128](this) fun popcount(): U128 = @ llvm.ctpop.i128 [U128](this) fun clz(): U128 = @ llvm.ctlz.i128 [U128](this, false) fun ctz(): U128 = @ llvm.cttz.i128 [U128](this, false) fun clz_unsafe(): U128 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i128 [U128](this, true) fun ctz_unsafe(): U128 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i128 [U128](this, true) fun bitwidth(): U128 = 128 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: I128): I128 = if this y then this else y end fun max(y: I128): I128 = if this y then this else y end fun hash(): USize = u128().hash() fun hash64(): U64 = u128().hash64() fun string(): String iso^ = _ToString._u128(abs().u128(), this 0) fun mul(y: I128): I128 = (u128() * y.u128()).i128() fun divrem(y: I128): (I128, I128) = ifdef native128 then (this / y, this % y) else if y == 0 then return (0, 0) end var num: I128 = if this = 0 then this else -this end var den: I128 = if y = 0 then y else -y end (let q, let r) = num.u128().divrem(den.u128()) (var q', var r') = (q.i128(), r.i128()) if this 0 then r' = -r' if y 0 then q' = -q' end elseif y 0 then q' = -q' end (q', r') end fun div(y: I128): I128 = ifdef native128 then this / y else (let q, let r) = divrem(y) q end fun rem(y: I128): I128 = ifdef native128 then this % y else (let q, let r) = divrem(y) r end fun mul_unsafe(y: I128): I128 = Unsafe operation. If the operation overflows, the result is undefined. ifdef native128 then this *~ y else this * y end fun divrem_unsafe(y: I128): (I128, I128) = Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. ifdef native128 then (this *~ y, this /~ y) else divrem(y) end fun div_unsafe(y: I128): I128 = Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. ifdef native128 then this /~ y else this / y end fun rem_unsafe(y: I128): I128 = Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. ifdef native128 then this %~ y else this % y end fun f32(): F32 = f64().f32() fun f64(): F64 = if this 0 then -(-u128()).f64() else u128().f64() end fun f32_unsafe(): F32 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. f64_unsafe().f32_unsafe() fun f64_unsafe(): F64 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. f64() fun addc(y: I128): (I128, Bool) = ifdef native128 then @ llvm.sadd.with.overflow.i128 [(I128, Bool)](this, y) else let overflow = if y 0 then (this (max_value() - y)) else (this (min_value() - y)) end (this + y, overflow) end fun subc(y: I128): (I128, Bool) = ifdef native128 then @ llvm.ssub.with.overflow.i128 [(I128, Bool)](this, y) else let overflow = if y 0 then (this (min_value() + y)) else (this (max_value() + y)) end (this - y, overflow) end fun mulc(y: I128): (I128, Bool) = // using llvm.smul.with.overflow.i128 would require to link // llvm compiler-rt where the function implementing it lives: https://github.com/llvm-mirror/compiler-rt/blob/master/lib/builtins/muloti4.c // See this bug for reference: // the following implementation is more or less exactly was __muloti4 is // doing _SignedCheckedArithmetic._mulc[U128, I128](this, y) fun divc(y: I128): (I128, Bool) = _SignedPartialArithmetic.div_checked[I128, U128](this, y) fun remc(y: I128): (I128, Bool) = _SignedPartialArithmetic.rem_checked[I128, U128](this, y) fun add_partial(y: I128): I128 ? = _SignedPartialArithmetic.add_partial[I128](this, y)? fun sub_partial(y: I128): I128 ? = _SignedPartialArithmetic.sub_partial[I128](this, y)? fun mul_partial(y: I128): I128 ? = _SignedPartialArithmetic.mul_partial[I128](this, y)? fun div_partial(y: I128): I128 ? = _SignedPartialArithmetic.div_partial[I128, U128](this, y)? fun rem_partial(y: I128): I128 ? = _SignedPartialArithmetic.rem_partial[I128, U128](this, y)? fun divrem_partial(y: I128): (I128, I128) ? = _SignedPartialArithmetic.divrem_partial[I128, U128](this, y)? type Signed is (I8 | I16 | I32 | I64 | I128 | ILong | ISize) primitive _SignedCheckedArithmetic fun _mulc[U: _UnsignedInteger[U] val, T: (Signed _SignedInteger[T, U] val)](x: T, y: T): (T, Bool) = basically exactly what the runtime functions __muloti4, mulodi4 etc. are doing and roughly as fast as these. Additionally on (at least some) 32 bit systems, the runtime function for checked 64 bit integer addition __mulodi4 is not available. So we shouldn't use: `@ llvm.smul.with.overflow.i64 [(I64, Bool)](this, y)` Also see https://bugs.llvm.org/show_bug.cgi?id=14469 That's basically why we rolled our own. let result = x * y if x == T.min_value() then return (result, (y != T.from[I8](0)) and (y != T.from[I8](1))) end if y == T.min_value() then return (result, (x != T.from[I8](0)) and (x != T.from[I8](1))) end let x_neg = x (x.bitwidth() - U.from[U8](1)) let x_abs = (x xor x_neg) - x_neg let y_neg = y (x.bitwidth() - U.from[U8](1)) let y_abs = (y xor y_neg) - y_neg if ((x_abs T.from[I8](2)) or (y_abs T.from[I8](2))) then return (result, false) end if (x_neg == y_neg) then (result, (x_abs (T.max_value() / y_abs))) else (result, (x_abs (T.min_value() / -y_abs))) end","title":"signed.pony"},{"location":"src/builtin/source_loc/","text":"interface val SourceLoc Represents a location in a Pony source file, as reported by `__loc`. fun file(): String Name and path of source file. fun type_name(): String Name of nearest class, actor, primitive, struct, interface, or trait. fun method_name(): String Name of containing method. fun line(): USize Line number within file. Line numbers start at 1. fun pos(): USize Character position on line. Character positions start at 1.","title":"source_loc.pony"},{"location":"src/builtin/std_stream/","text":"type ByteSeq is (String | Array[U8] val) interface val ByteSeqIter Accept an iterable collection of String or Array[U8] val. fun values(): Iterator[this- ByteSeq box] interface tag OutStream Asnychronous access to some output stream. be print(data: ByteSeq) Print some bytes and insert a newline afterwards. be write(data: ByteSeq) Print some bytes without inserting a newline afterwards. be printv(data: ByteSeqIter) Print an iterable collection of ByteSeqs. be writev(data: ByteSeqIter) Write an iterable collection of ByteSeqs. actor StdStream Asynchronous access to stdout and stderr. The constructors are private to ensure that access is provided only via an environment. var _stream: Pointer[None] new _out() = Create an async stream for stdout. _stream = @pony_os_stdout[Pointer[None]]() new _err() = Create an async stream for stderr. _stream = @pony_os_stderr[Pointer[None]]() be print(data: ByteSeq) = Print some bytes and insert a newline afterwards. _print(data) be write(data: ByteSeq) = Print some bytes without inserting a newline afterwards. _write(data) be printv(data: ByteSeqIter) = Print an iterable collection of ByteSeqs. for bytes in data.values() do _print(bytes) end be writev(data: ByteSeqIter) = Write an iterable collection of ByteSeqs. for bytes in data.values() do _write(bytes) end fun ref _write(data: ByteSeq) = Write the bytes without explicitly flushing. @pony_os_std_write[None](_stream, data.cpointer(), data.size()) fun ref _print(data: ByteSeq) = Write the bytes and a newline without explicitly flushing. @pony_os_std_print[None](_stream, data.cpointer(), data.size())","title":"std_stream.pony"},{"location":"src/builtin/stdin/","text":"use @pony_asio_event_create[AsioEventID]( owner: AsioEventNotify, fd: U32, flags: U32, nsec: U64, noisy: Bool) use @pony_asio_event_unsubscribe[None](event: AsioEventID) use @pony_asio_event_destroy[None](event: AsioEventID) interface InputNotify Notification for data arriving via an input stream. fun ref apply(data: Array[U8] iso) = Called when data is available on the stream. None fun ref dispose() = Called when no more data will arrive on the stream. None interface tag DisposableActor An interface used to asynchronously dispose of an actor. be dispose() interface tag InputStream Asynchronous access to some input stream. be apply(notify: (InputNotify iso | None), chunk_size: USize = 32) Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be dispose() = Clear the notifier in order to shut down input. None actor Stdin Asynchronous access to stdin. The constructor is private to ensure that access is provided only via an environment. Reading from stdin is done by registering an `InputNotify`: ```pony actor Main new create(env: Env) = // do not forget to call `env.input.dispose` at some point env.input( object iso is InputNotify fun ref apply(data: Array[U8] iso) = env.out.write(String.from_iso_array(consume data)) fun ref dispose() = env.out.print( Done. ) end, 512) ``` **Note:** For reading user input from a terminal, use the [term](term--index) package. var _notify: (InputNotify | None) = None var _chunk_size: USize = 32 var _event: AsioEventID = AsioEvent.none() let _use_event: Bool new _create(use_event: Bool) = Create an asynchronous stdin provider. _use_event = use_event be apply(notify: (InputNotify iso | None), chunk_size: USize = 32) = Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. _set_notify(consume notify) _chunk_size = chunk_size be dispose() = Clear the notifier in order to shut down input. _set_notify(None) fun ref _set_notify(notify: (InputNotify iso | None)) = Set the notifier. if notify is None then if _use_event and not _event.is_null() then // Unsubscribe the event. @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end elseif _notify is None then if _use_event then // Create a new event. _event = @pony_asio_event_create(this, 0, AsioEvent.read(), 0, true) else // Start the read loop. _loop_read() end end try (_notify as InputNotify).dispose() end _notify = consume notify be _loop_read() = If we are able to read from stdin, schedule another read. if _read() then _loop_read() end be _event_notify(event: AsioEventID, flags: U32, arg: U32) = When the event fires, read from stdin. if AsioEvent.disposable(flags) then @pony_asio_event_destroy(event) elseif (_event is event) and AsioEvent.readable(flags) then _read() end be _read_again() = Resume reading. _read() fun ref _read(): Bool = Read a chunk of data from stdin. Read a maximum of _chunk_size bytes, send ourself a resume message and stop reading to avoid starving other actors. try let notify = _notify as InputNotify var sum: USize = 0 while true do let chunk_size = _chunk_size var data = recover Array[U8] . undefined(chunk_size) end var again: Bool = false let len = @pony_os_stdin_read[USize](data.cpointer(), data.size(), addressof again) match len | -1 = // Error, possibly would block. Try again. return true | 0 = // EOF. Close everything, stop reading. _close_event() notify.dispose() _notify = None return false end data.truncate(len) notify(consume data) if not again then // Not allowed to call pony_os_stdin_read again yet, exit loop. return true end sum = sum + len if sum (1 12) then if _use_event then _read_again() end break end end true else // No notifier. Stop reading. _close_event() false end fun ref _close_event() = Close the event. if not _event.is_null() then @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end","title":"stdin.pony"},{"location":"src/builtin/string/","text":"use @memcmp[I32](dst: Pointer[U8] box, src: Pointer[U8] box, len: USize) use @memset[Pointer[None]](dst: Pointer[None], set: U32, len: USize) use @memmove[Pointer[None]](dst: Pointer[None], src: Pointer[None], len: USize) use @strtof[F32](nptr: Pointer[U8] box, endptr: USize) use @strtod[F64](nptr: Pointer[U8] box, endptr: USize) class val String is (Seq[U8] Comparable[String box] Stringable) A String is an ordered collection of characters. Strings don't specify an encoding. Example usage of some common String methods: ```pony actor Main new create(env: Env) = try // construct a new string let str = Hello // make an uppercased version let str_upper = str.upper() // make a reversed version let str_reversed = str.reverse() // add world to the end of our original string let str_new = str.add( world ) // count occurrences of letter l let count = str_new.count( l ) // find first occurrence of letter w let first_w = str_new.find( w ) // find first occurrence of letter d let first_d = str_new.find( d ) // get substring capturing world let substr = str_new.substring(first_w, first_d+1) // clone substring let substr_clone = substr.clone() // print our substr env.out.print(consume substr) end ``` var _size: USize var _alloc: USize var _ptr: Pointer[U8] new create(len: USize = 0) = An empty string. Enough space for len bytes is reserved. _size = 0 _alloc = len.min(len.max_value() - 1) + 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) new val from_array(data: Array[U8] val) = Create a string from an array, reusing the underlying data pointer. _size = data.size() _alloc = data.space() _ptr = data.cpointer()._unsafe() new iso from_iso_array(data: Array[U8] iso) = Create a string from an array, reusing the underlying data pointer _size = data.size() _alloc = data.space() _ptr = (consume data).cpointer()._unsafe() if _alloc _size then _set(_size, 0) end new from_cpointer(str: Pointer[U8], len: USize, alloc: USize = 0) = Return a string from binary pointer data without making a copy. This must be done only with C-FFI functions that return pony_alloc'd character arrays. If a null pointer is given then an empty string is returned. if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else _size = len _alloc = alloc.max(_size.min(len.max_value() - 1)) _ptr = str end new from_cstring(str: Pointer[U8]) = Return a string from a pointer to a null-terminated cstring without making a copy. The data is not copied. This must be done only with C-FFI functions that return pony_alloc'd character arrays. The pointer is scanned for the first null byte, which will be interpreted as the null terminator. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else var i: USize = 0 while str._apply(i) != 0 do i = i + 1 end _size = i _alloc = i + 1 _ptr = str end new copy_cpointer(str: Pointer[U8] box, len: USize) = Create a string by copying a fixed number of bytes from a pointer. if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else _size = len _alloc = _size + 1 _ptr = Pointer[U8]._alloc(_alloc) str._copy_to(_ptr, _alloc) end new copy_cstring(str: Pointer[U8] box) = Create a string by copying a null-terminated C string. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else var i: USize = 0 while str._apply(i) != 0 do i = i + 1 end _size = i _alloc = i + 1 _ptr = Pointer[U8]._alloc(_alloc) str._copy_to(_ptr, _alloc) end new from_utf32(value: U32) = Create a UTF-8 string from a single UTF-32 code point. let encoded = _UTF32Encoder.encode(value) _size = encoded._1 _alloc = _size + 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, encoded._2) if encoded._1 1 then _set(1, encoded._3) if encoded._1 2 then _set(2, encoded._4) if encoded._1 3 then _set(3, encoded._5) end end end _set(_size, 0) fun ref push_utf32(value: U32) = Push a UTF-32 code point. let encoded = _UTF32Encoder.encode(value) let i = _size _size = _size + encoded._1 reserve(_size) _set(i, encoded._2) if encoded._1 1 then _set(i + 1, encoded._3) if encoded._1 2 then _set(i + 2, encoded._4) if encoded._1 3 then _set(i + 3, encoded._5) end end end _set(_size, 0) fun box _copy_to(ptr: Pointer[U8] ref, copy_len: USize, from_offset: USize = 0, to_offset: USize = 0) = Copy copy_len characters from this to that at specified offsets. _ptr._offset(from_offset)._copy_to(ptr._offset(to_offset), copy_len) fun cpointer(offset: USize = 0): Pointer[U8] tag = Returns a C compatible pointer to the underlying string allocation. _ptr._offset(offset) fun cstring(): Pointer[U8] tag = Returns a C compatible pointer to a null-terminated version of the string, safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. If the underlying string is already null terminated, this is returned; otherwise the string is copied into a new, null-terminated allocation. if is_null_terminated() then return _ptr end let ptr = Pointer[U8]._alloc(_size + 1) _ptr._copy_to(ptr._unsafe(), _size) ptr._update(_size, 0) ptr fun val array(): Array[U8] val = Returns an Array[U8] that reuses the underlying data pointer. recover Array[U8].from_cpointer(_ptr._unsafe(), _size, _alloc) end fun iso iso_array(): Array[U8] iso^ = Returns an Array[U8] iso that reuses the underlying data pointer. recover Array[U8].from_cpointer(_ptr._unsafe(), _size, _alloc) end fun size(): USize = Returns the length of the string data in bytes. _size fun codepoints(from: ISize = 0, to: ISize = ISize.max_value()): USize = Returns the number of unicode code points in the string between the two offsets. Index range [`from` .. `to`) is half-open. if _size == 0 then return 0 end var i = offset_to_index(from) let j = offset_to_index(to).min(_size) var n = USize(0) while i j do if (_ptr._apply(i) and 0xC0) != 0x80 then n = n + 1 end i = i + 1 end n fun space(): USize = Returns the space available for data, not including the null terminator. if is_null_terminated() then _alloc - 1 else _alloc end fun ref reserve(len: USize) = Reserve space for len bytes. An additional byte will be reserved for the null terminator. if _alloc = len then let max = len.max_value() - 1 let min_alloc = len.min(max) + 1 if min_alloc = (max / 2) then _alloc = min_alloc.next_pow2() else _alloc = min_alloc.min(max) end _ptr = _ptr._realloc(_alloc) end fun ref compact() = Try to remove unused space, making it available for garbage collection. The request may be ignored. The string is returned to allow call chaining. if (_size + 1) = 512 then if (_size + 1).next_pow2() != _alloc.next_pow2() then _alloc = (_size + 1).next_pow2() let old_ptr = _ptr = Pointer[U8]._alloc(_alloc) old_ptr._copy_to(_ptr, _size) _set(_size, 0) end elseif (_size + 1) _alloc then _alloc = (_size + 1) let old_ptr = _ptr = Pointer[U8]._alloc(_alloc) old_ptr._copy_to(_ptr, _size) _set(_size, 0) end fun ref recalc() = Recalculates the string length. This is only needed if the string is changed via an FFI call. If a null terminator byte is not found within the allocated length, the size will not be changed. var s: USize = 0 while (s _alloc) and (_ptr._apply(s) 0) do s = s + 1 end if s != _alloc then _size = s end fun ref truncate(len: USize) = Truncates the string at the minimum of len and space. Ensures there is a null terminator. Does not check for null terminators inside the string. Note that memory is not freed by this operation. if len = _alloc then _size = len.min(_alloc) reserve(_alloc + 1) else _size = len.min(_alloc - 1) end _set(_size, 0) fun ref trim_in_place(from: USize = 0, to: USize = -1) = Trim the string to a portion of itself, covering `from` until `to`. Unlike slice, the operation does not allocate a new string nor copy elements. let last = _size.min(to) let offset = last.min(from) let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. _alloc = if last == _size then _alloc - offset else size' end _size = size' // if _alloc == 0 then we've trimmed all the memory originally allocated. // if we do _ptr._offset, we will spill into memory not allocated/owned // by this string and could potentially cause a segfault if we cross // a pagemap boundary into a pagemap address that hasn't been allocated // yet when `reserve` is called next. if _alloc == 0 then _ptr = Pointer[U8] else _ptr = _ptr._offset(offset) end fun val trim(from: USize = 0, to: USize = -1): String val = Return a shared portion of this string, covering `from` until `to`. Both the original and the new string are immutable, as they share memory. The operation does not allocate a new string pointer nor copy elements. let last = _size.min(to) let offset = last.min(from) recover let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. let alloc = if last == _size then _alloc - offset else size' end if size' 0 then from_cpointer(_ptr._offset(offset)._unsafe(), size', alloc) else create() end end fun iso chop(split_point: USize): (String iso^, String iso^) = Chops the string in half at the split point requested and returns both the left and right portions. The original string is trimmed in place and returned as the right portion. If the split point is larger than the string, the left portion is the original string and the right portion is a new empty string. Both strings are isolated and mutable, as they do not share memory. The operation does not allocate a new string pointer nor copy elements. let start_ptr = _ptr let size' = _size.min(split_point) let alloc = if size' == _size then _alloc else split_point end trim_in_place(split_point) let left = recover if size' 0 then from_cpointer(start_ptr._unsafe(), size', alloc) else create() end end (consume left, consume this) fun is_null_terminated(): Bool = Return true if the string is null-terminated and safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. This method checks that there is a null byte just after the final position of populated bytes in the string, but does not check for other null bytes which may be present earlier in the content of the string. If you need a null-terminated copy of this string, use the clone method. (_alloc 0) and (_alloc != _size) and (_ptr._apply(_size) == 0) fun utf32(offset: ISize): (U32, U8) ? = Return a UTF32 representation of the character at the given offset and the number of bytes needed to encode that character. If the offset does not point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode replacement character) and a length of one. Raise an error if the offset is out of bounds. let i = offset_to_index(offset) let err: (U32, U8) = (0xFFFD, 1) if i = _size then error end let c = _ptr._apply(i) if c 0x80 then // 1-byte (c.u32(), 1) elseif c 0xC2 then // Stray continuation. err elseif c 0xE0 then // 2-byte if (i + 1) = _size then // Not enough bytes. err else let c2 = _ptr._apply(i + 1) if (c2 and 0xC0) != 0x80 then // Not a continuation byte. err else (((c.u32() 6) + c2.u32()) - 0x3080, 2) end end elseif c 0xF0 then // 3-byte. if (i + 2) = _size then // Not enough bytes. err else let c2 = _ptr._apply(i + 1) let c3 = _ptr._apply(i + 2) if // Not continuation bytes. ((c2 and 0xC0) != 0x80) or ((c3 and 0xC0) != 0x80) or // Overlong encoding. ((c == 0xE0) and (c2 0xA0)) then err else (((c.u32() 12) + (c2.u32() 6) + c3.u32()) - 0xE2080, 3) end end elseif c 0xF5 then // 4-byte. if (i + 3) = _size then // Not enough bytes. err else let c2 = _ptr._apply(i + 1) let c3 = _ptr._apply(i + 2) let c4 = _ptr._apply(i + 3) if // Not continuation bytes. ((c2 and 0xC0) != 0x80) or ((c3 and 0xC0) != 0x80) or ((c4 and 0xC0) != 0x80) or // Overlong encoding. ((c == 0xF0) and (c2 0x90)) or // UTF32 would be 0x10FFFF. ((c == 0xF4) and (c2 = 0x90)) then err else (((c.u32() 18) + (c2.u32() 12) + (c3.u32() 6) + c4.u32()) - 0x3C82080, 4) end end else // UTF32 would be 0x10FFFF. err end fun apply(i: USize): U8 ? = Returns the i-th byte. Raise an error if the index is out of bounds. if i _size then _ptr._apply(i) else error end fun ref update(i: USize, value: U8): U8 ? = Change the i-th byte. Raise an error if the index is out of bounds. if i _size then _set(i, value) else error end fun at_offset(offset: ISize): U8 ? = Returns the byte at the given offset. Raise an error if the offset is out of bounds. this(offset_to_index(offset))? fun ref update_offset(offset: ISize, value: U8): U8 ? = Changes a byte in the string, returning the previous byte at that offset. Raise an error if the offset is out of bounds. this(offset_to_index(offset))? = value fun clone(): String iso^ = Returns a copy of the string. The resulting string is null-terminated even if the original is not. let len = _size let str = recover String(len) end _ptr._copy_to(str._ptr._unsafe(), len) str._size = len str._set(len, 0) str fun find(s: String box, offset: ISize = 0, nth: USize = 0): ISize ? = Return the index of the n-th instance of s in the string starting from the beginning. Raise an error if there is no n-th occurrence of s or s is empty. var i = offset_to_index(offset) var steps = nth + 1 while i _size do var j: USize = 0 let same = while j s._size do if _ptr._apply(i + j) != s._ptr._apply(j) then break false end j = j + 1 true else false end if same and ((steps = steps - 1) == 1) then return i.isize() end i = i + 1 end error fun rfind(s: String box, offset: ISize = -1, nth: USize = 0): ISize ? = Return the index of n-th instance of `s` in the string starting from the end. The `offset` represents the highest index to included in the search. Raise an error if there is no n-th occurrence of `s` or `s` is empty. var i = (offset_to_index(offset) + 1) - s._size var steps = nth + 1 while i _size do var j: USize = 0 let same = while j s._size do if _ptr._apply(i + j) != s._ptr._apply(j) then break false end j = j + 1 true else false end if same and ((steps = steps - 1) == 1) then return i.isize() end i = i - 1 end error fun contains(s: String box, offset: ISize = 0, nth: USize = 0): Bool = Returns true if contains s as a substring, false otherwise. var i = offset_to_index(offset) var steps = nth + 1 while i _size do var j: USize = 0 let same = while j s._size do if _ptr._apply(i + j) != s._ptr._apply(j) then break false end j = j + 1 true else false end if same and ((steps = steps - 1) == 1) then return true end i = i + 1 end false fun count(s: String box, offset: ISize = 0): USize = Counts the non-overlapping occurrences of s in the string. let j: ISize = (_size - s.size()).isize() var i: USize = 0 var k = offset if j 0 then return 0 elseif (j == 0) and (this == s) then return 1 end try while k = j do k = find(s, k)? + s.size().isize() i = i + 1 end end i fun at(s: String box, offset: ISize = 0): Bool = Returns true if the substring s is present at the given offset. let i = offset_to_index(offset) if (i + s.size()) = _size then @memcmp(_ptr._offset(i), s._ptr, s._size) == 0 else false end fun ref delete(offset: ISize, len: USize = 1) = Delete len bytes at the supplied offset, compacting the string in place. let i = offset_to_index(offset) if i _size then let n = len.min(_size - i) _size = _size - n _ptr._offset(i)._delete(n, _size - i) _set(_size, 0) end fun substring(from: ISize, to: ISize = ISize.max_value()): String iso^ = Returns a substring. Index range [`from` .. `to`) is half-open. Returns an empty string if nothing is in the range. Note that this operation allocates a new string to be returned. For similar operations that don't allocate a new string, see `trim` and `trim_in_place`. let start = offset_to_index(from) let finish = offset_to_index(to).min(_size) if (start _size) and (start finish) then let len = finish - start let str = recover String(len) end _ptr._offset(start)._copy_to(str._ptr._unsafe(), len) str._size = len str._set(len, 0) str else recover String end end fun lower(): String iso^ = Returns a lower case version of the string. let s = clone() s.lower_in_place() s fun ref lower_in_place() = Transforms the string to lower case. Currently only knows ASCII case. var i: USize = 0 while i _size do let c = _ptr._apply(i) if (c = 0x41) and (c = 0x5A) then _set(i, c + 0x20) end i = i + 1 end fun upper(): String iso^ = Returns an upper case version of the string. Currently only knows ASCII case. let s = clone() s.upper_in_place() s fun ref upper_in_place() = Transforms the string to upper case. var i: USize = 0 while i _size do let c = _ptr._apply(i) if (c = 0x61) and (c = 0x7A) then _set(i, c - 0x20) end i = i + 1 end fun reverse(): String iso^ = Returns a reversed version of the string. let s = clone() s.reverse_in_place() s fun ref reverse_in_place() = Reverses the byte order in the string. This needs to be changed to handle UTF-8 correctly. if _size 1 then var i: USize = 0 var j = _size - 1 while i j do let x = _ptr._apply(i) _set(i, _ptr._apply(j)) _set(j, x) i = i + 1 j = j - 1 end end fun ref push(value: U8) = Add a byte to the end of the string. reserve(_size + 1) _set(_size, value) _size = _size + 1 _set(_size, 0) fun ref pop(): U8 ? = Remove a byte from the end of the string. if _size 0 then _size = _size - 1 _ptr._offset(_size)._delete(1, 0) else error end fun ref unshift(value: U8) = Adds a byte to the beginning of the string. if value != 0 then reserve(_size + 1) @memmove(_ptr.usize() + 1, _ptr.usize(), _size + 1) _set(0, value) _size = _size + 1 else _set(0, 0) _size = 0 end fun ref shift(): U8 ? = Removes a byte from the beginning of the string. if _size 0 then let value = _ptr._apply(0) @memmove(_ptr.usize(), _ptr.usize() + 1, _size) _size = _size - 1 value else error end fun ref append(seq: ReadSeq[U8], offset: USize = 0, len: USize = -1) = Append the elements from a sequence, starting from the given offset. if offset = seq.size() then return end let copy_len = len.min(seq.size() - offset) reserve(_size + copy_len) match seq | let s: (String box | Array[U8] box) = s._copy_to(_ptr, copy_len, offset, _size) _size = _size + copy_len _set(_size, 0) else let cap = copy_len + offset var i = offset try while i cap do push(seq(i)?) i = i + 1 end end end fun ref concat(iter: Iterator[U8], offset: USize = 0, len: USize = -1) = Add len iterated bytes to the end of the string, starting from the given offset. try var n = USize(0) while n offset do if iter.has_next() then iter.next()? else return end n = n + 1 end n = 0 while n len do if iter.has_next() then push(iter.next()?) else return end n = n + 1 end end fun ref clear() = Truncate the string to zero length. _set(0, 0) _size = 0 fun insert(offset: ISize, that: String): String iso^ = Returns a version of the string with the given string inserted at the given offset. let s = clone() s.insert_in_place(offset, that) s fun ref insert_in_place(offset: ISize, that: String box) = Inserts the given string at the given offset. Appends the string if the offset is out of bounds. reserve(_size + that._size) let index = offset_to_index(offset).min(_size) @memmove(_ptr.usize() + index + that._size, _ptr.usize() + index, _size - index) that._ptr._copy_to(_ptr._offset(index), that._size) _size = _size + that._size _set(_size, 0) fun ref insert_byte(offset: ISize, value: U8) = Inserts a byte at the given offset. Appends if the offset is out of bounds. reserve(_size + 1) let index = offset_to_index(offset).min(_size) @memmove(_ptr.usize() + index + 1, _ptr.usize() + index, _size - index) _set(index, value) _size = _size + 1 _set(_size, 0) fun cut(from: ISize, to: ISize = ISize.max_value()): String iso^ = Returns a version of the string with the given range deleted. Index range [`from` .. `to`) is half-open. let s = clone() s.cut_in_place(from, to) s fun ref cut_in_place(from: ISize, to: ISize = ISize.max_value()) = Cuts the given range out of the string. Index range [`from` .. `to`) is half-open. let start = offset_to_index(from) let finish = offset_to_index(to).min(_size) if (start _size) and (start finish) and (finish = _size) then let fragment_len = finish - start let new_size = _size - fragment_len var i = start while i new_size do _set(i, _ptr._apply(i + fragment_len)) i = i + 1 end _size = _size - fragment_len _set(_size, 0) end fun ref remove(s: String box): USize = Remove all instances of s from the string. Returns the count of removed instances. var i: ISize = 0 var n: USize = 0 try while true do i = find(s, i)? cut_in_place(i, i + s.size().isize()) n = n + 1 end end n fun ref replace(from: String box, to: String box, n: USize = 0): USize = Replace up to n occurrences of `from` in `this` with `to`. If n is 0, all occurrences will be replaced. Returns the count of replaced occurrences. let from_len = from.size().isize() let to_len = to.size().isize() var offset = ISize(0) var occur = USize(0) try while true do offset = find(from, offset)? cut_in_place(offset, offset + from_len) insert_in_place(offset, to) offset = offset + to_len occur = occur + 1 if (n 0) and (occur = n) then break end end end occur fun split_by( delim: String, n: USize = USize.max_value()) : Array[String] iso^ = Split the string into an array of strings that are delimited by `delim` in the original string. If `n 0`, then the split count is limited to n. Adjacent delimiters result in a zero length entry in the array. For example, ` 1,,2 .split( , ) = [ 1 , , 2 ]`. An empty delimiter results in an array that contains a single element equal to the whole string. let delim_size = ISize.from[USize](delim.size()) let total_size = ISize.from[USize](size()) let result = recover Array[String] end var current = ISize(0) while ((result.size() + 1) n) and (current total_size) do try let delim_start = find(delim where offset = current)? result.push(substring(current, delim_start)) current = delim_start + delim_size else break end end result.push(substring(current)) consume result fun split(delim: String = \\t\\v\\f\\r\\n , n: USize = 0): Array[String] iso^ = Split the string into an array of strings. Any character in the delimiter string is accepted as a delimiter. If `n 0`, then the split count is limited to n. Adjacent delimiters result in a zero length entry in the array. For example, ` 1,,2 .split( , ) = [ 1 , , 2 ]`. let result = recover Array[String] end if _size 0 then let chars = Array[U32](delim.size()) for rune in delim.runes() do chars.push(rune) end var cur = recover String end var i = USize(0) var occur = USize(0) try while i _size do (let c, let len) = utf32(i.isize())? if chars.contains(c) then // If we find a delimiter, add the current string to the array. occur = occur + 1 if (n 0) and (occur = n) then break end result.push(cur = recover String end) else // Add bytes to the current string. var j = U8(0) while j len do cur.push(_ptr._apply(i + j.usize())) j = j + 1 end end i = i + len.usize() end end // Add all remaining bytes to the current string. while i _size do cur.push(_ptr._apply(i)) i = i + 1 end result.push(consume cur) end consume result fun ref strip(s: String box = \\t\\v\\f\\r\\n ) = Remove all leading and trailing characters from the string that are in s. this . lstrip(s) . rstrip(s) fun ref rstrip(s: String box = \\t\\v\\f\\r\\n ) = Remove all trailing characters within the string that are in s. By default, trailing whitespace is removed. if _size 0 then let chars = Array[U32](s.size()) var i = _size - 1 var truncate_at = _size for rune in s.runes() do chars.push(rune) end repeat try match utf32(i.isize())? | (0xFFFD, 1) = None | (let c: U32, _) = if not chars.contains(c) then break end truncate_at = i end else break end until (i = i - 1) == 0 end truncate(truncate_at) end fun ref lstrip(s: String box = \\t\\v\\f\\r\\n ) = Remove all leading characters within the string that are in s. By default, leading whitespace is removed. if _size 0 then let chars = Array[U32](s.size()) var i = USize(0) for rune in s.runes() do chars.push(rune) end while i _size do try (let c, let len) = utf32(i.isize())? if not chars.contains(c) then break end i = i + len.usize() else break end end if i 0 then delete(0, i) end end fun iso _append(s: String box): String iso^ = let len = _size + s._size reserve(len) if s.is_null_terminated() then s._copy_to(_ptr._unsafe(), s._size + 1, 0, _size) else s._copy_to(_ptr._unsafe(), s._size, 0, _size) end _size = len consume this fun add(that: String box): String = Return a string that is a concatenation of this and that. let len = _size + that._size let s = recover String(len) end (consume s)._append(this)._append(that) fun join(data: Iterator[Stringable]): String iso^ = Return a string that is a concatenation of the strings in data, using this as a separator. var buf = recover String end var first = true for v in data do if first then first = false else buf = (consume buf)._append(this) end buf.append(v.string()) end buf fun compare(that: String box): Compare = Lexically compare two strings. compare_sub(that, _size.max(that._size)) fun compare_sub( that: String box, n: USize, offset: ISize = 0, that_offset: ISize = 0, ignore_case: Bool = false) : Compare = Lexically compare at most `n` bytes of the substring of `this` starting at `offset` with the substring of `that` starting at `that_offset`. The comparison is case sensitive unless `ignore_case` is `true`. If the substring of `this` is a proper prefix of the substring of `that`, then `this` is `Less` than `that`. Likewise, if `that` is a proper prefix of `this`, then `this` is `Greater` than `that`. Both `offset` and `that_offset` can be negative, in which case the offsets are computed from the end of the string. If `n + offset` is greater than the length of `this`, or `n + that_offset` is greater than the length of `that`, then the number of positions compared will be reduced to the length of the longest substring. Needs to be made UTF-8 safe. var j: USize = offset_to_index(offset) var k: USize = that.offset_to_index(that_offset) var i = n.min((_size - j).max(that._size - k)) while i 0 do // this and that are equal up to this point if j = _size then // this is shorter return Less elseif k = that._size then // that is shorter return Greater end let c1 = _ptr._apply(j) let c2 = that._ptr._apply(k) if not ((c1 == c2) or (ignore_case and ((c1 or 0x20) == (c2 or 0x20)) and ((c1 or 0x20) = 'a') and ((c1 or 0x20) = 'z'))) then // this and that differ here return if c1.i32() c2.i32() then Greater else Less end end j = j + 1 k = k + 1 i = i - 1 end Equal fun eq(that: String box): Bool = Returns true if the two strings have the same contents. if _size == that._size then @memcmp(_ptr, that._ptr, _size) == 0 else false end fun lt(that: String box): Bool = Returns true if this is lexically less than that. Needs to be made UTF-8 safe. let len = _size.min(that._size) var i: USize = 0 while i len do if _ptr._apply(i) that._ptr._apply(i) then return true elseif _ptr._apply(i) that._ptr._apply(i) then return false end i = i + 1 end _size that._size fun le(that: String box): Bool = Returns true if this is lexically less than or equal to that. Needs to be made UTF-8 safe. let len = _size.min(that._size) var i: USize = 0 while i len do if _ptr._apply(i) that._ptr._apply(i) then return true elseif _ptr._apply(i) that._ptr._apply(i) then return false end i = i + 1 end _size = that._size fun offset_to_index(i: ISize): USize = if i 0 then i.usize() + _size else i.usize() end fun bool(): Bool ? = match lower() | true = true | false = false else error end fun i8(base: U8 = 0): I8 ? = _to_int[I8](base)? fun i16(base: U8 = 0): I16 ? = _to_int[I16](base)? fun i32(base: U8 = 0): I32 ? = _to_int[I32](base)? fun i64(base: U8 = 0): I64 ? = _to_int[I64](base)? fun i128(base: U8 = 0): I128 ? = _to_int[I128](base)? fun ilong(base: U8 = 0): ILong ? = _to_int[ILong](base)? fun isize(base: U8 = 0): ISize ? = _to_int[ISize](base)? fun u8(base: U8 = 0): U8 ? = _to_int[U8](base)? fun u16(base: U8 = 0): U16 ? = _to_int[U16](base)? fun u32(base: U8 = 0): U32 ? = _to_int[U32](base)? fun u64(base: U8 = 0): U64 ? = _to_int[U64](base)? fun u128(base: U8 = 0): U128 ? = _to_int[U128](base)? fun ulong(base: U8 = 0): ULong ? = _to_int[ULong](base)? fun usize(base: U8 = 0): USize ? = _to_int[USize](base)? fun _to_int[A: ((Signed | Unsigned) Integer[A] val)](base: U8): A ? = Convert the *whole* string to the specified type. If there are any other characters in the string, or the integer found is out of range for the target type then an error is thrown. (let v, let d) = read_int[A](0, base)? // Check the whole string is used if (d == 0) or (d.usize() != _size) then error end v fun read_int[A: ((Signed | Unsigned) Integer[A] val)]( offset: ISize = 0, base: U8 = 0) : (A, USize /* chars used */) ? = Read an integer from the specified location in this string. The integer value read and the number of characters consumed are reported. The base parameter specifies the base to use, 0 indicates using the prefix, if any, to detect base 2, 10 or 16. If no integer is found at the specified location, then (0, 0) is returned, since no characters have been used. An integer out of range for the target type throws an error. A leading minus is allowed for signed integer types. Underscore characters are allowed throughout the integer and are ignored. let start_index = offset_to_index(offset) var index = start_index var value: A = 0 var had_digit = false // Check for leading minus let minus = (index _size) and (_ptr._apply(index) == '-') if minus then if A(-1) A(0) then // We're reading an unsigned type, negative not allowed, int not found return (0, 0) end index = index + 1 end (let base', let base_chars) = _read_int_base[A](base, index) index = index + base_chars // Process characters while index _size do let char: A = A(0).from[U8](_ptr._apply(index)) if char == '_' then index = index + 1 continue end let digit = if (char = '0') and (char = '9') then char - '0' elseif (char = 'A') and (char = 'Z') then (char - 'A') + 10 elseif (char = 'a') and (char = 'z') then (char - 'a') + 10 else break end if digit = base' then break end let new_value: A = if minus then (value * base') - digit else (value * base') + digit end if (new_value / base') != value then // Overflow error end value = new_value had_digit = true index = index + 1 end // Check result if not had_digit then // No integer found return (0, 0) end // Success (value, index - start_index) fun _read_int_base[A: ((Signed | Unsigned) Integer[A] val)]( base: U8, index: USize) : (A, USize /* chars used */) = Determine the base of an integer starting at the specified index. If a non-0 base is given use that. If given base is 0 read the base specifying prefix, if any, to detect base 2 or 16. If no base is specified and no prefix is found default to decimal. Note that a leading 0 does NOT imply octal. Report the base found and the number of characters in the prefix. if base 0 then return (A(0).from[U8](base), 0) end // Determine base from prefix if (index + 2) = _size then // Not enough characters, must be decimal return (10, 0) end let lead_char = _ptr._apply(index) let base_char = _ptr._apply(index + 1) and not 0x20 if (lead_char == '0') and (base_char == 'B') then return (2, 2) end if (lead_char == '0') and (base_char == 'X') then return (16, 2) end // No base specified, default to decimal (10, 0) fun f32(offset: ISize = 0): F32 = let index = offset_to_index(offset) if index _size then @strtof(_ptr._offset(index), 0) else F32(0) end fun f64(offset: ISize = 0): F64 = let index = offset_to_index(offset) if index _size then @strtod(_ptr._offset(index), 0) else F64(0) end fun hash(): USize = @ponyint_hash_block[USize](_ptr, _size) fun hash64(): U64 = @ponyint_hash_block64[U64](_ptr, _size) fun string(): String iso^ = clone() fun values(): StringBytes^ = Return an iterator over the bytes in the string. StringBytes(this) fun runes(): StringRunes^ = Return an iterator over the codepoints in the string. StringRunes(this) fun ref _set(i: USize, value: U8): U8 = Unsafe update, used internally. _ptr._update(i, value) class StringBytes is Iterator[U8] let _string: String box var _i: USize new create(string: String box) = _string = string _i = 0 fun has_next(): Bool = _i _string.size() fun ref next(): U8 ? = _string(_i = _i + 1)? class StringRunes is Iterator[U32] let _string: String box var _i: USize new create(string: String box) = _string = string _i = 0 fun has_next(): Bool = _i _string.size() fun ref next(): U32 ? = (let rune, let len) = _string.utf32(_i.isize())? _i = _i + len.usize() rune primitive _UTF32Encoder fun encode(value: U32): (USize, U8, U8, U8, U8) = Encode the code point into UTF-8. It returns a tuple with the size of the encoded data and then the data. if value 0x80 then (1, value.u8(), 0, 0, 0) elseif value 0x800 then ( 2, ((value 6) or 0xC0).u8(), ((value and 0x3F) or 0x80).u8(), 0, 0 ) elseif value 0xD800 then ( 3, ((value 12) or 0xE0).u8(), (((value 6) and 0x3F) or 0x80).u8(), ((value and 0x3F) or 0x80).u8(), 0 ) elseif value 0xE000 then // UTF-16 surrogate pairs are not allowed. (3, 0xEF, 0xBF, 0xBD, 0) elseif value 0x10000 then ( 3, ((value 12) or 0xE0).u8(), (((value 6) and 0x3F) or 0x80).u8(), ((value and 0x3F) or 0x80).u8(), 0 ) elseif value 0x110000 then ( 4, ((value 18) or 0xF0).u8(), (((value 12) and 0x3F) or 0x80).u8(), (((value 6) and 0x3F) or 0x80).u8(), ((value and 0x3F) or 0x80).u8() ) else // Code points beyond 0x10FFFF are not allowed. (3, 0xEF, 0xBF, 0xBD, 0) end","title":"string.pony"},{"location":"src/builtin/stringable/","text":"interface box Stringable Things that can be turned into a String. fun string(): String iso^ Generate a string representation of this object.","title":"stringable.pony"},{"location":"src/builtin/unsigned/","text":"primitive U8 is _UnsignedInteger[U8] new create(value: U8) = value new from[B: (Number Real[B] val)](a: B) = a.u8() new min_value() = 0 new max_value() = 0xFF fun next_pow2(): U8 = let x = (this - 1).clz() 1 (if x == 0 then 0 else bitwidth() - x end) fun abs(): U8 = this fun bit_reverse(): U8 = @ llvm.bitreverse.i8 [U8](this) fun bswap(): U8 = this fun popcount(): U8 = @ llvm.ctpop.i8 [U8](this) fun clz(): U8 = @ llvm.ctlz.i8 [U8](this, false) fun ctz(): U8 = @ llvm.cttz.i8 [U8](this, false) fun clz_unsafe(): U8 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i8 [U8](this, true) fun ctz_unsafe(): U8 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i8 [U8](this, true) fun bitwidth(): U8 = 8 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: U8): U8 = if this y then this else y end fun max(y: U8): U8 = if this y then this else y end fun addc(y: U8): (U8, Bool) = @ llvm.uadd.with.overflow.i8 [(U8, Bool)](this, y) fun subc(y: U8): (U8, Bool) = @ llvm.usub.with.overflow.i8 [(U8, Bool)](this, y) fun mulc(y: U8): (U8, Bool) = @ llvm.umul.with.overflow.i8 [(U8, Bool)](this, y) fun divc(y: U8): (U8, Bool) = _UnsignedPartialArithmetic.div_checked[U8](this, y) fun remc(y: U8): (U8, Bool) = _UnsignedPartialArithmetic.rem_checked[U8](this, y) fun add_partial(y: U8): U8 ? = _UnsignedPartialArithmetic.add_partial[U8](this, y)? fun sub_partial(y: U8): U8 ? = _UnsignedPartialArithmetic.sub_partial[U8](this, y)? fun mul_partial(y: U8): U8 ? = _UnsignedPartialArithmetic.mul_partial[U8](this, y)? fun div_partial(y: U8): U8 ? = _UnsignedPartialArithmetic.div_partial[U8](this, y)? fun rem_partial(y: U8): U8 ? = _UnsignedPartialArithmetic.rem_partial[U8](this, y)? fun divrem_partial(y: U8): (U8, U8) ? = _UnsignedPartialArithmetic.divrem_partial[U8](this, y)? primitive U16 is _UnsignedInteger[U16] new create(value: U16) = value new from[A: (Number Real[A] val)](a: A) = a.u16() new min_value() = 0 new max_value() = 0xFFFF fun next_pow2(): U16 = let x = (this - 1).clz() 1 (if x == 0 then 0 else bitwidth() - x end) fun abs(): U16 = this fun bit_reverse(): U16 = @ llvm.bitreverse.i16 [U16](this) fun bswap(): U16 = @ llvm.bswap.i16 [U16](this) fun popcount(): U16 = @ llvm.ctpop.i16 [U16](this) fun clz(): U16 = @ llvm.ctlz.i16 [U16](this, false) fun ctz(): U16 = @ llvm.cttz.i16 [U16](this, false) fun clz_unsafe(): U16 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i16 [U16](this, true) fun ctz_unsafe(): U16 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i16 [U16](this, true) fun bitwidth(): U16 = 16 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: U16): U16 = if this y then this else y end fun max(y: U16): U16 = if this y then this else y end fun addc(y: U16): (U16, Bool) = @ llvm.uadd.with.overflow.i16 [(U16, Bool)](this, y) fun subc(y: U16): (U16, Bool) = @ llvm.usub.with.overflow.i16 [(U16, Bool)](this, y) fun mulc(y: U16): (U16, Bool) = @ llvm.umul.with.overflow.i16 [(U16, Bool)](this, y) fun divc(y: U16): (U16, Bool) = _UnsignedPartialArithmetic.div_checked[U16](this, y) fun remc(y: U16): (U16, Bool) = _UnsignedPartialArithmetic.rem_checked[U16](this, y) fun add_partial(y: U16): U16 ? = _UnsignedPartialArithmetic.add_partial[U16](this, y)? fun sub_partial(y: U16): U16 ? = _UnsignedPartialArithmetic.sub_partial[U16](this, y)? fun mul_partial(y: U16): U16 ? = _UnsignedPartialArithmetic.mul_partial[U16](this, y)? fun div_partial(y: U16): U16 ? = _UnsignedPartialArithmetic.div_partial[U16](this, y)? fun rem_partial(y: U16): U16 ? = _UnsignedPartialArithmetic.rem_partial[U16](this, y)? fun divrem_partial(y: U16): (U16, U16) ? = _UnsignedPartialArithmetic.divrem_partial[U16](this, y)? primitive U32 is _UnsignedInteger[U32] new create(value: U32) = value new from[A: (Number Real[A] val)](a: A) = a.u32() new min_value() = 0 new max_value() = 0xFFFF_FFFF fun next_pow2(): U32 = let x = (this - 1).clz() 1 (if x == 0 then 0 else bitwidth() - x end) fun abs(): U32 = this fun bit_reverse(): U32 = @ llvm.bitreverse.i32 [U32](this) fun bswap(): U32 = @ llvm.bswap.i32 [U32](this) fun popcount(): U32 = @ llvm.ctpop.i32 [U32](this) fun clz(): U32 = @ llvm.ctlz.i32 [U32](this, false) fun ctz(): U32 = @ llvm.cttz.i32 [U32](this, false) fun clz_unsafe(): U32 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i32 [U32](this, true) fun ctz_unsafe(): U32 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i32 [U32](this, true) fun bitwidth(): U32 = 32 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: U32): U32 = if this y then this else y end fun max(y: U32): U32 = if this y then this else y end fun addc(y: U32): (U32, Bool) = @ llvm.uadd.with.overflow.i32 [(U32, Bool)](this, y) fun subc(y: U32): (U32, Bool) = @ llvm.usub.with.overflow.i32 [(U32, Bool)](this, y) fun mulc(y: U32): (U32, Bool) = @ llvm.umul.with.overflow.i32 [(U32, Bool)](this, y) fun divc(y: U32): (U32, Bool) = _UnsignedPartialArithmetic.div_checked[U32](this, y) fun remc(y: U32): (U32, Bool) = _UnsignedPartialArithmetic.rem_checked[U32](this, y) fun add_partial(y: U32): U32 ? = _UnsignedPartialArithmetic.add_partial[U32](this, y)? fun sub_partial(y: U32): U32 ? = _UnsignedPartialArithmetic.sub_partial[U32](this, y)? fun mul_partial(y: U32): U32 ? = _UnsignedPartialArithmetic.mul_partial[U32](this, y)? fun div_partial(y: U32): U32 ? = _UnsignedPartialArithmetic.div_partial[U32](this, y)? fun rem_partial(y: U32): U32 ? = _UnsignedPartialArithmetic.rem_partial[U32](this, y)? fun divrem_partial(y: U32): (U32, U32) ? = _UnsignedPartialArithmetic.divrem_partial[U32](this, y)? primitive U64 is _UnsignedInteger[U64] new create(value: U64) = value new from[A: (Number Real[A] val)](a: A) = a.u64() new min_value() = 0 new max_value() = 0xFFFF_FFFF_FFFF_FFFF fun next_pow2(): U64 = let x = (this - 1).clz() 1 (if x == 0 then 0 else bitwidth() - x end) fun abs(): U64 = this fun bit_reverse(): U64 = @ llvm.bitreverse.i64 [U64](this) fun bswap(): U64 = @ llvm.bswap.i64 [U64](this) fun popcount(): U64 = @ llvm.ctpop.i64 [U64](this) fun clz(): U64 = @ llvm.ctlz.i64 [U64](this, false) fun ctz(): U64 = @ llvm.cttz.i64 [U64](this, false) fun clz_unsafe(): U64 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i64 [U64](this, true) fun ctz_unsafe(): U64 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i64 [U64](this, true) fun bitwidth(): U64 = 64 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: U64): U64 = if this y then this else y end fun max(y: U64): U64 = if this y then this else y end fun hash(): USize = ifdef ilp32 then ((this 32).u32() xor this.u32()).hash() else usize().hash() end fun addc(y: U64): (U64, Bool) = @ llvm.uadd.with.overflow.i64 [(U64, Bool)](this, y) fun subc(y: U64): (U64, Bool) = @ llvm.usub.with.overflow.i64 [(U64, Bool)](this, y) fun mulc(y: U64): (U64, Bool) = @ llvm.umul.with.overflow.i64 [(U64, Bool)](this, y) fun divc(y: U64): (U64, Bool) = _UnsignedPartialArithmetic.div_checked[U64](this, y) fun remc(y: U64): (U64, Bool) = _UnsignedPartialArithmetic.rem_checked[U64](this, y) fun add_partial(y: U64): U64 ? = _UnsignedPartialArithmetic.add_partial[U64](this, y)? fun sub_partial(y: U64): U64 ? = _UnsignedPartialArithmetic.sub_partial[U64](this, y)? fun mul_partial(y: U64): U64 ? = _UnsignedPartialArithmetic.mul_partial[U64](this, y)? fun div_partial(y: U64): U64 ? = _UnsignedPartialArithmetic.div_partial[U64](this, y)? fun rem_partial(y: U64): U64 ? = _UnsignedPartialArithmetic.rem_partial[U64](this, y)? fun divrem_partial(y: U64): (U64, U64) ? = _UnsignedPartialArithmetic.divrem_partial[U64](this, y)? primitive ULong is _UnsignedInteger[ULong] new create(value: ULong) = value new from[A: (Number Real[A] val)](a: A) = a.ulong() new min_value() = 0 new max_value() = ifdef ilp32 or llp64 then 0xFFFF_FFFF else 0xFFFF_FFFF_FFFF_FFFF end fun next_pow2(): ULong = let x = (this - 1).clz() 1 (if x == 0 then 0 else bitwidth() - x end) fun abs(): ULong = this fun bit_reverse(): ULong = ifdef ilp32 or llp64 then @ llvm.bitreverse.i32 [ULong](this) else @ llvm.bitreverse.i64 [ULong](this) end fun bswap(): ULong = ifdef ilp32 or llp64 then @ llvm.bswap.i32 [ULong](this) else @ llvm.bswap.i64 [ULong](this) end fun popcount(): ULong = ifdef ilp32 or llp64 then @ llvm.ctpop.i32 [ULong](this) else @ llvm.ctpop.i64 [ULong](this) end fun clz(): ULong = ifdef ilp32 or llp64 then @ llvm.ctlz.i32 [ULong](this, false) else @ llvm.ctlz.i64 [ULong](this, false) end fun ctz(): ULong = ifdef ilp32 or llp64 then @ llvm.cttz.i32 [ULong](this, false) else @ llvm.cttz.i64 [ULong](this, false) end fun clz_unsafe(): ULong = Unsafe operation. If this is 0, the result is undefined. ifdef ilp32 or llp64 then @ llvm.ctlz.i32 [ULong](this, true) else @ llvm.ctlz.i64 [ULong](this, true) end fun ctz_unsafe(): ULong = Unsafe operation. If this is 0, the result is undefined. ifdef ilp32 or llp64 then @ llvm.cttz.i32 [ULong](this, false) else @ llvm.cttz.i64 [ULong](this, true) end fun bitwidth(): ULong = ifdef ilp32 or llp64 then 32 else 64 end fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: ULong): ULong = if this y then this else y end fun max(y: ULong): ULong = if this y then this else y end fun hash(): USize = ifdef ilp32 or llp64 then u32().hash() else u64().hash() end fun addc(y: ULong): (ULong, Bool) = ifdef ilp32 or llp64 then @ llvm.uadd.with.overflow.i32 [(ULong, Bool)](this, y) else @ llvm.uadd.with.overflow.i64 [(ULong, Bool)](this, y) end fun subc(y: ULong): (ULong, Bool) = ifdef ilp32 or llp64 then @ llvm.usub.with.overflow.i32 [(ULong, Bool)](this, y) else @ llvm.usub.with.overflow.i64 [(ULong, Bool)](this, y) end fun mulc(y: ULong): (ULong, Bool) = ifdef ilp32 or llp64 then @ llvm.umul.with.overflow.i32 [(ULong, Bool)](this, y) else @ llvm.umul.with.overflow.i64 [(ULong, Bool)](this, y) end fun divc(y: ULong): (ULong, Bool) = _UnsignedPartialArithmetic.div_checked[ULong](this, y) fun remc(y: ULong): (ULong, Bool) = _UnsignedPartialArithmetic.rem_checked[ULong](this, y) fun add_partial(y: ULong): ULong ? = _UnsignedPartialArithmetic.add_partial[ULong](this, y)? fun sub_partial(y: ULong): ULong ? = _UnsignedPartialArithmetic.sub_partial[ULong](this, y)? fun mul_partial(y: ULong): ULong ? = _UnsignedPartialArithmetic.mul_partial[ULong](this, y)? fun div_partial(y: ULong): ULong ? = _UnsignedPartialArithmetic.div_partial[ULong](this, y)? fun rem_partial(y: ULong): ULong ? = _UnsignedPartialArithmetic.rem_partial[ULong](this, y)? fun divrem_partial(y: ULong): (ULong, ULong) ? = _UnsignedPartialArithmetic.divrem_partial[ULong](this, y)? primitive USize is _UnsignedInteger[USize] new create(value: USize) = value new from[A: (Number Real[A] val)](a: A) = a.usize() new min_value() = 0 new max_value() = ifdef ilp32 then 0xFFFF_FFFF else 0xFFFF_FFFF_FFFF_FFFF end fun next_pow2(): USize = let x = (this - 1).clz() 1 (if x == 0 then 0 else bitwidth() - x end) fun abs(): USize = this fun bit_reverse(): USize = ifdef ilp32 then @ llvm.bitreverse.i32 [USize](this) else @ llvm.bitreverse.i64 [USize](this) end fun bswap(): USize = ifdef ilp32 then @ llvm.bswap.i32 [USize](this) else @ llvm.bswap.i64 [USize](this) end fun popcount(): USize = ifdef ilp32 then @ llvm.ctpop.i32 [USize](this) else @ llvm.ctpop.i64 [USize](this) end fun clz(): USize = ifdef ilp32 then @ llvm.ctlz.i32 [USize](this, false) else @ llvm.ctlz.i64 [USize](this, false) end fun ctz(): USize = ifdef ilp32 then @ llvm.cttz.i32 [USize](this, false) else @ llvm.cttz.i64 [USize](this, false) end fun clz_unsafe(): USize = Unsafe operation. If this is 0, the result is undefined. ifdef ilp32 then @ llvm.ctlz.i32 [USize](this, true) else @ llvm.ctlz.i64 [USize](this, true) end fun ctz_unsafe(): USize = Unsafe operation. If this is 0, the result is undefined. ifdef ilp32 then @ llvm.cttz.i32 [USize](this, true) else @ llvm.cttz.i64 [USize](this, true) end fun bitwidth(): USize = ifdef ilp32 then 32 else 64 end fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: USize): USize = if this y then this else y end fun max(y: USize): USize = if this y then this else y end fun addc(y: USize): (USize, Bool) = ifdef ilp32 then @ llvm.uadd.with.overflow.i32 [(USize, Bool)](this, y) else @ llvm.uadd.with.overflow.i64 [(USize, Bool)](this, y) end fun subc(y: USize): (USize, Bool) = ifdef ilp32 then @ llvm.usub.with.overflow.i32 [(USize, Bool)](this, y) else @ llvm.usub.with.overflow.i64 [(USize, Bool)](this, y) end fun mulc(y: USize): (USize, Bool) = ifdef ilp32 then @ llvm.umul.with.overflow.i32 [(USize, Bool)](this, y) else @ llvm.umul.with.overflow.i64 [(USize, Bool)](this, y) end fun divc(y: USize): (USize, Bool) = _UnsignedPartialArithmetic.div_checked[USize](this, y) fun remc(y: USize): (USize, Bool) = _UnsignedPartialArithmetic.rem_checked[USize](this, y) fun add_partial(y: USize): USize ? = _UnsignedPartialArithmetic.add_partial[USize](this, y)? fun sub_partial(y: USize): USize ? = _UnsignedPartialArithmetic.sub_partial[USize](this, y)? fun mul_partial(y: USize): USize ? = _UnsignedPartialArithmetic.mul_partial[USize](this, y)? fun div_partial(y: USize): USize ? = _UnsignedPartialArithmetic.div_partial[USize](this, y)? fun rem_partial(y: USize): USize ? = _UnsignedPartialArithmetic.rem_partial[USize](this, y)? fun divrem_partial(y: USize): (USize, USize) ? = _UnsignedPartialArithmetic.divrem_partial[USize](this, y)? primitive U128 is _UnsignedInteger[U128] new create(value: U128) = value new from[A: (Number Real[A] val)](a: A) = a.u128() new min_value() = 0 new max_value() = 0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF fun next_pow2(): U128 = let x = (this - 1).clz() 1 (if x == 0 then 0 else bitwidth() - x end) fun abs(): U128 = this fun bit_reverse(): U128 = @ llvm.bitreverse.i128 [U128](this) fun bswap(): U128 = @ llvm.bswap.i128 [U128](this) fun popcount(): U128 = @ llvm.ctpop.i128 [U128](this) fun clz(): U128 = @ llvm.ctlz.i128 [U128](this, false) fun ctz(): U128 = @ llvm.cttz.i128 [U128](this, false) fun clz_unsafe(): U128 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i128 [U128](this, true) fun ctz_unsafe(): U128 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i128 [U128](this, true) fun bitwidth(): U128 = 128 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: U128): U128 = if this y then this else y end fun max(y: U128): U128 = if this y then this else y end fun hash(): USize = ifdef ilp32 then ((this 96).u32() xor (this 64).u32() xor (this 32).u32() xor this.u32()).hash() else ((this 64).u64() xor this.u64()).hash() end fun hash64(): U64 = ((this 64).u64() xor this.u64()).hash64() fun string(): String iso^ = _ToString._u128(this, false) fun mul(y: U128): U128 = ifdef native128 then this * y else let x_hi = (this 64).u64() let x_lo = this.u64() let y_hi = (y 64).u64() let y_lo = y.u64() let mask = U64(0x00000000FFFFFFFF) var lo = (x_lo and mask) * (y_lo and mask) var t = lo 32 lo = lo and mask t = t + ((x_lo 32) * (y_lo and mask)) lo = lo + ((t and mask) 32) var hi = t 32 t = lo 32 lo = lo and mask t = t + ((y_lo 32) * (x_lo and mask)) lo = lo + ((t and mask) 32) hi = hi + (t 32) hi = hi + ((x_lo 32) * (y_lo 32)) hi = hi + (x_hi * y_lo) + (x_lo * y_hi) (hi.u128() 64) or lo.u128() end fun divrem(y: U128): (U128, U128) = ifdef native128 then (this / y, this % y) else if y == 0 then return (0, 0) end var quot: U128 = 0 var qbit: U128 = 1 var num = this var den = y while den.i128() = 0 do den = den 1 qbit = qbit 1 end while qbit != 0 do if den = num then num = num - den quot = quot + qbit end den = den 1 qbit = qbit 1 end (quot, num) end fun div(y: U128): U128 = ifdef native128 then this / y else (let q, let r) = divrem(y) q end fun rem(y: U128): U128 = ifdef native128 then this % y else (let q, let r) = divrem(y) r end fun mul_unsafe(y: U128): U128 = Unsafe operation. If the operation overflows, the result is undefined. ifdef native128 then this *~ y else this * y end fun divrem_unsafe(y: U128): (U128, U128) = Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. ifdef native128 then (this *~ y, this /~ y) else divrem(y) end fun div_unsafe(y: U128): U128 = Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. ifdef native128 then this /~ y else this / y end fun rem_unsafe(y: U128): U128 = Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. ifdef native128 then this %~ y else this % y end fun f32(): F32 = let v = f64() if v F32.max_value().f64() then F32._inf(false) else v.f32() end fun f64(): F64 = if this == 0 then return 0 end var a = this let sd = bitwidth() - clz() var e = (sd - 1).u64() if sd 53 then match sd | 54 = a = a 1 | 55 = None else a = (a (sd - 55)) or if (a and (-1 ((bitwidth() + 55) - sd))) != 0 then 1 else 0 end end if (a and 4) != 0 then a = a or 1 end a = (a + 1) 2 if (a and (1 53)) != 0 then a = a 1 e = e + 1 end else a = a (53 - sd) end F64.from_bits(((e + 1023) 52) or (a.u64() and 0xF_FFFF_FFFF_FFFF)) fun f32_unsafe(): F32 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. f64_unsafe().f32_unsafe() fun f64_unsafe(): F64 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. f64() fun addc(y: U128): (U128, Bool) = ifdef native128 then @ llvm.uadd.with.overflow.i128 [(U128, Bool)](this, y) else let overflow = this (max_value() - y) (this + y, overflow) end fun subc(y: U128): (U128, Bool) = ifdef native128 then @ llvm.usub.with.overflow.i128 [(U128, Bool)](this, y) else let overflow = this y (this - y, overflow) end fun mulc(y: U128): (U128, Bool) = ifdef native128 then @ llvm.umul.with.overflow.i128 [(U128, Bool)](this, y) else let result = this * y let overflow = (this != 0) and ((result / this) != y) (result, overflow) end fun divc(y: U128): (U128, Bool) = _UnsignedPartialArithmetic.div_checked[U128](this, y) fun remc(y: U128): (U128, Bool) = _UnsignedPartialArithmetic.rem_checked[U128](this, y) fun add_partial(y: U128): U128 ? = _UnsignedPartialArithmetic.add_partial[U128](this, y)? fun sub_partial(y: U128): U128 ? = _UnsignedPartialArithmetic.sub_partial[U128](this, y)? fun mul_partial(y: U128): U128 ? = _UnsignedPartialArithmetic.mul_partial[U128](this, y)? fun div_partial(y: U128): U128 ? = _UnsignedPartialArithmetic.div_partial[U128](this, y)? fun rem_partial(y: U128): U128 ? = _UnsignedPartialArithmetic.rem_partial[U128](this, y)? fun divrem_partial(y: U128): (U128, U128) ? = _UnsignedPartialArithmetic.divrem_partial[U128](this, y)? type Unsigned is (U8 | U16 | U32 | U64 | U128 | ULong | USize)","title":"unsigned.pony"},{"location":"src/capsicum/cap/","text":"primitive Cap The Capsicum rights. fun enter(): Bool = This places the current process into capability mode, a mode of execution in which processes may only issue system calls operating on file descriptors or reading limited global system state. Access to global name spaces, such as file system or IPC name spaces, is prevented. ifdef freebsd or capsicum then @cap_enter[I32]() == 0 else false end fun read(): U64 = _id(0, 1 0) fun write(): U64 = _id(0, 1 1) fun seek_tell(): U64 = _id(0, 1 2) fun seek(): U64 = _id(0, 1 3) or seek_tell() fun pread(): U64 = seek() or read() fun pwrite(): U64 = seek() or write() fun mmap(): U64 = _id(0, 1 4) fun mmap_r(): U64 = mmap() or seek() or read() fun mmap_w(): U64 = mmap() or seek() or write() fun mmap_x(): U64 = mmap() or seek() or _id(0, 1 5) fun mmap_rw(): U64 = mmap_r() or mmap_w() fun mmap_rx(): U64 = mmap_r() or mmap_x() fun mmap_wx(): U64 = mmap_w() or mmap_x() fun mmap_rwx(): U64 = mmap_r() or mmap_w() or mmap_x() fun creat(): U64 = _id(0, 1 6) fun fexecve(): U64 = _id(0, 1 7) fun fsync(): U64 = _id(0, 1 8) fun ftruncate(): U64 = _id(0, 1 9) fun lookup(): U64 = _id(0, 1 10) fun fchdir(): U64 = _id(0, 1 11) fun fchflags(): U64 = _id(0, 1 12) fun chflagsat(): U64 = fchflags() or lookup() fun fchmod(): U64 = _id(0, 1 13) fun fchmodat(): U64 = fchmod() or lookup() fun fchown(): U64 = _id(0, 1 14) fun fchownat(): U64 = fchown() or lookup() fun fcntl(): U64 = _id(0, 1 15) fun flock(): U64 = _id(0, 1 16) fun fpathconf(): U64 = _id(0, 1 17) fun fsck(): U64 = _id(0, 1 18) fun fstat(): U64 = _id(0, 1 19) fun fstatat(): U64 = fstat() or lookup() fun fstatfs(): U64 = _id(0, 1 20) fun futimes(): U64 = _id(0, 1 21) fun futimesat(): U64 = futimes() or lookup() fun linkat(): U64 = _id(0, 1 22) or lookup() fun mkdirat(): U64 = _id(0, 1 23) or lookup() fun mkfifoat(): U64 = _id(0, 1 24) or lookup() fun mknodat(): U64 = _id(0, 1 25) or lookup() fun renameat(): U64 = _id(0, 1 26) or lookup() fun symlinkat(): U64 = _id(0, 1 27) or lookup() fun unlinkat(): U64 = _id(0, 1 28) or lookup() fun accept(): U64 = _id(0, 1 29) fun bind(): U64 = _id(0, 1 30) fun connect(): U64 = _id(0, 1 31) fun getpeername(): U64 = _id(0, 1 32) fun getsockname(): U64 = _id(0, 1 33) fun getsockopt(): U64 = _id(0, 1 34) fun listen(): U64 = _id(0, 1 35) fun peeloff(): U64 = _id(0, 1 36) fun recv(): U64 = read() fun send(): U64 = write() fun setsockopt(): U64 = _id(0, 1 37) fun shutdown(): U64 = _id(0, 1 38) fun bindat(): U64 = _id(0, 1 39) or lookup() fun connectat(): U64 = _id(0, 1 40) or lookup() fun sock_client(): U64 = connect() or getpeername() or getsockname() or getsockopt() or peeloff() or recv() or send() or setsockopt() or shutdown() fun sock_server(): U64 = accept() or bind() or getpeername() or getsockname() or getsockopt() or listen() or peeloff() or recv() or send() or setsockopt() or shutdown() fun mac_get(): U64 = _id(1, 1 0) fun mac_set(): U64 = _id(1, 1 1) fun sem_getvalue(): U64 = _id(1, 1 2) fun sem_post(): U64 = _id(1, 1 3) fun sem_wait(): U64 = _id(1, 1 4) fun event(): U64 = _id(1, 1 5) fun kqueue_event(): U64 = _id(1, 1 6) fun ioctl(): U64 = _id(1, 1 7) fun ttyhook(): U64 = _id(1, 1 8) fun pdgetpid(): U64 = _id(1, 1 9) fun pdwait(): U64 = _id(1, 1 10) fun pdkill(): U64 = _id(1, 1 11) fun exattr_delete(): U64 = _id(1, 1 12) fun exattr_get(): U64 = _id(1, 1 13) fun exattr_list(): U64 = _id(1, 1 14) fun exattr_set(): U64 = _id(1, 1 15) fun acl_check(): U64 = _id(1, 1 16) fun acl_delete(): U64 = _id(1, 1 17) fun acl_get(): U64 = _id(1, 1 18) fun acl_set(): U64 = _id(1, 1 19) fun kqueue_change(): U64 = _id(1, 1 20) fun kqueue(): U64 = kqueue_event() or kqueue_change() fun _id(idx: U64, bit: U64): U64 = Build a Capsicum ID from an index and a bit position. (1 (57 + idx)) or bit","title":"cap.pony"},{"location":"src/capsicum/cap_rights/","text":"use files type CapRights is CapRights0 class CapRights0 Version 0 of the capsicum cap_rights_t structure. var _r0: U64 = 0 var _r1: U64 = 0 new create() = Initialises with no rights. clear() new from(caps: FileCaps box) = Initialises with the rights from a FileCaps. clear() if caps(FileCreate) then set(Cap.creat()) end if caps(FileChmod) then set(Cap.fchmod()) end if caps(FileChown) then set(Cap.fchown()) end if caps(FileLink) then set(Cap.linkat()) set(Cap.symlinkat()) end if caps(FileLookup) then set(Cap.lookup()) end if caps(FileMkdir) then set(Cap.mkdirat()) end if caps(FileRead) then set(Cap.read()) end if caps(FileRemove) then set(Cap.unlinkat()) end if caps(FileRename) then set(Cap.renameat()) end if caps(FileSeek) then set(Cap.seek()) end if caps(FileStat) then set(Cap.fstat()) set(Cap.fstatfs()) set(Cap.fcntl()) end if caps(FileSync) then set(Cap.fsync()) end if caps(FileTime) then set(Cap.futimes()) end if caps(FileTruncate) then set(Cap.ftruncate()) end if caps(FileWrite) then set(Cap.write()) end if caps(FileExec) then set(Cap.fexecve()) end new descriptor(fd: I32) = Initialises with the rights on the given file descriptor. ifdef freebsd or capsicum then @__cap_rights_get[I32](_version(), fd, addressof _r0) end fun ref set(cap: U64) = ifdef freebsd or capsicum then @__cap_rights_set[None](addressof _r0, cap, U64(0)) end fun ref unset(cap: U64) = ifdef freebsd or capsicum then @__cap_rights_clear[None](addressof _r0, cap, U64(0)) end fun limit(fd: I32): Bool = Limits the fd to the encoded rights. ifdef freebsd or capsicum then @cap_rights_limit[I32](fd, addressof _r0) == 0 else true end fun ref merge(that: CapRights0) = Merge the rights in that into this. ifdef freebsd or capsicum then @cap_rights_merge[None](addressof _r0, addressof that._r0) end fun ref remove(that: CapRights0) = Remove the rights in that from this. ifdef freebsd or capsicum then @cap_rights_remove[None](addressof _r0, addressof that._r0) end fun ref clear() = Clear all rights. ifdef freebsd or capsicum then @__cap_rights_init[Pointer[U64]](I32(0), addressof _r0, U64(0)) end fun contains(that: CapRights0): Bool = Check that this is a superset of the rights in that. ifdef freebsd or capsicum then @cap_rights_contains[Bool](addressof _r0, addressof that._r0) else true end fun _version(): I32 = 0","title":"cap_rights.pony"},{"location":"src/collections/flag/","text":"interface val Flag[A: (Unsigned Integer[A] val)] A flag should be a primitive with a value method that returns the bits that represent the flag. This allows a flag to encode a single bit, or any combination of bits. fun value(): A class Flags[A: Flag[B] val, B: (Unsigned Integer[B] val) = U64] is Comparable[Flags[A, B] box] Flags is a set of flags. The flags that are recognised should be passed as a union type for type parameter A. For example: primitive SSE fun value(): U64 = 1 primitive AVX fun value(): U64 = 2 primitive RDTSCP fun value(): U64 = 4 type Features is Flags[(SSE | AVX | RDTSCP)] Type parameter B is the unlying field used to store the flags. var _value: B = 0 fun value(): B = Returns the bit encoding of the set flags. _value fun apply(flag: A): Bool = Returns true if the flag is set. (_value and flag.value()) 0 fun ref all() = Sets all bits, including undefined flags. _value = -1 fun ref clear() = Unsets all flags. _value = 0 fun ref set(flag: A) = Sets the flag. _value = _value or flag.value() fun ref unset(flag: A) = Unsets the flag. _value = _value and not flag.value() fun ref flip(flag: A) = Sets the flag if it is unset, unsets the flag if it is set. _value = _value xor flag.value() fun ref union(that: Flags[A, B] box) = The union of this and that. _value = this._value or that._value fun ref intersect(that: Flags[A, B] box) = The intersection of this and that. _value = this._value and that._value fun ref difference(that: Flags[A, B] box) = The symmetric difference of this and that. _value = this._value xor that._value fun ref remove(that: Flags[A, B] box) = Unset flags that are set in that. _value = this._value xor that._value fun add(flag: A): Flags[A, B] iso^ = This with the flag set. let f = recover Flags[A, B] end f._value = this._value or flag.value() f fun sub(flag: A): Flags[A, B] iso^ = This with the flag unset. let f = recover Flags[A, B] end f._value = this._value and not flag.value() f fun op_or(that: Flags[A, B] box): Flags[A, B] iso^ = The union of this and that. let f = recover Flags[A, B] end f._value = this._value or that._value f fun op_and(that: Flags[A, B] box): Flags[A, B] iso^ = The intersection of this and that. let f = recover Flags[A, B] end f._value = this._value and that._value f fun op_xor(that: Flags[A, B] box): Flags[A, B] iso^ = The symmetric difference of this and that. let f = recover Flags[A, B] end f._value = this._value xor that._value f fun without(that: Flags[A, B] box): Flags[A, B] iso^ = The flags in this that are not in that. let f = recover Flags[A, B] end f._value = this._value and not that._value f fun clone(): Flags[A, B] iso^ = Create a clone. let f = recover Flags[A, B] end f._value = this._value f fun eq(that: Flags[A, B] box): Bool = Returns true if this has the same flags set as that. _value == that._value fun lt(that: Flags[A, B] box): Bool = Returns true if the flags set on this are a strict subset of the flags set on that. Flags is only partially ordered, so lt is not the opposite of ge. (_value != that._value) and ((_value and not that._value) == 0) fun le(that: Flags[A, B] box): Bool = Returns true if the flags set on this are a subset of the flags set on that or they are the same. Flags is only partially ordered, so le is not the opposite of te. ((_value and not that._value) == 0) fun gt(that: Flags[A, B] box): Bool = Returns true if the flags set on this are a struct superset of the flags set on that. Flags is only partially ordered, so gt is not the opposite of le. (_value != that._value) and ((that._value and not _value) == 0) fun ge(that: Flags[A, B] box): Bool = Returns true if the flags set on this are a superset of the flags set on that or they are the same. Flags is only partially ordered, so ge is not the opposite of lt. ((that._value and not _value) == 0)","title":"flag.pony"},{"location":"src/collections/hashable/","text":"interface Hashable Anything with a hash method is hashable. fun hash(): USize interface Hashable64 A version of Hashable that returns 64-bit hashes on every platform. fun hash64(): U64 interface val HashFunction[A] A pluggable hash function. new val create() Data structures create instances internally. Use a primitive if possible. fun hash(x: box- A!): USize Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun eq(x: box- A!, y: box- A!): Bool Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. interface val HashFunction64[A] A pluggable hash function with 64-bit hashes. new val create() Data structures create instances internally. Use a primitive if possible. fun hash64(x: box- A!): U64 Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun eq(x: box- A!, y: box- A!): Bool Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. primitive HashEq[A: (Hashable #read Equatable[A] #read)] is HashFunction[A] fun hash(x: box- A): USize = Use the hash function from the type parameter. x.hash() fun eq(x: box- A, y: box- A): Bool = Use the structural equality function from the type parameter. x == y primitive HashEq64[A: (Hashable64 #read Equatable[A] #read)] is HashFunction64[A] fun hash64(x: box- A): U64 = Use the hash function from the type parameter. x.hash64() fun eq(x: box- A, y: box- A): Bool = Use the structural equality function from the type parameter. x == y primitive HashIs[A] is (HashFunction[A] HashFunction64[A]) fun hash(x: box- A!): USize = Hash the identity rather than the contents. (digestof x).hash() fun hash64(x: box- A!): U64 = Hash the identity rather than the contents. (digestof x).hash64() fun eq(x: box- A!, y: box- A!): Bool = Determine equality by identity rather than structurally. x is y primitive HashByteSeq is (HashFunction[ByteSeq box] HashFunction64[ByteSeq box]) Hash and equality functions for arbitrary ByteSeq. fun hash(x: ByteSeq box): USize = @ponyint_hash_block[USize](x.cpointer(), x.size()) fun hash64(x: ByteSeq box): U64 = @ponyint_hash_block64[U64](x.cpointer(), x.size()) fun eq(x: ByteSeq box, y: ByteSeq box): Bool = if x.size() == y.size() then @memcmp[I32](x.cpointer(), y.cpointer(), x.size()) == 0 else false end","title":"hashable.pony"},{"location":"src/collections/list/","text":"class List[A] is Seq[A] A doubly linked list. var _head: (ListNode[A] | None) = None var _tail: (ListNode[A] | None) = None var _size: USize = 0 new create(len: USize = 0) = Do nothing, but be compatible with Seq. None new unit(a: A) = Builds a new list from an element. push(consume a) new from(seq: Array[A^]) = Builds a new list from the sequence passed in. for value in seq.values() do push(consume value) end fun ref reserve(len: USize) = Do nothing, but be compatible with Seq. None fun size(): USize = Returns the number of items in the list. _size fun apply(i: USize = 0): this- A ? = Get the i-th element, raising an error if the index is out of bounds. index(i)?()? fun ref update(i: USize, value: A): A^ ? = Change the i-th element, raising an error if the index is out of bounds. Returns the previous value, which may be None if the node has been popped but left on the list. index(i)?()? = consume value fun index(i: USize): this- ListNode[A] ? = Gets the i-th node, raising an error if the index is out of bounds. if i = _size then error end var node = _head as this- ListNode[A] var j = USize(0) while j i do node = node.next() as this- ListNode[A] j = j + 1 end node fun ref remove(i: USize): ListNode[A] ? = Remove the i-th node, raising an error if the index is out of bounds. The removed node is returned. index(i)? . remove() fun ref clear() = Empties the list. _head = None _tail = None _size = 0 fun head(): this- ListNode[A] ? = Get the head of the list. _head as this- ListNode[A] fun tail(): this- ListNode[A] ? = Get the tail of the list. _tail as this- ListNode[A] fun ref prepend_node(node: ListNode[A]) = Adds a node to the head of the list. match _head | let head': ListNode[A] = head'.prepend(node) else _set_both(node) end fun ref append_node(node: ListNode[A]) = Adds a node to the tail of the list. match _tail | let tail': ListNode[A] = tail'.append(node) else _set_both(node) end fun ref append_list(that: List[A]) = Remove all nodes from that and append them to this. if this isnt that then while that._size 0 do try append_node(that.head()?) end end end fun ref prepend_list(that: List[A]) = Remove all nodes from that and prepend them to this. if this isnt that then while that._size 0 do try prepend_node(that.tail()?) end end end fun ref push(a: A) = Adds a value to the tail of the list. append_node(ListNode[A](consume a)) fun ref pop(): A^ ? = Removes a value from the tail of the list. tail()? . remove().pop()? fun ref unshift(a: A) = Adds a value to the head of the list. prepend_node(ListNode[A](consume a)) fun ref shift(): A^ ? = Removes a value from the head of the list. head()? . remove().pop()? fun ref append( seq: (ReadSeq[A] ReadElement[A^]), offset: USize = 0, len: USize = -1) = Append len elements from a sequence, starting from the given offset. if offset = seq.size() then return end let copy_len = len.min(seq.size() - offset) reserve(_size + copy_len) let cap = copy_len + offset var i = offset try while i cap do push(seq(i)?) i = i + 1 end end fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) = Add len iterated elements to the end of the list, starting from the given offset. try for i in Range(0, offset) do if iter.has_next() then iter.next()? else return end end for i in Range(0, len) do if iter.has_next() then push(iter.next()?) else return end end end fun ref truncate(len: USize) = Truncate the list to the given length, discarding excess elements. If the list is already smaller than len, do nothing. try while _size len do pop()? end end fun clone(): List[this- A!]^ = Clone the list. let out = List[this- A!] for v in values() do out.push(v) end out fun map[B](f: {(this- A!): B^} box): List[B]^ = Builds a new list by applying a function to every member of the list. try _map[B](head()?, f, List[B]) else List[B] end fun _map[B]( ln: this- ListNode[A], f: {(this- A!): B^} box, acc: List[B]) : List[B]^ = Private helper for map, recursively working with ListNodes. try acc.push(f(ln()?)) end try _map[B](ln.next() as this- ListNode[A], f, acc) else acc end fun flat_map[B](f: {(this- A!): List[B]} box): List[B]^ = Builds a new list by applying a function to every member of the list and using the elements of the resulting lists. try _flat_map[B](head()?, f, List[B]) else List[B] end fun _flat_map[B]( ln: this- ListNode[A], f: {(this- A!): List[B]} box, acc: List[B]): List[B]^ = Private helper for flat_map, recursively working with ListNodes. try acc.append_list(f(ln()?)) end try _flat_map[B](ln.next() as this- ListNode[A], f, acc) else acc end fun filter(f: {(this- A!): Bool} box): List[this- A!]^ = Builds a new list with those elements that satisfy a provided predicate. try _filter(head()?, f, List[this- A!]) else List[this- A!] end fun _filter( ln: this- ListNode[A], f: {(this- A!): Bool} box, acc: List[this- A!]): List[this- A!] = Private helper for filter, recursively working with ListNodes. try let cur = ln()? if f(cur) then acc.push(cur) end end try _filter(ln.next() as this- ListNode[A], f, acc) else acc end fun fold[B](f: {(B!, this- A!): B^} box, acc: B): B = Folds the elements of the list using the supplied function. let h = try head()? else return acc end _fold[B](h, f, consume acc) fun _fold[B]( ln: this- ListNode[A], f: {(B!, this- A!): B^} box, acc: B) : B = Private helper for fold, recursively working with ListNodes. let nextAcc: B = try f(acc, ln()?) else consume acc end let h = try ln.next() as this- ListNode[A] else return nextAcc end _fold[B](h, f, consume nextAcc) fun every(f: {(this- A!): Bool} box): Bool = Returns true if every element satisfies the provided predicate, false otherwise. try _every(head()?, f) else true end fun _every(ln: this- ListNode[A], f: {(this- A!): Bool} box): Bool = Private helper for every, recursively working with ListNodes. try if not(f(ln()?)) then false else _every(ln.next() as this- ListNode[A], f) end else true end fun exists(f: {(this- A!): Bool} box): Bool = Returns true if at least one element satisfies the provided predicate, false otherwise. try _exists(head()?, f) else false end fun _exists(ln: this- ListNode[A], f: {(this- A!): Bool} box): Bool = Private helper for exists, recursively working with ListNodes. try if f(ln()?) then true else _exists(ln.next() as this- ListNode[A], f) end else false end fun partition( f: {(this- A!): Bool} box) : (List[this- A!]^, List[this- A!]^) = Builds a pair of lists, the first of which is made up of the elements satisfying the supplied predicate and the second of which is made up of those that do not. let l1 = List[this- A!] let l2 = List[this- A!] for item in values() do if f(item) then l1.push(item) else l2.push(item) end end (l1, l2) fun drop(n: USize): List[this- A!]^ = Builds a list by dropping the first n elements. let l = List[this- A!] if size() n then try var node = index(n)? for i in Range(n, size()) do l.push(node()?) node = node.next() as this- ListNode[A] end end end l fun take(n: USize): List[this- A!] = Builds a list of the first n elements. let l = List[this- A!] if size() 0 then try var node = head()? for i in Range(0, n.min(size())) do l.push(node()?) node = node.next() as this- ListNode[A] end end end l fun take_while(f: {(this- A!): Bool} box): List[this- A!]^ = Builds a list of elements satisfying the provided predicate until one does not. let l = List[this- A!] if size() 0 then try var node = head()? for i in Range(0, size()) do let item = node()? if f(item) then l.push(item) else return l end node = node.next() as this- ListNode[A] end end end l fun reverse(): List[this- A!]^ = Builds a new list by reversing the elements in the list. try _reverse(head()?, List[this- A!]) else List[this- A!] end fun _reverse(ln: this- ListNode[A], acc: List[this- A!]): List[this- A!]^ = Private helper for reverse, recursively working with ListNodes. try acc.unshift(ln()?) end try _reverse(ln.next() as this- ListNode[A], acc) else acc end fun contains[B: (A HasEq[A!] #read) = A](a: box- B): Bool = Returns true if the list contains the provided element, false otherwise. try _contains[B](head()?, a) else false end fun _contains[B: (A HasEq[A!] #read) = A]( ln: this- ListNode[A], a: box- B) : Bool = Private helper for contains, recursively working with ListNodes. try if a == ln()? then true else _contains[B](ln.next() as this- ListNode[A], a) end else false end fun nodes(): ListNodes[A, this- ListNode[A]]^ = Return an iterator on the nodes in the list. ListNodes[A, this- ListNode[A]](_head) fun rnodes(): ListNodes[A, this- ListNode[A]]^ = Return an iterator on the nodes in the list. ListNodes[A, this- ListNode[A]](_head, true) fun values(): ListValues[A, this- ListNode[A]]^ = Return an iterator on the values in the list. ListValues[A, this- ListNode[A]](_head) fun rvalues(): ListValues[A, this- ListNode[A]]^ = Return an iterator on the values in the list. ListValues[A, this- ListNode[A]](_head, true) fun ref _increment() = _size = _size + 1 fun ref _decrement() = _size = _size - 1 fun ref _set_head(head': (ListNode[A] | None)) = _head = head' fun ref _set_tail(tail': (ListNode[A] | None)) = _tail = tail' fun ref _set_both(node: ListNode[A]) = node._set_list(this) _head = node _tail = node _size = 1 class ListNodes[A, N: ListNode[A] #read] is Iterator[N] Iterate over the nodes in a list. var _next: (N | None) let _reverse: Bool new create(head: (N | None), reverse: Bool = false) = Keep the next list node to be examined. _next = head _reverse = reverse fun has_next(): Bool = If we have a list node, we have more values. _next isnt None fun ref next(): N ? = Get the list node and replace it with the next one. match _next | let next': N = if _reverse then _next = next'.prev() else _next = next'.next() end next' else error end class ListValues[A, N: ListNode[A] #read] is Iterator[N- A] Iterate over the values in a list. var _next: (N | None) let _reverse: Bool new create(head: (N | None), reverse: Bool = false) = Keep the next list node to be examined. _next = head _reverse = reverse fun has_next(): Bool = If we have a list node, we have more values. _next isnt None fun ref next(): N- A ? = Get the value of the list node and replace it with the next one. match _next | let next': N = if _reverse then _next = next'.prev() else _next = next'.next() end next'()? else error end","title":"list.pony"},{"location":"src/collections/list_node/","text":"class ListNode[A] A node in a list. var _item: (A | None) var _list: (List[A] | None) = None var _prev: (ListNode[A] | None) = None var _next: (ListNode[A] | None) = None new create(item: (A | None) = None) = Create a node. Initially, it is not in any list. _item = consume item fun apply(): this- A ? = Return the item, if we have one, otherwise raise an error. _item as this- A fun ref update(value: (A | None)): A^ ? = Replace the item and return the previous one. Raise an error if we have no previous value. (_item = consume value) as A^ fun ref pop(): A^ ? = Remove the item from the node, if we have one, otherwise raise an error. (_item = None) as A^ fun ref prepend(that: ListNode[A]): Bool = Prepend a node to this one. If `that` is already in a list, it is removed before it is prepended. Returns true if `that` was removed from another list. if (_prev is that) or (this is that) then return false end var in_list = false match _list | let list': List[A] = in_list = that._list isnt None that.remove() match _prev | let prev': ListNode[A] = prev'._next = that else list'._set_head(that) end that._list = list' that._prev = _prev that._next = this _prev = that list'._increment() end in_list fun ref append(that: ListNode[A]): Bool = Append a node to this one. If `that` is already in a list, it is removed before it is appended. Returns true if `that` was removed from another list. if (_next is that) or (this is that) then return false end var in_list = false match _list | let list': List[A] = in_list = that._list isnt None that.remove() match _next | let next': ListNode[A] = next'._prev = that else list'._set_tail(that) end that._list = list' that._prev = this that._next = _next _next = that list'._increment() end in_list fun ref remove() = Remove a node from a list. match _list | let list': List[A] = match (_prev, _next) | (let prev': ListNode[A], let next': ListNode[A]) = // We're in the middle of the list. prev'._next = _next next'._prev = _prev _prev = None _next = None | (let prev': ListNode[A], None) = // We're the tail. prev'._next = None list'._set_tail(prev') _prev = None | (None, let next': ListNode[A]) = // We're the head. next'._prev = None list'._set_head(next') _next = None | (None, None) = // We're the only member list'._set_head(None) list'._set_tail(None) end list'._decrement() _list = None end fun has_prev(): Bool = Return true if there is a previous node. _prev isnt None fun has_next(): Bool = Return true if there is a next node. _next isnt None fun prev(): (this- ListNode[A] | None) = Return the previous node. _prev fun next(): (this- ListNode[A] | None) = Return the next node. _next fun ref _set_list(list: List[A]): ListNode[A]^ = Make this node the only node on the given list. remove() _list = list this","title":"list_node.pony"},{"location":"src/collections/map/","text":"primitive _MapEmpty primitive _MapDeleted type Map[K: (Hashable #read Equatable[K] #read), V] is HashMap[K, V, HashEq[K]] This is a map that uses structural equality on the key. type MapIs[K, V] is HashMap[K, V, HashIs[K]] This is a map that uses identity comparison on the key. class HashMap[K, V, H: HashFunction[K] val] A quadratic probing hash map. Resize occurs at a load factor of 0.75. A resized map has 2 times the space. The hash function can be plugged in to the type to create different kinds of maps. var _size: USize = 0 var _array: Array[((K, V) | _MapEmpty | _MapDeleted)] new create(prealloc: USize = 6) = Create an array with space for prealloc elements without triggering a resize. Defaults to 6. let len = (prealloc * 4) / 3 let n = len.max(8).next_pow2() _array = _array.init(_MapEmpty, n) fun size(): USize = The number of items in the map. _size fun space(): USize = The available space in the map. Resize will happen when size / space = 0.75. _array.space() fun apply(key: box- K!): this- V ? = Gets a value from the map. Raises an error if no such item exists. (let i, let found) = _search(key) if found then _array(i)? as (_, this- V) else error end fun ref update(key: K, value: V): (V^ | None) = Sets a value in the map. Returns the old value if there was one, otherwise returns None. If there was no previous value, this may trigger a resize. try (let i, let found) = _search(key) let k = if found then _array(i)? as (K^, _) else consume key end match _array(i)? = (consume k, consume value) | (_, let v: V) = return consume v else _size = _size + 1 if (_size * 4) (_array.size() * 3) then _resize(_array.size() * 2) end end end fun ref upsert(key: K, value: V, f: {(V, V): V^} box): V ? = Combines a provided value with the current value for the provided key using the provided function. If the provided key has not been added to the map yet, it sets its value to the provided value. As a simple example, say we had a map with I64 values and we wanted to add 4 to the current value for key test , which let's say is currently 2. We call m.upsert( test , 4, {(x, y) = x - y }) This changes the value associated with test to -2. If we have not yet added the key new-key to the map and we call m.upsert( new-key , 4, {(x, y) = x - y }) then new-key is added to the map with a value of -4. Returns the value that we set the key to (let i, let found) = _search(key) try if found then (let pkey, let pvalue) = (_array(i)? = _MapEmpty) as (K^, V^) _array(i)? = (consume pkey, f(consume pvalue, consume value)) else let key' = key _array(i)? = (consume key, consume value) _size = _size + 1 if (_size * 4) (_array.size() * 3) then _resize(_array.size() * 2) return this(key')? end end return _array(i)? as (_, V) else error end fun ref insert(key: K, value: V): V ? = Set a value in the map. Returns the new value, allowing reuse. try (let i, let found) = _search(key) let key' = key _array(i)? = (consume key, consume value) if not found then _size = _size + 1 if (_size * 4) (_array.size() * 3) then _resize(_array.size() * 2) return this(key')? end end _array(i)? as (_, V) else // This is unreachable, since index will never be out-of-bounds. error end fun ref insert_if_absent(key: K, value: V): V ? = Set a value in the map if the key doesn't already exist in the Map. Saves an extra lookup when doing a pattern like: ```pony if not my_map.contains(my_key) then my_map(my_key) = my_value end ``` Returns the value, the same as `insert`, allowing 'insert_if_absent' to be used as a drop-in replacement for `insert`. try (let i, let found) = _search(key) let key' = key if not found then _array(i)? = (consume key, consume value) _size = _size + 1 if (_size * 4) (_array.size() * 3) then _resize(_array.size() * 2) return this(key')? end end _array(i)? as (_, V) else // This is unreachable, since index will never be out-of-bounds. error end fun ref remove(key: box- K!): (K^, V^) ? = Delete a value from the map and return it. Raises an error if there was no value for the given key. try (let i, let found) = _search(key) if found then _size = _size - 1 match _array(i)? = _MapDeleted | (let k: K, let v: V) = return (consume k, consume v) end end end error fun get_or_else(key: box- K!, alt: this- V): this- V = Get the value associated with provided key if present. Otherwise, return the provided alternate value. (let i, let found) = _search(key) if found then try _array(i)? as (_, this- V) else // This should never happen as we have already // proven that _array(i) exists consume alt end else consume alt end fun contains(k: box- K!): Bool = Checks whether the map contains the key k (_, let found) = _search(k) found fun ref concat(iter: Iterator[(K^, V^)]) = Add K, V pairs from the iterator to the map. for (k, v) in iter do this(consume k) = consume v end fun add[H2: HashFunction[this- K!] val = H]( key: this- K!, value: this- V!) : HashMap[this- K!, this- V!, H2]^ = This with the new (key, value) mapping. let r = clone[H2]() r(key) = value r fun sub[H2: HashFunction[this- K!] val = H]( key: this- K!, value: this- V!) : HashMap[this- K!, this- V!, H2]^ = This without the given key. let r = clone[H2]() try r.remove(key)? end r fun next_index(prev: USize = -1): USize ? = Given an index, return the next index that has a populated key and value. Raise an error if there is no next populated index. for i in Range(prev + 1, _array.size()) do match _array(i)? | (_, _) = return i end end error fun index(i: USize): (this- K, this- V) ? = Returns the key and value at a given index. Raise an error if the index is not populated. _array(i)? as (this- K, this- V) fun ref compact() = Minimise the memory used for the map. _resize(((_size * 4) / 3).next_pow2().max(8)) fun clone[H2: HashFunction[this- K!] val = H]() : HashMap[this- K!, this- V!, H2]^ = Create a clone. The key and value types may be different due to aliasing and viewpoint adaptation. let r = HashMap[this- K!, this- V!, H2](_size) for (k, v) in pairs() do r(k) = v end r fun ref clear() = Remove all entries. _size = 0 // Our default prealloc of 6 corresponds to an array alloc size of 8. let n: USize = 8 _array = _array.init(_MapEmpty, n) fun _search(key: box- K!): (USize, Bool) = Return a slot number and whether or not it's currently occupied. var idx_del = _array.size() let mask = idx_del - 1 let h = H.hash(key).usize() var idx = h and mask try for i in Range(0, _array.size()) do let entry = _array(idx)? match entry | (let k: this- K!, _) = if H.eq(k, key) then return (idx, true) end | _MapEmpty = if idx_del = mask then return (idx_del, false) else return (idx, false) end | _MapDeleted = if idx_del mask then idx_del = idx end end idx = (h + ((i + (i * i)) / 2)) and mask end end (idx_del, false) fun ref _resize(len: USize) = Change the available space. let old = _array let old_len = old.size() _array = _array.init(_MapEmpty, len) _size = 0 try for i in Range(0, old_len) do match old(i)? = _MapDeleted | (let k: K, let v: V) = this(consume k) = consume v end end end fun keys(): MapKeys[K, V, H, this- HashMap[K, V, H]]^ = Return an iterator over the keys. MapKeys[K, V, H, this- HashMap[K, V, H]](this) fun values(): MapValues[K, V, H, this- HashMap[K, V, H]]^ = Return an iterator over the values. MapValues[K, V, H, this- HashMap[K, V, H]](this) fun pairs(): MapPairs[K, V, H, this- HashMap[K, V, H]]^ = Return an iterator over the keys and values. MapPairs[K, V, H, this- HashMap[K, V, H]](this) class MapKeys[K, V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M- K] An iterator over the keys in a map. let _map: M var _i: USize = -1 var _count: USize = 0 new create(map: M) = Creates an iterator for the given map. _map = map fun has_next(): Bool = True if it believes there are remaining entries. May not be right if values were added or removed from the map. _count _map.size() fun ref next(): M- K ? = Returns the next key, or raises an error if there isn't one. If keys are added during iteration, this may not return all keys. _i = _map.next_index(_i)? _count = _count + 1 _map.index(_i)?._1 class MapValues[K, V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M- V] An iterator over the values in a map. let _map: M var _i: USize = -1 var _count: USize = 0 new create(map: M) = Creates an iterator for the given map. _map = map fun has_next(): Bool = True if it believes there are remaining entries. May not be right if values were added or removed from the map. _count _map.size() fun ref next(): M- V ? = Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. _i = _map.next_index(_i)? _count = _count + 1 _map.index(_i)?._2 class MapPairs[K, V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[(M- K, M- V)] An iterator over the keys and values in a map. let _map: M var _i: USize = -1 var _count: USize = 0 new create(map: M) = Creates an iterator for the given map. _map = map fun has_next(): Bool = True if it believes there are remaining entries. May not be right if values were added or removed from the map. _count _map.size() fun ref next(): (M- K, M- V) ? = Returns the next entry, or raises an error if there isn't one. If entries are added during iteration, this may not return all entries. _i = _map.next_index(_i)? _count = _count + 1 _map.index(_i)?","title":"map.pony"},{"location":"src/collections/range/","text":"class Range[A: (Real[A] val Number) = USize] is Iterator[A] Produces `[min, max)` with a step of `inc` for any `Number` type. ```pony // iterating with for-loop for i in Range(0, 10) do env.out.print(i.string()) end // iterating over Range of U8 with while-loop let range = Range[U8](5, 100, 5) while range.has_next() do handle_u8(range.next()) end ``` Supports `min` being smaller than `max` with negative `inc` but only for signed integer types and floats: ```pony var previous = 11 for left in Range[I64](10, -5, -1) do if not (left previous) then error end previous = left end ``` If the `step` is not moving `min` towards `max` or if it is `0`, the Range is considered infinite and iterating over it will never terminate: ```pony let infinite_range1 = Range(0, 1, 0) infinite_range1.is_infinite() == true let infinite_range2 = Range[I8](0, 10, -1) for _ in infinite_range2 do env.out.print( will this ever end? ) env.err.print( no, never! ) end ``` When using `Range` with floating point types (`F32` and `F64`) `inc` steps 1.0 are possible. If any of the arguments contains `NaN`, `+Inf` or `-Inf` the range is considered infinite as operations on any of them won't move `min` towards `max`. The actual values produced by such a `Range` are determined by what IEEE 754 defines as the result of `min` + `inc`: ```pony for and_a_half in Range[F64](0.5, 100) do handle_half(and_a_half) end // this Range will produce 0 at first, then infinitely NaN let nan: F64 = F64(0) / F64(0) for what_am_i in Range[F64](0, 1000, nan) do wild_guess(what_am_i) end ``` let _min: A let _max: A let _inc: A let _forward: Bool let _infinite: Bool var _idx: A new create(min: A, max: A, inc: A = 1) = _min = min _max = max _inc = inc _idx = min _forward = (_min _max) and (_inc 0) let is_float_infinite = iftype A : FloatingPoint[A] then _min.nan() or _min.infinite() or _max.nan() or _max.infinite() or _inc.nan() or _inc.infinite() else false end _infinite = is_float_infinite or ((_inc == 0) and (min != max)) // no progress or ((_min _max) and (_inc 0)) // progress into other directions or ((_min _max) and (_inc 0)) fun has_next(): Bool = if _forward then _idx _max else _idx _max end fun ref next(): A = if has_next() then _idx = _idx + _inc else _idx end fun ref rewind() = _idx = _min fun is_infinite(): Bool = _infinite","title":"range.pony"},{"location":"src/collections/reverse/","text":"class Reverse[A: (Real[A] val Number) = USize] is Iterator[A] Produces [max, min]. let _min: A let _max: A let _dec: A var _idx: A new create(max: A, min: A, dec: A = 1) = _min = min _max = max _dec = dec _idx = max fun has_next(): Bool = (_idx = _min) and (_idx = _max) fun ref next(): A = if has_next() then _idx = _idx - _dec else _idx + _dec end fun ref rewind() = _idx = _max","title":"reverse.pony"},{"location":"src/collections/ring_buffer/","text":"class RingBuffer[A] A ring buffer. embed _array: Array[A] let _mod: USize var _write: USize = 0 new create(len: USize) = Create a ring buffer with a fixed size. The size will be rounded up to the next power of 2. let n = len.max(2).next_pow2() _mod = n - 1 _array = Array[A](n) fun head(): USize ? = The first read that will succeed. If nothing has been written to the ring, this will raise an error. if _write 0 then if _write space() then _write - space() else 0 end else error end fun size(): USize = The number of elements that have been added to the ring. _write fun space(): USize = The available space in the ring. _mod + 1 fun apply(i: USize): this- A ? = Get the i-th element from the ring. If the i-th element has not yet been added or is no longer available, this will raise an error. if (i = _write) or ((_write - i) space()) then error end _array(i and _mod)? fun ref push(value: A): Bool = Add an element to the ring. If the ring is full, this will drop the oldest element in the ring. Returns true if an element was dropped. var full = false if _write space() then _array.push(consume value) else try _array(_write and _mod)? = consume value end full = true end _write = _write + 1 full fun ref clear() = Clear the queue. _array.clear() _write = 0","title":"ring_buffer.pony"},{"location":"src/collections/set/","text":"type Set[A: (Hashable #read Equatable[A] #read)] is HashSet[A, HashEq[A]] type SetIs[A] is HashSet[A, HashIs[A!]] class HashSet[A, H: HashFunction[A!] val] is Comparable[HashSet[A, H] box] A set, built on top of a HashMap. This is implemented as map of an alias of a type to itself embed _map: HashMap[A!, A, H] new create(prealloc: USize = 8) = Defaults to a prealloc of 8. _map = _map.create(prealloc) fun size(): USize = The number of items in the set. _map.size() fun space(): USize = The available space in the set. _map.space() fun apply(value: box- A!): this- A ? = Return the value if its in the set, otherwise raise an error. _map(value)? fun contains(value: box- A!): Bool = Checks whether the set contains the value. _map.contains(value) fun ref clear() = Remove all elements from the set. _map.clear() fun ref set(value: A) = Add a value to the set. _map(value) = consume value fun ref unset(value: box- A!) = Remove a value from the set. try _map.remove(value)? end fun ref extract(value: box- A!): A^ ? = Remove a value from the set and return it. Raises an error if the value wasn't in the set. _map.remove(value)?._2 fun ref union(that: Iterator[A^]) = Add everything in that to the set. for value in that do set(consume value) end fun ref intersect[K: HashFunction[box- A!] val = H]( that: HashSet[box- A!, K]) = Remove everything that isn't in that. let start_size = _map.size() var seen: USize = 0 var i: USize = -1 while seen start_size do try i = next_index(i)? if not that.contains(index(i)?) then unset(index(i)?) end end seen = seen + 1 end fun ref difference(that: Iterator[A^]) = Remove elements in this which are also in that. Add elements in that which are not in this. for value in that do try extract(value)? else set(consume value) end end fun ref remove(that: Iterator[box- A!]) = Remove everything that is in that. for value in that do unset(value) end fun add[K: HashFunction[this- A!] val = H]( value: this- A!) : HashSet[this- A!, K]^ = Add a value to the set. clone[K]() . set(value) fun sub[K: HashFunction[this- A!] val = H]( value: box- this- A!) : HashSet[this- A!, K]^ = Remove a value from the set. clone[K]() . unset(value) fun op_or[K: HashFunction[this- A!] val = H]( that: this- HashSet[A, H]) : HashSet[this- A!, K]^ = Create a set with the elements of both this and that. let r = clone[K]() for value in that.values() do r.set(value) end r fun op_and[K: HashFunction[this- A!] val = H]( that: this- HashSet[A, H]) : HashSet[this- A!, K]^ = Create a set with the elements that are in both this and that. let r = HashSet[this- A!, K](size().min(that.size())) for value in values() do try that(value)? r.set(value) end end r fun op_xor[K: HashFunction[this- A!] val = H]( that: this- HashSet[A, H]) : HashSet[this- A!, K]^ = Create a set with the elements that are in either set but not both. let r = HashSet[this- A!, K](size().max(that.size())) for value in values() do try that(value)? else r.set(value) end end for value in that.values() do try this(value)? else r.set(value) end end r fun without[K: HashFunction[this- A!] val = H]( that: this- HashSet[A, H]) : HashSet[this- A!, K]^ = Create a set with the elements of this that are not in that. let r = HashSet[this- A!, K](size()) for value in values() do try that(value)? else r.set(value) end end r fun clone[K: HashFunction[this- A!] val = H](): HashSet[this- A!, K]^ = Create a clone. The element type may be different due to aliasing and viewpoint adaptation. let r = HashSet[this- A!, K](size()) for value in values() do r.set(value) end r fun eq(that: HashSet[A, H] box): Bool = Returns true if the sets contain the same elements. (size() == that.size()) and (this = that) fun ne(that: HashSet[A, H] box): Bool = Returns false if the sets contain the same elements. not (this == that) fun lt(that: HashSet[A, H] box): Bool = Returns true if every element in this is also in that, and this has fewer elements than that. (size() that.size()) and (this = that) fun le(that: HashSet[A, H] box): Bool = Returns true if every element in this is also in that. try for value in values() do that(value)? end true else false end fun gt(that: HashSet[A, H] box): Bool = Returns true if every element in that is also in this, and this has more elements than that. (size() that.size()) and (that = this) fun ge(that: HashSet[A, H] box): Bool = Returns true if every element in that is also in this. that = this fun next_index(prev: USize = -1): USize ? = Given an index, return the next index that has a populated value. Raise an error if there is no next populated index. _map.next_index(prev)? fun index(i: USize): this- A ? = Returns the value at a given index. Raise an error if the index is not populated. _map.index(i)?._2 fun values(): SetValues[A, H, this- HashSet[A, H]]^ = Return an iterator over the values. SetValues[A, H, this- HashSet[A, H]](this) class SetValues[A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is Iterator[S- A] An iterator over the values in a set. let _set: S var _i: USize = -1 var _count: USize = 0 new create(set: S) = Creates an iterator for the given set. _set = set fun has_next(): Bool = True if it believes there are remaining entries. May not be right if values were added or removed from the set. _count _set.size() fun ref next(): S- A ? = Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. _i = _set.next_index(_i)? _count = _count + 1 _set.index(_i)?","title":"set.pony"},{"location":"src/collections/sort/","text":"primitive Sort[A: Seq[B] ref, B: Comparable[B] #read] Implementation of dual-pivot quicksort. fun apply(a: A): A^ = Sort the given seq. try _sort(a, 0, a.size().isize() - 1)? end a fun _sort(a: A, lo: ISize, hi: ISize) ? = if hi = lo then return end // choose outermost elements as pivots if a(lo.usize())? a(hi.usize())? then _swap(a, lo, hi)? end (var p, var q) = (a(lo.usize())?, a(hi.usize())?) // partition according to invariant (var l, var g) = (lo + 1, hi - 1) var k = l while k = g do if a(k.usize())? p then _swap(a, k, l)? l = l + 1 elseif a(k.usize())? = q then while (a(g.usize())? q) and (k g) do g = g - 1 end _swap(a, k, g)? g = g - 1 if a(k.usize())? p then _swap(a, k, l)? l = l + 1 end end k = k + 1 end (l, g) = (l - 1, g + 1) // swap pivots to final positions _swap(a, lo, l)? _swap(a, hi, g)? // recursively sort 3 partitions _sort(a, lo, l - 1)? _sort(a, l + 1, g - 1)? _sort(a, g + 1, hi)? fun _swap(a: A, i: ISize, j: ISize) ? = a(j.usize())? = a(i.usize())? = a(j.usize())?","title":"sort.pony"},{"location":"src/encode-base64/base64/","text":"# Base64 package The Base64 package contains support for doing Base64 binary-to-text encodings. We currently have support 3 encodings: PEM, MIME and URL. To learn more about Base64, we suggest you check out the [wikipedia entry](https://en.wikipedia.org/wiki/Base64). ## Example code ```pony use encode/base64 actor Main new create(env: Env) = env.out.print(Base64.encode( foobar )) try env.out.print(Base64.decode[String iso]( Zm9vYmFy )?) end ``` use collections use assert primitive Base64 fun encode_pem(data: ReadSeq[U8]): String iso^ = Encode for PEM (RFC 1421). encode(data, '+', '/', '=', 64) fun encode_mime(data: ReadSeq[U8]): String iso^ = Encode for MIME (RFC 2045). encode(data, '+', '/', '=', 76) fun encode_url[A: Seq[U8] iso = String iso]( data: ReadSeq[U8], pad: Bool = false) : A^ = Encode for URLs (RFC 4648). Padding characters are stripped by default. let c: U8 = if pad then '=' else 0 end encode[A](data, '-', '_', c) fun encode[A: Seq[U8] iso = String iso]( data: ReadSeq[U8], at62: U8 = '+', at63: U8 = '/', pad: U8 = '=', linelen: USize = 0, linesep: String = \\r\\n ) : A^ = Configurable encoding. The defaults are for RFC 4648. let len = ((data.size() + 2) / 3) * 4 let out = recover A(len) end let lineblocks = linelen / 4 var srclen = data.size() var blocks = USize(0) var i = USize(0) try while srclen = 3 do let in1 = data(i)? let in2 = data(i + 1)? let in3 = data(i + 2)? let out1 = in1 2 let out2 = ((in1 and 0x03) 4) + (in2 4) let out3 = ((in2 and 0x0f) 2) + (in3 6) let out4 = in3 and 0x3f out.push(_enc_byte(out1, at62, at63)?) out.push(_enc_byte(out2, at62, at63)?) out.push(_enc_byte(out3, at62, at63)?) out.push(_enc_byte(out4, at62, at63)?) i = i + 3 blocks = blocks + 1 srclen = srclen - 3 if (lineblocks 0) and (blocks == lineblocks) then out.append(linesep) blocks = 0 end end if srclen = 1 then let in1 = data(i)? let in2 = if srclen == 2 then data(i + 1)? else 0 end let out1 = in1 2 let out2 = ((in1 and 0x03) 4) + (in2 4) let out3 = (in2 and 0x0f) 2 out.push(_enc_byte(out1, at62, at63)?) out.push(_enc_byte(out2, at62, at63)?) if srclen == 2 then out.push(_enc_byte(out3, at62, at63)?) else out.push(pad) end out.push(pad) end if lineblocks 0 then out.append(linesep) end else out.clear() end out fun decode_url[A: Seq[U8] iso = Array[U8] iso](data: ReadSeq[U8]): A^ ? = Decode for URLs (RFC 4648). decode[A](data, '-', '_')? fun decode[A: Seq[U8] iso = Array[U8] iso]( data: ReadSeq[U8], at62: U8 = '+', at63: U8 = '/', pad: U8 = '=') : A^ ? = Configurable decoding. The defaults are for RFC 4648. Missing padding is not an error. Non-base64 data, other than whitespace (which can appear at any time), is an error. let len = (data.size() * 4) / 3 let out = recover A(len) end var state = U8(0) var input = U8(0) var output = U8(0) for i in Range(0, data.size()) do input = data(i)? let value = match input | ' ' | '\\t' | '\\r' | '\\n' = continue | pad = break | at62 = 62 | at63 = 63 | if (input = 'A') and (input = 'Z') = (input - 'A') | if (input = 'a') and (input = 'z') = ((input - 'a') + 26) | if (input = '0') and (input = '9') = ((input - '0') + 52) else error end match state | 0 = output = value 2 state = 1 | 1 = out.push(output or (value 4)) output = (value and 0x0f) 4 state = 2 | 2 = out.push(output or (value 2)) output = (value and 0x03) 6 state = 3 | 3 = out.push(output or value) state = 0 else error end end if output != 0 then Fact(input != pad)? match state | 1 | 2 = out.push(output) end end out fun _enc_byte(i: U8, at62: U8, at63: U8): U8 ? = Encode a single byte. match i | 62 = at62 | 63 = at63 | if i 26 = 'A' + i | if i 52 = ('a' - 26) + i | if i 62 = ('0' - 52) + i else error end","title":"base64.pony"},{"location":"src/files/_file_des/","text":"use time use capsicum primitive _FileDes Convenience operations on file descriptors. fun chmod(fd: I32, path: FilePath, mode: FileMode box): Bool = Set the FileMode for this fd. if not path.caps(FileChmod) or (fd == -1) then return false end ifdef windows then path.chmod(mode) else @fchmod[I32](fd, mode._os()) == 0 end fun chown(fd: I32, path: FilePath, uid: U32, gid: U32): Bool = Set the owner and group for this file. Does nothing on Windows. ifdef windows then false else if (fd != -1) and path.caps(FileChown) then @fchown[I32](fd, uid, gid) == 0 else false end end fun touch(fd: I32, path: FilePath): Bool = Set the last access and modification times of the file to now. set_time(fd, path, Time.now(), Time.now()) fun set_time( fd: I32, path: FilePath, atime: (I64, I64), mtime: (I64, I64)) : Bool = Set the last access and modification times of the file to the given values. if (fd == -1) or not path.caps(FileTime) then return false end ifdef windows then path.set_time(atime, mtime) else var tv: (ILong, ILong, ILong, ILong) = ( atime._1.ilong(), atime._2.ilong() / 1000, mtime._1.ilong(), mtime._2.ilong() / 1000 ) @futimes[I32](fd, addressof tv) == 0 end fun set_rights(fd: I32, path: FilePath, writeable: Bool = true) ? = Set the Capsicum rights on the file descriptor. ifdef freebsd or capsicum then if fd != -1 then let cap = CapRights.from(path.caps) if not writeable then cap.unset(Cap.write()) end if not cap.limit(fd) then error end end end","title":"_file_des.pony"},{"location":"src/files/_test/","text":"use ponytest use collections use buffered use term use random use time actor Main is TestList new create(env: Env) = PonyTest(env, this) new make() = None fun tag tests(test: PonyTest) = test(_TestMkdtemp) test(_TestWalk) test(_TestDirectoryOpen) test(_TestDirectoryFileOpen) test(_TestPathClean) test(_TestPathJoin) test(_TestPathRel) test(_TestPathSplit) test(_TestPathDir) test(_TestPathBase) test(_TestPathExt) test(_TestPathVolume) test(_TestFileEOF) test(_TestFileOpenError) test(_TestFileCreate) test(_TestFileCreateExistsNotWriteable) ifdef not windows then test(_TestFileCreateDirNotWriteable) test(_TestFileOpenInDirNotWriteable) test(_TestFileOpenPermissionDenied) end test(_TestFileCreateMissingCaps) test(_TestFileOpen) test(_TestFileOpenWrite) test(_TestFileLongLine) test(_TestFileWrite) test(_TestFileWritev) test(_TestFileQueue) test(_TestFileQueuev) test(_TestFileMixedWriteQueue) test(_TestFileWritevLarge) test(_TestFileFlush) test(_TestFileReadMore) test(_TestFileLinesEmptyFile) test(_TestFileLinesSingleLine) test(_TestFileLinesMultiLine) test(_TestFileLinesMovingCursor) primitive _FileHelper fun make_files(h: TestHelper, files: Array[String]): FilePath ? = let top = Directory(FilePath.mkdtemp(h.env.root as AmbientAuth, tmp._FileHelper. )?)? for f in files.values() do try // Since we embed paths, we use the posix separator, even on Windows. let dir_head = Path.split(f, / ) let fp = FilePath(top.path, dir_head._1)? let r = fp.mkdir() if dir_head._2 != then Directory(fp)?.create_file(dir_head._2)?.dispose() end else h.fail( Failed to create file: + f) h.assert_true(top.path.remove()) error end end top.path trait iso _NonRootTest is UnitTest fun apply_as_non_root(h: TestHelper) ? fun apply(h: TestHelper) ? = if runs_as_root(h) then h.env.err.print( ANSI.red() + ANSI.bold() + [ + name() + ] + This test is disabled as it cannot be run as root. + ANSI.reset()) else apply_as_non_root(h)? end fun runs_as_root(h: TestHelper): Bool = if h.env.vars.contains( USER=root ) then true else ifdef not windows then @getuid[U32]() == 0 else false end end class iso _TestMkdtemp is UnitTest fun name(): String = files/FilePath.mkdtemp fun apply(h: TestHelper) ? = let tmp = FilePath.mkdtemp(h.env.root as AmbientAuth, tmp.TestMkdtemp. )? try h.assert_true(FileInfo(tmp)?.directory) then h.assert_true(tmp.remove()) end class iso _TestWalk is UnitTest fun name(): String = files/FilePath.walk fun apply(h: TestHelper) ? = let top = _FileHelper.make_files(h, [ a/1 ; a/2 ; b ; c/3 ; c/4 ; d/5 ; d/6 ])? try top.walk( {(dir: FilePath, entries: Array[String] ref)(p = top.path) = if dir.path == p then h.assert_array_eq_unordered[String]([ b ; c ; a ; d ], entries) elseif dir.path.at( a , -1) then h.assert_array_eq_unordered[String]([ 1 ; 2 ], entries) elseif dir.path.at( c , -1) then h.assert_array_eq_unordered[String]([ 3 ; 4 ], entries) elseif dir.path.at( d , -1) then h.assert_array_eq_unordered[String]([ 5 ; 6 ], entries) else h.fail( Unexpected dir: + dir.path) end }) then h.assert_true(top.remove()) end class iso _TestDirectoryOpen is UnitTest fun name(): String = files/File.open.directory fun apply(h: TestHelper) ? = let tmp = FilePath.mkdtemp(h.env.root as AmbientAuth, tmp.TestDiropen. )? try h.assert_true(FileInfo(tmp)?.directory) with file = File.open(tmp) do h.assert_true(file.errno() is FileError) h.assert_false(file.valid()) end then h.assert_true(tmp.remove()) end class iso _TestDirectoryFileOpen is UnitTest fun name(): String = files/Directory.open-file fun apply(h: TestHelper) = try // make a temporary directory let dir_path = FilePath.mkdtemp( h.env.root as AmbientAuth, tmp.directory.open-file )? try let dir = Directory(dir_path)? // create a file (rw) let created: File = dir.create_file( created )? h.assert_true(created.valid()) created.dispose() // open a file (ro) let readonly: File = dir.open_file( created )? h.assert_true(readonly.valid()) readonly.dispose() else h.fail( Unhandled inner error! ) then dir_path.remove() end else h.fail( Unhandled error! ) end class iso _TestPathClean is UnitTest fun name(): String = files/Path.clean fun apply(h: TestHelper) = let res1 = Path.clean( //foo/bar/// ) let res2 = Path.clean( foo/./bar ) let res3 = Path.clean( foo/../foo ) let res4 = Path.clean( ///foo///bar///base.ext ) let res5 = Path.clean( /foo/bar/baz/../.. ) let res6 = Path.clean( /foo/bar/baz/.. ) let res7 = Path.clean( /foo/bar/baz/../../qux ) ifdef windows then h.assert_eq[String](res1, \\\\foo\\\\bar ) h.assert_eq[String](res2, foo\\\\bar ) h.assert_eq[String](res3, foo ) h.assert_eq[String](res4, \\\\foo\\\\bar\\\\base.ext ) h.assert_eq[String](res5, \\\\foo ) h.assert_eq[String](res6, \\\\foo\\\\bar ) h.assert_eq[String](res7, \\\\foo\\\\qux ) else h.assert_eq[String](res1, /foo/bar ) h.assert_eq[String](res2, foo/bar ) h.assert_eq[String](res3, foo ) h.assert_eq[String](res4, /foo/bar/base.ext ) h.assert_eq[String](res5, /foo ) h.assert_eq[String](res6, /foo/bar ) h.assert_eq[String](res7, /foo/qux ) end class iso _TestPathJoin is UnitTest fun name(): String = files/Path.join fun apply(h: TestHelper) = let path1 = //foo/bar/// let path2 = foo/./bar let path3 = foo/../foo let path4 = ///foo///dir///base.ext let res1 = Path.join(path1, path2) let res2 = Path.join(res1, path3) let res3 = Path.join(res2, path4) ifdef windows then h.assert_eq[String](res1, \\\\foo\\\\bar\\\\foo\\\\bar ) h.assert_eq[String](res2, \\\\foo\\\\bar\\\\foo\\\\bar\\\\foo ) h.assert_eq[String](res3, \\\\foo\\\\dir\\\\base.ext ) else h.assert_eq[String](res1, /foo/bar/foo/bar ) h.assert_eq[String](res2, /foo/bar/foo/bar/foo ) h.assert_eq[String](res3, /foo/dir/base.ext ) end class iso _TestPathRel is UnitTest fun name(): String = files/Path.rel fun apply(h: TestHelper) ? = let res = Path.rel( foo/bar , foo/bar/baz )? h.assert_eq[String](res, baz ) class iso _TestPathSplit is UnitTest fun name(): String = files/Path.split fun apply(h: TestHelper) = ifdef windows then var path = \\\\foo\\\\bar\\\\dir\\\\ let expect = [ ( \\\\foo\\\\bar\\\\dir , ) ( \\\\foo\\\\bar , dir ) ( \\\\foo , bar ) ( . , foo ) ( , . ) ] for parts in expect.values() do let res = Path.split(path) h.assert_eq[String](res._1, parts._1) h.assert_eq[String](res._2, parts._2) path = parts._1 end else var path = /foo/bar/dir/ let expect = [ ( /foo/bar/dir , ) ( /foo/bar , dir ) ( /foo , bar ) ( . , foo ) ( , . ) ] for parts in expect.values() do let res = Path.split(path) h.assert_eq[String](res._1, parts._1) h.assert_eq[String](res._2, parts._2) path = parts._1 end end class iso _TestPathDir is UnitTest fun name(): String = files/Path.dir fun apply(h: TestHelper) = ifdef windows then let res1 = Path.dir( \\\\foo\\\\bar\\\\dir\\\\base.ext ) let res2 = Path.dir( \\\\foo\\\\bar\\\\dir\\\\ ) h.assert_eq[String](res1, \\\\foo\\\\bar\\\\dir ) h.assert_eq[String](res2, \\\\foo\\\\bar\\\\dir ) else let res1 = Path.dir( /foo/bar/dir/base.ext ) let res2 = Path.dir( /foo/bar/dir/ ) h.assert_eq[String](res1, /foo/bar/dir ) h.assert_eq[String](res2, /foo/bar/dir ) end class iso _TestPathBase is UnitTest fun name(): String = files/Path.dir fun apply(h: TestHelper) = (let p1, let p2) = ifdef windows then ( \\\\dir\\\\base.ext , \\\\dir\\\\ ) else ( /dir/base.ext , /dir/ ) end h.assert_eq[String](Path.base(p1), base.ext ) h.assert_eq[String](Path.base(p1, false), base ) h.assert_eq[String](Path.base(p2), ) class iso _TestPathExt is UnitTest fun name(): String = files/Path.ext fun apply(h: TestHelper) = ifdef windows then let res1 = Path.ext( \\\\dir\\\\base.ext ) let res2 = Path.ext( \\\\dir\\\\base.ext\\\\ ) h.assert_eq[String](res1, ext ) h.assert_eq[String](res2, ) else let res1 = Path.ext( /dir/base.ext ) let res2 = Path.ext( /dir/base.ext/ ) h.assert_eq[String](res1, ext ) h.assert_eq[String](res2, ) end class iso _TestPathVolume is UnitTest fun name(): String = files/Path.volume fun apply(h: TestHelper) = let res1 = Path.volume( C:\\\\foo ) let res2 = Path.volume( \\\\foo ) ifdef windows then h.assert_eq[String](res1, C: ) h.assert_eq[String](res2, ) else h.assert_eq[String](res1, ) h.assert_eq[String](res2, ) end class iso _TestFileEOF is UnitTest fun name(): String = files/File.eof-error fun apply(h: TestHelper) = try let path = tmp.eof let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = File(filepath) do file.write( foobar ) file.sync() file.seek_start(0) let line1 = file.read_string(6) h.assert_eq[String]( foobar , consume line1) let line2 = file.read_string(1) h.assert_eq[USize](line2.size(), 0, Read beyond EOF without error! ) h.assert_true(file.errno() is FileEOF) end filepath.remove() else h.fail( Unhandled error! ) end class iso _TestFileCreate is UnitTest fun name(): String = files/File.create fun apply(h: TestHelper) = try let path = tmp.create let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = CreateFile(filepath) as File do file.print( foobar ) end with file2 = CreateFile(filepath) as File do h.assert_eq[String]( foobar , .join(file2.lines())) end filepath.remove() else h.fail( Unhandled error! ) end class iso _TestFileCreateExistsNotWriteable is _NonRootTest fun name(): String = files/File.create-exists-not-writeable fun apply_as_non_root(h: TestHelper) = try let content = unwriteable let path = tmp.create-not-writeable let filepath = FilePath(h.env.root as AmbientAuth, path)? let mode: FileMode ref = FileMode. private() mode.owner_read = true mode.owner_write = false // preparing the non-writable, but readable file with file = CreateFile(filepath) as File do file.write(content) end h.assert_true(filepath.chmod(mode)) with file2 = File(filepath) do h.assert_false(file2.valid()) h.assert_is[FileErrNo](file2.errno(), FilePermissionDenied) let line = file2.read(6) h.assert_eq[USize](0, line.size(), read on invalid file succeeded ) end mode.owner_read = true mode.owner_write = true // required on Windows to delete the file filepath.chmod(mode) filepath.remove() else h.fail( Unhandled error! ) end class iso _TestFileCreateDirNotWriteable is _NonRootTest fun name(): String = files/File.create-dir-not-writeable fun apply_as_non_root(h: TestHelper) = ifdef not windows then try let dir_path = FilePath.mkdtemp( h.env.root as AmbientAuth, tmp.create-dir-not-writeable )? let mode: FileMode ref = FileMode. private() mode.owner_read = true mode.owner_write = false mode.owner_exec = false h.assert_true(dir_path.chmod(mode)) try let file_path = dir_path.join( trycreateme )? let file = File(file_path) h.assert_false(file.valid()) h.assert_true(file.writeable) h.assert_is[FileErrNo](file.errno(), FilePermissionDenied) then mode.owner_write = true mode.owner_exec = true h.assert_true(dir_path.chmod(mode)) dir_path.remove() end else h.fail( Unhandled error! ) end end class iso _TestFileOpenInDirNotWriteable is UnitTest fun name(): String = files/File.open-dir-not-writeable fun apply(h: TestHelper) = ifdef not windows then try // make a temporary directory let dir_path = FilePath.mkdtemp( h.env.root as AmbientAuth, tmp.open-dir-not-writeable )? try let dir = Directory(dir_path)? // create a file (rw) let created: File = dir.create_file( created )? h.assert_true(created.valid()) h.assert_true(created.writeable) created.dispose() // open a file (ro) let readonly: File = dir.open_file( created )? h.assert_true(readonly.valid()) h.assert_false(readonly.writeable) readonly.dispose() else h.fail( Unhandled inner error! ) then dir_path.remove() end else h.fail( Unhandled error! ) end end class iso _TestFileCreateMissingCaps is UnitTest fun name(): String = files/File.create-missing-caps fun apply(h: TestHelper) = try let no_create_caps = FileCaps. all(). unset(FileCreate) let no_read_caps = FileCaps. all(). unset(FileWrite) let no_write_caps = FileCaps. all(). unset(FileRead) let file_path1 = FilePath( h.env.root as AmbientAuth, tmp.create-missing-caps1 , consume no_create_caps)? let file1 = File(file_path1) h.assert_false(file1.valid()) h.assert_is[FileErrNo](file1.errno(), FileError) let file_path2 = FilePath( h.env.root as AmbientAuth, tmp.create-missing-caps2 , consume no_read_caps)? let file2 = File(file_path2) h.assert_false(file2.valid()) h.assert_is[FileErrNo](file2.errno(), FileError) let file_path3 = FilePath( h.env.root as AmbientAuth, tmp.create-missing-caps3 , consume no_write_caps)? let file3 = File(file_path3) h.assert_false(file3.valid()) h.assert_is[FileErrNo](file3.errno(), FileError) else h.fail( Unhandled error! ) end class iso _TestFileOpen is UnitTest fun name(): String = files/File.open fun apply(h: TestHelper) = try let path = tmp.open let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = CreateFile(filepath) as File do file.print( foobar ) end try let file2 = OpenFile(filepath) as File h.assert_eq[String]( foobar , .join(file2.lines())) h.assert_true(file2.valid()) h.assert_false(file2.writeable) file2.dispose() else h.fail( Failed read on opened file! ) end filepath.remove() else h.fail( Unhandled error! ) end class iso _TestFileOpenError is UnitTest fun name(): String = files/File.open-error fun apply(h: TestHelper) = try let path = tmp.openerror let filepath = FilePath(h.env.root as AmbientAuth, path)? h.assert_false(filepath.exists()) let file = OpenFile(filepath) h.assert_true(file is FileError) else h.fail( Unhandled error! ) end class _TestFileOpenWrite is UnitTest fun name(): String = files/File.open.write fun apply(h: TestHelper) = try let path = tmp.open-write let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = CreateFile(filepath) as File do file.print( write on file opened read-only ) end h.assert_true(filepath.exists()) with opened = File.open(filepath) do h.assert_is[FileErrNo](FileOK, opened.errno()) h.assert_true(opened.valid(), read-only file not marked as valid ) h.assert_false(opened.writeable) h.assert_false(opened.write( oh, noes! )) end filepath.remove() else h.fail( Unhandled error! ) end class iso _TestFileOpenPermissionDenied is _NonRootTest fun name(): String = files/File.open-permission-denied fun apply_as_non_root(h: TestHelper) = ifdef not windows then // on windows all files are always writeable // with chmod there is no way to make a file not readable try let filepath = FilePath(h.env.root as AmbientAuth, tmp.open-not-readable )? with file = CreateFile(filepath) as File do file.print( unreadable ) end let mode: FileMode ref = FileMode. private() mode.owner_read = false mode.owner_write = false h.assert_true(filepath.chmod(mode)) let opened = File.open(filepath) h.assert_true(opened.errno() is FilePermissionDenied) h.assert_false(opened.valid()) let read = opened.read(10) h.assert_eq[USize](read.size(), 0) mode.owner_read = true mode.owner_write = true filepath.chmod(mode) filepath.remove() else h.fail( Unhandled error! ) end end class iso _TestFileLongLine is UnitTest fun name(): String = files/File.longline fun apply(h: TestHelper) = try let path = tmp.longline let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = File(filepath) do var longline = foobar for d in Range(0, 10) do longline = longline + longline end file.print(longline) file.sync() file.seek_start(0) let line1 = file.read_string(longline.size()) h.assert_eq[String](longline, consume line1) end filepath.remove() else h.fail( Unhandled error! ) end class iso _TestFileWrite is UnitTest fun name(): String = files/File.write fun apply(h: TestHelper) = try let path = tmp.write let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = CreateFile(filepath) as File do file.write( foobar\\n ) end with file2 = CreateFile(filepath) as File do let line1 = file2.read_string(8) h.assert_eq[String]( foobar\\n , consume line1) end filepath.remove() else h.fail( Unhandled error! ) end class iso _TestFileWritev is UnitTest fun name(): String = files/File.writev fun apply(h: TestHelper) = try let wb: Writer ref = Writer let line1 = foobar\\n let line2 = barfoo\\n wb.write(line1) wb.write(line2) let path = tmp.writev let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = CreateFile(filepath) as File do h.assert_true(file.writev(wb.done())) end with file2 = CreateFile(filepath) as File do h.assert_eq[String]( foobar barfoo , .join(file2.lines()) ) end filepath.remove() else h.fail( Unhandled error! ) end class iso _TestFileQueue is UnitTest fun name(): String = files/File.queue fun apply(h: TestHelper) = try let path = tmp.queue let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = CreateFile(filepath) as File do file.queue( foobar\\n ) end with file2 = CreateFile(filepath) as File do h.assert_eq[String]( foobar , .join(file2.lines())) end filepath.remove() else h.fail( Unhandled error! ) end class iso _TestFileQueuev is UnitTest fun name(): String = files/File.queuev fun apply(h: TestHelper) = try let wb: Writer ref = Writer let line1 = foobar\\n let line2 = barfoo\\n wb.write(line1) wb.write(line2) let path = tmp.queuev let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = CreateFile(filepath) as File do file.queuev(wb.done()) end with file2 = CreateFile(filepath) as File do h.assert_eq[String]( foobar barfoo , .join(file2.lines())) end filepath.remove() else h.fail( Unhandled error! ) end class iso _TestFileMixedWriteQueue is UnitTest fun name(): String = files/File.mixedwrite fun apply(h: TestHelper) = try let wb: Writer ref = Writer let line1 = foobar\\n let line2 = barfoo\\n let line3 = foobar2 let line4 = barfoo2 let line5 = foobar3\\n let line6 = barfoo3\\n wb.write(line1) wb.write(line2) let writev_data = wb.done() wb.write(line3) wb.write(line4) let printv_data = wb.done() wb.write(line5) wb.write(line6) let queuev_data = wb.done() let path = tmp.mixedwrite let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = CreateFile(filepath) as File do file.print(line3) file.queue(line5) file.write(line1) file.printv(consume printv_data) file.queuev(consume queuev_data) file.writev(consume writev_data) end with file2 = CreateFile(filepath) as File do h.assert_eq[String]( .join([ line3 + \\n line5 line1 line3 line4 + \\n line5 line6 line1 line2 ].values()), file2.read_string(256)) end filepath.remove() else h.fail( Unhandled error! ) end class iso _TestFileWritevLarge is UnitTest fun name(): String = files/File.writevlarge fun apply(h: TestHelper) = try let wb: Writer ref = Writer let writev_batch_size: USize = 10 + @pony_os_writev_max[I32]().usize() var count: USize = 0 while count writev_batch_size do wb.write(count.string() + \\n ) count = count + 1 end let path = tmp.writevlarge let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = CreateFile(filepath) as File do h.assert_true(file.writev(wb.done())) end with file2 = CreateFile(filepath) as File do count = 0 for line in file2.lines() do h.assert_eq[String](count.string(), consume line) count = count + 1 h.log(count.string()) end end filepath.remove() else h.fail( Unhandled error! ) end class iso _TestFileFlush is UnitTest fun name(): String = files/File.flush fun apply(h: TestHelper) = try let path = FilePath(h.env.root as AmbientAuth, tmp.flush )? with file = CreateFile(path) as File do // Flush with no writes succeeds trivially, but does nothing. h.assert_true(file.flush()) file.queue( foobar\\n ) // Without flushing, the file size is still zero. with read_file = CreateFile(path) as File do h.assert_eq[USize](0, read_file.size()) end h.assert_true(file.flush()) // Now expect to be able to see the data. with read_file = CreateFile(path) as File do h.assert_eq[String]( foobar , .join(read_file.lines())) end end path.remove() else h.fail( Unhandled error! ) end class iso _TestFileReadMore is UnitTest fun name(): String = files/File.read-more fun apply(h: TestHelper)? = let path = FilePath(h.env.root as AmbientAuth, tmp-read-more )? with file = CreateFile(path) as File do h.assert_true(file.write( foobar )) end with read_file = OpenFile(path) as File do let content = read_file.read(10) h.assert_eq[USize](6, content.size()) h.assert_is[FileErrNo]( read_file.errno(), FileOK, File errno is not OK after reading fewer bytes than requested ) h.assert_eq[USize](0, read_file.read(10).size()) h.assert_is[FileErrNo]( read_file.errno(), FileEOF, File errno is not EOF after reading past the last byte ) end path.remove() class iso _TestFileLinesEmptyFile is UnitTest var tmp_dir: (FilePath | None) = None fun ref set_up(h: TestHelper) ? = tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, empty )? fun ref tear_down(h: TestHelper) = try (tmp_dir as FilePath).remove() end fun name(): String = files/FileLines.empty fun ref apply(h: TestHelper) ? = let tmp_file = (tmp_dir as FilePath).join( empty )? with file = CreateFile(tmp_file) as File do file.write(Array[U8]) end with f = OpenFile(tmp_file) as File do let fl = FileLines(f) var lines_returned: USize = 0 for _ in fl do lines_returned = lines_returned + 1 end h.assert_eq[USize](lines_returned, 0, FileLines returned a line for an empty file ) end class iso _TestFileLinesSingleLine is UnitTest let lines: Array[String] = [ as String: a a\\n a\\r\\n abcd ABCD\\n ABCD\\r\\n String.from_array(recover val Array[U8].init('a', 255) end) String.from_array(recover val Array[U8].init('a', 255) end) + \\n String.from_array(recover val Array[U8].init('a', 255) end) + \\r\\n String.from_array(recover val Array[U8].init('b', 256) end) String.from_array(recover val Array[U8].init('b', 256) end) + \\n String.from_array(recover val Array[U8].init('b', 256) end) + \\r\\n String.from_array(recover val Array[U8].init('c', 257) end) String.from_array(recover val Array[U8].init('c', 257) end) + \\n String.from_array(recover val Array[U8].init('c', 257) end) + \\r\\n String.from_array(recover val Array[U8].init('d', 100_000) end) ] var tmp_dir: (FilePath | None) = None fun ref set_up(h: TestHelper) ? = tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, single-line )? fun ref tear_down(h: TestHelper) = try (tmp_dir as FilePath).remove() end fun name(): String = files/FileLines.single_line fun ref apply(h: TestHelper)? = var i: USize = 0 for line in lines.values() do let tmp_file = (tmp_dir as FilePath).join( single-line- + i.string())? with file = CreateFile(tmp_file) as File do h.assert_true( file.write(line), could not write to file: + tmp_file.path) end with file = OpenFile(tmp_file) as File do let fl = FileLines(file) var lines_returned: USize = 0 for read_line in fl do let compare_line = if line.contains( \\r\\n ) then line.substring(0, line.size().isize() - 2) elseif line.contains( \\n ) then line.substring(0, line.size().isize() -1) else line end h.assert_eq[String](consume read_line, compare_line) lines_returned = lines_returned + 1 end h.assert_eq[USize](lines_returned, 1, FileLines returned + lines_returned.string() + for single line: ' + line + ' ) h.assert_eq[USize](file.position(), line.size(), FileLines advanced the file cursor to + file.position().string() + though the line has + line.size().string() + bytes. ) end i = i + 1 end class _TestFileLinesMultiLine is UnitTest var tmp_dir: (FilePath | None) = None let line_endings: Array[String] val = [ \\n ; \\r\\n ] let file_contents: Array[(Array[String] val, USize)] val = [ ([ a ; b ], 2) ([ a ; ; b ], 3) ([ a ; b ; ], 2) ([ ; b ; c ], 3) ([ ; ], 1) ([ ; ], 2) ([ ; ; ], 2) ([ String.from_array(recover val Array[U8].init('a', 254) end) String.from_array(recover val Array[U8].init('a', 257) end)], 2) ([ String.from_array(recover val Array[U8].init('b', 256) end) String.from_array(recover val Array[U8].init('c', 256) end) ], 3) ] fun ref set_up(h: TestHelper) ? = tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, multi-line )? fun ref tear_down(h: TestHelper) = try (tmp_dir as FilePath).remove() end fun name(): String = files/FileLines.multi_line fun ref apply(h: TestHelper)? = var i: USize = 0 for lines_and_count in file_contents.values() do let lines = lines_and_count._1 for line_ending in line_endings.values() do let tmp_file = (tmp_dir as FilePath).join( multi-line- + i.string())? let content = recover val line_ending.join(lines.values()) end with file = CreateFile(tmp_file) as File do h.assert_true( file.write(content), could not write to file: + tmp_file.path) end with file = OpenFile(tmp_file) as File do let fl = FileLines(file) var lines_returned: USize = 0 for read_line in fl do lines_returned = lines_returned + 1 end let expected_line_count = lines_and_count._2 h.assert_eq[USize]( lines_returned, expected_line_count, FileLines returned + lines_returned.string() + (expected + expected_line_count.string() + ) lines for file content:\\n----\\n + content + \\n----\\n ) end i = i + 1 end end class _TestFileLinesMovingCursor is UnitTest var tmp_dir: (FilePath | None) = None fun ref set_up(h: TestHelper) ? = tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, moving-cursor )? fun ref tear_down(h: TestHelper) = try (tmp_dir as FilePath).remove() end fun name(): String = files/FileLines.moving_cursor fun ref apply(h: TestHelper)? = let tmp_file = (tmp_dir as FilePath).join( moving-cursor )? let content = a\\nb\\nc\\nd with file = CreateFile(tmp_file) as File do h.assert_true( file.write(content), could not write to file: + tmp_file.path) end with file = OpenFile(tmp_file) as File do h.assert_eq[USize](file.position(), 0) let fl1 = FileLines(file) h.assert_eq[String]( .join(fl1), a b c d ) h.assert_eq[USize](file.position(), content.size()) file.seek_start(2) let fl2 = FileLines(file) h.assert_eq[String]( .join(fl2), b c d ) h.assert_eq[USize](file.position(), content.size()) file.seek_start(0) let fl3 = FileLines(file) file.seek_start(3) h.assert_true(fl3.has_next()) h.assert_eq[String](fl3.next()?, a ) h.assert_eq[USize](file.position(), 2) file.seek_start(5) h.assert_true(fl3.has_next()) h.assert_eq[String](fl3.next()?, b ) h.assert_eq[USize](file.position(), 4) file.seek_start(0) h.assert_true(fl3.has_next()) h.assert_eq[String](fl3.next()?, c ) h.assert_eq[USize](file.position(), 6) file.seek_start(10) h.assert_true(fl3.has_next()) h.assert_eq[String](fl3.next()?, d ) h.assert_eq[USize](file.position(), 7) end","title":"_test.pony"},{"location":"src/files/directory/","text":"use time use @ponyint_o_rdonly[I32]() use @ponyint_o_rdwr[I32]() use @ponyint_o_creat[I32]() use @ponyint_o_trunc[I32]() use @ponyint_o_directory[I32]() use @ponyint_o_cloexec[I32]() use @ponyint_at_removedir[I32]() use @unlinkat[I32](fd: I32, target: Pointer[U8] tag, flags: I32) primitive _DirectoryHandle primitive _DirectoryEntry class Directory Operations on a directory. The directory-relative functions (open, etc) use the *at interface on FreeBSD and Linux. This isn't available on OS X prior to 10.10, so it is not used. On FreeBSD, this allows the directory-relative functions to take advantage of Capsicum. let path: FilePath This is the filesystem path locating this directory on the file system and an object capability granting access to operate on this directory. var _fd: I32 = -1 // We don't need a file descriptor in Windows. However we do still need to // know whether we've disposed of this object, so we use the _fd to indicate // this. // 0 = not yet disposed of. // -1 = disposed of. new create(from: FilePath) ? = This will raise an error if the path doesn't exist or it is not a directory, or if FileRead or FileStat permission isn't available. if not from.caps(FileRead) then error end if not FileInfo(from)?.directory then error end path = from ifdef posix then _fd = @open[I32](from.path.cstring(), @ponyint_o_rdonly() or @ponyint_o_directory() or @ponyint_o_cloexec()) if _fd == -1 then error end elseif windows then _fd = 0 else compile_error unsupported platform end _FileDes.set_rights(_fd, path)? new iso _relative(path': FilePath, fd': I32) = Internal constructor. Capsicum rights are already set by inheritence. path = path' _fd = fd' fun entries(): Array[String] iso^ ? = The entries will include everything in the directory, but it is not recursive. The path for the entry will be relative to the directory, so it will contain no directory separators. The entries will not include . or .. . if not path.caps(FileRead) or (_fd == -1) then error end let path' = path.path let fd' = _fd recover let list = Array[String] ifdef posix then if fd' == -1 then error end let h = ifdef linux or bsd then let fd = @openat[I32](fd', . .cstring(), @ponyint_o_rdonly() or @ponyint_o_directory() or @ponyint_o_cloexec()) @fdopendir[Pointer[_DirectoryHandle]](fd) else @opendir[Pointer[_DirectoryHandle]](path'.cstring()) end if h.is_null() then error end while true do let p = @ponyint_unix_readdir[Pointer[U8] iso^](h) if p.is_null() then break end list.push(recover String.from_cstring(consume p) end) end @closedir[I32](h) elseif windows then var find = @ponyint_windows_find_data[Pointer[_DirectoryEntry]]() let search = path' + \\\\* let h = @FindFirstFileA[Pointer[_DirectoryHandle]]( search.cstring(), find) if h.usize() == -1 then error end repeat let p = @ponyint_windows_readdir[Pointer[U8] iso^](find) if not p.is_null() then list.push(recover String.from_cstring(consume p) end) end until not @FindNextFileA[Bool](h, find) end @FindClose[Bool](h) @ponyint_windows_find_data_free[None](find) else compile_error unsupported platform end consume list end fun open(target: String): Directory iso^ ? = Open a directory relative to this one. Raises an error if the path is not within this directory hierarchy. if _fd == -1 then error end let path' = FilePath(path, target, path.caps)? ifdef linux or bsd then let fd' = @openat[I32](_fd, target.cstring(), @ponyint_o_rdonly() or @ponyint_o_directory() or @ponyint_o_cloexec()) _relative(path', fd') else recover create(path')? end end fun mkdir(target: String): Bool = Creates a directory relative to this one. Returns false if the path is not within this directory hierarchy or if FileMkdir permission is missing. if not path.caps(FileMkdir) or not path.caps(FileLookup) or (_fd == -1) then return false end try let path' = FilePath(path, target, path.caps)? ifdef linux or bsd then var offset: ISize = 0 repeat let element = try offset = target.find(Path.sep(), offset)? + 1 target.substring(0, offset - 1) else offset = -1 target end @mkdirat[I32](_fd, element.cstring(), U32(0x1FF)) until offset 0 end FileInfo(path')?.directory else path'.mkdir() end else false end fun create_file(target: String): File iso^ ? = Open for read/write, creating if it doesn't exist, preserving the contents if it does exist. if not path.caps(FileCreate) or not path.caps(FileRead) or not path.caps(FileWrite) or (_fd == -1) then error end let path' = FilePath(path, target, path.caps)? ifdef linux or bsd then let fd' = @openat[I32](_fd, target.cstring(), @ponyint_o_rdwr() or @ponyint_o_creat() or @ponyint_o_cloexec(), I32(0x1B6)) recover File._descriptor(fd', path')? end else recover File(path') end end fun open_file(target: String): File iso^ ? = Open for read only, failing if it doesn't exist. if not path.caps(FileRead) or (_fd == -1) then error end let path' = FilePath(path, target, path.caps - FileWrite)? ifdef linux or bsd then let fd' = @openat[I32](_fd, target.cstring(), @ponyint_o_rdonly() or @ponyint_o_cloexec(), I32(0x1B6)) recover File._descriptor(fd', path')? end else recover File.open(path') end end fun info(): FileInfo ? = Return a FileInfo for this directory. Raise an error if the fd is invalid or if we don't have FileStat permission. FileInfo._descriptor(_fd, path)? fun chmod(mode: FileMode box): Bool = Set the FileMode for this directory. _FileDes.chmod(_fd, path, mode) fun chown(uid: U32, gid: U32): Bool = Set the owner and group for this directory. Does nothing on Windows. _FileDes.chown(_fd, path, uid, gid) fun touch(): Bool = Set the last access and modification times of the directory to now. _FileDes.touch(_fd, path) fun set_time(atime: (I64, I64), mtime: (I64, I64)): Bool = Set the last access and modification times of the directory to the given values. _FileDes.set_time(_fd, path, atime, mtime) fun infoat(target: String): FileInfo ? = Return a FileInfo for some path relative to this directory. if not path.caps(FileStat) or not path.caps(FileLookup) or (_fd == -1) then error end let path' = FilePath(path, target, path.caps)? ifdef linux or bsd then FileInfo._relative(_fd, path', target)? else FileInfo(path')? end fun chmodat(target: String, mode: FileMode box): Bool = Set the FileMode for some path relative to this directory. if not path.caps(FileChmod) or not path.caps(FileLookup) or (_fd == -1) then return false end try let path' = FilePath(path, target, path.caps)? ifdef linux or bsd then 0 == @fchmodat[I32](_fd, target.cstring(), mode._os(), I32(0)) else path'.chmod(mode) end else false end fun chownat(target: String, uid: U32, gid: U32): Bool = Set the FileMode for some path relative to this directory. if not path.caps(FileChown) or not path.caps(FileLookup) or (_fd == -1) then return false end try let path' = FilePath(path, target, path.caps)? ifdef linux or bsd then 0 == @fchownat[I32](_fd, target.cstring(), uid, gid, I32(0)) else path'.chown(uid, gid) end else false end fun touchat(target: String): Bool = Set the last access and modification times of the directory to now. set_time_at(target, Time.now(), Time.now()) fun set_time_at( target: String, atime: (I64, I64), mtime: (I64, I64)) : Bool = Set the last access and modification times of the directory to the given values. if not path.caps(FileChown) or not path.caps(FileLookup) or (_fd == -1) then return false end try let path' = FilePath(path, target, path.caps)? ifdef linux or bsd then var tv: (ILong, ILong, ILong, ILong) = ( atime._1.ilong(), atime._2.ilong() / 1000, mtime._1.ilong(), mtime._2.ilong() / 1000 ) 0 == @futimesat[I32](_fd, target.cstring(), addressof tv) else path'.set_time(atime, mtime) end else false end fun symlink(source: FilePath, link_name: String): Bool = Link the source path to the link_name, where the link_name is relative to this directory. if not path.caps(FileLink) or not path.caps(FileLookup) or not path.caps(FileCreate) or not source.caps(FileLink) or (_fd == -1) then return false end try let path' = FilePath(path, link_name, path.caps)? ifdef linux or bsd then 0 == @symlinkat[I32](source.path.cstring(), _fd, link_name.cstring()) else source.symlink(path') end else false end fun remove(target: String): Bool = Remove the file or directory. The directory contents will be removed as well, recursively. Symlinks will be removed but not traversed. if not path.caps(FileLookup) or not path.caps(FileRemove) or (_fd == -1) then return false end try let path' = FilePath(path, target, path.caps)? ifdef linux or bsd then let fi = FileInfo(path')? if fi.directory and not fi.symlink then let directory = open(target)? for entry in directory.entries()?.values() do if not directory.remove(entry) then return false end end 0 == @unlinkat(_fd, target.cstring(), @ponyint_at_removedir()) else 0 == @unlinkat(_fd, target.cstring(), 0) end else path'.remove() end else false end fun rename(source: String, to: Directory box, target: String): Bool = Rename source (which is relative to this directory) to target (which is relative to the `to` directory). if not path.caps(FileLookup) or not path.caps(FileRename) or not to.path.caps(FileLookup) or not to.path.caps(FileCreate) or (_fd == -1) or (to._fd == -1) then return false end try let path' = FilePath(path, source, path.caps)? let path'' = FilePath(to.path, target, to.path.caps)? ifdef linux or bsd then 0 == @renameat[I32](_fd, source.cstring(), to._fd, target.cstring()) else path'.rename(path'') end else false end fun ref dispose() = Close the directory. if _fd != -1 then ifdef posix then @close[I32](_fd) end _fd = -1 end fun _final() = Close the file descriptor. if _fd != -1 then ifdef posix then @close[I32](_fd) end end","title":"directory.pony"},{"location":"src/files/file/","text":"use @_read[I32](fd: I32, buffer: Pointer[None], bytes_to_read: I32) if windows use @read[ISize](fd: I32, buffer: Pointer[None], bytes_to_read: USize) if not windows use @_write[I32](fd: I32, buffer: Pointer[None], bytes_to_send: I32) if windows use @writev[ISize](fd: I32, buffer: Pointer[None], num_to_send: I32) if not windows use @_lseeki64[I64](fd: I32, offset: I64, base: I32) if windows use @lseek64[I64](fd: I32, offset: I64, base: I32) if linux use @lseek[I64](fd: I32, offset: I64, base: I32) if not windows and not linux use @FlushFileBuffers[Bool](file_handle: Pointer[None]) if windows use @_get_osfhandle[Pointer[None]](fd: I32) if windows use @fsync[I32](fd: I32) if not windows use @fdatasync[I32](fd: I32) if not windows use @_chsize_s[I32](fd: I32, len: I64) if windows use @ftruncate64[I32](fd: I32, len: I64) if linux use @ftruncate[I32](fd: I32, len: I64) if not windows and not linux use @_close[I32](fd: I32) if windows use @close[I32](fd: I32) if not windows use @pony_os_writev_max[I32]() use @pony_os_errno[I32]() use collections primitive FileOK primitive FileError primitive FileEOF primitive FileBadFileNumber primitive FileExists primitive FilePermissionDenied primitive _EBADF fun apply(): I32 = 9 primitive _EEXIST fun apply(): I32 = 17 primitive _EACCES fun apply(): I32 = 13 type FileErrNo is ( FileOK | FileError | FileEOF | FileBadFileNumber | FileExists | FilePermissionDenied ) primitive CreateFile Open a File for read/write, creating if it doesn't exist, preserving the contents if it does exist. fun apply(from: FilePath): (File | FileErrNo) = let file = File(from) let err = file.errno() match err | FileOK = file else err end primitive OpenFile Open a File for read only. fun apply(from: FilePath): (File | FileErrNo) = let file = File.open(from) let err = file.errno() match err | FileOK = file else err end class File Operations on a file. let path: FilePath This is the filesystem path locating this file on the file system and an object capability granting access to operate on this file. let writeable: Bool `true` if the underlying file descriptor has been opened as writeable. let _newline: String = \\n var _unsynced_data: Bool = false var _unsynced_metadata: Bool = false var _fd: I32 var _errno: FileErrNo = FileOK embed _pending_writev: Array[(Pointer[U8] tag, USize)] = _pending_writev.create() var _pending_writev_total: USize = 0 new create(from: FilePath) = Attempt to open for read/write, creating if it doesn't exist, preserving the contents if it does exist. Set errno according to result. path = from writeable = true _fd = -1 if not from.caps(FileRead) or not from.caps(FileWrite) then _errno = FileError else var flags: I32 = @ponyint_o_rdwr() let mode = FileMode._os() // default file permissions if not path.exists() then if not path.caps(FileCreate) then _errno = FileError else flags = flags or @ponyint_o_creat() or @ponyint_o_trunc() end end _fd = ifdef windows then @_open[I32](path.path.cstring(), flags, mode.i32()) else @open[I32](path.path.cstring(), flags, mode) end if _fd == -1 then _errno = _get_error() else try _FileDes.set_rights(_fd, path, writeable)? else _errno = FileError end end end new open(from: FilePath) = Open for read only. Set _errno according to result. path = from writeable = false _fd = -1 if not path.caps(FileRead) or try let info' = FileInfo(path)? info'.directory or info'.pipe else true end then _errno = FileError else _fd = ifdef windows then @_open[I32](path.path.cstring(), @ponyint_o_rdonly()) else @open[I32](path.path.cstring(), @ponyint_o_rdonly()) end if _fd == -1 then _errno = _get_error() else try _FileDes.set_rights(_fd, path, writeable)? else _errno = FileError end end end new _descriptor(fd: I32, from: FilePath) ? = Internal constructor from a file descriptor and a path. if not from.caps(FileRead) or (fd == -1) then error end path = from writeable = from.caps(FileWrite) _fd = fd _FileDes.set_rights(_fd, path, writeable)? fun errno(): FileErrNo = Returns the last error code set for this File _errno fun ref clear_errno() = Clears the last error code set for this File. Clears the error indicator for the stream. _errno = FileOK fun _get_error(): FileErrNo = Fetch errno from the OS. let os_errno = @pony_os_errno() match os_errno | _EBADF() = return FileBadFileNumber | _EEXIST() = return FileExists | _EACCES() = return FilePermissionDenied else return FileError end fun valid(): Bool = Returns true if the file is currently open. not (_fd == -1) fun ref read(len: USize): Array[U8] iso^ = Returns up to len bytes. if _fd != -1 then let result = recover Array[U8] . undefined(len) end let r = (ifdef windows then @_read(_fd, result.cpointer(), len.i32()) else @read(_fd, result.cpointer(), len) end) .isize() match r | 0 = _errno = FileEOF | -1 = _errno = _get_error() end result.truncate(r.usize()) result else recover Array[U8] end end fun ref read_string(len: USize): String iso^ = Returns up to len bytes. The resulting string may have internal null characters. if _fd != -1 then let result = recover String(len) end let r = (ifdef windows then @_read(_fd, result.cpointer(), result.space().i32()) else @read(_fd, result.cpointer(), result.space()) end).isize() match r | 0 = _errno = FileEOF | -1 = _errno = _get_error() end result.truncate(r.usize()) result else recover String end end fun ref print(data: ByteSeq box): Bool = Same as write, buts adds a newline. queue(data) queue(_newline) _pending_writes() fun ref printv(data: ByteSeqIter box): Bool = Print an iterable collection of ByteSeqs. for bytes in data.values() do queue(bytes) queue(_newline) end _pending_writes() fun ref write(data: ByteSeq box): Bool = Returns false if the file wasn't opened with write permission. Returns false and closes the file if not all the bytes were written. queue(data) _pending_writes() fun ref writev(data: ByteSeqIter box): Bool = Write an iterable collection of ByteSeqs. for bytes in data.values() do queue(bytes) end _pending_writes() fun ref queue(data: ByteSeq box) = Queue data to be written NOTE: Queue'd data will always be written before normal print/write requested data _pending_writev . push((data.cpointer(), data.size())) _pending_writev_total = _pending_writev_total + data.size() fun ref queuev(data: ByteSeqIter box) = Queue an iterable collection of ByteSeqs to be written NOTE: Queue'd data will always be written before normal print/write requested data for bytes in data.values() do queue(bytes) end fun ref flush(): Bool = Flush any queued data _pending_writes() fun ref _pending_writes(): Bool = Write pending data. Returns false if the file wasn't opened with write permission. Returns false and closes the file and discards all pending data if not all the bytes were written. Returns true if it sent all pending data. try (let result, let num_written, let new_pending_total) = _write_to_disk()? _pending_writev_total = new_pending_total if _pending_writev_total == 0 then _pending_writev.clear() _unsynced_data = true _unsynced_metadata = true else if num_written 0 then _unsynced_data = true _unsynced_metadata = true end for d in Range[USize](0, num_written, 1) do _pending_writev.shift()? end end return result else // TODO: error recovery? EINTR? // check error _errno = _get_error() dispose() return false end fun _write_to_disk(): (Bool, USize, USize) ? = Write pending data. Returns false if the file wasn't opened with write permission. Raises an error if not all the bytes were written. Returns true if it sent all pending data. Returns num_processed and new pending_total also. var num_to_send: I32 = 0 var num_sent: USize = 0 var bytes_to_send: USize = 0 var pending_total = _pending_writev_total if (not writeable) or (_fd == -1) then return (false, num_sent, pending_total) end // TODO: Make writev_batch_size user configurable let writev_batch_size = @pony_os_writev_max() while pending_total 0 do // Determine the number of bytes and buffers to send. num_to_send = _pending_writev.size().i32() - num_sent.i32() if num_to_send = writev_batch_size then bytes_to_send = pending_total else // We have more buffers than a single writev can handle. // We must iterate over the buffers being sent to add up to the total. num_to_send = writev_batch_size bytes_to_send = 0 var counter: I32 = num_sent.i32() repeat bytes_to_send = bytes_to_send + _pending_writev(counter.usize())?._2 counter = counter + 1 until counter = num_to_send end end // Write as much data as possible (vectored i/o). // On Windows only write 1 buffer at a time. var len = ifdef windows then @_write(_fd, _pending_writev(num_sent)?._1, bytes_to_send.i32()).isize() else @writev(_fd, _pending_writev.cpointer(num_sent), num_to_send).isize() end if len bytes_to_send.isize() then error end // We've sent all the data we requested in this batch. pending_total = pending_total - bytes_to_send num_sent = num_sent + num_to_send.usize() end (true, num_sent, pending_total) fun ref position(): USize = Return the current cursor position in the file. if _fd != -1 then let o: I64 = 0 let b: I32 = 1 let r = ifdef windows then @_lseeki64(_fd, o, b) else ifdef linux then @lseek64(_fd, o, b) else @lseek(_fd, o, b) end end if r 0 then _errno = _get_error() end r.usize() else 0 end fun ref size(): USize = Return the total length of the file. let pos = position() _seek(0, 2) let len = position() _seek(pos.i64(), 0) len fun ref seek_start(offset: USize) = Set the cursor position relative to the start of the file. if path.caps(FileSeek) then _seek(offset.i64(), 0) end fun ref seek_end(offset: USize) = Set the cursor position relative to the end of the file. if path.caps(FileSeek) then _seek(-offset.i64(), 2) end fun ref seek(offset: ISize) = Move the cursor position. if path.caps(FileSeek) then _seek(offset.i64(), 1) end fun ref sync() = Sync the file contents to physical storage. if path.caps(FileSync) and (_fd != -1) then ifdef windows then let r = @FlushFileBuffers(@_get_osfhandle(_fd)) if r == true then _errno = FileError end else let r = @fsync(_fd) if r 0 then _errno = _get_error() end end end _unsynced_data = false _unsynced_metadata = false fun ref datasync() = Sync the file contents to physical storage. if path.caps(FileSync) and (_fd != -1) then ifdef windows then let r = @FlushFileBuffers(@_get_osfhandle(_fd)) if r == true then _errno = FileError end else let r = @fdatasync(_fd) if r 0 then _errno = _get_error() end end end _unsynced_data = false fun ref set_length(len: USize): Bool = Change the file size. If it is made larger, the new contents are undefined. if path.caps(FileTruncate) and writeable and (_fd != -1) then let pos = position() let result = ifdef windows then @_chsize_s(_fd, len.i64()) else ifdef linux then @ftruncate64(_fd, len.i64()) else @ftruncate(_fd, len.i64()) end end if pos = len then _seek(0, 2) end if result == 0 then true else _errno = _get_error() false end else false end fun info(): FileInfo ? = Return a FileInfo for this directory. Raise an error if the fd is invalid or if we don't have FileStat permission. FileInfo._descriptor(_fd, path)? fun chmod(mode: FileMode box): Bool = Set the FileMode for this directory. _FileDes.chmod(_fd, path, mode) fun chown(uid: U32, gid: U32): Bool = Set the owner and group for this directory. Does nothing on Windows. _FileDes.chown(_fd, path, uid, gid) fun touch(): Bool = Set the last access and modification times of the directory to now. _FileDes.touch(_fd, path) fun set_time(atime: (I64, I64), mtime: (I64, I64)): Bool = Set the last access and modification times of the directory to the given values. _FileDes.set_time(_fd, path, atime, mtime) fun ref lines(): FileLines = Returns an iterator for reading lines from the file. FileLines(this) fun ref dispose() = Close the file. Future operations will do nothing. if _fd != -1 then if (_pending_writev_total 0) and (_errno is FileOK) then flush() end if _unsynced_data or _unsynced_metadata then sync() end let r = ifdef windows then @_close(_fd) else @close(_fd) end if r 0 then _errno = _get_error() end _fd = -1 _pending_writev_total = 0 _pending_writev.clear() end fun ref _seek(offset: I64, base: I32) = Move the cursor position. if _fd != -1 then let r = ifdef windows then @_lseeki64(_fd, offset, base) else ifdef linux then @lseek64(_fd, offset, base) else @lseek(_fd, offset, base) end end if r 0 then _errno = _get_error() end end fun _final() = Close the file. if _fd != -1 then if (_pending_writev_total 0) and (_errno is FileOK) then // attempt to write any buffered data try _write_to_disk()? end end if _unsynced_data or _unsynced_metadata then // attempt to sync any un-synced data if (path.caps.value() and FileSync.value()) 0 then ifdef windows then @FlushFileBuffers(@_get_osfhandle(_fd)) else @fsync(_fd) end end end // close file ifdef windows then @_close(_fd) else @close(_fd) end end","title":"file.pony"},{"location":"src/files/file_caps/","text":"use collections primitive FileCreate fun value(): U32 = 1 0 primitive FileChmod fun value(): U32 = 1 1 primitive FileChown fun value(): U32 = 1 2 primitive FileLink fun value(): U32 = 1 3 primitive FileLookup fun value(): U32 = 1 4 primitive FileMkdir fun value(): U32 = 1 5 primitive FileRead fun value(): U32 = 1 6 primitive FileRemove fun value(): U32 = 1 7 primitive FileRename fun value(): U32 = 1 8 primitive FileSeek fun value(): U32 = 1 9 primitive FileStat fun value(): U32 = 1 10 primitive FileSync fun value(): U32 = 1 11 primitive FileTime fun value(): U32 = 1 12 primitive FileTruncate fun value(): U32 = 1 13 primitive FileWrite fun value(): U32 = 1 14 primitive FileExec fun value(): U32 = 1 15 type FileCaps is Flags[ ( FileCreate | FileChmod | FileChown | FileLink | FileLookup | FileMkdir | FileRead | FileRemove | FileRename | FileSeek | FileStat | FileSync | FileTime | FileTruncate | FileWrite | FileExec ), U32 ]","title":"file_caps.pony"},{"location":"src/files/file_info/","text":"class val FileInfo This contains file system metadata for a path. A symlink will report information about itself, other than the size which will be the size of the target. A broken symlink will report as much as it can and will set the broken flag. let filepath: FilePath let mode: FileMode val = recover FileMode end UNIX-style file mode. let hard_links: U32 = 0 Number of hardlinks to this `filepath`. let device: U64 = 0 OS id of the device containing this `filepath`. Device IDs consist of a major and minor device id, denoting the type of device and the instance of this type on the system. let inode: U64 = 0 UNIX specific INODE number of `filepath`. Is 0 on Windows. let uid: U32 = 0 UNIX-style user ID of the owner of `filepath`. let gid: U32 = 0 UNIX-style user ID of the owning group of `filepath`. let size: USize = 0 Total size of `filepath` in bytes. In case of a symlink this is the size of the target, not the symlink itself. let access_time: (I64, I64) = (0, 0) Time of last access as a tuple of seconds and nanoseconds since the epoch: ```pony (let a_secs: I64, let a_nanos: I64) = file_info.access_time ``` let modified_time: (I64, I64) = (0, 0) Time of last modification as tuple of seconds and nanoseconds since the epoch: ```pony (let m_secs: I64, let m_nanos: I64) = file_info.modified_time ``` let change_time: (I64, I64) = (0, 0) Time of the last change either the attributes (number of links, owner, group, file mode, ...) or the content of `filepath` as a tuple of seconds and nanoseconds since the epoch: ```pony (let c_secs: I64, let c_nanos: I64) = file_info.change_time ``` On Windows this will be the file creation time. let file: Bool = false `true` if `filepath` points to an a regular file. let directory: Bool = false `true` if `filepath` points to a directory. let pipe: Bool = false `true` if `filepath` points to a named pipe. let symlink: Bool = false `true` if `filepath` points to a symbolic link. let broken: Bool = false `true` if `filepath` points to a broken symlink. new val create(from: FilePath) ? = This will raise an error if the FileStat capability isn't available or the path doesn't exist. if not from.caps(FileStat) then error end filepath = from if not @pony_os_stat[Bool](from.path.cstring(), this) then error end new val _descriptor(fd: I32, path: FilePath) ? = This will raise an error if the FileStat capability isn't available or the file descriptor is invalid. if not path.caps(FileStat) or (fd == -1) then error end filepath = path let fstat = @pony_os_fstat[Bool](fd, path.path.cstring(), this) if not fstat then error end new val _relative(fd: I32, path: FilePath, from: String) ? = if not path.caps(FileStat) or (fd == -1) then error end filepath = path let fstatat = @pony_os_fstatat[Bool](fd, from.cstring(), this) if not fstatat then error end","title":"file_info.pony"},{"location":"src/files/file_lines/","text":"use buffered class FileLines is Iterator[String iso^] Iterate over the lines in a file. Returns lines without trailing line breaks. Advances the file cursor to the end of each line returned from `next`. This class buffers the file contents to accumulate full lines. If the file does not contain linebreaks, the whole file content is read and buffered, which might exceed memory resources. Take care. let _reader: Reader = Reader let _file: File let _min_read_size: USize var _last_line_length: USize var _buffer_cursor: USize Internal cursor for keeping track until where in the file we already buffered. var _cursor: USize Keeps track of the file position we update after every returned line. var _has_next: Bool new create(file: File, min_read_size: USize = 256) = Create a FileLines instance on a given file. This instance returns lines from the position of the given `file` at the time this constructor is called. Later manipulation of the file position is not accounted for. As a result iterating with this class will always return the full file content without gaps or repeated lines. `min_read_size` determines the minimum amount of bytes to read from the file in one go. This class keeps track of the line lengths in the current file and uses the length of the last line as amount of bytes to read next, but it will never read less than `min_read_size`. _file = file _buffer_cursor = _file.position() _cursor = _file.position() _min_read_size = min_read_size _last_line_length = min_read_size _has_next = _file.valid() fun ref has_next(): Bool = _has_next fun ref next(): String iso^ ? = Returns the next line in the file. while true do try return _read_line()? else if not _fill_buffer() then // nothing to read from file, we can savely exit here break end end end _has_next = false if _reader.size() 0 then // don't forget the last line _read_last_line()? else // nothing to return, we can only error here error end fun ref _read_line(): String iso^ ? = let line = _reader.line(where keep_line_breaks = true)? let len = line.size() _last_line_length = len // advance the cursor to the end of the returned line _inc_public_file_cursor(len) // strip trailing line break line.truncate( len - if (len = 2) and (line.at_offset(-2)? == '\\r') then 2 else 1 end) consume line fun ref _fill_buffer(): Bool = read from file and fill the reader-buffer. Returns `true` if data could be read from the file. After a successful reading operation `_buffer_cursor` is updated. var result = true // get back to position of last line let current_pos = _file.position() _file.seek_start(_buffer_cursor) if _file.valid() then let read_bytes = _last_line_length.max(_min_read_size) let read_buf = _file.read(read_bytes) _buffer_cursor = _file.position() let errno = _file.errno() if (read_buf.size() == 0) and (errno isnt FileOK) then result = false else // TODO: Limit size of read buffer _reader.append(consume read_buf) end else result = false end // reset position to not disturb other operations on the file // we only actually advance the cursor if the line is returned. _file.seek_start(current_pos) result fun ref _read_last_line(): String iso^ ? = let block = _reader.block(_reader.size())? _inc_public_file_cursor(block.size()) String.from_iso_array(consume block) fun ref _inc_public_file_cursor(amount: USize) = _cursor = _cursor + amount _file.seek_start(_cursor)","title":"file_lines.pony"},{"location":"src/files/file_mode/","text":"class FileMode This stores a UNIX-style mode broken out into a Bool for each bit. For other operating systems, the mapping will be approximate. For example, on Windows, if the file is readable all the read Bools will be set, and if the file is writeable, all the write Bools will be set. The default mode is read/write for the owner, read-only for everyone else. var setuid: Bool = false `true` if the SETUID bit is set. var setgid: Bool = false `true` if the SETGID bit is set. var sticky: Bool = false `true` if the sticky bit is set. var owner_read: Bool = true `true` if the owning user can read the file. var owner_write: Bool = true `true` if the owning user can write to the file. var owner_exec: Bool = false `true` if the owning user can execute the file. var group_read: Bool = true `true` if members of the owning group can read the file. var group_write: Bool = false `true` if members of the owning group can write to the file. var group_exec: Bool = false `true` if members of the owning group can execute the file. var any_read: Bool = true `true` if every user can read the file. var any_write: Bool = false `true` if every user can write to the file. var any_exec: Bool = false `true if every user can execute the file. fun ref exec() = Set the executable flag for everyone. owner_exec = true group_exec = true any_exec = true fun ref shared() = Set the write flag for everyone to the same as owner_write. group_write = owner_write any_write = owner_write fun ref group() = Clear all of the any-user flags. any_read = false any_write = false any_exec = false fun ref private() = Clear all of the group and any-user flags. group_read = false group_write = false group_exec = false any_read = false any_write = false any_exec = false fun _os(): U32 = Get the OS specific integer for a file mode. On Windows, if any read flag is set, the path is made readable, and if any write flag is set, the path is made writeable. var m: U32 = 0 ifdef windows then if owner_read or group_read or any_read then m = m or 0x100 end if owner_write or group_write or any_write then m = m or 0x80 end else if setuid then m = m or 0x800 end if setgid then m = m or 0x400 end if sticky then m = m or 0x200 end if owner_read then m = m or 0x100 end if owner_write then m = m or 0x80 end if owner_exec then m = m or 0x40 end if group_read then m = m or 0x20 end if group_write then m = m or 0x10 end if group_exec then m = m or 0x8 end if any_read then m = m or 0x4 end if any_write then m = m or 0x2 end if any_exec then m = m or 0x1 end end m","title":"file_mode.pony"},{"location":"src/files/file_path/","text":"use time interface WalkHandler A handler for `FilePath.walk`. fun ref apply(dir_path: FilePath, dir_entries: Array[String] ref) class val FilePath A FilePath represents a capability to access a path. The path will be represented as an absolute path and a set of capabilities for operations on that path. let path: String Absolute filesystem path. let caps: FileCaps = FileCaps Set of capabilities for operations on `path`. new val create( base: (FilePath | AmbientAuth), path': String, caps': FileCaps val = recover val FileCaps . all() end) ? = Create a new path. The caller must either provide the root capability or an existing FilePath. If the root capability is provided, path' will be relative to the program's working directory. Otherwise, it will be relative to the existing FilePath, and the existing FilePath must be a prefix of the resulting path. The resulting FilePath will have capabilities that are the intersection of the supplied capabilities and the capabilities on the parent. caps.union(caps') path = match base | let b: FilePath = if not b.caps(FileLookup) then error end let tmp_path = Path.join(b.path, path') caps.intersect(b.caps) if not tmp_path.at(b.path, 0) then error end tmp_path | let b: AmbientAuth = Path.abs(path') end new val mkdtemp( base: (FilePath | AmbientAuth), prefix: String = , caps': FileCaps val = recover val FileCaps . all() end) ? = Create a temporary directory and returns a path to it. The directory's name will begin with `prefix`. The caller must either provide the root capability or an existing FilePath. If AmbientAuth is provided, pattern will be relative to the program's working directory. Otherwise, it will be relative to the existing FilePath, and the existing FilePath must be a prefix of the resulting path. The resulting FilePath will have capabilities that are the intersection of the supplied capabilities and the capabilities on the base. (let dir, let pre) = Path.split(prefix) let parent = FilePath(base, dir)? if not parent.mkdir() then error end var temp = FilePath(parent, pre + Path.random())? while not temp.mkdir(true) do temp = FilePath(parent, pre + Path.random())? end caps.union(caps') caps.intersect(temp.caps) path = temp.path new val _create(path': String, caps': FileCaps val) = Internal constructor. path = path' caps.union(caps') fun val join( path': String, caps': FileCaps val = recover val FileCaps . all() end) : FilePath ? = Return a new path relative to this one. create(this, path', caps')? fun val walk(handler: WalkHandler ref, follow_links: Bool = false) = Walks a directory structure starting at this. `handler(dir_path, dir_entries)` will be called for each directory starting with this one. The handler can control which subdirectories are expanded by removing them from the `dir_entries` list. try with dir = Directory(this)? do var entries: Array[String] ref = dir.entries()? handler(this, entries) for e in entries.values() do let p = this.join(e)? let info = FileInfo(p)? if info.directory and (follow_links or not info.symlink) then p.walk(handler, follow_links) end end end else return end fun val canonical(): FilePath ? = Return the equivalent canonical absolute path. Raise an error if there isn't one. _create(Path.canonical(path)?, caps) fun val exists(): Bool = Returns true if the path exists. Returns false for a broken symlink. try not FileInfo(this)?.broken else false end fun val mkdir(must_create: Bool = false): Bool = Creates the directory. Will recursively create each element. Returns true if the directory exists when we're done, false if it does not. If we do not have the FileStat permission, this will return false even if the directory does exist. if not caps(FileMkdir) then return false end var offset: ISize = 0 repeat let element = try offset = path.find(Path.sep(), offset)? + 1 path.substring(0, offset - 1) else offset = -1 path end if element.size() 0 then let r = ifdef windows then @_mkdir[I32](element.cstring()) else @mkdir[I32](element.cstring(), U32(0x1FF)) end if r != 0 then if @pony_os_errno[I32]() != @pony_os_eexist[I32]() then return false end if must_create and (offset 0) then return false end end end until offset 0 end try FileInfo(this)?.directory else false end fun val remove(): Bool = Remove the file or directory. The directory contents will be removed as well, recursively. Symlinks will be removed but not traversed. if not caps(FileRemove) then return false end try let info = FileInfo(this)? if info.directory and not info.symlink then let directory = Directory(this)? for entry in directory.entries()?.values() do if not join(entry)?.remove() then return false end end end ifdef windows then if info.directory and not info.symlink then 0 == @_rmdir[I32](path.cstring()) else 0 == @_unlink[I32](path.cstring()) end else if info.directory and not info.symlink then 0 == @rmdir[I32](path.cstring()) else 0 == @unlink[I32](path.cstring()) end end else false end fun rename(new_path: FilePath): Bool = Rename a file or directory. if not caps(FileRename) or not new_path.caps(FileCreate) then return false end 0 == @rename[I32](path.cstring(), new_path.path.cstring()) fun symlink(link_name: FilePath): Bool = Create a symlink to a file or directory. if not caps(FileLink) or not link_name.caps(FileCreate) then return false end ifdef windows then 0 != @CreateSymbolicLink[U8](link_name.path.cstring(), path.cstring()) else 0 == @symlink[I32](path.cstring(), link_name.path.cstring()) end fun chmod(mode: FileMode box): Bool = Set the FileMode for a path. if not caps(FileChmod) then return false end let m = mode._os() ifdef windows then 0 == @_chmod[I32](path.cstring(), m) else 0 == @chmod[I32](path.cstring(), m) end fun chown(uid: U32, gid: U32): Bool = Set the owner and group for a path. Does nothing on Windows. ifdef windows then false else if caps(FileChown) then 0 == @chown[I32](path.cstring(), uid, gid) else false end end fun touch(): Bool = Set the last access and modification times of a path to now. set_time(Time.now(), Time.now()) fun set_time(atime: (I64, I64), mtime: (I64, I64)): Bool = Set the last access and modification times of a path to the given values. if not caps(FileTime) then return false end ifdef windows then var tv: (I64, I64) = (atime._1, mtime._1) 0 == @_utime64[I32](path.cstring(), addressof tv) else var tv: (ILong, ILong, ILong, ILong) = ( atime._1.ilong(), atime._2.ilong() / 1000, mtime._1.ilong(), mtime._2.ilong() / 1000 ) 0 == @utimes[I32](path.cstring(), addressof tv) end","title":"file_path.pony"},{"location":"src/files/file_stream/","text":"actor FileStream is OutStream Asynchronous access to a File object. Wraps file operations print, write, printv and writev. The File will be disposed through File._final. let _file: File new create(file: File iso) = _file = consume file be print(data: ByteSeq) = Print some bytes and insert a newline afterwards. _file.print(data) be write(data: ByteSeq) = Print some bytes without inserting a newline afterwards. _file.write(data) be printv(data: ByteSeqIter) = Print an iterable collection of ByteSeqs. _file.printv(data) be writev(data: ByteSeqIter) = Write an iterable collection of ByteSeqs. _file.writev(data)","title":"file_stream.pony"},{"location":"src/files/path/","text":"use time primitive _PathSep primitive _PathDot primitive _PathDot2 primitive _PathOther type _PathState is (_PathSep | _PathDot | _PathDot2 | _PathOther) primitive Path Operations on paths that do not require a capability. The operations can be used to manipulate path names, but give no access to the resulting paths. fun is_sep(c: U8): Bool = Determine if a byte is a path separator. ifdef windows then (c == '/') or (c == '\\\\') else c == '/' end fun tag sep(): String = Return the path separator as a string. ifdef windows then \\\\ else / end fun is_abs(path: String): Bool = Return true if the path is an absolute path. try ifdef windows then is_sep(path(0)?) or _drive_letter(path) else is_sep(path(0)?) end else false end fun join(path: String, next_path: String): String = Join two paths together. If the next_path is absolute, simply return it. The returned path will be cleaned. if path.size() == 0 then clean(next_path) elseif next_path.size() == 0 then clean(path) elseif is_abs(next_path) then clean(next_path) else try if is_sep(path(path.size()-1)?) then if is_sep(next_path(0)?) then return clean(path + next_path.trim(1)) else return clean(path + next_path) end end end clean(path + sep() + next_path) end fun clean(path: String): String = Replace multiple separators with a single separator. Convert / to the OS separator. Remove instances of . from the path. Remove instances of .. and the preceding path element from the path. The result will have no trailing slash unless it is a root directory. If the result would be empty, . will be returned instead. let s = recover String(path.size()) end let vol = volume(path) s.append(vol) var state: _PathState = _PathOther var i = vol.size() var backtrack = ISize(-1) let n = path.size() try var c = path(i)? if is_sep(c) then s.append(sep()) i = i + 1 state = _PathSep elseif c == '.' then i = i + 1 state = _PathDot else backtrack = s.size().isize() end while i n do c = path(i)? if is_sep(c) then match state | _PathDot2 = if backtrack == -1 then s.append( .. ) s.append(sep()) else s.delete(backtrack, -1) try backtrack = s.rfind(sep(), backtrack - 2)? + 1 else backtrack = vol.size().isize() end if (s.size() == 0) or (s.compare_sub( ../ , 3, backtrack) is Equal) or ifdef windows then s.compare_sub( ..\\\\ , 3, backtrack) is Equal else false end then backtrack = -1 end end | _PathOther = s.append(sep()) end state = _PathSep elseif c == '.' then match state | _PathSep = state = _PathDot | _PathDot = state = _PathDot2 | _PathDot2 = backtrack = s.size().isize() s.append( ... ) state = _PathOther | _PathOther = s.append( . ) end else match state | _PathSep = backtrack = s.size().isize() | _PathDot = backtrack = s.size().isize() s.append( . ) | _PathDot2 = backtrack = s.size().isize() s.append( .. ) end s.push(c) state = _PathOther end i = i + 1 end end match state | _PathDot2 = if backtrack == -1 then s.append( .. ) else s.delete(backtrack, -1) end end try if is_sep(s(s.size()-1)?) then s.delete(-1, sep().size()) end end if s.size() 0 then s else . end fun normcase(path: String): String = Normalizes the case of path for the runtime platform. if Platform.windows() then recover val path.lower() . replace( / , \\\\ ) end elseif Platform.osx() then path.lower() else path end fun cwd(): String = Returns the program's working directory. Setting the working directory is not supported, as it is not concurrency-safe. recover String.from_cstring(@pony_os_cwd[Pointer[U8]]()) end fun abs(path: String): String = Returns a cleaned, absolute path. if is_abs(path) then clean(path) else join(cwd(), path) end fun rel(to: String, target: String): String ? = Returns a path such that Path.join(to, Path.rel(to, target)) == target. Raises an error if this isn't possible. var to_clean = clean(to) var target_clean = clean(target) if to_clean == target_clean then return . end var to_i: ISize = 0 ifdef windows then to_clean = abs(to_clean) target_clean = abs(target_clean) let to_vol = volume(to_clean) let target_vol = volume(target_clean) if to_vol != target_vol then error end to_i = to_vol.size().isize() end var to_0 = to_i var target_i = to_i var target_0 = target_i while true do to_i = try to_clean.find(sep(), to_i)? else to_clean.size().isize() end target_i = try target_clean.find(sep(), target_i)? else target_clean.size().isize() end if (to_i != target_i) or (to_clean.compare_sub(target_clean, target_i.usize()) isnt Equal) then break end if to_i to_clean.size().isize() then to_i = to_i + 1 end if target_i target_clean.size().isize() then target_i = target_i + 1 end to_0 = to_i target_0 = target_i end if ((to_i - to_0) == 2) and (to_clean.compare_sub( .. , 2, to_0) is Equal) then error end if to_0.usize() != to_clean.size() then let result = recover String end try while true do to_i = to_clean.find(sep(), to_i)? + 1 result.append( .. ) result.append(sep()) end end result.append( .. ) result.append(sep()) result.append(target_clean.trim(target_0.usize())) result else target_clean.trim(target_0.usize()) end fun split(path: String, separator: String = Path.sep()): (String, String) = Splits the path into a pair, (head, tail) where tail is the last pathname component and head is everything leading up to that. The tail part will never contain a slash; if path ends in a slash, tail will be empty. If there is no slash in path, head will be empty. If path is empty, both head and tail are empty. The path in head will be cleaned before it is returned. In all cases, join(head, tail) returns a path to the same location as path (but the strings may differ). Also see the functions dir() and base(). try let i = path.rfind(separator)?.usize() (clean(path.trim(0, i)), path.trim(i+separator.size())) else ( , path) end fun base(path: String, with_ext: Bool = true): String = Return the path after the last separator, or the whole path if there is no separator. If `with_ext` is `false`, the extension as defined by the `ext()` method will be omitted from the result. let b = try path.trim(path.rfind(sep())?.usize() + 1) else path end if with_ext then b else let e_size = ext(b).size() if e_size 0 then b.trim(0, b.size() - e_size - 1) else b end end fun dir(path: String): String = Return a cleaned path before the last separator, or the whole path if there is no separator. try clean(path.trim(0, path.rfind(sep())?.usize())) else path end fun ext(path: String): String = Return the file extension, i.e. the part after the last dot as long as that dot is after all separators. Return an empty string for no extension. try let i = path.rfind( . )? let j = try path.rfind(sep())? else i end if i = j then return path.trim(i.usize() + 1) end end fun volume(path: String): String = On Windows, this returns the drive letter or UNC base at the beginning of the path, if there is one. Otherwise, this returns an empty string. ifdef windows then var offset = ISize(0) if path.compare_sub( \\\\?\\ , 4) is Equal then offset = 4 if path.compare_sub( UNC\\ , 4, offset) is Equal then return _network_share(path, offset + 4) end end if _drive_letter(path, offset) then return path.trim(0, offset.usize() + 2) end try if is_sep(path.at_offset(offset)?) and is_sep(path.at_offset(offset + 1)?) then return _network_share(path, offset + 3) end end end fun _drive_letter(path: String, offset: ISize = 0): Bool = Look for a drive letter followed by a ':', returning true if we find it. try let c = path.at_offset(offset)? (((c = 'A') and (c = 'Z')) or ((c = 'a') and (c = 'z'))) and (path.at_offset(offset + 1)? == ':') else false end fun _network_share(path: String, offset: ISize = 0): String = Look for a host, a \\, and a resource. Return the path up to that point if we found one, otherwise an empty String. try let next = path.find( \\\\ , offset)? + 1 try path.trim(0, path.find( \\\\ , next)?.usize()) else path end else end fun from_slash(path: String): String = Changes each / in the path to the OS specific separator. ifdef windows then let s = path.clone() let len = s.size() var i = USize(0) try while i len do if s(i)? == '/' then s(i)? = '\\\\' end i = i + 1 end end s else path end fun to_slash(path: String): String = Changes each OS specific separator in the path to /. ifdef windows then let s = path.clone() let len = s.size() var i = USize(0) try while i len do if s(i)? == '\\\\' then s(i)? = '/' end i = i + 1 end end s else path end fun canonical(path: String): String ? = Return the equivalent canonical absolute path. Raise an error if there isn't one. let cstring = @pony_os_realpath[Pointer[U8] iso^]( path.cstring()) if cstring.is_null() then error else recover String.from_cstring(consume cstring) end end fun is_list_sep(c: U8): Bool = Determine if a byte is a path list separator. ifdef windows then c == ';' else c == ':' end fun list_sep(): String = Return the path list separator as a string. ifdef windows then ; else : end fun split_list(path: String): Array[String] iso^ = Separate a list of paths into an array of cleaned paths. let array = recover Array[String] end var offset: ISize = 0 try while true do let next = path.find(list_sep(), offset)? array.push(clean(path.trim(offset.usize(), next.usize()))) offset = next + 1 end else array.push(clean(path.trim(offset.usize()))) end array fun random(len: USize = 6): String = Returns a pseudo-random base, suitable as a temporary file name or directory name, but not guaranteed to not already exist. let letters = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 let s = recover String(len) end var n = USize(0) var r = Time.nanos().usize() try while n len do let c = letters(r % letters.size())? r = r / letters.size() s.push(c) n = n + 1 end end s","title":"path.pony"},{"location":"src/format/_format_float/","text":"primitive _FormatFloat Worker type providing to string conversions for floats. fun f64( x: F64, fmt: FormatFloat = FormatDefault, prefix: PrefixNumber = PrefixDefault, prec: USize = 6, width: USize = 0, align: Align = AlignRight, fill: U32 = ' ') : String iso^ = // TODO: prefix, align, fill var prec' = if prec == -1 then 6 else prec end recover var s = String((prec' + 8).max(width.max(31))) var f = String(31) . append( % ) if width 0 then f.append(width.string()) end f . append( . ) . append(prec'.string()) match fmt | FormatExp = f.append( e ) | FormatExpLarge = f.append( E ) | FormatFix = f.append( f ) | FormatFixLarge = f.append( F ) | FormatGeneral = f.append( g ) | FormatGeneralLarge = f.append( G ) else f.append( g ) end ifdef windows then @_snprintf[I32](s.cstring(), s.space(), f.cstring(), x) else @snprintf[I32](s.cstring(), s.space(), f.cstring(), x) end s . recalc() end","title":"_format_float.pony"},{"location":"src/format/_format_int/","text":"primitive _FormatInt Worker type providing to string conversions for integers. fun _large(): String = 0123456789ABCDEF fun _small(): String = 0123456789abcdef fun _fmt_int(fmt: FormatInt): (U32, String, String) = match fmt | FormatBinary = (2, b0 , _large()) | FormatBinaryBare = (2, , _large()) | FormatOctal = (8, o0 , _large()) | FormatOctalBare = (8, , _large()) | FormatHex = (16, x0 , _large()) | FormatHexBare = (16, , _large()) | FormatHexSmall = (16, x0 , _small()) | FormatHexSmallBare = (16, , _small()) else (10, , _large()) end fun _prefix(neg: Bool, prefix: PrefixNumber): String = if neg then - else match prefix | PrefixSpace = | PrefixSign = + else end end fun _extend_digits(s: String ref, digits: USize) = while s.size() digits do s.append( 0 ) end fun _pad(s: String ref, width: USize, align: Align, fill: U32) = var pre: USize = 0 var post: USize = 0 if s.size() width then let rem = width - s.size() let fills = String.from_utf32(fill) match align | AlignLeft = post = rem | AlignRight = pre = rem | AlignCenter = pre = rem / 2; post = rem - pre end while pre 0 do s.append(fills) pre = pre - 1 end s.reverse_in_place() while post 0 do s.append(fills) post = post - 1 end else s.reverse_in_place() end fun u8( x: U8, neg: Bool, fmt: FormatInt, prefix: PrefixNumber, prec: USize, width: USize, align: Align, fill: U32) : String iso^ = (var base', var typestring, var table) = _fmt_int(fmt) var prestring = _prefix(neg, prefix) var prec' = if prec == -1 then 0 else prec end let base = base'.u8() recover var s = String((prec + 1).max(width.max(31))) var value = x try if value == 0 then s.push(table(0)?) else while value != 0 do let index = ((value = value / base) - (value * base)) s.push(table(index.usize())?) end end end _extend_digits(s, prec') s.append(typestring) s.append(prestring) _pad(s, width, align, fill) s end fun u16( x: U16, neg: Bool, fmt: FormatInt, prefix: PrefixNumber, prec: USize, width: USize, align: Align, fill: U32) : String iso^ = (var base', var typestring, var table) = _fmt_int(fmt) var prestring = _prefix(neg, prefix) var prec' = if prec == -1 then 0 else prec end let base = base'.u16() recover var s = String((prec + 1).max(width.max(31))) var value = x try if value == 0 then s.push(table(0)?) else while value != 0 do let index = ((value = value / base) - (value * base)) s.push(table(index.usize())?) end end end _extend_digits(s, prec') s.append(typestring) s.append(prestring) _pad(s, width, align, fill) s end fun u32( x: U32, neg: Bool, fmt: FormatInt, prefix: PrefixNumber, prec: USize, width: USize, align: Align, fill: U32) : String iso^ = match fmt | FormatUTF32 = return recover String.from_utf32(x.u32()) end end (var base', var typestring, var table) = _fmt_int(fmt) var prestring = _prefix(neg, prefix) var prec' = if prec == -1 then 0 else prec end let base = base'.u32() recover var s = String((prec + 1).max(width.max(31))) var value = x try if value == 0 then s.push(table(0)?) else while value != 0 do let index = ((value = value / base) - (value * base)) s.push(table(index.usize())?) end end end _extend_digits(s, prec') s.append(typestring) s.append(prestring) _pad(s, width, align, fill) s end fun u64( x: U64, neg: Bool, fmt: FormatInt, prefix: PrefixNumber, prec: USize, width: USize, align: Align, fill: U32) : String iso^ = match fmt | FormatUTF32 = return recover String.from_utf32(x.u32()) end end (var base', var typestring, var table) = _fmt_int(fmt) var prestring = _prefix(neg, prefix) var prec' = if prec == -1 then 0 else prec end let base = base'.u64() recover var s = String((prec + 1).max(width.max(31))) var value = x try if value == 0 then s.push(table(0)?) else while value != 0 do let index = ((value = value / base) - (value * base)) s.push(table(index.usize())?) end end end _extend_digits(s, prec') s.append(typestring) s.append(prestring) _pad(s, width, align, fill) s end fun u128( x: U128, neg: Bool, fmt: FormatInt = FormatDefault, prefix: PrefixNumber = PrefixDefault, prec: USize = -1, width: USize = 0, align: Align = AlignLeft, fill: U32 = ' ') : String iso^ = match fmt | FormatUTF32 = return recover String.from_utf32(x.u32()) end end (var base', var typestring, var table) = _fmt_int(fmt) var prestring = _prefix(neg, prefix) var base = base'.u128() var prec' = if prec == -1 then 0 else prec end recover var s = String((prec' + 1).max(width.max(31))) var value = x try if value == 0 then s.push(table(0)?) else while value != 0 do let index = (value = value / base) - (value * base) s.push(table(index.usize())?) end end end _extend_digits(s, prec') s.append(typestring) s.append(prestring) _pad(s, width, align, fill) s end","title":"_format_int.pony"},{"location":"src/format/align/","text":"primitive AlignLeft primitive AlignRight primitive AlignCenter type Align is ( AlignLeft | AlignRight | AlignCenter )","title":"align.pony"},{"location":"src/format/format/","text":"# Format package The Format package provides support for formatting strings. It can be used to set things like width, padding and alignment, as well as controlling the way numbers are displayed (decimal, octal, hexadecimal). # Example program ```pony use format actor Main fun disp(desc: String, v: I32, fmt: FormatInt = FormatDefault): String = Format(desc where width = 10) + : + Format.int[I32](v where width = 10, align = AlignRight, fmt = fmt) new create(env: Env) = try (let x, let y) = (env.args(1)?.i32()?, env.args(2)?.i32()?) env.out.print(disp( x , x)) env.out.print(disp( y , y)) env.out.print(disp( hex(x) , x, FormatHex)) env.out.print(disp( hex(y) , y, FormatHex)) env.out.print(disp( x * y , x * y)) else let exe = try env.args(0)? else fmt_example end env.err.print( Usage: + exe + NUMBER1 NUMBER2 ) end ``` use collections primitive Format Provides functions for generating formatted strings. * fmt. Format to use. * prefix. Prefix to use. * prec. Precision to use. The exact meaning of this depends on the type, but is generally the number of characters used for all, or part, of the string. A value of -1 indicates that the default for the type should be used. * width. The minimum number of characters that will be in the produced string. If necessary the string will be padded with the fill character to make it long enough. *align. Specify whether fill characters should be added at the beginning or end of the generated string, or both. *fill: The character to pad a string with if is is shorter than width. fun apply( str: String, fmt: FormatDefault = FormatDefault, prefix: PrefixDefault = PrefixDefault, prec: USize = -1, width: USize = 0, align: Align = AlignLeft, fill: U32 = ' ') : String iso^ = let copy_len = str.size().min(prec.usize()) let len = copy_len.max(width.usize()) recover let s = String(len) match align | AlignLeft = s.append(str) for i in Range(s.size(), s.space()) do s.push_utf32(fill) end | AlignRight = for i in Range(0, len - copy_len) do s.push_utf32(fill) end s.append(str) | AlignCenter = let half = (len - copy_len) / 2 for i in Range(0, half) do s.push_utf32(fill) end s.append(str) for i in Range(s.size(), s.space()) do s.push_utf32(fill) end end s . recalc() end fun int[A: (Int Integer[A])]( x: A, fmt: FormatInt = FormatDefault, prefix: PrefixNumber = PrefixDefault, prec: USize = -1, width: USize = 0, align: Align = AlignRight, fill: U32 = ' ') : String iso^ = let zero = x.from[USize](0) (let abs, let neg) = if x zero then (-x, true) else (x, false) end iftype A : U128 then _FormatInt.u128(x.u128(), false, fmt, prefix, prec, width, align, fill) elseif A : I128 then _FormatInt.u128(abs.u128(), neg, fmt, prefix, prec, width, align, fill) elseif A : (U64 | I64) then _FormatInt.u64(abs.u64(), neg, fmt, prefix, prec, width, align, fill) elseif A : (U32 | I32) then _FormatInt.u32(abs.u32(), neg, fmt, prefix, prec, width, align, fill) elseif A : (U16 | I16) then _FormatInt.u16(abs.u16(), neg, fmt, prefix, prec, width, align, fill) elseif A : (U8 | I8) then _FormatInt.u8(abs.u8(), neg, fmt, prefix, prec, width, align, fill) elseif A : (USize | ISize) then ifdef ilp32 then _FormatInt.u32(abs.u32(), neg, fmt, prefix, prec, width, align, fill) else _FormatInt.u64(abs.u64(), neg, fmt, prefix, prec, width, align, fill) end elseif A : (ULong | ILong) then ifdef ilp32 or llp64 then _FormatInt.u32(abs.u32(), neg, fmt, prefix, prec, width, align, fill) else _FormatInt.u64(abs.u64(), neg, fmt, prefix, prec, width, align, fill) end else _FormatInt.u128(x.u128(), false, fmt, prefix, prec, width, align, fill) end fun float[A: (Float FloatingPoint[A])]( x: A, fmt: FormatFloat = FormatDefault, prefix: PrefixNumber = PrefixDefault, prec: USize = 6, width: USize = 0, align: Align = AlignRight, fill: U32 = ' ') : String iso^ = _FormatFloat.f64(x.f64(), fmt, prefix, prec, width, align, fill)","title":"format.pony"},{"location":"src/format/format_spec/","text":"trait val FormatSpec primitive FormatDefault is FormatSpec primitive FormatUTF32 is FormatSpec primitive FormatBinary is FormatSpec primitive FormatBinaryBare is FormatSpec primitive FormatOctal is FormatSpec primitive FormatOctalBare is FormatSpec primitive FormatHex is FormatSpec primitive FormatHexBare is FormatSpec primitive FormatHexSmall is FormatSpec primitive FormatHexSmallBare is FormatSpec type FormatInt is ( FormatDefault | FormatUTF32 | FormatBinary | FormatBinaryBare | FormatOctal | FormatOctalBare | FormatHex | FormatHexBare | FormatHexSmall | FormatHexSmallBare ) primitive FormatExp is FormatSpec primitive FormatExpLarge is FormatSpec primitive FormatFix is FormatSpec primitive FormatFixLarge is FormatSpec primitive FormatGeneral is FormatSpec primitive FormatGeneralLarge is FormatSpec type FormatFloat is ( FormatDefault | FormatExp | FormatExpLarge | FormatFix | FormatFixLarge | FormatGeneral | FormatGeneralLarge )","title":"format_spec.pony"},{"location":"src/format/prefix_spec/","text":"trait val PrefixSpec primitive PrefixDefault is PrefixSpec primitive PrefixSpace is PrefixSpec primitive PrefixSign is PrefixSpec type PrefixNumber is ( PrefixDefault | PrefixSpace | PrefixSign )","title":"prefix_spec.pony"},{"location":"src/itertools/iter/","text":"use collections class Iter[A] is Iterator[A] Wrapper class containing methods to modify iterators. let _iter: Iterator[A] new create(iter: Iterator[A]) = _iter = iter fun ref has_next(): Bool = _iter.has_next() fun ref next(): A ? = _iter.next()? new chain(outer_iterator: Iterator[Iterator[A]]) = Take an iterator of iterators and return an Iter containing the items of the first one, then the second one, and so on. ## Example ```pony let xs = [as I64: 1; 2].values() let ys = [as I64: 3; 4].values() Iter[I64].chain([xs; ys].values()) ``` `1 2 3 4` _iter = object var inner_iterator: (Iterator[A] | None) = None fun ref has_next(): Bool = if inner_iterator isnt None then try let iter = inner_iterator as Iterator[A] if iter.has_next() then return true end end end if outer_iterator.has_next() then try inner_iterator = outer_iterator.next()? return has_next() end end false fun ref next(): A ? = if inner_iterator isnt None then let iter = inner_iterator as Iterator[A] if iter.has_next() then return iter.next()? end end if outer_iterator.has_next() then inner_iterator = outer_iterator.next()? return next()? end error end new repeat_value(value: A) = Create an iterator that returns the given value forever. ## Example ```pony Iter[U32].repeat_value(7) ``` `7 7 7 7 7 7 7 7 7 ...` _iter = object let _v: A = consume value fun ref has_next(): Bool = true fun ref next(): A = _v end fun ref map_stateful[B](f: {ref(A!): B ?}): Iter[B]^ = Allows stateful transformaion of each element from the iterator, similar to `map`. Iter[B]( object is Iterator[B] fun ref has_next(): Bool = _iter.has_next() fun ref next(): B ? = f(_iter.next()?)? end) fun ref filter_stateful(f: {ref(A!): Bool ?}): Iter[A]^ = Allows filtering of elements based on a stateful adapter, similar to `filter`. Iter[A]( object var _next: (A! | _None) = _None fun ref _find_next() = try match _next | _None = if _iter.has_next() then let a = _iter.next()? if try f(a)? else false end then _next = a else _find_next() end end end end fun ref has_next(): Bool = match _next | _None = if _iter.has_next() then _find_next() has_next() else false end else true end fun ref next(): A ? = match _next = _None | let a: A = consume a else if _iter.has_next() then _find_next() next()? else error end end end) fun ref filter_map_stateful[B](f: {ref(A!): (B | None) ?}): Iter[B]^ = Allows stateful modification to the stream of elements from an iterator, similar to `filter_map`. Iter[B]( object is Iterator[B] var _next: (B | _None) = _None fun ref _find_next() = try match _next | _None = if _iter.has_next() then match f(_iter.next()?)? | let b: B = _next = consume b | None = _find_next() end end end end fun ref has_next(): Bool = match _next | _None = if _iter.has_next() then _find_next() has_next() else false end else true end fun ref next(): B ? = match _next | let b: B = _next = _None consume b else if _iter.has_next() then _find_next() next()? else error end end end) fun ref all(f: {(A!): Bool ?} box): Bool = Return false if at least one value of the iterator fails to match the predicate `f`. This method short-circuits at the first value where the predicate returns false, otherwise true is returned. ## Examples ```pony Iter[I64]([2; 4; 6].values()) .all({(x) = (x % 2) == 0 }) ``` `true` ```pony Iter[I64]([2; 3; 4].values()) .all({(x) = (x % 2) == 0 }) ``` `false` for x in _iter do if not (try f(x)? else false end) then return false end end true fun ref any(f: {(A!): Bool ?} box): Bool = Return true if at least one value of the iterator matches the predicate `f`. This method short-circuits at the first value where the predicate returns true, otherwise false is returned. ## Examples ```pony Iter[I64]([2; 4; 6].values()) .any({(I64) = (x % 2) == 1 }) ``` `false` ```pony Iter[I64]([2; 3; 4].values()) .any({(I64) = (x % 2) == 1 }) ``` `true` for x in _iter do if try f(x)? else false end then return true end end false fun ref collect[B: Seq[A!] ref = Array[A!]](coll: B): B^ = Push each value from the iterator into the collection `coll`. ## Example ```pony Iter[I64]([1; 2; 3].values()) .collect(Array[I64](3)) ``` `[1, 2, 3]` for x in _iter do coll.push(x) end coll fun ref count(): USize = Return the number of values in the iterator. ## Example ```pony Iter[I64]([1; 2; 3].values()) .count() ``` `3` var sum: USize = 0 for _ in _iter do sum = sum + 1 end sum fun ref cycle(): Iter[A!]^ = Repeatedly cycle through the values from the iterator. WARNING: The values returned by the original iterator are cached, so the input iterator should be finite. ## Example ```pony Iter[I64]([1; 2; 3].values()) .cycle() ``` `1 2 3 1 2 3 1 2 3 ...` let store = Array[A!] Iter[A!]( object is Iterator[A!] let _store: Array[A!] = store var _store_iter: ArrayValues[A!, Array[A!]] = store.values() var _first_time_through: Bool = true fun ref has_next(): Bool = true fun ref next(): A! ? = if _first_time_through then if _iter.has_next() then _store.push(_iter.next()?) return _store(_store.size() - 1)? end _first_time_through = false end if not _store_iter.has_next() then _store_iter.rewind() end _store_iter.next()? end) /* fun ref dedup[H: HashFunction[A] val = HashIs[A]](): Iter[A!]^ = Return an iterator that removes duplicates from consecutive identical elements. Equality is determined by the HashFunction `H`. ## Example ```pony Iter[I64]([as I64: 1; 1; 2; 3; 3; 2; 2].values()) .dedup() ``` `1 2 3 2` */ fun ref enum[B: (Real[B] val Number) = USize](): Iter[(B, A)]^ = An iterator which yields the current iteration count as well as the next value from the iterator. ## Example ```pony Iter[I64]([1; 2; 3].values()) .enum() ``` `(0, 1) (1, 2) (2, 3)` Iter[(B, A)]( object var _i: B = 0 fun ref has_next(): Bool = _iter.has_next() fun ref next(): (B, A) ? = (_i = _i + 1, _iter.next()?) end) fun ref filter(f: {(A!): Bool ?} box): Iter[A]^ = Return an iterator that only returns items that match the predicate `f`. ## Example ```pony Iter[I64]([1; 2; 3; 4; 5; 6].values()) .filter({(x) = (x % 2) == 0 }) ``` `2 4 6` filter_stateful({(a: A!): Bool ? = f(a)? }) fun ref find(f: {(A!): Bool ?} box, n: USize = 1): A! ? = Return the nth value in the iterator that satisfies the predicate `f`. ## Examples ```pony Iter[I64]([1; 2; 3].values()) .find({(x) = (x % 2) == 0 }) ``` `2` ```pony Iter[I64]([1; 2; 3; 4].values()) .find({(x) = (x % 2) == 0 }, 2) ``` `4` var c = n for x in _iter do if try f(x)? else false end then if c == 1 then return x else c = c - 1 end end end error fun ref filter_map[B](f: {(A!): (B | None) ?} box): Iter[B]^ = Return an iterator which applies `f` to each element. If `None` is returned, then the iterator will try again by applying `f` to the next element. Otherwise, the value of type `B` is returned. ## Example ```pony Iter[I64]([as I64: 1; -2; 4; 7; -5]) .filter_map[USize]( {(i: I64): (USize | None) = if i = 0 then i.usize() end }) ``` `1 4 7` ``` filter_map_stateful[B]({(a: A!): (B | None) ? = f(a)? }) fun ref flat_map[B](f: {(A!): Iterator[B] ?} box): Iter[B]^ = Return an iterator over the values of the iterators produced from the application of the given function. ## Example ```pony Iter[String]([ alpha ; beta ; gamma ]) .flat_map[U8]({(s: String): Iterator[U8] = s.values() }) ``` `a l p h a b e t a g a m m a` Iter[B]( object is Iterator[B] var _iterb: Iterator[B] = try f(_iter.next()?)? else _EmptyIter[B] end fun ref has_next(): Bool = if _iterb.has_next() then true else if _iter.has_next() then try _iterb = f(_iter.next()?)? has_next() else false end else false end end fun ref next(): B ? = if _iterb.has_next() then _iterb.next()? else _iterb = f(_iter.next()?)? next()? end end) fun ref fold[B](acc: B, f: {(B, A!): B^} box): B^ = Apply a function to every element, producing an accumulated value. ## Example ```pony Iter[I64]([1; 2; 3].values()) .fold[I64](0, {(sum, x) = sum + x }) ``` `6` var acc' = consume acc for a in _iter do acc' = f(consume acc', a) end acc' fun ref fold_partial[B](acc: B, f: {(B, A!): B^ ?} box): B^ ? = A partial version of `fold`. var acc' = consume acc for a in _iter do acc' = f(consume acc', a)? end acc' /* fun ref interleave(other: Iterator[A]): Iter[A!] = Return an iterator that alternates the values of the original iterator and the other until both run out. ## Example ```pony Iter[USize](Range(0, 4)) .interleave(Range(4, 6)) ``` `0 4 1 5 2 3` fun ref interleave_shortest(other: Iterator[A]): Iter[A!] = Return an iterator that alternates the values of the original iterator and the other until one of them runs out. ## Example ```pony Iter[USize](Range(0, 4)) .interleave(Range(4, 6)) ``` `0 4 1 5 2` fun ref intersperse(value: A, n: USize = 1): Iter[A!] = Return an iterator that yields the value after every `n` elements of the original iterator. ## Example ```pony Iter[USize](Range(0, 3)) .intersperse(8) ``` `0 8 1 8 2` */ fun ref last(): A ? = Return the last value of the iterator. ## Example ```pony Iter[I64]([1; 2; 3].values()) .last() ``` `3` while _iter.has_next() do _iter.next()? else error end fun ref map[B](f: {(A!): B ?} box): Iter[B]^ = Return an iterator where each item's value is the application of the given function to the value in the original iterator. ## Example ```pony Iter[I64]([1; 2; 3].values()) .map[I64]({(x) = x * x }) ``` `1 4 9` map_stateful[B]({(a: A!): B ? = f(a)? }) fun ref nth(n: USize): A ? = Return the nth value of the iterator. ## Example ```pony Iter[I64]([1; 2; 3].values()) .nth(2) ``` `2` var c = n while _iter.has_next() and (c 1) do _iter.next()? c = c - 1 end if not _iter.has_next() then error else _iter.next()? end fun ref run(on_error: {ref()} = {() = None } ref) = Iterate through the values of the iterator without a for loop. The function `on_error` will be called if the iterator's `has_next` method returns true but its `next` method throws an error. ## Example ```pony Iter[I64]([1; 2; 3].values()) .map[None]({(x) = env.out.print(x.string()) }) .run() ``` ``` 1 2 3 ``` if not _iter.has_next() then return end try _iter.next()? run(on_error) else on_error() end fun ref skip(n: USize): Iter[A]^ = Skip the first n values of the iterator. ## Example ```pony Iter[I64]([1; 2; 3; 4; 5; 6].values()) .skip(3) ``` `4 5 6` ```pony Iter[I64]([1; 2; 3].values()) .skip(3) .has_next() ``` `false` var c = n try while _iter.has_next() and (c 0) do _iter.next()? c = c - 1 end end this fun ref skip_while(f: {(A!): Bool ?} box): Iter[A]^ = Skip values of the iterator while the predicate `f` returns true. ## Example ```pony Iter[I64]([1; 2; 3; 4; 5; 6].values()) .skip_while({(x) = x 4 }) ``` `4 5 6` filter_stateful( object var _done: Bool = false fun ref apply(a: A!): Bool = if _done then return true end if try f(a)? else false end then false else _done = true true end end) fun ref take(n: USize): Iter[A]^ = Return an iterator for the first n elements. ## Example ```pony Iter[I64]([1; 2; 3; 4; 5; 6].values()) .take(3) ``` `1 2 3` Iter[A]( object var _countdown: USize = n fun ref has_next(): Bool = (_countdown 0) and _iter.has_next() fun ref next(): A ? = if _countdown 0 then _countdown = _countdown - 1 _iter.next()? else error end end) fun ref take_while(f: {(A!): Bool ?} box): Iter[A]^ = Return an iterator that returns values while the predicate `f` returns true. This iterator short-circuits the first time that `f` returns false or raises an error. ## Example ```pony Iter[I64]([1; 2; 3; 4; 5; 6].values()) .take_while({(x) = x 4 }) ``` `1 2 3` Iter[A]( object var _done: Bool = false var _next: (A! | None) = None fun ref has_next(): Bool = if _next isnt None then true else _try_next() end fun ref next(): A ? = if (_next isnt None) or _try_next() then (_next = None) as A else error end fun ref _try_next(): Bool = if _done then false elseif not _iter.has_next() then _done = true false else _next = try _iter.next()? else _done = true return false end _done = try not f(_next as A)? else true end not _done end end) /* fun ref unique[H: HashFunction[A] val = HashIs[A]](): Iter[A!]^ = Return an iterator that filters out elements that have already been produced. Uniqueness is determined by the HashFunction `H`. ## Example ```pony Iter[I64]([as I64: 1; 2; 1; 1; 3; 4; 1].values()) .unique() ``` `1 2 3 4` */ fun ref zip[B](i2: Iterator[B]): Iter[(A, B)]^ = Zip two iterators together so that each call to next() results in a tuple with the next value of the first iterator and the next value of the second iterator. The number of items returned is the minimum of the number of items returned by the two iterators. ## Example ```pony Iter[I64]([1; 2].values()) .zip[I64]([3; 4].values()) ``` `(1, 3) (2, 4)` Iter[(A, B)]( object is Iterator[(A, B)] let _i1: Iterator[A] = _iter let _i2: Iterator[B] = i2 fun ref has_next(): Bool = _i1.has_next() and _i2.has_next() fun ref next(): (A, B) ? = (_i1.next()?, _i2.next()?) end) fun ref zip2[B, C](i2: Iterator[B], i3: Iterator[C]): Iter[(A, B, C)]^ = Zip three iterators together so that each call to next() results in a tuple with the next value of the first iterator, the next value of the second iterator, and the value of the third iterator. The number of items returned is the minimum of the number of items returned by the three iterators. Iter[(A, B, C)]( object is Iterator[(A, B, C)] let _i1: Iterator[A] = _iter let _i2: Iterator[B] = i2 let _i3: Iterator[C] = i3 fun ref has_next(): Bool = _i1.has_next() and _i2.has_next() and _i3.has_next() fun ref next(): (A, B, C) ? = (_i1.next()?, _i2.next()?, _i3.next()?) end) fun ref zip3[B, C, D](i2: Iterator[B], i3: Iterator[C], i4: Iterator[D]) : Iter[(A, B, C, D)]^ = Zip four iterators together so that each call to next() results in a tuple with the next value of each of the iterators. The number of items returned is the minimum of the number of items returned by the iterators. Iter[(A, B, C, D)]( object is Iterator[(A, B, C, D)] let _i1: Iterator[A] = _iter let _i2: Iterator[B] = i2 let _i3: Iterator[C] = i3 let _i4: Iterator[D] = i4 fun ref has_next(): Bool = _i1.has_next() and _i2.has_next() and _i3.has_next() and _i4.has_next() fun ref next(): (A, B, C, D) ? = (_i1.next()?, _i2.next()?, _i3.next()?, _i4.next()?) end) fun ref zip4[B, C, D, E]( i2: Iterator[B], i3: Iterator[C], i4: Iterator[D], i5: Iterator[E]) : Iter[(A, B, C, D, E)]^ = Zip five iterators together so that each call to next() results in a tuple with the next value of each of the iterators. The number of items returned is the minimum of the number of items returned by the iterators. Iter[(A, B, C, D, E)]( object is Iterator[(A, B, C, D, E)] let _i1: Iterator[A] = _iter let _i2: Iterator[B] = i2 let _i3: Iterator[C] = i3 let _i4: Iterator[D] = i4 let _i5: Iterator[E] = i5 fun ref has_next(): Bool = _i1.has_next() and _i2.has_next() and _i3.has_next() and _i4.has_next() and _i5.has_next() fun ref next(): (A, B, C, D, E) ? = (_i1.next()?, _i2.next()?, _i3.next()?, _i4.next()?, _i5.next()?) end) primitive _None class _EmptyIter[A] fun ref has_next(): Bool = false fun ref next(): A ? = error","title":"iter.pony"},{"location":"src/net/auth/","text":"primitive NetAuth new create(from: AmbientAuth) = None primitive DNSAuth new create(from: (AmbientAuth | NetAuth)) = None primitive UDPAuth new create(from: (AmbientAuth | NetAuth)) = None primitive TCPAuth new create(from: (AmbientAuth | NetAuth)) = None primitive TCPListenAuth new create(from: (AmbientAuth | NetAuth | TCPAuth)) = None primitive TCPConnectAuth new create(from: (AmbientAuth | NetAuth | TCPAuth)) = None","title":"auth.pony"},{"location":"src/net/dns/","text":"type DNSLookupAuth is (AmbientAuth | NetAuth | DNSAuth) primitive DNS Helper functions for resolving DNS queries. fun apply(auth: DNSLookupAuth, host: String, service: String) : Array[NetAddress] iso^ = Gets all IPv4 and IPv6 addresses for a host and service. _resolve(auth, 0, host, service) fun ip4(auth: DNSLookupAuth, host: String, service: String) : Array[NetAddress] iso^ = Gets all IPv4 addresses for a host and service. _resolve(auth, 1, host, service) fun ip6(auth: DNSLookupAuth, host: String, service: String) : Array[NetAddress] iso^ = Gets all IPv6 addresses for a host and service. _resolve(auth, 2, host, service) fun broadcast_ip4(auth: DNSLookupAuth, service: String) : Array[NetAddress] iso^ = Link-local IP4 broadcast address. ip4(auth, 255.255.255.255 , service) fun broadcast_ip6(auth: DNSLookupAuth, service: String) : Array[NetAddress] iso^ = Link-local IP6 broadcast address. ip6(auth, FF02::1 , service) fun is_ip4(host: String): Bool = Returns true if the host is a literal IPv4 address. @pony_os_host_ip4[Bool](host.cstring()) fun is_ip6(host: String): Bool = Returns true if the host is a literal IPv6 address. @pony_os_host_ip6[Bool](host.cstring()) fun _resolve( auth: DNSLookupAuth, family: U32, host: String, service: String) : Array[NetAddress] iso^ = Turns an addrinfo pointer into an array of addresses. var list = recover Array[NetAddress] end var result = @pony_os_addrinfo[Pointer[U8]](family, host.cstring(), service.cstring()) if not result.is_null() then var addr = result while not addr.is_null() do let ip = recover NetAddress end @pony_os_getaddr[None](addr, ip) list.push(consume ip) addr = @pony_os_nextaddr[Pointer[U8]](addr) end @freeaddrinfo[None](result) end list","title":"dns.pony"},{"location":"src/net/net_address/","text":"class val NetAddress is Equatable[NetAddress] Represents an IPv4 or IPv6 address. The family field indicates the address type. The addr field is either the IPv4 address or the IPv6 flow info. The addr1-4 fields are the IPv6 address, or invalid for an IPv4 address. The scope field is the IPv6 scope, or invalid for an IPv4 address. This class is modelled after the C data structure for holding socket addresses for both IPv4 and IPv6 `sockaddr_storage`. Use the `name` method to obtain address/hostname and port/service as Strings. let _family: U16 = 0 let _port: U16 = 0 Port number in network byte order. let _addr: U32 = 0 IPv4 address in network byte order. Will be `0` for IPv6 addresses. Check with `ipv4()` and `ipv6()`. let _addr1: U32 = 0 Bits 0-32 of the IPv6 address in network byte order. `0` if this is an IPv4 address. Check with `ipv4()` and `ipv6()`. let _addr2: U32 = 0 Bits 33-64 of the IPv6 address in network byte order. `0` if this is an IPv4 address. Check with `ipv4()` and `ipv6()`. let _addr3: U32 = 0 Bits 65-96 of the IPv6 address in network byte order. `0` if this is an IPv4 address. Check with `ipv4()` and `ipv6()`. let _addr4: U32 = 0 Bits 97-128 of the IPv6 address in network byte order. `0` if this is an IPv4 address. Check with `ipv4()` and `ipv6()`. let _scope: U32 = 0 IPv6 scope identifier: Unicast, Anycast, Multicast and unassigned scopes. fun ip4(): Bool = Returns true for an IPv4 address. @pony_os_ipv4[Bool](this) fun ip6(): Bool = Returns true for an IPv6 address. @pony_os_ipv6[Bool](this) fun name( reversedns: (DNSLookupAuth | None) = None, servicename: Bool = false) : (String, String) ? = Returns the host and service name. If `reversedns` is an instance of `DNSLookupAuth` a DNS lookup will be executed and the hostname for this address is returned as first element of the result tuple. If no hostname could be found, an error is raised. If `reversedns` is `None` the plain IP address is given and no DNS lookup is executed. If `servicename` is `false` the numeric port is returned as second element of the result tuple. If it is `true` the port is translated into its corresponding servicename (e.g. port 80 is returned as ` http `). Internally this method uses the POSIX C function `getnameinfo`. var host: Pointer[U8] iso = recover Pointer[U8] end var serv: Pointer[U8] iso = recover Pointer[U8] end let reverse = reversedns isnt None if not @pony_os_nameinfo[Bool](this, addressof host, addressof serv, reverse, servicename) then error end (recover String.from_cstring(consume host) end, recover String.from_cstring(consume serv) end) fun eq(that: NetAddress box): Bool = (this._family == that._family) and (this._port == that._port) and (host_eq(that)) and (this._scope == that._scope) fun host_eq(that: NetAddress box): Bool = if ip4() then this._addr == that._addr else (this._addr1 == that._addr1) and (this._addr2 == that._addr2) and (this._addr3 == that._addr3) and (this._addr4 == that._addr4) end fun length() : U8 = For platforms (OSX/FreeBSD) with `length` field as part of its `struct sockaddr` definition, returns the `length`. Else (Linux/Windows) returns the size of `sockaddr_in` or `sockaddr_in6`. ifdef linux or windows then (@ponyint_address_length[U32](this)).u8() else ifdef bigendian then ((_family 8) and 0xff).u8() else (_family and 0xff).u8() end end fun family() : U8 = Returns the `family`. ifdef linux or windows then ifdef bigendian then ((_family 8) and 0xff).u8() else (_family and 0xff).u8() end else ifdef bigendian then (_family and 0xff).u8() else ((_family 8) and 0xff).u8() end end fun port() : U16 = Returns port number in host byte order. @ntohs[U16](_port) fun scope() : U32 = Returns IPv6 scope identifier: Unicast, Anycast, Multicast and unassigned scopes. @ntohl[U32](_scope) fun ipv4_addr() : U32 = Returns IPV4 address (`_addr` field in the class) if `ip4()` is `True`. If `ip4()` is `False` then the contents are invalid. @ntohl[U32](_addr) fun ipv6_addr() : (U32, U32, U32, U32) = Returns IPV6 address as the 4-tuple (say `a`). `a._1 = _addr1` // Bits 0-32 of the IPv6 address in host byte order. `a._2 = _addr2 // Bits 33-64 of the IPv6 address in host byte order. `a._3 = _addr3 // Bits 65-96 of the IPv6 address in host byte order. `a._4 = _addr4 // Bits 97-128 of the IPv6 address in host byte order. The contents of the 4-tuple returned are valid only if `ip6()` is `True`. (@ntohl[U32](_addr1), @ntohl[U32](_addr2), @ntohl[U32](_addr3), @ntohl[U32](_addr4) )","title":"net_address.pony"},{"location":"src/net/ossocket/","text":"use @pony_os_errno[I32]() primitive _OSSocket Socket type-independent wrapper functions for `getsockopt(2)` and `setsockopt(2)` system calls for internal `net` package use. fun get_so_error(fd: U32): (U32, U32) = Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_ERROR, ...)` getsockopt_u32(fd, OSSockOpt.sol_socket(), OSSockOpt.so_error()) fun get_so_rcvbuf(fd: U32): (U32, U32) = Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)` getsockopt_u32(fd, OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf()) fun get_so_sndbuf(fd: U32): (U32, U32) = Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)` getsockopt_u32(fd, OSSockOpt.sol_socket(), OSSockOpt.so_sndbuf()) fun set_so_rcvbuf(fd: U32, bufsize: U32): U32 = Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)` setsockopt_u32(fd, OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), bufsize) fun set_so_sndbuf(fd: U32, bufsize: U32): U32 = Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)` setsockopt_u32(fd, OSSockOpt.sol_socket(), OSSockOpt.so_sndbuf(), bufsize) fun getsockopt(fd: U32, level: I32, option_name: I32, option_max_size: USize = 4): (U32, Array[U8] iso^) = General wrapper for sockets to the `getsockopt(2)` system call. The `option_max_size` argument is the maximum number of bytes that the caller expects the kernel to return via the system call's `void *` 4th argument. This function will allocate a Pony `Array[U8]` array of size `option_max_size` prior to calling `getsockopt(2)`. In case of system call success, this function returns the 2-tuple: 1. The integer `0`. 2. An `Array[U8]` of data returned by the system call's `void *` 4th argument. Its size is specified by the kernel via the system call's `sockopt_len_t *` 5th argument. In case of system call failure, this function returns the 2-tuple: 1. The value of `errno`. 2. An undefined value that must be ignored. get_so(fd, level, option_name, option_max_size) fun getsockopt_u32(fd: U32, level: I32, option_name: I32): (U32, U32) = Wrapper for sockets to the `getsockopt(2)` system call where the kernel's returned option value is a C `uint32_t` type / Pony type `U32`. In case of system call success, this function returns the 2-tuple: 1. The integer `0`. 2. The `*option_value` returned by the kernel converted to a Pony `U32`. In case of system call failure, this function returns the 2-tuple: 1. The value of `errno`. 2. An undefined value that must be ignored. (let errno: U32, let buffer: Array[U8] iso) = get_so(fd, level, option_name, 4) if errno == 0 then try (errno, bytes4_to_u32(consume buffer)?) else (1, 0) end else (errno, 0) end fun setsockopt(fd: U32, level: I32, option_name: I32, option: Array[U8]): U32 = General wrapper for sockets to the `setsockopt(2)` system call. The caller is responsible for the correct size and byte contents of the `option` array for the requested `level` and `option_name`, including using the appropriate CPU endian byte order. This function returns `0` on success, else the value of `errno` on failure. set_so(fd, level, option_name, option) fun setsockopt_u32(fd: U32, level: I32, option_name: I32, option: U32): U32 = Wrapper for sockets to the `setsockopt(2)` system call where the kernel expects an option value of a C `uint32_t` type / Pony type `U32`. This function returns `0` on success, else the value of `errno` on failure. var word: Array[U8] ref = u32_to_bytes4(option) set_so(fd, level, option_name, word) fun get_so(fd: U32, level: I32, option_name: I32, option_max_size: USize): (U32, Array[U8] iso^) = Low-level interface to `getsockopt(2)`. In case of system call success, this function returns the 2-tuple: 1. The integer `0`. 2. An `Array[U8]` of data returned by the system call's `void *` 4th argument. Its size is specified by the kernel via the system call's `sockopt_len_t *` 5th argument. In case of system call failure, `errno` is returned in the first element of the 2-tuple, and the second element's value is junk. var option: Array[U8] iso = recover option.create(). undefined(option_max_size) end var option_size: USize = option_max_size let result: I32 = @getsockopt[I32](fd, level, option_name, option.cpointer(), addressof option_size) if result == 0 then option.truncate(option_size) (0, consume option) else option.truncate(0) (@pony_os_errno().u32(), consume option) end fun set_so(fd: U32, level: I32, option_name: I32, option: Array[U8]): U32 = var option_size: U32 = option.size().u32() Low-level interface to `setsockopt(2)`. This function returns `0` on success, else the value of `errno` on failure. let result: I32 = @setsockopt[I32](fd, level, option_name, option.cpointer(), option_size) if result == 0 then 0 else @pony_os_errno().u32() end fun bytes4_to_u32(b: Array[U8]): U32 ? = b.read_u32(0)? fun u32_to_bytes4(option: U32): Array[U8] = Array[U8](4). push_u32(option)","title":"ossocket.pony"},{"location":"src/net/ossockopt/","text":"use @pony_os_sockopt_level[I32](option: I32) use @pony_os_sockopt_option[I32](option: I32) primitive OSSockOpt Convenience functions to fetch the option level and option name constants (arguments #2 and #3) for the `getsockopt(2)` and `setsockopt(2)` operating system calls. The values of the option level and option name constants are typically C preprocessor macros, e.g., `#define SOMETHING 42`. These macro names are upper case and may contain multiple consecutive underscore characters (though this is rare, for example, `IP_NAT__XXX`). The function names in this primitive are derived by the C macro name and then: * converted to lower case * any double underscore (`__`) is converted to a single underscore (`_`). These constants are _not_ stable between Pony releases. Values returned by this function may be held by long-lived variables by the calling process: values cannot change while the process runs. Programmers must not cache any of these values for purposes of sharing them for use by any other Pony program (for example, sharing via serialization deserialization or via direct shared memory). Many functions may return `-1`, which means that the constant's value could not be determined at the Pony runtime library compile time. One cause may be that the option truly isn't available, for example, the option level constant `IPPROTO_3PC` is available on MacOS 10.x but not on Linux 4.4. Another cause may be the Pony runtime library's compilation did not include the correct header file(s) for the target OS platform. A third cause of error is due to the regular expression-based approach used to harvest desirable constants. It is not fool-proof. The regexp used is too broad and finds some macros that are not supposed to be used with `getsockopt(2)` and `setsockopt(2)`. Please consult your platform's documentation to verify the names of the option level and option name macros. The following code fragments are equivalent: set the socket receive buffer size for the file descriptor `fd` to `4455`. ```c /* In C */ int option_value = 4455; setsockopt(fd, SOL_SOCKET, SO_RCVBUF, option_value, 4); /* In Pony */ var option: I32 = 4455; @pony_os_setsockopt[I32](fd, OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), addressof option, I32(4)) ``` /* Constants are from * macOS Sierra 10.12.6 * Ubuntu Linux Xenial/16.04 LTS + kernel 4.4.0-109-generic * FreeBSD 11.1-RELEASE * Windows Winsock function reference for getsockopt setsockopt: * https://msdn.microsoft.com/en-us/library/windows/desktop/ms738544(v=vs.85).aspx * https://msdn.microsoft.com/en-us/library/windows/desktop/ms740476(v=vs.85).aspx * Harvested by recipe given in socket.c */ /* * Levels formatted in Pony by: * egrep '^(IP[A-Z0-6]*PROTO_|NSPROTO_|SOL_)' ~/sum-of-all-constants.txt | egrep -v '\\(' | sort -u | egrep -v '^$' | sed 's/__/_/g' | awk 'BEGIN { count=4000; } { printf( fun %s():I32 = @pony_os_sockopt_level(I32(%d))\\n , tolower($1), count++); }' */ // levels fun ipproto_3pc():I32 = @pony_os_sockopt_level(I32(4000)) fun ipproto_adfs():I32 = @pony_os_sockopt_level(I32(4001)) fun ipproto_ah():I32 = @pony_os_sockopt_level(I32(4002)) fun ipproto_ahip():I32 = @pony_os_sockopt_level(I32(4003)) fun ipproto_apes():I32 = @pony_os_sockopt_level(I32(4004)) fun ipproto_argus():I32 = @pony_os_sockopt_level(I32(4005)) fun ipproto_ax25():I32 = @pony_os_sockopt_level(I32(4006)) fun ipproto_beetph():I32 = @pony_os_sockopt_level(I32(4007)) fun ipproto_bha():I32 = @pony_os_sockopt_level(I32(4008)) fun ipproto_blt():I32 = @pony_os_sockopt_level(I32(4009)) fun ipproto_brsatmon():I32 = @pony_os_sockopt_level(I32(4010)) fun ipproto_carp():I32 = @pony_os_sockopt_level(I32(4011)) fun ipproto_cftp():I32 = @pony_os_sockopt_level(I32(4012)) fun ipproto_chaos():I32 = @pony_os_sockopt_level(I32(4013)) fun ipproto_cmtp():I32 = @pony_os_sockopt_level(I32(4014)) fun ipproto_comp():I32 = @pony_os_sockopt_level(I32(4015)) fun ipproto_cphb():I32 = @pony_os_sockopt_level(I32(4016)) fun ipproto_cpnx():I32 = @pony_os_sockopt_level(I32(4017)) fun ipproto_dccp():I32 = @pony_os_sockopt_level(I32(4018)) fun ipproto_ddp():I32 = @pony_os_sockopt_level(I32(4019)) fun ipproto_dgp():I32 = @pony_os_sockopt_level(I32(4020)) fun ipproto_divert():I32 = @pony_os_sockopt_level(I32(4021)) fun ipproto_done():I32 = @pony_os_sockopt_level(I32(4022)) fun ipproto_dstopts():I32 = @pony_os_sockopt_level(I32(4023)) fun ipproto_egp():I32 = @pony_os_sockopt_level(I32(4024)) fun ipproto_emcon():I32 = @pony_os_sockopt_level(I32(4025)) fun ipproto_encap():I32 = @pony_os_sockopt_level(I32(4026)) fun ipproto_eon():I32 = @pony_os_sockopt_level(I32(4027)) fun ipproto_esp():I32 = @pony_os_sockopt_level(I32(4028)) fun ipproto_etherip():I32 = @pony_os_sockopt_level(I32(4029)) fun ipproto_fragment():I32 = @pony_os_sockopt_level(I32(4030)) fun ipproto_ggp():I32 = @pony_os_sockopt_level(I32(4031)) fun ipproto_gmtp():I32 = @pony_os_sockopt_level(I32(4032)) fun ipproto_gre():I32 = @pony_os_sockopt_level(I32(4033)) fun ipproto_hello():I32 = @pony_os_sockopt_level(I32(4034)) fun ipproto_hip():I32 = @pony_os_sockopt_level(I32(4035)) fun ipproto_hmp():I32 = @pony_os_sockopt_level(I32(4036)) fun ipproto_hopopts():I32 = @pony_os_sockopt_level(I32(4037)) fun ipproto_icmp():I32 = @pony_os_sockopt_level(I32(4038)) fun ipproto_icmpv6():I32 = @pony_os_sockopt_level(I32(4039)) fun ipproto_idp():I32 = @pony_os_sockopt_level(I32(4040)) fun ipproto_idpr():I32 = @pony_os_sockopt_level(I32(4041)) fun ipproto_idrp():I32 = @pony_os_sockopt_level(I32(4042)) fun ipproto_igmp():I32 = @pony_os_sockopt_level(I32(4043)) fun ipproto_igp():I32 = @pony_os_sockopt_level(I32(4044)) fun ipproto_igrp():I32 = @pony_os_sockopt_level(I32(4045)) fun ipproto_il():I32 = @pony_os_sockopt_level(I32(4046)) fun ipproto_inlsp():I32 = @pony_os_sockopt_level(I32(4047)) fun ipproto_inp():I32 = @pony_os_sockopt_level(I32(4048)) fun ipproto_ip():I32 = @pony_os_sockopt_level(I32(4049)) fun ipproto_ipcomp():I32 = @pony_os_sockopt_level(I32(4050)) fun ipproto_ipcv():I32 = @pony_os_sockopt_level(I32(4051)) fun ipproto_ipeip():I32 = @pony_os_sockopt_level(I32(4052)) fun ipproto_ipip():I32 = @pony_os_sockopt_level(I32(4053)) fun ipproto_ippc():I32 = @pony_os_sockopt_level(I32(4054)) fun ipproto_ipv4():I32 = @pony_os_sockopt_level(I32(4055)) fun ipproto_ipv6():I32 = @pony_os_sockopt_level(I32(4056)) fun ipproto_irtp():I32 = @pony_os_sockopt_level(I32(4057)) fun ipproto_kryptolan():I32 = @pony_os_sockopt_level(I32(4058)) fun ipproto_larp():I32 = @pony_os_sockopt_level(I32(4059)) fun ipproto_leaf1():I32 = @pony_os_sockopt_level(I32(4060)) fun ipproto_leaf2():I32 = @pony_os_sockopt_level(I32(4061)) fun ipproto_max():I32 = @pony_os_sockopt_level(I32(4062)) fun ipproto_maxid():I32 = @pony_os_sockopt_level(I32(4063)) fun ipproto_meas():I32 = @pony_os_sockopt_level(I32(4064)) fun ipproto_mh():I32 = @pony_os_sockopt_level(I32(4065)) fun ipproto_mhrp():I32 = @pony_os_sockopt_level(I32(4066)) fun ipproto_micp():I32 = @pony_os_sockopt_level(I32(4067)) fun ipproto_mobile():I32 = @pony_os_sockopt_level(I32(4068)) fun ipproto_mpls():I32 = @pony_os_sockopt_level(I32(4069)) fun ipproto_mtp():I32 = @pony_os_sockopt_level(I32(4070)) fun ipproto_mux():I32 = @pony_os_sockopt_level(I32(4071)) fun ipproto_nd():I32 = @pony_os_sockopt_level(I32(4072)) fun ipproto_nhrp():I32 = @pony_os_sockopt_level(I32(4073)) fun ipproto_none():I32 = @pony_os_sockopt_level(I32(4074)) fun ipproto_nsp():I32 = @pony_os_sockopt_level(I32(4075)) fun ipproto_nvpii():I32 = @pony_os_sockopt_level(I32(4076)) fun ipproto_old_divert():I32 = @pony_os_sockopt_level(I32(4077)) fun ipproto_ospfigp():I32 = @pony_os_sockopt_level(I32(4078)) fun ipproto_pfsync():I32 = @pony_os_sockopt_level(I32(4079)) fun ipproto_pgm():I32 = @pony_os_sockopt_level(I32(4080)) fun ipproto_pigp():I32 = @pony_os_sockopt_level(I32(4081)) fun ipproto_pim():I32 = @pony_os_sockopt_level(I32(4082)) fun ipproto_prm():I32 = @pony_os_sockopt_level(I32(4083)) fun ipproto_pup():I32 = @pony_os_sockopt_level(I32(4084)) fun ipproto_pvp():I32 = @pony_os_sockopt_level(I32(4085)) fun ipproto_raw():I32 = @pony_os_sockopt_level(I32(4086)) fun ipproto_rccmon():I32 = @pony_os_sockopt_level(I32(4087)) fun ipproto_rdp():I32 = @pony_os_sockopt_level(I32(4088)) fun ipproto_reserved_253():I32 = @pony_os_sockopt_level(I32(4089)) fun ipproto_reserved_254():I32 = @pony_os_sockopt_level(I32(4090)) fun ipproto_routing():I32 = @pony_os_sockopt_level(I32(4091)) fun ipproto_rsvp():I32 = @pony_os_sockopt_level(I32(4092)) fun ipproto_rvd():I32 = @pony_os_sockopt_level(I32(4093)) fun ipproto_satexpak():I32 = @pony_os_sockopt_level(I32(4094)) fun ipproto_satmon():I32 = @pony_os_sockopt_level(I32(4095)) fun ipproto_sccsp():I32 = @pony_os_sockopt_level(I32(4096)) fun ipproto_sctp():I32 = @pony_os_sockopt_level(I32(4097)) fun ipproto_sdrp():I32 = @pony_os_sockopt_level(I32(4098)) fun ipproto_send():I32 = @pony_os_sockopt_level(I32(4099)) fun ipproto_sep():I32 = @pony_os_sockopt_level(I32(4100)) fun ipproto_shim6():I32 = @pony_os_sockopt_level(I32(4101)) fun ipproto_skip():I32 = @pony_os_sockopt_level(I32(4102)) fun ipproto_spacer():I32 = @pony_os_sockopt_level(I32(4103)) fun ipproto_srpc():I32 = @pony_os_sockopt_level(I32(4104)) fun ipproto_st():I32 = @pony_os_sockopt_level(I32(4105)) fun ipproto_svmtp():I32 = @pony_os_sockopt_level(I32(4106)) fun ipproto_swipe():I32 = @pony_os_sockopt_level(I32(4107)) fun ipproto_tcf():I32 = @pony_os_sockopt_level(I32(4108)) fun ipproto_tcp():I32 = @pony_os_sockopt_level(I32(4109)) fun ipproto_tlsp():I32 = @pony_os_sockopt_level(I32(4110)) fun ipproto_tp():I32 = @pony_os_sockopt_level(I32(4111)) fun ipproto_tpxx():I32 = @pony_os_sockopt_level(I32(4112)) fun ipproto_trunk1():I32 = @pony_os_sockopt_level(I32(4113)) fun ipproto_trunk2():I32 = @pony_os_sockopt_level(I32(4114)) fun ipproto_ttp():I32 = @pony_os_sockopt_level(I32(4115)) fun ipproto_udp():I32 = @pony_os_sockopt_level(I32(4116)) fun ipproto_udplite():I32 = @pony_os_sockopt_level(I32(4117)) fun ipproto_vines():I32 = @pony_os_sockopt_level(I32(4118)) fun ipproto_visa():I32 = @pony_os_sockopt_level(I32(4119)) fun ipproto_vmtp():I32 = @pony_os_sockopt_level(I32(4120)) fun ipproto_wbexpak():I32 = @pony_os_sockopt_level(I32(4121)) fun ipproto_wbmon():I32 = @pony_os_sockopt_level(I32(4122)) fun ipproto_wsn():I32 = @pony_os_sockopt_level(I32(4123)) fun ipproto_xnet():I32 = @pony_os_sockopt_level(I32(4124)) fun ipproto_xtp():I32 = @pony_os_sockopt_level(I32(4125)) fun sol_atalk():I32 = @pony_os_sockopt_level(I32(4126)) fun sol_ax25():I32 = @pony_os_sockopt_level(I32(4127)) fun sol_hci_raw():I32 = @pony_os_sockopt_level(I32(4128)) fun sol_ipx():I32 = @pony_os_sockopt_level(I32(4129)) fun sol_l2cap():I32 = @pony_os_sockopt_level(I32(4130)) fun sol_local():I32 = @pony_os_sockopt_level(I32(4131)) fun sol_ndrvproto():I32 = @pony_os_sockopt_level(I32(4132)) fun sol_netrom():I32 = @pony_os_sockopt_level(I32(4133)) fun sol_rds():I32 = @pony_os_sockopt_level(I32(4134)) fun sol_rfcomm():I32 = @pony_os_sockopt_level(I32(4135)) fun sol_rose():I32 = @pony_os_sockopt_level(I32(4136)) fun sol_sco():I32 = @pony_os_sockopt_level(I32(4137)) fun sol_socket():I32 = @pony_os_sockopt_level(I32(4138)) fun sol_tipc():I32 = @pony_os_sockopt_level(I32(4139)) fun sol_udp():I32 = @pony_os_sockopt_level(I32(4140)) /* * * Options formatted in Pony by: * egrep -v '^(IP[A-Z0-6]*PROTO_|NSPROTO_|SOL_)' ~/sum-of-all-constants.txt | egrep -v '\\(' | sort -u | egrep -v '^$' | sed 's/__/_/g' | awk 'BEGIN { count=0; } { printf( fun %s():I32 = @pony_os_sockopt_option(I32(%d))\\n , tolower($1), count++); }' */ // options fun af_coip():I32 = @pony_os_sockopt_option(I32(0)) fun af_inet():I32 = @pony_os_sockopt_option(I32(1)) fun af_inet6():I32 = @pony_os_sockopt_option(I32(2)) fun bluetooth_proto_sco():I32 = @pony_os_sockopt_option(I32(3)) fun dccp_nr_pkt_types():I32 = @pony_os_sockopt_option(I32(4)) fun dccp_service_list_max_len():I32 = @pony_os_sockopt_option(I32(5)) fun dccp_single_opt_maxlen():I32 = @pony_os_sockopt_option(I32(6)) fun dccp_sockopt_available_ccids():I32 = @pony_os_sockopt_option(I32(7)) fun dccp_sockopt_ccid():I32 = @pony_os_sockopt_option(I32(8)) fun dccp_sockopt_ccid_rx_info():I32 = @pony_os_sockopt_option(I32(9)) fun dccp_sockopt_ccid_tx_info():I32 = @pony_os_sockopt_option(I32(10)) fun dccp_sockopt_change_l():I32 = @pony_os_sockopt_option(I32(11)) fun dccp_sockopt_change_r():I32 = @pony_os_sockopt_option(I32(12)) fun dccp_sockopt_get_cur_mps():I32 = @pony_os_sockopt_option(I32(13)) fun dccp_sockopt_packet_size():I32 = @pony_os_sockopt_option(I32(14)) fun dccp_sockopt_qpolicy_id():I32 = @pony_os_sockopt_option(I32(15)) fun dccp_sockopt_qpolicy_txqlen():I32 = @pony_os_sockopt_option(I32(16)) fun dccp_sockopt_recv_cscov():I32 = @pony_os_sockopt_option(I32(17)) fun dccp_sockopt_rx_ccid():I32 = @pony_os_sockopt_option(I32(18)) fun dccp_sockopt_send_cscov():I32 = @pony_os_sockopt_option(I32(19)) fun dccp_sockopt_server_timewait():I32 = @pony_os_sockopt_option(I32(20)) fun dccp_sockopt_service():I32 = @pony_os_sockopt_option(I32(21)) fun dccp_sockopt_tx_ccid():I32 = @pony_os_sockopt_option(I32(22)) fun dso_acceptmode():I32 = @pony_os_sockopt_option(I32(23)) fun dso_conaccept():I32 = @pony_os_sockopt_option(I32(24)) fun dso_conaccess():I32 = @pony_os_sockopt_option(I32(25)) fun dso_condata():I32 = @pony_os_sockopt_option(I32(26)) fun dso_conreject():I32 = @pony_os_sockopt_option(I32(27)) fun dso_cork():I32 = @pony_os_sockopt_option(I32(28)) fun dso_disdata():I32 = @pony_os_sockopt_option(I32(29)) fun dso_info():I32 = @pony_os_sockopt_option(I32(30)) fun dso_linkinfo():I32 = @pony_os_sockopt_option(I32(31)) fun dso_max():I32 = @pony_os_sockopt_option(I32(32)) fun dso_maxwindow():I32 = @pony_os_sockopt_option(I32(33)) fun dso_nodelay():I32 = @pony_os_sockopt_option(I32(34)) fun dso_seqpacket():I32 = @pony_os_sockopt_option(I32(35)) fun dso_services():I32 = @pony_os_sockopt_option(I32(36)) fun dso_stream():I32 = @pony_os_sockopt_option(I32(37)) fun icmp_address():I32 = @pony_os_sockopt_option(I32(38)) fun icmp_addressreply():I32 = @pony_os_sockopt_option(I32(39)) fun icmp_dest_unreach():I32 = @pony_os_sockopt_option(I32(40)) fun icmp_echo():I32 = @pony_os_sockopt_option(I32(41)) fun icmp_echoreply():I32 = @pony_os_sockopt_option(I32(42)) fun icmp_exc_fragtime():I32 = @pony_os_sockopt_option(I32(43)) fun icmp_exc_ttl():I32 = @pony_os_sockopt_option(I32(44)) fun icmp_filter():I32 = @pony_os_sockopt_option(I32(45)) fun icmp_frag_needed():I32 = @pony_os_sockopt_option(I32(46)) fun icmp_host_ano():I32 = @pony_os_sockopt_option(I32(47)) fun icmp_host_isolated():I32 = @pony_os_sockopt_option(I32(48)) fun icmp_host_unknown():I32 = @pony_os_sockopt_option(I32(49)) fun icmp_host_unreach():I32 = @pony_os_sockopt_option(I32(50)) fun icmp_host_unr_tos():I32 = @pony_os_sockopt_option(I32(51)) fun icmp_info_reply():I32 = @pony_os_sockopt_option(I32(52)) fun icmp_info_request():I32 = @pony_os_sockopt_option(I32(53)) fun icmp_net_ano():I32 = @pony_os_sockopt_option(I32(54)) fun icmp_net_unknown():I32 = @pony_os_sockopt_option(I32(55)) fun icmp_net_unreach():I32 = @pony_os_sockopt_option(I32(56)) fun icmp_net_unr_tos():I32 = @pony_os_sockopt_option(I32(57)) fun icmp_parameterprob():I32 = @pony_os_sockopt_option(I32(58)) fun icmp_pkt_filtered():I32 = @pony_os_sockopt_option(I32(59)) fun icmp_port_unreach():I32 = @pony_os_sockopt_option(I32(60)) fun icmp_prec_cutoff():I32 = @pony_os_sockopt_option(I32(61)) fun icmp_prec_violation():I32 = @pony_os_sockopt_option(I32(62)) fun icmp_prot_unreach():I32 = @pony_os_sockopt_option(I32(63)) fun icmp_redirect():I32 = @pony_os_sockopt_option(I32(64)) fun icmp_redir_host():I32 = @pony_os_sockopt_option(I32(65)) fun icmp_redir_hosttos():I32 = @pony_os_sockopt_option(I32(66)) fun icmp_redir_net():I32 = @pony_os_sockopt_option(I32(67)) fun icmp_redir_nettos():I32 = @pony_os_sockopt_option(I32(68)) fun icmp_source_quench():I32 = @pony_os_sockopt_option(I32(69)) fun icmp_sr_failed():I32 = @pony_os_sockopt_option(I32(70)) fun icmp_timestamp():I32 = @pony_os_sockopt_option(I32(71)) fun icmp_timestampreply():I32 = @pony_os_sockopt_option(I32(72)) fun icmp_time_exceeded():I32 = @pony_os_sockopt_option(I32(73)) fun ipctl_acceptsourceroute():I32 = @pony_os_sockopt_option(I32(74)) fun ipctl_defmtu():I32 = @pony_os_sockopt_option(I32(75)) fun ipctl_defttl():I32 = @pony_os_sockopt_option(I32(76)) fun ipctl_directedbroadcast():I32 = @pony_os_sockopt_option(I32(77)) fun ipctl_fastforwarding():I32 = @pony_os_sockopt_option(I32(78)) fun ipctl_forwarding():I32 = @pony_os_sockopt_option(I32(79)) fun ipctl_gif_ttl():I32 = @pony_os_sockopt_option(I32(80)) fun ipctl_intrdqdrops():I32 = @pony_os_sockopt_option(I32(81)) fun ipctl_intrdqmaxlen():I32 = @pony_os_sockopt_option(I32(82)) fun ipctl_intrqdrops():I32 = @pony_os_sockopt_option(I32(83)) fun ipctl_intrqmaxlen():I32 = @pony_os_sockopt_option(I32(84)) fun ipctl_keepfaith():I32 = @pony_os_sockopt_option(I32(85)) fun ipctl_maxid():I32 = @pony_os_sockopt_option(I32(86)) fun ipctl_rtexpire():I32 = @pony_os_sockopt_option(I32(87)) fun ipctl_rtmaxcache():I32 = @pony_os_sockopt_option(I32(88)) fun ipctl_rtminexpire():I32 = @pony_os_sockopt_option(I32(89)) fun ipctl_sendredirects():I32 = @pony_os_sockopt_option(I32(90)) fun ipctl_sourceroute():I32 = @pony_os_sockopt_option(I32(91)) fun ipctl_stats():I32 = @pony_os_sockopt_option(I32(92)) fun ipport_ephemeralfirst():I32 = @pony_os_sockopt_option(I32(93)) fun ipport_ephemerallast():I32 = @pony_os_sockopt_option(I32(94)) fun ipport_hifirstauto():I32 = @pony_os_sockopt_option(I32(95)) fun ipport_hilastauto():I32 = @pony_os_sockopt_option(I32(96)) fun ipport_max():I32 = @pony_os_sockopt_option(I32(97)) fun ipport_reserved():I32 = @pony_os_sockopt_option(I32(98)) fun ipport_reservedstart():I32 = @pony_os_sockopt_option(I32(99)) fun ipport_userreserved():I32 = @pony_os_sockopt_option(I32(100)) fun ipv6_2292dstopts():I32 = @pony_os_sockopt_option(I32(101)) fun ipv6_2292hoplimit():I32 = @pony_os_sockopt_option(I32(102)) fun ipv6_2292hopopts():I32 = @pony_os_sockopt_option(I32(103)) fun ipv6_2292pktinfo():I32 = @pony_os_sockopt_option(I32(104)) fun ipv6_2292pktoptions():I32 = @pony_os_sockopt_option(I32(105)) fun ipv6_2292rthdr():I32 = @pony_os_sockopt_option(I32(106)) fun ipv6_addrform():I32 = @pony_os_sockopt_option(I32(107)) fun ipv6_addr_preferences():I32 = @pony_os_sockopt_option(I32(108)) fun ipv6_add_membership():I32 = @pony_os_sockopt_option(I32(109)) fun ipv6_authhdr():I32 = @pony_os_sockopt_option(I32(110)) fun ipv6_autoflowlabel():I32 = @pony_os_sockopt_option(I32(111)) fun ipv6_checksum():I32 = @pony_os_sockopt_option(I32(112)) fun ipv6_dontfrag():I32 = @pony_os_sockopt_option(I32(113)) fun ipv6_drop_membership():I32 = @pony_os_sockopt_option(I32(114)) fun ipv6_dstopts():I32 = @pony_os_sockopt_option(I32(115)) fun ipv6_flowinfo():I32 = @pony_os_sockopt_option(I32(116)) fun ipv6_flowinfo_flowlabel():I32 = @pony_os_sockopt_option(I32(117)) fun ipv6_flowinfo_priority():I32 = @pony_os_sockopt_option(I32(118)) fun ipv6_flowinfo_send():I32 = @pony_os_sockopt_option(I32(119)) fun ipv6_flowlabel_mgr():I32 = @pony_os_sockopt_option(I32(120)) fun ipv6_fl_a_get():I32 = @pony_os_sockopt_option(I32(121)) fun ipv6_fl_a_put():I32 = @pony_os_sockopt_option(I32(122)) fun ipv6_fl_a_renew():I32 = @pony_os_sockopt_option(I32(123)) fun ipv6_fl_f_create():I32 = @pony_os_sockopt_option(I32(124)) fun ipv6_fl_f_excl():I32 = @pony_os_sockopt_option(I32(125)) fun ipv6_fl_f_reflect():I32 = @pony_os_sockopt_option(I32(126)) fun ipv6_fl_f_remote():I32 = @pony_os_sockopt_option(I32(127)) fun ipv6_fl_s_any():I32 = @pony_os_sockopt_option(I32(128)) fun ipv6_fl_s_excl():I32 = @pony_os_sockopt_option(I32(129)) fun ipv6_fl_s_none():I32 = @pony_os_sockopt_option(I32(130)) fun ipv6_fl_s_process():I32 = @pony_os_sockopt_option(I32(131)) fun ipv6_fl_s_user():I32 = @pony_os_sockopt_option(I32(132)) fun ipv6_hoplimit():I32 = @pony_os_sockopt_option(I32(133)) fun ipv6_hopopts():I32 = @pony_os_sockopt_option(I32(134)) fun ipv6_ipsec_policy():I32 = @pony_os_sockopt_option(I32(135)) fun ipv6_join_anycast():I32 = @pony_os_sockopt_option(I32(136)) fun ipv6_leave_anycast():I32 = @pony_os_sockopt_option(I32(137)) fun ipv6_minhopcount():I32 = @pony_os_sockopt_option(I32(138)) fun ipv6_mtu():I32 = @pony_os_sockopt_option(I32(139)) fun ipv6_mtu_discover():I32 = @pony_os_sockopt_option(I32(140)) fun ipv6_multicast_hops():I32 = @pony_os_sockopt_option(I32(141)) fun ipv6_multicast_if():I32 = @pony_os_sockopt_option(I32(142)) fun ipv6_multicast_loop():I32 = @pony_os_sockopt_option(I32(143)) fun ipv6_nexthop():I32 = @pony_os_sockopt_option(I32(144)) fun ipv6_origdstaddr():I32 = @pony_os_sockopt_option(I32(145)) fun ipv6_pathmtu():I32 = @pony_os_sockopt_option(I32(146)) fun ipv6_pktinfo():I32 = @pony_os_sockopt_option(I32(147)) fun ipv6_pmtudisc_do():I32 = @pony_os_sockopt_option(I32(148)) fun ipv6_pmtudisc_dont():I32 = @pony_os_sockopt_option(I32(149)) fun ipv6_pmtudisc_interface():I32 = @pony_os_sockopt_option(I32(150)) fun ipv6_pmtudisc_omit():I32 = @pony_os_sockopt_option(I32(151)) fun ipv6_pmtudisc_probe():I32 = @pony_os_sockopt_option(I32(152)) fun ipv6_pmtudisc_want():I32 = @pony_os_sockopt_option(I32(153)) fun ipv6_prefer_src_cga():I32 = @pony_os_sockopt_option(I32(154)) fun ipv6_prefer_src_coa():I32 = @pony_os_sockopt_option(I32(155)) fun ipv6_prefer_src_home():I32 = @pony_os_sockopt_option(I32(156)) fun ipv6_prefer_src_noncga():I32 = @pony_os_sockopt_option(I32(157)) fun ipv6_prefer_src_public():I32 = @pony_os_sockopt_option(I32(158)) fun ipv6_prefer_src_pubtmp_default():I32 = @pony_os_sockopt_option(I32(159)) fun ipv6_prefer_src_tmp():I32 = @pony_os_sockopt_option(I32(160)) fun ipv6_priority_10():I32 = @pony_os_sockopt_option(I32(161)) fun ipv6_priority_11():I32 = @pony_os_sockopt_option(I32(162)) fun ipv6_priority_12():I32 = @pony_os_sockopt_option(I32(163)) fun ipv6_priority_13():I32 = @pony_os_sockopt_option(I32(164)) fun ipv6_priority_14():I32 = @pony_os_sockopt_option(I32(165)) fun ipv6_priority_15():I32 = @pony_os_sockopt_option(I32(166)) fun ipv6_priority_8():I32 = @pony_os_sockopt_option(I32(167)) fun ipv6_priority_9():I32 = @pony_os_sockopt_option(I32(168)) fun ipv6_priority_bulk():I32 = @pony_os_sockopt_option(I32(169)) fun ipv6_priority_control():I32 = @pony_os_sockopt_option(I32(170)) fun ipv6_priority_filler():I32 = @pony_os_sockopt_option(I32(171)) fun ipv6_priority_interactive():I32 = @pony_os_sockopt_option(I32(172)) fun ipv6_priority_reserved1():I32 = @pony_os_sockopt_option(I32(173)) fun ipv6_priority_reserved2():I32 = @pony_os_sockopt_option(I32(174)) fun ipv6_priority_unattended():I32 = @pony_os_sockopt_option(I32(175)) fun ipv6_priority_uncharacterized():I32 = @pony_os_sockopt_option(I32(176)) fun ipv6_recvdstopts():I32 = @pony_os_sockopt_option(I32(177)) fun ipv6_recverr():I32 = @pony_os_sockopt_option(I32(178)) fun ipv6_recvhoplimit():I32 = @pony_os_sockopt_option(I32(179)) fun ipv6_recvhopopts():I32 = @pony_os_sockopt_option(I32(180)) fun ipv6_recvorigdstaddr():I32 = @pony_os_sockopt_option(I32(181)) fun ipv6_recvpathmtu():I32 = @pony_os_sockopt_option(I32(182)) fun ipv6_recvpktinfo():I32 = @pony_os_sockopt_option(I32(183)) fun ipv6_recvrthdr():I32 = @pony_os_sockopt_option(I32(184)) fun ipv6_recvtclass():I32 = @pony_os_sockopt_option(I32(185)) fun ipv6_router_alert():I32 = @pony_os_sockopt_option(I32(186)) fun ipv6_rthdr():I32 = @pony_os_sockopt_option(I32(187)) fun ipv6_rthdrdstopts():I32 = @pony_os_sockopt_option(I32(188)) fun ipv6_tclass():I32 = @pony_os_sockopt_option(I32(189)) fun ipv6_tlv_hao():I32 = @pony_os_sockopt_option(I32(190)) fun ipv6_tlv_jumbo():I32 = @pony_os_sockopt_option(I32(191)) fun ipv6_tlv_pad1():I32 = @pony_os_sockopt_option(I32(192)) fun ipv6_tlv_padn():I32 = @pony_os_sockopt_option(I32(193)) fun ipv6_tlv_routeralert():I32 = @pony_os_sockopt_option(I32(194)) fun ipv6_transparent():I32 = @pony_os_sockopt_option(I32(195)) fun ipv6_unicast_hops():I32 = @pony_os_sockopt_option(I32(196)) fun ipv6_unicast_if():I32 = @pony_os_sockopt_option(I32(197)) fun ipv6_use_min_mtu():I32 = @pony_os_sockopt_option(I32(198)) fun ipv6_v6only():I32 = @pony_os_sockopt_option(I32(199)) fun ipv6_xfrm_policy():I32 = @pony_os_sockopt_option(I32(200)) fun ipx_address():I32 = @pony_os_sockopt_option(I32(201)) fun ipx_address_notify():I32 = @pony_os_sockopt_option(I32(202)) fun ipx_crtitf():I32 = @pony_os_sockopt_option(I32(203)) fun ipx_dltitf():I32 = @pony_os_sockopt_option(I32(204)) fun ipx_dstype():I32 = @pony_os_sockopt_option(I32(205)) fun ipx_extended_address():I32 = @pony_os_sockopt_option(I32(206)) fun ipx_filterptype():I32 = @pony_os_sockopt_option(I32(207)) fun ipx_frame_8022():I32 = @pony_os_sockopt_option(I32(208)) fun ipx_frame_8023():I32 = @pony_os_sockopt_option(I32(209)) fun ipx_frame_etherii():I32 = @pony_os_sockopt_option(I32(210)) fun ipx_frame_none():I32 = @pony_os_sockopt_option(I32(211)) fun ipx_frame_snap():I32 = @pony_os_sockopt_option(I32(212)) fun ipx_frame_tr_8022():I32 = @pony_os_sockopt_option(I32(213)) fun ipx_getnetinfo():I32 = @pony_os_sockopt_option(I32(214)) fun ipx_getnetinfo_norip():I32 = @pony_os_sockopt_option(I32(215)) fun ipx_immediatespxack():I32 = @pony_os_sockopt_option(I32(216)) fun ipx_internal():I32 = @pony_os_sockopt_option(I32(217)) fun ipx_maxsize():I32 = @pony_os_sockopt_option(I32(218)) fun ipx_max_adapter_num():I32 = @pony_os_sockopt_option(I32(219)) fun ipx_mtu():I32 = @pony_os_sockopt_option(I32(220)) fun ipx_node_len():I32 = @pony_os_sockopt_option(I32(221)) fun ipx_primary():I32 = @pony_os_sockopt_option(I32(222)) fun ipx_ptype():I32 = @pony_os_sockopt_option(I32(223)) fun ipx_receive_broadcast():I32 = @pony_os_sockopt_option(I32(224)) fun ipx_recvhdr():I32 = @pony_os_sockopt_option(I32(225)) fun ipx_reripnetnumber():I32 = @pony_os_sockopt_option(I32(226)) fun ipx_route_no_router():I32 = @pony_os_sockopt_option(I32(227)) fun ipx_rt_8022():I32 = @pony_os_sockopt_option(I32(228)) fun ipx_rt_bluebook():I32 = @pony_os_sockopt_option(I32(229)) fun ipx_rt_routed():I32 = @pony_os_sockopt_option(I32(230)) fun ipx_rt_snap():I32 = @pony_os_sockopt_option(I32(231)) fun ipx_special_none():I32 = @pony_os_sockopt_option(I32(232)) fun ipx_spxgetconnectionstatus():I32 = @pony_os_sockopt_option(I32(233)) fun ipx_stopfilterptype():I32 = @pony_os_sockopt_option(I32(234)) fun ipx_type():I32 = @pony_os_sockopt_option(I32(235)) fun ip_add_membership():I32 = @pony_os_sockopt_option(I32(236)) fun ip_add_source_membership():I32 = @pony_os_sockopt_option(I32(237)) fun ip_bindany():I32 = @pony_os_sockopt_option(I32(238)) fun ip_bindmulti():I32 = @pony_os_sockopt_option(I32(239)) fun ip_bind_address_no_port():I32 = @pony_os_sockopt_option(I32(240)) fun ip_block_source():I32 = @pony_os_sockopt_option(I32(241)) fun ip_bound_if():I32 = @pony_os_sockopt_option(I32(242)) fun ip_checksum():I32 = @pony_os_sockopt_option(I32(243)) fun ip_default_multicast_loop():I32 = @pony_os_sockopt_option(I32(244)) fun ip_default_multicast_ttl():I32 = @pony_os_sockopt_option(I32(245)) fun ip_dontfrag():I32 = @pony_os_sockopt_option(I32(246)) fun ip_drop_membership():I32 = @pony_os_sockopt_option(I32(247)) fun ip_drop_source_membership():I32 = @pony_os_sockopt_option(I32(248)) fun ip_dummynet3():I32 = @pony_os_sockopt_option(I32(249)) fun ip_dummynet_configure():I32 = @pony_os_sockopt_option(I32(250)) fun ip_dummynet_del():I32 = @pony_os_sockopt_option(I32(251)) fun ip_dummynet_flush():I32 = @pony_os_sockopt_option(I32(252)) fun ip_dummynet_get():I32 = @pony_os_sockopt_option(I32(253)) fun ip_faith():I32 = @pony_os_sockopt_option(I32(254)) fun ip_flowid():I32 = @pony_os_sockopt_option(I32(255)) fun ip_flowtype():I32 = @pony_os_sockopt_option(I32(256)) fun ip_freebind():I32 = @pony_os_sockopt_option(I32(257)) fun ip_fw3():I32 = @pony_os_sockopt_option(I32(258)) fun ip_fw_add():I32 = @pony_os_sockopt_option(I32(259)) fun ip_fw_del():I32 = @pony_os_sockopt_option(I32(260)) fun ip_fw_flush():I32 = @pony_os_sockopt_option(I32(261)) fun ip_fw_get():I32 = @pony_os_sockopt_option(I32(262)) fun ip_fw_nat_cfg():I32 = @pony_os_sockopt_option(I32(263)) fun ip_fw_nat_del():I32 = @pony_os_sockopt_option(I32(264)) fun ip_fw_nat_get_config():I32 = @pony_os_sockopt_option(I32(265)) fun ip_fw_nat_get_log():I32 = @pony_os_sockopt_option(I32(266)) fun ip_fw_resetlog():I32 = @pony_os_sockopt_option(I32(267)) fun ip_fw_table_add():I32 = @pony_os_sockopt_option(I32(268)) fun ip_fw_table_del():I32 = @pony_os_sockopt_option(I32(269)) fun ip_fw_table_flush():I32 = @pony_os_sockopt_option(I32(270)) fun ip_fw_table_getsize():I32 = @pony_os_sockopt_option(I32(271)) fun ip_fw_table_list():I32 = @pony_os_sockopt_option(I32(272)) fun ip_fw_zero():I32 = @pony_os_sockopt_option(I32(273)) fun ip_hdrincl():I32 = @pony_os_sockopt_option(I32(274)) fun ip_ipsec_policy():I32 = @pony_os_sockopt_option(I32(275)) fun ip_max_group_src_filter():I32 = @pony_os_sockopt_option(I32(276)) fun ip_max_memberships():I32 = @pony_os_sockopt_option(I32(277)) fun ip_max_sock_mute_filter():I32 = @pony_os_sockopt_option(I32(278)) fun ip_max_sock_src_filter():I32 = @pony_os_sockopt_option(I32(279)) fun ip_max_source_filter():I32 = @pony_os_sockopt_option(I32(280)) fun ip_minttl():I32 = @pony_os_sockopt_option(I32(281)) fun ip_min_memberships():I32 = @pony_os_sockopt_option(I32(282)) fun ip_msfilter():I32 = @pony_os_sockopt_option(I32(283)) fun ip_mtu():I32 = @pony_os_sockopt_option(I32(284)) fun ip_mtu_discover():I32 = @pony_os_sockopt_option(I32(285)) fun ip_multicast_all():I32 = @pony_os_sockopt_option(I32(286)) fun ip_multicast_if():I32 = @pony_os_sockopt_option(I32(287)) fun ip_multicast_ifindex():I32 = @pony_os_sockopt_option(I32(288)) fun ip_multicast_loop():I32 = @pony_os_sockopt_option(I32(289)) fun ip_multicast_ttl():I32 = @pony_os_sockopt_option(I32(290)) fun ip_multicast_vif():I32 = @pony_os_sockopt_option(I32(291)) fun ip_nat_xxx():I32 = @pony_os_sockopt_option(I32(292)) fun ip_nodefrag():I32 = @pony_os_sockopt_option(I32(293)) fun ip_old_fw_add():I32 = @pony_os_sockopt_option(I32(294)) fun ip_old_fw_del():I32 = @pony_os_sockopt_option(I32(295)) fun ip_old_fw_flush():I32 = @pony_os_sockopt_option(I32(296)) fun ip_old_fw_get():I32 = @pony_os_sockopt_option(I32(297)) fun ip_old_fw_resetlog():I32 = @pony_os_sockopt_option(I32(298)) fun ip_old_fw_zero():I32 = @pony_os_sockopt_option(I32(299)) fun ip_onesbcast():I32 = @pony_os_sockopt_option(I32(300)) fun ip_options():I32 = @pony_os_sockopt_option(I32(301)) fun ip_origdstaddr():I32 = @pony_os_sockopt_option(I32(302)) fun ip_passsec():I32 = @pony_os_sockopt_option(I32(303)) fun ip_pktinfo():I32 = @pony_os_sockopt_option(I32(304)) fun ip_pktoptions():I32 = @pony_os_sockopt_option(I32(305)) fun ip_pmtudisc_do():I32 = @pony_os_sockopt_option(I32(306)) fun ip_pmtudisc_dont():I32 = @pony_os_sockopt_option(I32(307)) fun ip_pmtudisc_interface():I32 = @pony_os_sockopt_option(I32(308)) fun ip_pmtudisc_omit():I32 = @pony_os_sockopt_option(I32(309)) fun ip_pmtudisc_probe():I32 = @pony_os_sockopt_option(I32(310)) fun ip_pmtudisc_want():I32 = @pony_os_sockopt_option(I32(311)) fun ip_portrange():I32 = @pony_os_sockopt_option(I32(312)) fun ip_portrange_default():I32 = @pony_os_sockopt_option(I32(313)) fun ip_portrange_high():I32 = @pony_os_sockopt_option(I32(314)) fun ip_portrange_low():I32 = @pony_os_sockopt_option(I32(315)) fun ip_recvdstaddr():I32 = @pony_os_sockopt_option(I32(316)) fun ip_recverr():I32 = @pony_os_sockopt_option(I32(317)) fun ip_recvflowid():I32 = @pony_os_sockopt_option(I32(318)) fun ip_recvif():I32 = @pony_os_sockopt_option(I32(319)) fun ip_recvopts():I32 = @pony_os_sockopt_option(I32(320)) fun ip_recvorigdstaddr():I32 = @pony_os_sockopt_option(I32(321)) fun ip_recvpktinfo():I32 = @pony_os_sockopt_option(I32(322)) fun ip_recvretopts():I32 = @pony_os_sockopt_option(I32(323)) fun ip_recvrssbucketid():I32 = @pony_os_sockopt_option(I32(324)) fun ip_recvtos():I32 = @pony_os_sockopt_option(I32(325)) fun ip_recvttl():I32 = @pony_os_sockopt_option(I32(326)) fun ip_retopts():I32 = @pony_os_sockopt_option(I32(327)) fun ip_router_alert():I32 = @pony_os_sockopt_option(I32(328)) fun ip_rssbucketid():I32 = @pony_os_sockopt_option(I32(329)) fun ip_rss_listen_bucket():I32 = @pony_os_sockopt_option(I32(330)) fun ip_rsvp_off():I32 = @pony_os_sockopt_option(I32(331)) fun ip_rsvp_on():I32 = @pony_os_sockopt_option(I32(332)) fun ip_rsvp_vif_off():I32 = @pony_os_sockopt_option(I32(333)) fun ip_rsvp_vif_on():I32 = @pony_os_sockopt_option(I32(334)) fun ip_sendsrcaddr():I32 = @pony_os_sockopt_option(I32(335)) fun ip_striphdr():I32 = @pony_os_sockopt_option(I32(336)) fun ip_tos():I32 = @pony_os_sockopt_option(I32(337)) fun ip_traffic_mgt_background():I32 = @pony_os_sockopt_option(I32(338)) fun ip_transparent():I32 = @pony_os_sockopt_option(I32(339)) fun ip_ttl():I32 = @pony_os_sockopt_option(I32(340)) fun ip_unblock_source():I32 = @pony_os_sockopt_option(I32(341)) fun ip_unicast_if():I32 = @pony_os_sockopt_option(I32(342)) fun ip_xfrm_policy():I32 = @pony_os_sockopt_option(I32(343)) fun local_connwait():I32 = @pony_os_sockopt_option(I32(344)) fun local_creds():I32 = @pony_os_sockopt_option(I32(345)) fun local_peercred():I32 = @pony_os_sockopt_option(I32(346)) fun local_peerepid():I32 = @pony_os_sockopt_option(I32(347)) fun local_peereuuid():I32 = @pony_os_sockopt_option(I32(348)) fun local_peerpid():I32 = @pony_os_sockopt_option(I32(349)) fun local_peeruuid():I32 = @pony_os_sockopt_option(I32(350)) fun local_vendor():I32 = @pony_os_sockopt_option(I32(351)) fun max_tcpoptlen():I32 = @pony_os_sockopt_option(I32(352)) fun mcast_block_source():I32 = @pony_os_sockopt_option(I32(353)) fun mcast_exclude():I32 = @pony_os_sockopt_option(I32(354)) fun mcast_include():I32 = @pony_os_sockopt_option(I32(355)) fun mcast_join_group():I32 = @pony_os_sockopt_option(I32(356)) fun mcast_join_source_group():I32 = @pony_os_sockopt_option(I32(357)) fun mcast_leave_group():I32 = @pony_os_sockopt_option(I32(358)) fun mcast_leave_source_group():I32 = @pony_os_sockopt_option(I32(359)) fun mcast_msfilter():I32 = @pony_os_sockopt_option(I32(360)) fun mcast_unblock_source():I32 = @pony_os_sockopt_option(I32(361)) fun mcast_undefined():I32 = @pony_os_sockopt_option(I32(362)) fun mrt_add_bw_upcall():I32 = @pony_os_sockopt_option(I32(363)) fun mrt_add_mfc():I32 = @pony_os_sockopt_option(I32(364)) fun mrt_add_vif():I32 = @pony_os_sockopt_option(I32(365)) fun mrt_api_config():I32 = @pony_os_sockopt_option(I32(366)) fun mrt_api_flags_all():I32 = @pony_os_sockopt_option(I32(367)) fun mrt_api_support():I32 = @pony_os_sockopt_option(I32(368)) fun mrt_assert():I32 = @pony_os_sockopt_option(I32(369)) fun mrt_del_bw_upcall():I32 = @pony_os_sockopt_option(I32(370)) fun mrt_del_mfc():I32 = @pony_os_sockopt_option(I32(371)) fun mrt_del_vif():I32 = @pony_os_sockopt_option(I32(372)) fun mrt_done():I32 = @pony_os_sockopt_option(I32(373)) fun mrt_init():I32 = @pony_os_sockopt_option(I32(374)) fun mrt_mfc_bw_upcall():I32 = @pony_os_sockopt_option(I32(375)) fun mrt_mfc_flags_all():I32 = @pony_os_sockopt_option(I32(376)) fun mrt_mfc_flags_border_vif():I32 = @pony_os_sockopt_option(I32(377)) fun mrt_mfc_flags_disable_wrongvif():I32 = @pony_os_sockopt_option(I32(378)) fun mrt_mfc_rp():I32 = @pony_os_sockopt_option(I32(379)) fun mrt_pim():I32 = @pony_os_sockopt_option(I32(380)) fun mrt_version():I32 = @pony_os_sockopt_option(I32(381)) fun msg_notification():I32 = @pony_os_sockopt_option(I32(382)) fun msg_socallbck():I32 = @pony_os_sockopt_option(I32(383)) fun ndrvproto_ndrv():I32 = @pony_os_sockopt_option(I32(384)) fun ndrv_addmulticast():I32 = @pony_os_sockopt_option(I32(385)) fun ndrv_deldmxspec():I32 = @pony_os_sockopt_option(I32(386)) fun ndrv_delmulticast():I32 = @pony_os_sockopt_option(I32(387)) fun ndrv_demuxtype_ethertype():I32 = @pony_os_sockopt_option(I32(388)) fun ndrv_demuxtype_sap():I32 = @pony_os_sockopt_option(I32(389)) fun ndrv_demuxtype_snap():I32 = @pony_os_sockopt_option(I32(390)) fun ndrv_dmux_max_descr():I32 = @pony_os_sockopt_option(I32(391)) fun ndrv_protocol_desc_vers():I32 = @pony_os_sockopt_option(I32(392)) fun ndrv_setdmxspec():I32 = @pony_os_sockopt_option(I32(393)) fun netlink_add_membership():I32 = @pony_os_sockopt_option(I32(394)) fun netlink_audit():I32 = @pony_os_sockopt_option(I32(395)) fun netlink_broadcast_error():I32 = @pony_os_sockopt_option(I32(396)) fun netlink_cap_ack():I32 = @pony_os_sockopt_option(I32(397)) fun netlink_connector():I32 = @pony_os_sockopt_option(I32(398)) fun netlink_crypto():I32 = @pony_os_sockopt_option(I32(399)) fun netlink_dnrtmsg():I32 = @pony_os_sockopt_option(I32(400)) fun netlink_drop_membership():I32 = @pony_os_sockopt_option(I32(401)) fun netlink_ecryptfs():I32 = @pony_os_sockopt_option(I32(402)) fun netlink_fib_lookup():I32 = @pony_os_sockopt_option(I32(403)) fun netlink_firewall():I32 = @pony_os_sockopt_option(I32(404)) fun netlink_generic():I32 = @pony_os_sockopt_option(I32(405)) fun netlink_inet_diag():I32 = @pony_os_sockopt_option(I32(406)) fun netlink_ip6_fw():I32 = @pony_os_sockopt_option(I32(407)) fun netlink_iscsi():I32 = @pony_os_sockopt_option(I32(408)) fun netlink_kobject_uevent():I32 = @pony_os_sockopt_option(I32(409)) fun netlink_listen_all_nsid():I32 = @pony_os_sockopt_option(I32(410)) fun netlink_list_memberships():I32 = @pony_os_sockopt_option(I32(411)) fun netlink_netfilter():I32 = @pony_os_sockopt_option(I32(412)) fun netlink_nflog():I32 = @pony_os_sockopt_option(I32(413)) fun netlink_no_enobufs():I32 = @pony_os_sockopt_option(I32(414)) fun netlink_pktinfo():I32 = @pony_os_sockopt_option(I32(415)) fun netlink_rdma():I32 = @pony_os_sockopt_option(I32(416)) fun netlink_route():I32 = @pony_os_sockopt_option(I32(417)) fun netlink_rx_ring():I32 = @pony_os_sockopt_option(I32(418)) fun netlink_scsitransport():I32 = @pony_os_sockopt_option(I32(419)) fun netlink_selinux():I32 = @pony_os_sockopt_option(I32(420)) fun netlink_sock_diag():I32 = @pony_os_sockopt_option(I32(421)) fun netlink_tx_ring():I32 = @pony_os_sockopt_option(I32(422)) fun netlink_unused():I32 = @pony_os_sockopt_option(I32(423)) fun netlink_usersock():I32 = @pony_os_sockopt_option(I32(424)) fun netlink_xfrm():I32 = @pony_os_sockopt_option(I32(425)) fun netrom_idle():I32 = @pony_os_sockopt_option(I32(426)) fun netrom_kill():I32 = @pony_os_sockopt_option(I32(427)) fun netrom_n2():I32 = @pony_os_sockopt_option(I32(428)) fun netrom_neigh():I32 = @pony_os_sockopt_option(I32(429)) fun netrom_node():I32 = @pony_os_sockopt_option(I32(430)) fun netrom_paclen():I32 = @pony_os_sockopt_option(I32(431)) fun netrom_t1():I32 = @pony_os_sockopt_option(I32(432)) fun netrom_t2():I32 = @pony_os_sockopt_option(I32(433)) fun netrom_t4():I32 = @pony_os_sockopt_option(I32(434)) fun nrdv_multicast_addrs_per_sock():I32 = @pony_os_sockopt_option(I32(435)) fun pvd_config():I32 = @pony_os_sockopt_option(I32(436)) fun rds_cancel_sent_to():I32 = @pony_os_sockopt_option(I32(437)) fun rds_cmsg_atomic_cswp():I32 = @pony_os_sockopt_option(I32(438)) fun rds_cmsg_atomic_fadd():I32 = @pony_os_sockopt_option(I32(439)) fun rds_cmsg_cong_update():I32 = @pony_os_sockopt_option(I32(440)) fun rds_cmsg_masked_atomic_cswp():I32 = @pony_os_sockopt_option(I32(441)) fun rds_cmsg_masked_atomic_fadd():I32 = @pony_os_sockopt_option(I32(442)) fun rds_cmsg_rdma_args():I32 = @pony_os_sockopt_option(I32(443)) fun rds_cmsg_rdma_dest():I32 = @pony_os_sockopt_option(I32(444)) fun rds_cmsg_rdma_map():I32 = @pony_os_sockopt_option(I32(445)) fun rds_cmsg_rdma_status():I32 = @pony_os_sockopt_option(I32(446)) fun rds_cong_monitor():I32 = @pony_os_sockopt_option(I32(447)) fun rds_cong_monitor_size():I32 = @pony_os_sockopt_option(I32(448)) fun rds_free_mr():I32 = @pony_os_sockopt_option(I32(449)) fun rds_get_mr():I32 = @pony_os_sockopt_option(I32(450)) fun rds_get_mr_for_dest():I32 = @pony_os_sockopt_option(I32(451)) fun rds_ib_abi_version():I32 = @pony_os_sockopt_option(I32(452)) fun rds_ib_gid_len():I32 = @pony_os_sockopt_option(I32(453)) fun rds_info_connections():I32 = @pony_os_sockopt_option(I32(454)) fun rds_info_connection_flag_connected():I32 = @pony_os_sockopt_option(I32(455)) fun rds_info_connection_flag_connecting():I32 = @pony_os_sockopt_option(I32(456)) fun rds_info_connection_flag_sending():I32 = @pony_os_sockopt_option(I32(457)) fun rds_info_connection_stats():I32 = @pony_os_sockopt_option(I32(458)) fun rds_info_counters():I32 = @pony_os_sockopt_option(I32(459)) fun rds_info_first():I32 = @pony_os_sockopt_option(I32(460)) fun rds_info_ib_connections():I32 = @pony_os_sockopt_option(I32(461)) fun rds_info_iwarp_connections():I32 = @pony_os_sockopt_option(I32(462)) fun rds_info_last():I32 = @pony_os_sockopt_option(I32(463)) fun rds_info_message_flag_ack():I32 = @pony_os_sockopt_option(I32(464)) fun rds_info_message_flag_fast_ack():I32 = @pony_os_sockopt_option(I32(465)) fun rds_info_recv_messages():I32 = @pony_os_sockopt_option(I32(466)) fun rds_info_retrans_messages():I32 = @pony_os_sockopt_option(I32(467)) fun rds_info_send_messages():I32 = @pony_os_sockopt_option(I32(468)) fun rds_info_sockets():I32 = @pony_os_sockopt_option(I32(469)) fun rds_info_tcp_sockets():I32 = @pony_os_sockopt_option(I32(470)) fun rds_rdma_canceled():I32 = @pony_os_sockopt_option(I32(471)) fun rds_rdma_dontwait():I32 = @pony_os_sockopt_option(I32(472)) fun rds_rdma_dropped():I32 = @pony_os_sockopt_option(I32(473)) fun rds_rdma_fence():I32 = @pony_os_sockopt_option(I32(474)) fun rds_rdma_invalidate():I32 = @pony_os_sockopt_option(I32(475)) fun rds_rdma_notify_me():I32 = @pony_os_sockopt_option(I32(476)) fun rds_rdma_other_error():I32 = @pony_os_sockopt_option(I32(477)) fun rds_rdma_readwrite():I32 = @pony_os_sockopt_option(I32(478)) fun rds_rdma_remote_error():I32 = @pony_os_sockopt_option(I32(479)) fun rds_rdma_silent():I32 = @pony_os_sockopt_option(I32(480)) fun rds_rdma_success():I32 = @pony_os_sockopt_option(I32(481)) fun rds_rdma_use_once():I32 = @pony_os_sockopt_option(I32(482)) fun rds_recverr():I32 = @pony_os_sockopt_option(I32(483)) fun rds_trans_count():I32 = @pony_os_sockopt_option(I32(484)) fun rds_trans_ib():I32 = @pony_os_sockopt_option(I32(485)) fun rds_trans_iwarp():I32 = @pony_os_sockopt_option(I32(486)) fun rds_trans_none():I32 = @pony_os_sockopt_option(I32(487)) fun rds_trans_tcp():I32 = @pony_os_sockopt_option(I32(488)) fun rose_access_barred():I32 = @pony_os_sockopt_option(I32(489)) fun rose_defer():I32 = @pony_os_sockopt_option(I32(490)) fun rose_dte_originated():I32 = @pony_os_sockopt_option(I32(491)) fun rose_holdback():I32 = @pony_os_sockopt_option(I32(492)) fun rose_idle():I32 = @pony_os_sockopt_option(I32(493)) fun rose_invalid_facility():I32 = @pony_os_sockopt_option(I32(494)) fun rose_local_procedure():I32 = @pony_os_sockopt_option(I32(495)) fun rose_max_digis():I32 = @pony_os_sockopt_option(I32(496)) fun rose_mtu():I32 = @pony_os_sockopt_option(I32(497)) fun rose_network_congestion():I32 = @pony_os_sockopt_option(I32(498)) fun rose_not_obtainable():I32 = @pony_os_sockopt_option(I32(499)) fun rose_number_busy():I32 = @pony_os_sockopt_option(I32(500)) fun rose_out_of_order():I32 = @pony_os_sockopt_option(I32(501)) fun rose_qbitincl():I32 = @pony_os_sockopt_option(I32(502)) fun rose_remote_procedure():I32 = @pony_os_sockopt_option(I32(503)) fun rose_ship_absent():I32 = @pony_os_sockopt_option(I32(504)) fun rose_t1():I32 = @pony_os_sockopt_option(I32(505)) fun rose_t2():I32 = @pony_os_sockopt_option(I32(506)) fun rose_t3():I32 = @pony_os_sockopt_option(I32(507)) fun scm_hci_raw_direction():I32 = @pony_os_sockopt_option(I32(508)) fun scm_timestamp():I32 = @pony_os_sockopt_option(I32(509)) fun scm_timestamping():I32 = @pony_os_sockopt_option(I32(510)) fun scm_timestampns():I32 = @pony_os_sockopt_option(I32(511)) fun scm_wifi_status():I32 = @pony_os_sockopt_option(I32(512)) fun sctp_abort_association():I32 = @pony_os_sockopt_option(I32(513)) fun sctp_adaptation_layer():I32 = @pony_os_sockopt_option(I32(514)) fun sctp_adaption_layer():I32 = @pony_os_sockopt_option(I32(515)) fun sctp_add_streams():I32 = @pony_os_sockopt_option(I32(516)) fun sctp_add_vrf_id():I32 = @pony_os_sockopt_option(I32(517)) fun sctp_asconf():I32 = @pony_os_sockopt_option(I32(518)) fun sctp_asconf_ack():I32 = @pony_os_sockopt_option(I32(519)) fun sctp_asconf_supported():I32 = @pony_os_sockopt_option(I32(520)) fun sctp_associnfo():I32 = @pony_os_sockopt_option(I32(521)) fun sctp_authentication():I32 = @pony_os_sockopt_option(I32(522)) fun sctp_auth_active_key():I32 = @pony_os_sockopt_option(I32(523)) fun sctp_auth_chunk():I32 = @pony_os_sockopt_option(I32(524)) fun sctp_auth_deactivate_key():I32 = @pony_os_sockopt_option(I32(525)) fun sctp_auth_delete_key():I32 = @pony_os_sockopt_option(I32(526)) fun sctp_auth_key():I32 = @pony_os_sockopt_option(I32(527)) fun sctp_auth_supported():I32 = @pony_os_sockopt_option(I32(528)) fun sctp_autoclose():I32 = @pony_os_sockopt_option(I32(529)) fun sctp_auto_asconf():I32 = @pony_os_sockopt_option(I32(530)) fun sctp_badcrc():I32 = @pony_os_sockopt_option(I32(531)) fun sctp_bindx_add_addr():I32 = @pony_os_sockopt_option(I32(532)) fun sctp_bindx_rem_addr():I32 = @pony_os_sockopt_option(I32(533)) fun sctp_blk_logging_enable():I32 = @pony_os_sockopt_option(I32(534)) fun sctp_bound():I32 = @pony_os_sockopt_option(I32(535)) fun sctp_cause_cookie_in_shutdown():I32 = @pony_os_sockopt_option(I32(536)) fun sctp_cause_deleting_last_addr():I32 = @pony_os_sockopt_option(I32(537)) fun sctp_cause_deleting_src_addr():I32 = @pony_os_sockopt_option(I32(538)) fun sctp_cause_illegal_asconf_ack():I32 = @pony_os_sockopt_option(I32(539)) fun sctp_cause_invalid_param():I32 = @pony_os_sockopt_option(I32(540)) fun sctp_cause_invalid_stream():I32 = @pony_os_sockopt_option(I32(541)) fun sctp_cause_missing_param():I32 = @pony_os_sockopt_option(I32(542)) fun sctp_cause_nat_colliding_state():I32 = @pony_os_sockopt_option(I32(543)) fun sctp_cause_nat_missing_state():I32 = @pony_os_sockopt_option(I32(544)) fun sctp_cause_no_error():I32 = @pony_os_sockopt_option(I32(545)) fun sctp_cause_no_user_data():I32 = @pony_os_sockopt_option(I32(546)) fun sctp_cause_out_of_resc():I32 = @pony_os_sockopt_option(I32(547)) fun sctp_cause_protocol_violation():I32 = @pony_os_sockopt_option(I32(548)) fun sctp_cause_request_refused():I32 = @pony_os_sockopt_option(I32(549)) fun sctp_cause_resource_shortage():I32 = @pony_os_sockopt_option(I32(550)) fun sctp_cause_restart_w_newaddr():I32 = @pony_os_sockopt_option(I32(551)) fun sctp_cause_stale_cookie():I32 = @pony_os_sockopt_option(I32(552)) fun sctp_cause_unrecog_chunk():I32 = @pony_os_sockopt_option(I32(553)) fun sctp_cause_unrecog_param():I32 = @pony_os_sockopt_option(I32(554)) fun sctp_cause_unresolvable_addr():I32 = @pony_os_sockopt_option(I32(555)) fun sctp_cause_unsupported_hmacid():I32 = @pony_os_sockopt_option(I32(556)) fun sctp_cause_user_initiated_abt():I32 = @pony_os_sockopt_option(I32(557)) fun sctp_cc_hstcp():I32 = @pony_os_sockopt_option(I32(558)) fun sctp_cc_htcp():I32 = @pony_os_sockopt_option(I32(559)) fun sctp_cc_option():I32 = @pony_os_sockopt_option(I32(560)) fun sctp_cc_opt_rtcc_setmode():I32 = @pony_os_sockopt_option(I32(561)) fun sctp_cc_opt_steady_step():I32 = @pony_os_sockopt_option(I32(562)) fun sctp_cc_opt_use_dccc_ecn():I32 = @pony_os_sockopt_option(I32(563)) fun sctp_cc_rfc2581():I32 = @pony_os_sockopt_option(I32(564)) fun sctp_cc_rtcc():I32 = @pony_os_sockopt_option(I32(565)) fun sctp_closed():I32 = @pony_os_sockopt_option(I32(566)) fun sctp_clr_stat_log():I32 = @pony_os_sockopt_option(I32(567)) fun sctp_cmt_base():I32 = @pony_os_sockopt_option(I32(568)) fun sctp_cmt_max():I32 = @pony_os_sockopt_option(I32(569)) fun sctp_cmt_mptcp():I32 = @pony_os_sockopt_option(I32(570)) fun sctp_cmt_off():I32 = @pony_os_sockopt_option(I32(571)) fun sctp_cmt_on_off():I32 = @pony_os_sockopt_option(I32(572)) fun sctp_cmt_rpv1():I32 = @pony_os_sockopt_option(I32(573)) fun sctp_cmt_rpv2():I32 = @pony_os_sockopt_option(I32(574)) fun sctp_cmt_use_dac():I32 = @pony_os_sockopt_option(I32(575)) fun sctp_connect_x():I32 = @pony_os_sockopt_option(I32(576)) fun sctp_connect_x_complete():I32 = @pony_os_sockopt_option(I32(577)) fun sctp_connect_x_delayed():I32 = @pony_os_sockopt_option(I32(578)) fun sctp_context():I32 = @pony_os_sockopt_option(I32(579)) fun sctp_cookie_ack():I32 = @pony_os_sockopt_option(I32(580)) fun sctp_cookie_echo():I32 = @pony_os_sockopt_option(I32(581)) fun sctp_cookie_echoed():I32 = @pony_os_sockopt_option(I32(582)) fun sctp_cookie_wait():I32 = @pony_os_sockopt_option(I32(583)) fun sctp_cwnd_logging_enable():I32 = @pony_os_sockopt_option(I32(584)) fun sctp_cwnd_monitor_enable():I32 = @pony_os_sockopt_option(I32(585)) fun sctp_cwr_in_same_window():I32 = @pony_os_sockopt_option(I32(586)) fun sctp_cwr_reduce_override():I32 = @pony_os_sockopt_option(I32(587)) fun sctp_data():I32 = @pony_os_sockopt_option(I32(588)) fun sctp_data_first_frag():I32 = @pony_os_sockopt_option(I32(589)) fun sctp_data_frag_mask():I32 = @pony_os_sockopt_option(I32(590)) fun sctp_data_last_frag():I32 = @pony_os_sockopt_option(I32(591)) fun sctp_data_middle_frag():I32 = @pony_os_sockopt_option(I32(592)) fun sctp_data_not_frag():I32 = @pony_os_sockopt_option(I32(593)) fun sctp_data_sack_immediately():I32 = @pony_os_sockopt_option(I32(594)) fun sctp_data_unordered():I32 = @pony_os_sockopt_option(I32(595)) fun sctp_default_prinfo():I32 = @pony_os_sockopt_option(I32(596)) fun sctp_default_send_param():I32 = @pony_os_sockopt_option(I32(597)) fun sctp_default_sndinfo():I32 = @pony_os_sockopt_option(I32(598)) fun sctp_delayed_sack():I32 = @pony_os_sockopt_option(I32(599)) fun sctp_del_vrf_id():I32 = @pony_os_sockopt_option(I32(600)) fun sctp_disable_fragments():I32 = @pony_os_sockopt_option(I32(601)) fun sctp_ecn_cwr():I32 = @pony_os_sockopt_option(I32(602)) fun sctp_ecn_echo():I32 = @pony_os_sockopt_option(I32(603)) fun sctp_ecn_supported():I32 = @pony_os_sockopt_option(I32(604)) fun sctp_enable_change_assoc_req():I32 = @pony_os_sockopt_option(I32(605)) fun sctp_enable_reset_assoc_req():I32 = @pony_os_sockopt_option(I32(606)) fun sctp_enable_reset_stream_req():I32 = @pony_os_sockopt_option(I32(607)) fun sctp_enable_stream_reset():I32 = @pony_os_sockopt_option(I32(608)) fun sctp_enable_value_mask():I32 = @pony_os_sockopt_option(I32(609)) fun sctp_established():I32 = @pony_os_sockopt_option(I32(610)) fun sctp_event():I32 = @pony_os_sockopt_option(I32(611)) fun sctp_events():I32 = @pony_os_sockopt_option(I32(612)) fun sctp_explicit_eor():I32 = @pony_os_sockopt_option(I32(613)) fun sctp_flight_logging_enable():I32 = @pony_os_sockopt_option(I32(614)) fun sctp_forward_cum_tsn():I32 = @pony_os_sockopt_option(I32(615)) fun sctp_fragment_interleave():I32 = @pony_os_sockopt_option(I32(616)) fun sctp_frag_level_0():I32 = @pony_os_sockopt_option(I32(617)) fun sctp_frag_level_1():I32 = @pony_os_sockopt_option(I32(618)) fun sctp_frag_level_2():I32 = @pony_os_sockopt_option(I32(619)) fun sctp_from_middle_box():I32 = @pony_os_sockopt_option(I32(620)) fun sctp_fr_logging_enable():I32 = @pony_os_sockopt_option(I32(621)) fun sctp_get_addr_len():I32 = @pony_os_sockopt_option(I32(622)) fun sctp_get_asoc_vrf():I32 = @pony_os_sockopt_option(I32(623)) fun sctp_get_assoc_id_list():I32 = @pony_os_sockopt_option(I32(624)) fun sctp_get_assoc_number():I32 = @pony_os_sockopt_option(I32(625)) fun sctp_get_local_addresses():I32 = @pony_os_sockopt_option(I32(626)) fun sctp_get_local_addr_size():I32 = @pony_os_sockopt_option(I32(627)) fun sctp_get_nonce_values():I32 = @pony_os_sockopt_option(I32(628)) fun sctp_get_packet_log():I32 = @pony_os_sockopt_option(I32(629)) fun sctp_get_peer_addresses():I32 = @pony_os_sockopt_option(I32(630)) fun sctp_get_peer_addr_info():I32 = @pony_os_sockopt_option(I32(631)) fun sctp_get_remote_addr_size():I32 = @pony_os_sockopt_option(I32(632)) fun sctp_get_sndbuf_use():I32 = @pony_os_sockopt_option(I32(633)) fun sctp_get_stat_log():I32 = @pony_os_sockopt_option(I32(634)) fun sctp_get_vrf_ids():I32 = @pony_os_sockopt_option(I32(635)) fun sctp_had_no_tcb():I32 = @pony_os_sockopt_option(I32(636)) fun sctp_heartbeat_ack():I32 = @pony_os_sockopt_option(I32(637)) fun sctp_heartbeat_request():I32 = @pony_os_sockopt_option(I32(638)) fun sctp_hmac_ident():I32 = @pony_os_sockopt_option(I32(639)) fun sctp_idata():I32 = @pony_os_sockopt_option(I32(640)) fun sctp_iforward_cum_tsn():I32 = @pony_os_sockopt_option(I32(641)) fun sctp_initiation():I32 = @pony_os_sockopt_option(I32(642)) fun sctp_initiation_ack():I32 = @pony_os_sockopt_option(I32(643)) fun sctp_initmsg():I32 = @pony_os_sockopt_option(I32(644)) fun sctp_interleaving_supported():I32 = @pony_os_sockopt_option(I32(645)) fun sctp_i_want_mapped_v4_addr():I32 = @pony_os_sockopt_option(I32(646)) fun sctp_last_packet_tracing():I32 = @pony_os_sockopt_option(I32(647)) fun sctp_listen():I32 = @pony_os_sockopt_option(I32(648)) fun sctp_local_auth_chunks():I32 = @pony_os_sockopt_option(I32(649)) fun sctp_lock_logging_enable():I32 = @pony_os_sockopt_option(I32(650)) fun sctp_log_at_send_2_outq():I32 = @pony_os_sockopt_option(I32(651)) fun sctp_log_at_send_2_sctp():I32 = @pony_os_sockopt_option(I32(652)) fun sctp_log_maxburst_enable():I32 = @pony_os_sockopt_option(I32(653)) fun sctp_log_rwnd_enable():I32 = @pony_os_sockopt_option(I32(654)) fun sctp_log_sack_arrivals_enable():I32 = @pony_os_sockopt_option(I32(655)) fun sctp_log_try_advance():I32 = @pony_os_sockopt_option(I32(656)) fun sctp_ltrace_chunk_enable():I32 = @pony_os_sockopt_option(I32(657)) fun sctp_ltrace_error_enable():I32 = @pony_os_sockopt_option(I32(658)) fun sctp_map_logging_enable():I32 = @pony_os_sockopt_option(I32(659)) fun sctp_maxburst():I32 = @pony_os_sockopt_option(I32(660)) fun sctp_maxseg():I32 = @pony_os_sockopt_option(I32(661)) fun sctp_max_burst():I32 = @pony_os_sockopt_option(I32(662)) fun sctp_max_cookie_life():I32 = @pony_os_sockopt_option(I32(663)) fun sctp_max_cwnd():I32 = @pony_os_sockopt_option(I32(664)) fun sctp_max_hb_interval():I32 = @pony_os_sockopt_option(I32(665)) fun sctp_max_sack_delay():I32 = @pony_os_sockopt_option(I32(666)) fun sctp_mbcnt_logging_enable():I32 = @pony_os_sockopt_option(I32(667)) fun sctp_mbuf_logging_enable():I32 = @pony_os_sockopt_option(I32(668)) fun sctp_mobility_base():I32 = @pony_os_sockopt_option(I32(669)) fun sctp_mobility_fasthandoff():I32 = @pony_os_sockopt_option(I32(670)) fun sctp_mobility_prim_deleted():I32 = @pony_os_sockopt_option(I32(671)) fun sctp_nagle_logging_enable():I32 = @pony_os_sockopt_option(I32(672)) fun sctp_nodelay():I32 = @pony_os_sockopt_option(I32(673)) fun sctp_nrsack_supported():I32 = @pony_os_sockopt_option(I32(674)) fun sctp_nr_selective_ack():I32 = @pony_os_sockopt_option(I32(675)) fun sctp_operation_error():I32 = @pony_os_sockopt_option(I32(676)) fun sctp_packed():I32 = @pony_os_sockopt_option(I32(677)) fun sctp_packet_dropped():I32 = @pony_os_sockopt_option(I32(678)) fun sctp_packet_log_size():I32 = @pony_os_sockopt_option(I32(679)) fun sctp_packet_truncated():I32 = @pony_os_sockopt_option(I32(680)) fun sctp_pad_chunk():I32 = @pony_os_sockopt_option(I32(681)) fun sctp_partial_delivery_point():I32 = @pony_os_sockopt_option(I32(682)) fun sctp_pcb_copy_flags():I32 = @pony_os_sockopt_option(I32(683)) fun sctp_pcb_flags_accepting():I32 = @pony_os_sockopt_option(I32(684)) fun sctp_pcb_flags_adaptationevnt():I32 = @pony_os_sockopt_option(I32(685)) fun sctp_pcb_flags_assoc_resetevnt():I32 = @pony_os_sockopt_option(I32(686)) fun sctp_pcb_flags_authevnt():I32 = @pony_os_sockopt_option(I32(687)) fun sctp_pcb_flags_autoclose():I32 = @pony_os_sockopt_option(I32(688)) fun sctp_pcb_flags_auto_asconf():I32 = @pony_os_sockopt_option(I32(689)) fun sctp_pcb_flags_blocking_io():I32 = @pony_os_sockopt_option(I32(690)) fun sctp_pcb_flags_boundall():I32 = @pony_os_sockopt_option(I32(691)) fun sctp_pcb_flags_bound_v6():I32 = @pony_os_sockopt_option(I32(692)) fun sctp_pcb_flags_close_ip():I32 = @pony_os_sockopt_option(I32(693)) fun sctp_pcb_flags_connected():I32 = @pony_os_sockopt_option(I32(694)) fun sctp_pcb_flags_donot_heartbeat():I32 = @pony_os_sockopt_option(I32(695)) fun sctp_pcb_flags_dont_wake():I32 = @pony_os_sockopt_option(I32(696)) fun sctp_pcb_flags_do_asconf():I32 = @pony_os_sockopt_option(I32(697)) fun sctp_pcb_flags_do_not_pmtud():I32 = @pony_os_sockopt_option(I32(698)) fun sctp_pcb_flags_dryevnt():I32 = @pony_os_sockopt_option(I32(699)) fun sctp_pcb_flags_explicit_eor():I32 = @pony_os_sockopt_option(I32(700)) fun sctp_pcb_flags_ext_rcvinfo():I32 = @pony_os_sockopt_option(I32(701)) fun sctp_pcb_flags_frag_interleave():I32 = @pony_os_sockopt_option(I32(702)) fun sctp_pcb_flags_interleave_strms():I32 = @pony_os_sockopt_option(I32(703)) fun sctp_pcb_flags_in_tcppool():I32 = @pony_os_sockopt_option(I32(704)) fun sctp_pcb_flags_multiple_asconfs():I32 = @pony_os_sockopt_option(I32(705)) fun sctp_pcb_flags_needs_mapped_v4():I32 = @pony_os_sockopt_option(I32(706)) fun sctp_pcb_flags_nodelay():I32 = @pony_os_sockopt_option(I32(707)) fun sctp_pcb_flags_no_fragment():I32 = @pony_os_sockopt_option(I32(708)) fun sctp_pcb_flags_pdapievnt():I32 = @pony_os_sockopt_option(I32(709)) fun sctp_pcb_flags_portreuse():I32 = @pony_os_sockopt_option(I32(710)) fun sctp_pcb_flags_recvassocevnt():I32 = @pony_os_sockopt_option(I32(711)) fun sctp_pcb_flags_recvdataioevnt():I32 = @pony_os_sockopt_option(I32(712)) fun sctp_pcb_flags_recvnsendfailevnt():I32 = @pony_os_sockopt_option(I32(713)) fun sctp_pcb_flags_recvnxtinfo():I32 = @pony_os_sockopt_option(I32(714)) fun sctp_pcb_flags_recvpaddrevnt():I32 = @pony_os_sockopt_option(I32(715)) fun sctp_pcb_flags_recvpeererr():I32 = @pony_os_sockopt_option(I32(716)) fun sctp_pcb_flags_recvrcvinfo():I32 = @pony_os_sockopt_option(I32(717)) fun sctp_pcb_flags_recvsendfailevnt():I32 = @pony_os_sockopt_option(I32(718)) fun sctp_pcb_flags_recvshutdownevnt():I32 = @pony_os_sockopt_option(I32(719)) fun sctp_pcb_flags_socket_allgone():I32 = @pony_os_sockopt_option(I32(720)) fun sctp_pcb_flags_socket_cant_read():I32 = @pony_os_sockopt_option(I32(721)) fun sctp_pcb_flags_socket_gone():I32 = @pony_os_sockopt_option(I32(722)) fun sctp_pcb_flags_stream_changeevnt():I32 = @pony_os_sockopt_option(I32(723)) fun sctp_pcb_flags_stream_resetevnt():I32 = @pony_os_sockopt_option(I32(724)) fun sctp_pcb_flags_tcptype():I32 = @pony_os_sockopt_option(I32(725)) fun sctp_pcb_flags_udptype():I32 = @pony_os_sockopt_option(I32(726)) fun sctp_pcb_flags_unbound():I32 = @pony_os_sockopt_option(I32(727)) fun sctp_pcb_flags_wakeinput():I32 = @pony_os_sockopt_option(I32(728)) fun sctp_pcb_flags_wakeoutput():I32 = @pony_os_sockopt_option(I32(729)) fun sctp_pcb_flags_was_aborted():I32 = @pony_os_sockopt_option(I32(730)) fun sctp_pcb_flags_was_connected():I32 = @pony_os_sockopt_option(I32(731)) fun sctp_pcb_flags_zero_copy_active():I32 = @pony_os_sockopt_option(I32(732)) fun sctp_pcb_status():I32 = @pony_os_sockopt_option(I32(733)) fun sctp_peeloff():I32 = @pony_os_sockopt_option(I32(734)) fun sctp_peer_addr_params():I32 = @pony_os_sockopt_option(I32(735)) fun sctp_peer_addr_thlds():I32 = @pony_os_sockopt_option(I32(736)) fun sctp_peer_auth_chunks():I32 = @pony_os_sockopt_option(I32(737)) fun sctp_pktdrop_supported():I32 = @pony_os_sockopt_option(I32(738)) fun sctp_pluggable_cc():I32 = @pony_os_sockopt_option(I32(739)) fun sctp_pluggable_ss():I32 = @pony_os_sockopt_option(I32(740)) fun sctp_primary_addr():I32 = @pony_os_sockopt_option(I32(741)) fun sctp_pr_assoc_status():I32 = @pony_os_sockopt_option(I32(742)) fun sctp_pr_stream_status():I32 = @pony_os_sockopt_option(I32(743)) fun sctp_pr_supported():I32 = @pony_os_sockopt_option(I32(744)) fun sctp_reconfig_supported():I32 = @pony_os_sockopt_option(I32(745)) fun sctp_recvnxtinfo():I32 = @pony_os_sockopt_option(I32(746)) fun sctp_recvrcvinfo():I32 = @pony_os_sockopt_option(I32(747)) fun sctp_recv_rwnd_logging_enable():I32 = @pony_os_sockopt_option(I32(748)) fun sctp_remote_udp_encaps_port():I32 = @pony_os_sockopt_option(I32(749)) fun sctp_reset_assoc():I32 = @pony_os_sockopt_option(I32(750)) fun sctp_reset_streams():I32 = @pony_os_sockopt_option(I32(751)) fun sctp_reuse_port():I32 = @pony_os_sockopt_option(I32(752)) fun sctp_rtoinfo():I32 = @pony_os_sockopt_option(I32(753)) fun sctp_rttvar_logging_enable():I32 = @pony_os_sockopt_option(I32(754)) fun sctp_sack_cmt_dac():I32 = @pony_os_sockopt_option(I32(755)) fun sctp_sack_logging_enable():I32 = @pony_os_sockopt_option(I32(756)) fun sctp_sack_nonce_sum():I32 = @pony_os_sockopt_option(I32(757)) fun sctp_sack_rwnd_logging_enable():I32 = @pony_os_sockopt_option(I32(758)) fun sctp_sat_network_burst_incr():I32 = @pony_os_sockopt_option(I32(759)) fun sctp_sat_network_min():I32 = @pony_os_sockopt_option(I32(760)) fun sctp_sb_logging_enable():I32 = @pony_os_sockopt_option(I32(761)) fun sctp_selective_ack():I32 = @pony_os_sockopt_option(I32(762)) fun sctp_set_debug_level():I32 = @pony_os_sockopt_option(I32(763)) fun sctp_set_dynamic_primary():I32 = @pony_os_sockopt_option(I32(764)) fun sctp_set_initial_dbg_seq():I32 = @pony_os_sockopt_option(I32(765)) fun sctp_set_peer_primary_addr():I32 = @pony_os_sockopt_option(I32(766)) fun sctp_shutdown():I32 = @pony_os_sockopt_option(I32(767)) fun sctp_shutdown_ack():I32 = @pony_os_sockopt_option(I32(768)) fun sctp_shutdown_ack_sent():I32 = @pony_os_sockopt_option(I32(769)) fun sctp_shutdown_complete():I32 = @pony_os_sockopt_option(I32(770)) fun sctp_shutdown_pending():I32 = @pony_os_sockopt_option(I32(771)) fun sctp_shutdown_received():I32 = @pony_os_sockopt_option(I32(772)) fun sctp_shutdown_sent():I32 = @pony_os_sockopt_option(I32(773)) fun sctp_smallest_pmtu():I32 = @pony_os_sockopt_option(I32(774)) fun sctp_ss_default():I32 = @pony_os_sockopt_option(I32(775)) fun sctp_ss_fair_bandwith():I32 = @pony_os_sockopt_option(I32(776)) fun sctp_ss_first_come():I32 = @pony_os_sockopt_option(I32(777)) fun sctp_ss_priority():I32 = @pony_os_sockopt_option(I32(778)) fun sctp_ss_round_robin():I32 = @pony_os_sockopt_option(I32(779)) fun sctp_ss_round_robin_packet():I32 = @pony_os_sockopt_option(I32(780)) fun sctp_ss_value():I32 = @pony_os_sockopt_option(I32(781)) fun sctp_status():I32 = @pony_os_sockopt_option(I32(782)) fun sctp_stream_reset():I32 = @pony_os_sockopt_option(I32(783)) fun sctp_stream_reset_incoming():I32 = @pony_os_sockopt_option(I32(784)) fun sctp_stream_reset_outgoing():I32 = @pony_os_sockopt_option(I32(785)) fun sctp_str_logging_enable():I32 = @pony_os_sockopt_option(I32(786)) fun sctp_threshold_logging():I32 = @pony_os_sockopt_option(I32(787)) fun sctp_timeouts():I32 = @pony_os_sockopt_option(I32(788)) fun sctp_use_ext_rcvinfo():I32 = @pony_os_sockopt_option(I32(789)) fun sctp_vrf_id():I32 = @pony_os_sockopt_option(I32(790)) fun sctp_wake_logging_enable():I32 = @pony_os_sockopt_option(I32(791)) fun sock_cloexec():I32 = @pony_os_sockopt_option(I32(792)) fun sock_dgram():I32 = @pony_os_sockopt_option(I32(793)) fun sock_maxaddrlen():I32 = @pony_os_sockopt_option(I32(794)) fun sock_nonblock():I32 = @pony_os_sockopt_option(I32(795)) fun sock_raw():I32 = @pony_os_sockopt_option(I32(796)) fun sock_rdm():I32 = @pony_os_sockopt_option(I32(797)) fun sock_seqpacket():I32 = @pony_os_sockopt_option(I32(798)) fun sock_stream():I32 = @pony_os_sockopt_option(I32(799)) fun somaxconn():I32 = @pony_os_sockopt_option(I32(800)) fun sonpx_setoptshut():I32 = @pony_os_sockopt_option(I32(801)) fun so_acceptconn():I32 = @pony_os_sockopt_option(I32(802)) fun so_acceptfilter():I32 = @pony_os_sockopt_option(I32(803)) fun so_atmpvc():I32 = @pony_os_sockopt_option(I32(804)) fun so_atmqos():I32 = @pony_os_sockopt_option(I32(805)) fun so_atmsap():I32 = @pony_os_sockopt_option(I32(806)) fun so_attach_bpf():I32 = @pony_os_sockopt_option(I32(807)) fun so_attach_filter():I32 = @pony_os_sockopt_option(I32(808)) fun so_bindtodevice():I32 = @pony_os_sockopt_option(I32(809)) fun so_bintime():I32 = @pony_os_sockopt_option(I32(810)) fun so_bpf_extensions():I32 = @pony_os_sockopt_option(I32(811)) fun so_broadcast():I32 = @pony_os_sockopt_option(I32(812)) fun so_bsdcompat():I32 = @pony_os_sockopt_option(I32(813)) fun so_bsp_state():I32 = @pony_os_sockopt_option(I32(814)) fun so_busy_poll():I32 = @pony_os_sockopt_option(I32(815)) fun so_conaccess():I32 = @pony_os_sockopt_option(I32(816)) fun so_condata():I32 = @pony_os_sockopt_option(I32(817)) fun so_conditional_accept():I32 = @pony_os_sockopt_option(I32(818)) fun so_connect_time():I32 = @pony_os_sockopt_option(I32(819)) fun so_debug():I32 = @pony_os_sockopt_option(I32(820)) fun so_detach_bpf():I32 = @pony_os_sockopt_option(I32(821)) fun so_detach_filter():I32 = @pony_os_sockopt_option(I32(822)) fun so_domain():I32 = @pony_os_sockopt_option(I32(823)) fun so_dontlinger():I32 = @pony_os_sockopt_option(I32(824)) fun so_dontroute():I32 = @pony_os_sockopt_option(I32(825)) fun so_donttrunc():I32 = @pony_os_sockopt_option(I32(826)) fun so_error():I32 = @pony_os_sockopt_option(I32(827)) fun so_exclusiveaddruse():I32 = @pony_os_sockopt_option(I32(828)) fun so_get_filter():I32 = @pony_os_sockopt_option(I32(829)) fun so_group_id():I32 = @pony_os_sockopt_option(I32(830)) fun so_group_priority():I32 = @pony_os_sockopt_option(I32(831)) fun so_hci_raw_direction():I32 = @pony_os_sockopt_option(I32(832)) fun so_hci_raw_filter():I32 = @pony_os_sockopt_option(I32(833)) fun so_incoming_cpu():I32 = @pony_os_sockopt_option(I32(834)) fun so_keepalive():I32 = @pony_os_sockopt_option(I32(835)) fun so_l2cap_encrypted():I32 = @pony_os_sockopt_option(I32(836)) fun so_l2cap_flush():I32 = @pony_os_sockopt_option(I32(837)) fun so_l2cap_iflow():I32 = @pony_os_sockopt_option(I32(838)) fun so_l2cap_imtu():I32 = @pony_os_sockopt_option(I32(839)) fun so_l2cap_oflow():I32 = @pony_os_sockopt_option(I32(840)) fun so_l2cap_omtu():I32 = @pony_os_sockopt_option(I32(841)) fun so_label():I32 = @pony_os_sockopt_option(I32(842)) fun so_linger():I32 = @pony_os_sockopt_option(I32(843)) fun so_linger_sec():I32 = @pony_os_sockopt_option(I32(844)) fun so_linkinfo():I32 = @pony_os_sockopt_option(I32(845)) fun so_listenincqlen():I32 = @pony_os_sockopt_option(I32(846)) fun so_listenqlen():I32 = @pony_os_sockopt_option(I32(847)) fun so_listenqlimit():I32 = @pony_os_sockopt_option(I32(848)) fun so_lock_filter():I32 = @pony_os_sockopt_option(I32(849)) fun so_mark():I32 = @pony_os_sockopt_option(I32(850)) fun so_max_msg_size():I32 = @pony_os_sockopt_option(I32(851)) fun so_max_pacing_rate():I32 = @pony_os_sockopt_option(I32(852)) fun so_multipoint():I32 = @pony_os_sockopt_option(I32(853)) fun so_netsvc_marking_level():I32 = @pony_os_sockopt_option(I32(854)) fun so_net_service_type():I32 = @pony_os_sockopt_option(I32(855)) fun so_nke():I32 = @pony_os_sockopt_option(I32(856)) fun so_noaddrerr():I32 = @pony_os_sockopt_option(I32(857)) fun so_nofcs():I32 = @pony_os_sockopt_option(I32(858)) fun so_nosigpipe():I32 = @pony_os_sockopt_option(I32(859)) fun so_notifyconflict():I32 = @pony_os_sockopt_option(I32(860)) fun so_no_check():I32 = @pony_os_sockopt_option(I32(861)) fun so_no_ddp():I32 = @pony_os_sockopt_option(I32(862)) fun so_no_offload():I32 = @pony_os_sockopt_option(I32(863)) fun so_np_extensions():I32 = @pony_os_sockopt_option(I32(864)) fun so_nread():I32 = @pony_os_sockopt_option(I32(865)) fun so_numrcvpkt():I32 = @pony_os_sockopt_option(I32(866)) fun so_nwrite():I32 = @pony_os_sockopt_option(I32(867)) fun so_oobinline():I32 = @pony_os_sockopt_option(I32(868)) fun so_original_dst():I32 = @pony_os_sockopt_option(I32(869)) fun so_passcred():I32 = @pony_os_sockopt_option(I32(870)) fun so_passsec():I32 = @pony_os_sockopt_option(I32(871)) fun so_peek_off():I32 = @pony_os_sockopt_option(I32(872)) fun so_peercred():I32 = @pony_os_sockopt_option(I32(873)) fun so_peerlabel():I32 = @pony_os_sockopt_option(I32(874)) fun so_peername():I32 = @pony_os_sockopt_option(I32(875)) fun so_peersec():I32 = @pony_os_sockopt_option(I32(876)) fun so_port_scalability():I32 = @pony_os_sockopt_option(I32(877)) fun so_priority():I32 = @pony_os_sockopt_option(I32(878)) fun so_protocol():I32 = @pony_os_sockopt_option(I32(879)) fun so_protocol_info():I32 = @pony_os_sockopt_option(I32(880)) fun so_prototype():I32 = @pony_os_sockopt_option(I32(881)) fun so_proxyusr():I32 = @pony_os_sockopt_option(I32(882)) fun so_randomport():I32 = @pony_os_sockopt_option(I32(883)) fun so_rcvbuf():I32 = @pony_os_sockopt_option(I32(884)) fun so_rcvbufforce():I32 = @pony_os_sockopt_option(I32(885)) fun so_rcvlowat():I32 = @pony_os_sockopt_option(I32(886)) fun so_rcvtimeo():I32 = @pony_os_sockopt_option(I32(887)) fun so_rds_transport():I32 = @pony_os_sockopt_option(I32(888)) fun so_reuseaddr():I32 = @pony_os_sockopt_option(I32(889)) fun so_reuseport():I32 = @pony_os_sockopt_option(I32(890)) fun so_reuseshareuid():I32 = @pony_os_sockopt_option(I32(891)) fun so_rfcomm_fc_info():I32 = @pony_os_sockopt_option(I32(892)) fun so_rfcomm_mtu():I32 = @pony_os_sockopt_option(I32(893)) fun so_rxq_ovfl():I32 = @pony_os_sockopt_option(I32(894)) fun so_sco_conninfo():I32 = @pony_os_sockopt_option(I32(895)) fun so_sco_mtu():I32 = @pony_os_sockopt_option(I32(896)) fun so_security_authentication():I32 = @pony_os_sockopt_option(I32(897)) fun so_security_encryption_network():I32 = @pony_os_sockopt_option(I32(898)) fun so_security_encryption_transport():I32 = @pony_os_sockopt_option(I32(899)) fun so_select_err_queue():I32 = @pony_os_sockopt_option(I32(900)) fun so_setclp():I32 = @pony_os_sockopt_option(I32(901)) fun so_setfib():I32 = @pony_os_sockopt_option(I32(902)) fun so_sndbuf():I32 = @pony_os_sockopt_option(I32(903)) fun so_sndbufforce():I32 = @pony_os_sockopt_option(I32(904)) fun so_sndlowat():I32 = @pony_os_sockopt_option(I32(905)) fun so_sndtimeo():I32 = @pony_os_sockopt_option(I32(906)) fun so_timestamp():I32 = @pony_os_sockopt_option(I32(907)) fun so_timestamping():I32 = @pony_os_sockopt_option(I32(908)) fun so_timestampns():I32 = @pony_os_sockopt_option(I32(909)) fun so_timestamp_monotonic():I32 = @pony_os_sockopt_option(I32(910)) fun so_type():I32 = @pony_os_sockopt_option(I32(911)) fun so_upcallclosewait():I32 = @pony_os_sockopt_option(I32(912)) fun so_update_accept_context():I32 = @pony_os_sockopt_option(I32(913)) fun so_useloopback():I32 = @pony_os_sockopt_option(I32(914)) fun so_user_cookie():I32 = @pony_os_sockopt_option(I32(915)) fun so_vendor():I32 = @pony_os_sockopt_option(I32(916)) fun so_vm_sockets_buffer_max_size():I32 = @pony_os_sockopt_option(I32(917)) fun so_vm_sockets_buffer_min_size():I32 = @pony_os_sockopt_option(I32(918)) fun so_vm_sockets_buffer_size():I32 = @pony_os_sockopt_option(I32(919)) fun so_vm_sockets_connect_timeout():I32 = @pony_os_sockopt_option(I32(920)) fun so_vm_sockets_nonblock_txrx():I32 = @pony_os_sockopt_option(I32(921)) fun so_vm_sockets_peer_host_vm_id():I32 = @pony_os_sockopt_option(I32(922)) fun so_vm_sockets_trusted():I32 = @pony_os_sockopt_option(I32(923)) fun so_wantmore():I32 = @pony_os_sockopt_option(I32(924)) fun so_wantoobflag():I32 = @pony_os_sockopt_option(I32(925)) fun so_wifi_status():I32 = @pony_os_sockopt_option(I32(926)) fun tcp6_mss():I32 = @pony_os_sockopt_option(I32(927)) fun tcpci_flag_lossrecovery():I32 = @pony_os_sockopt_option(I32(928)) fun tcpci_flag_reordering_detected():I32 = @pony_os_sockopt_option(I32(929)) fun tcpci_opt_ecn():I32 = @pony_os_sockopt_option(I32(930)) fun tcpci_opt_sack():I32 = @pony_os_sockopt_option(I32(931)) fun tcpci_opt_timestamps():I32 = @pony_os_sockopt_option(I32(932)) fun tcpci_opt_wscale():I32 = @pony_os_sockopt_option(I32(933)) fun tcpf_ca_cwr():I32 = @pony_os_sockopt_option(I32(934)) fun tcpf_ca_disorder():I32 = @pony_os_sockopt_option(I32(935)) fun tcpf_ca_loss():I32 = @pony_os_sockopt_option(I32(936)) fun tcpf_ca_open():I32 = @pony_os_sockopt_option(I32(937)) fun tcpf_ca_recovery():I32 = @pony_os_sockopt_option(I32(938)) fun tcpi_opt_ecn():I32 = @pony_os_sockopt_option(I32(939)) fun tcpi_opt_ecn_seen():I32 = @pony_os_sockopt_option(I32(940)) fun tcpi_opt_sack():I32 = @pony_os_sockopt_option(I32(941)) fun tcpi_opt_syn_data():I32 = @pony_os_sockopt_option(I32(942)) fun tcpi_opt_timestamps():I32 = @pony_os_sockopt_option(I32(943)) fun tcpi_opt_toe():I32 = @pony_os_sockopt_option(I32(944)) fun tcpi_opt_wscale():I32 = @pony_os_sockopt_option(I32(945)) fun tcpolen_cc():I32 = @pony_os_sockopt_option(I32(946)) fun tcpolen_cc_appa():I32 = @pony_os_sockopt_option(I32(947)) fun tcpolen_eol():I32 = @pony_os_sockopt_option(I32(948)) fun tcpolen_fastopen_req():I32 = @pony_os_sockopt_option(I32(949)) fun tcpolen_fast_open_empty():I32 = @pony_os_sockopt_option(I32(950)) fun tcpolen_fast_open_max():I32 = @pony_os_sockopt_option(I32(951)) fun tcpolen_fast_open_min():I32 = @pony_os_sockopt_option(I32(952)) fun tcpolen_maxseg():I32 = @pony_os_sockopt_option(I32(953)) fun tcpolen_nop():I32 = @pony_os_sockopt_option(I32(954)) fun tcpolen_pad():I32 = @pony_os_sockopt_option(I32(955)) fun tcpolen_sack():I32 = @pony_os_sockopt_option(I32(956)) fun tcpolen_sackhdr():I32 = @pony_os_sockopt_option(I32(957)) fun tcpolen_sack_permitted():I32 = @pony_os_sockopt_option(I32(958)) fun tcpolen_signature():I32 = @pony_os_sockopt_option(I32(959)) fun tcpolen_timestamp():I32 = @pony_os_sockopt_option(I32(960)) fun tcpolen_tstamp_appa():I32 = @pony_os_sockopt_option(I32(961)) fun tcpolen_window():I32 = @pony_os_sockopt_option(I32(962)) fun tcpopt_cc():I32 = @pony_os_sockopt_option(I32(963)) fun tcpopt_ccecho():I32 = @pony_os_sockopt_option(I32(964)) fun tcpopt_ccnew():I32 = @pony_os_sockopt_option(I32(965)) fun tcpopt_eol():I32 = @pony_os_sockopt_option(I32(966)) fun tcpopt_fastopen():I32 = @pony_os_sockopt_option(I32(967)) fun tcpopt_fast_open():I32 = @pony_os_sockopt_option(I32(968)) fun tcpopt_maxseg():I32 = @pony_os_sockopt_option(I32(969)) fun tcpopt_multipath():I32 = @pony_os_sockopt_option(I32(970)) fun tcpopt_nop():I32 = @pony_os_sockopt_option(I32(971)) fun tcpopt_pad():I32 = @pony_os_sockopt_option(I32(972)) fun tcpopt_sack():I32 = @pony_os_sockopt_option(I32(973)) fun tcpopt_sack_hdr():I32 = @pony_os_sockopt_option(I32(974)) fun tcpopt_sack_permitted():I32 = @pony_os_sockopt_option(I32(975)) fun tcpopt_sack_permit_hdr():I32 = @pony_os_sockopt_option(I32(976)) fun tcpopt_signature():I32 = @pony_os_sockopt_option(I32(977)) fun tcpopt_timestamp():I32 = @pony_os_sockopt_option(I32(978)) fun tcpopt_tstamp_hdr():I32 = @pony_os_sockopt_option(I32(979)) fun tcpopt_window():I32 = @pony_os_sockopt_option(I32(980)) fun tcp_ca_name_max():I32 = @pony_os_sockopt_option(I32(981)) fun tcp_ccalgoopt():I32 = @pony_os_sockopt_option(I32(982)) fun tcp_cc_info():I32 = @pony_os_sockopt_option(I32(983)) fun tcp_congestion():I32 = @pony_os_sockopt_option(I32(984)) fun tcp_connectiontimeout():I32 = @pony_os_sockopt_option(I32(985)) fun tcp_connection_info():I32 = @pony_os_sockopt_option(I32(986)) fun tcp_cookie_in_always():I32 = @pony_os_sockopt_option(I32(987)) fun tcp_cookie_max():I32 = @pony_os_sockopt_option(I32(988)) fun tcp_cookie_min():I32 = @pony_os_sockopt_option(I32(989)) fun tcp_cookie_out_never():I32 = @pony_os_sockopt_option(I32(990)) fun tcp_cookie_pair_size():I32 = @pony_os_sockopt_option(I32(991)) fun tcp_cookie_transactions():I32 = @pony_os_sockopt_option(I32(992)) fun tcp_cork():I32 = @pony_os_sockopt_option(I32(993)) fun tcp_defer_accept():I32 = @pony_os_sockopt_option(I32(994)) fun tcp_enable_ecn():I32 = @pony_os_sockopt_option(I32(995)) fun tcp_fastopen():I32 = @pony_os_sockopt_option(I32(996)) fun tcp_function_blk():I32 = @pony_os_sockopt_option(I32(997)) fun tcp_function_name_len_max():I32 = @pony_os_sockopt_option(I32(998)) fun tcp_info():I32 = @pony_os_sockopt_option(I32(999)) fun tcp_keepalive():I32 = @pony_os_sockopt_option(I32(1000)) fun tcp_keepcnt():I32 = @pony_os_sockopt_option(I32(1001)) fun tcp_keepidle():I32 = @pony_os_sockopt_option(I32(1002)) fun tcp_keepinit():I32 = @pony_os_sockopt_option(I32(1003)) fun tcp_keepintvl():I32 = @pony_os_sockopt_option(I32(1004)) fun tcp_linger2():I32 = @pony_os_sockopt_option(I32(1005)) fun tcp_maxburst():I32 = @pony_os_sockopt_option(I32(1006)) fun tcp_maxhlen():I32 = @pony_os_sockopt_option(I32(1007)) fun tcp_maxolen():I32 = @pony_os_sockopt_option(I32(1008)) fun tcp_maxseg():I32 = @pony_os_sockopt_option(I32(1009)) fun tcp_maxwin():I32 = @pony_os_sockopt_option(I32(1010)) fun tcp_max_sack():I32 = @pony_os_sockopt_option(I32(1011)) fun tcp_max_winshift():I32 = @pony_os_sockopt_option(I32(1012)) fun tcp_md5sig():I32 = @pony_os_sockopt_option(I32(1013)) fun tcp_md5sig_maxkeylen():I32 = @pony_os_sockopt_option(I32(1014)) fun tcp_minmss():I32 = @pony_os_sockopt_option(I32(1015)) fun tcp_mss():I32 = @pony_os_sockopt_option(I32(1016)) fun tcp_mss_default():I32 = @pony_os_sockopt_option(I32(1017)) fun tcp_mss_desired():I32 = @pony_os_sockopt_option(I32(1018)) fun tcp_nodelay():I32 = @pony_os_sockopt_option(I32(1019)) fun tcp_noopt():I32 = @pony_os_sockopt_option(I32(1020)) fun tcp_nopush():I32 = @pony_os_sockopt_option(I32(1021)) fun tcp_notsent_lowat():I32 = @pony_os_sockopt_option(I32(1022)) fun tcp_pcap_in():I32 = @pony_os_sockopt_option(I32(1023)) fun tcp_pcap_out():I32 = @pony_os_sockopt_option(I32(1024)) fun tcp_queue_seq():I32 = @pony_os_sockopt_option(I32(1025)) fun tcp_quickack():I32 = @pony_os_sockopt_option(I32(1026)) fun tcp_repair():I32 = @pony_os_sockopt_option(I32(1027)) fun tcp_repair_options():I32 = @pony_os_sockopt_option(I32(1028)) fun tcp_repair_queue():I32 = @pony_os_sockopt_option(I32(1029)) fun tcp_rxt_conndroptime():I32 = @pony_os_sockopt_option(I32(1030)) fun tcp_rxt_findrop():I32 = @pony_os_sockopt_option(I32(1031)) fun tcp_saved_syn():I32 = @pony_os_sockopt_option(I32(1032)) fun tcp_save_syn():I32 = @pony_os_sockopt_option(I32(1033)) fun tcp_sendmoreacks():I32 = @pony_os_sockopt_option(I32(1034)) fun tcp_syncnt():I32 = @pony_os_sockopt_option(I32(1035)) fun tcp_s_data_in():I32 = @pony_os_sockopt_option(I32(1036)) fun tcp_s_data_out():I32 = @pony_os_sockopt_option(I32(1037)) fun tcp_thin_dupack():I32 = @pony_os_sockopt_option(I32(1038)) fun tcp_thin_linear_timeouts():I32 = @pony_os_sockopt_option(I32(1039)) fun tcp_timestamp():I32 = @pony_os_sockopt_option(I32(1040)) fun tcp_user_timeout():I32 = @pony_os_sockopt_option(I32(1041)) fun tcp_vendor():I32 = @pony_os_sockopt_option(I32(1042)) fun tcp_window_clamp():I32 = @pony_os_sockopt_option(I32(1043)) fun tipc_addr_id():I32 = @pony_os_sockopt_option(I32(1044)) fun tipc_addr_mcast():I32 = @pony_os_sockopt_option(I32(1045)) fun tipc_addr_name():I32 = @pony_os_sockopt_option(I32(1046)) fun tipc_addr_nameseq():I32 = @pony_os_sockopt_option(I32(1047)) fun tipc_cfg_srv():I32 = @pony_os_sockopt_option(I32(1048)) fun tipc_cluster_scope():I32 = @pony_os_sockopt_option(I32(1049)) fun tipc_conn_shutdown():I32 = @pony_os_sockopt_option(I32(1050)) fun tipc_conn_timeout():I32 = @pony_os_sockopt_option(I32(1051)) fun tipc_critical_importance():I32 = @pony_os_sockopt_option(I32(1052)) fun tipc_destname():I32 = @pony_os_sockopt_option(I32(1053)) fun tipc_dest_droppable():I32 = @pony_os_sockopt_option(I32(1054)) fun tipc_errinfo():I32 = @pony_os_sockopt_option(I32(1055)) fun tipc_err_no_name():I32 = @pony_os_sockopt_option(I32(1056)) fun tipc_err_no_node():I32 = @pony_os_sockopt_option(I32(1057)) fun tipc_err_no_port():I32 = @pony_os_sockopt_option(I32(1058)) fun tipc_err_overload():I32 = @pony_os_sockopt_option(I32(1059)) fun tipc_high_importance():I32 = @pony_os_sockopt_option(I32(1060)) fun tipc_importance():I32 = @pony_os_sockopt_option(I32(1061)) fun tipc_link_state():I32 = @pony_os_sockopt_option(I32(1062)) fun tipc_low_importance():I32 = @pony_os_sockopt_option(I32(1063)) fun tipc_max_bearer_name():I32 = @pony_os_sockopt_option(I32(1064)) fun tipc_max_if_name():I32 = @pony_os_sockopt_option(I32(1065)) fun tipc_max_link_name():I32 = @pony_os_sockopt_option(I32(1066)) fun tipc_max_media_name():I32 = @pony_os_sockopt_option(I32(1067)) fun tipc_max_user_msg_size():I32 = @pony_os_sockopt_option(I32(1068)) fun tipc_medium_importance():I32 = @pony_os_sockopt_option(I32(1069)) fun tipc_node_recvq_depth():I32 = @pony_os_sockopt_option(I32(1070)) fun tipc_node_scope():I32 = @pony_os_sockopt_option(I32(1071)) fun tipc_ok():I32 = @pony_os_sockopt_option(I32(1072)) fun tipc_published():I32 = @pony_os_sockopt_option(I32(1073)) fun tipc_reserved_types():I32 = @pony_os_sockopt_option(I32(1074)) fun tipc_retdata():I32 = @pony_os_sockopt_option(I32(1075)) fun tipc_sock_recvq_depth():I32 = @pony_os_sockopt_option(I32(1076)) fun tipc_src_droppable():I32 = @pony_os_sockopt_option(I32(1077)) fun tipc_subscr_timeout():I32 = @pony_os_sockopt_option(I32(1078)) fun tipc_sub_cancel():I32 = @pony_os_sockopt_option(I32(1079)) fun tipc_sub_ports():I32 = @pony_os_sockopt_option(I32(1080)) fun tipc_sub_service():I32 = @pony_os_sockopt_option(I32(1081)) fun tipc_top_srv():I32 = @pony_os_sockopt_option(I32(1082)) fun tipc_wait_forever():I32 = @pony_os_sockopt_option(I32(1083)) fun tipc_withdrawn():I32 = @pony_os_sockopt_option(I32(1084)) fun tipc_zone_scope():I32 = @pony_os_sockopt_option(I32(1085)) fun ttcp_client_snd_wnd():I32 = @pony_os_sockopt_option(I32(1086)) fun udp_cork():I32 = @pony_os_sockopt_option(I32(1087)) fun udp_encap():I32 = @pony_os_sockopt_option(I32(1088)) fun udp_encap_espinudp():I32 = @pony_os_sockopt_option(I32(1089)) fun udp_encap_espinudp_maxfraglen():I32 = @pony_os_sockopt_option(I32(1090)) fun udp_encap_espinudp_non_ike():I32 = @pony_os_sockopt_option(I32(1091)) fun udp_encap_espinudp_port():I32 = @pony_os_sockopt_option(I32(1092)) fun udp_encap_l2tpinudp():I32 = @pony_os_sockopt_option(I32(1093)) fun udp_nocksum():I32 = @pony_os_sockopt_option(I32(1094)) fun udp_no_check6_rx():I32 = @pony_os_sockopt_option(I32(1095)) fun udp_no_check6_tx():I32 = @pony_os_sockopt_option(I32(1096)) fun udp_vendor():I32 = @pony_os_sockopt_option(I32(1097))","title":"ossockopt.pony"},{"location":"src/net/tcp_connection/","text":"use collections use @pony_asio_event_create[AsioEventID](owner: AsioEventNotify, fd: U32, flags: U32, nsec: U64, noisy: Bool) use @pony_asio_event_fd[U32](event: AsioEventID) use @pony_asio_event_unsubscribe[None](event: AsioEventID) use @pony_asio_event_resubscribe_read[None](event: AsioEventID) use @pony_asio_event_resubscribe_write[None](event: AsioEventID) use @pony_asio_event_destroy[None](event: AsioEventID) use @pony_asio_event_set_writeable[None](event: AsioEventID, writeable: Bool) use @pony_asio_event_set_readable[None](event: AsioEventID, readable: Bool) type TCPConnectionAuth is (AmbientAuth | NetAuth | TCPAuth | TCPConnectAuth) actor TCPConnection A TCP connection. When connecting, the Happy Eyeballs algorithm is used. The following code creates a client that connects to port 8989 of the local host, writes hello world , and listens for a response, which it then prints. ```pony use net class MyTCPConnectionNotify is TCPConnectionNotify let _out: OutStream new create(out: OutStream) = _out = out fun ref connected(conn: TCPConnection ref) = conn.write( hello world ) fun ref received( conn: TCPConnection ref, data: Array[U8] iso, times: USize) : Bool = _out.print( GOT: + String.from_array(consume data)) conn.close() true fun ref connect_failed(conn: TCPConnection ref) = None actor Main new create(env: Env) = try TCPConnection(env.root as AmbientAuth, recover MyTCPConnectionNotify(env.out) end, , 8989 ) end ``` Note: when writing to the connection data will be silently discarded if the connection has not yet been established. ## Backpressure support ### Write The TCP protocol has built-in backpressure support. This is generally experienced as the outgoing write buffer becoming full and being unable to write all requested data to the socket. In `TCPConnection`, this is hidden from the programmer. When this occurs, `TCPConnection` will buffer the extra data until such time as it is able to be sent. Left unchecked, this could result in uncontrolled queuing. To address this, `TCPConnectionNotify` implements two methods `throttled` and `unthrottled` that are called when backpressure is applied and released. Upon receiving a `throttled` notification, your application has two choices on how to handle it. One is to inform the Pony runtime that it can no longer make progress and that runtime backpressure should be applied to any actors sending this one messages. For example, you might construct your application like: ```pony // Here we have a TCPConnectionNotify that upon construction // is given a BackpressureAuth token. This allows the notifier // to inform the Pony runtime when to apply and release backpressure // as the connection experiences it. // Note the calls to // // Backpressure.apply(_auth) // Backpressure.release(_auth) // // that apply and release backpressure as needed use backpressure use collections use net class SlowDown is TCPConnectionNotify let _auth: BackpressureAuth let _out: StdStream new iso create(auth: BackpressureAuth, out: StdStream) = _auth = auth _out = out fun ref throttled(connection: TCPConnection ref) = _out.print( Experiencing backpressure! ) Backpressure.apply(_auth) fun ref unthrottled(connection: TCPConnection ref) = _out.print( Releasing backpressure! ) Backpressure.release(_auth) fun ref closed(connection: TCPConnection ref) = // if backpressure has been applied, make sure we release // when shutting down _out.print( Releasing backpressure if applied! ) Backpressure.release(_auth) fun ref connect_failed(conn: TCPConnection ref) = None actor Main new create(env: Env) = try let auth = env.root as AmbientAuth let socket = TCPConnection(auth, recover SlowDown(auth, env.out) end, , 7669 ) end ``` Or if you want, you could handle backpressure by shedding load, that is, dropping the extra data rather than carrying out the send. This might look like: ```pony use net class ThrowItAway is TCPConnectionNotify var _throttled: Bool = false fun ref sent(conn: TCPConnection ref, data: ByteSeq): ByteSeq = if not _throttled then data else end fun ref sentv(conn: TCPConnection ref, data: ByteSeqIter): ByteSeqIter = if not _throttled then data else recover Array[String] end end fun ref throttled(connection: TCPConnection ref) = _throttled = true fun ref unthrottled(connection: TCPConnection ref) = _throttled = false fun ref connect_failed(conn: TCPConnection ref) = None actor Main new create(env: Env) = try TCPConnection(env.root as AmbientAuth, recover ThrowItAway end, , 7669 ) end ``` In general, unless you have a very specific use case, we strongly advise that you don't implement a load shedding scheme where you drop data. ### Read If your application is unable to keep up with data being sent to it over a `TCPConnection` you can use the builtin read backpressure support to pause reading the socket which will in turn start to exert backpressure on the corresponding writer on the other end of that socket. The `mute` behavior allow any other actors in your application to request the cessation of additional reads until such time as `unmute` is called. Please note that this cessation is not guaranteed to happen immediately as it is the result of an asynchronous behavior call and as such will have to wait for existing messages in the `TCPConnection`'s mailbox to be handled. On non-windows platforms, your `TCPConnection` will not notice if the other end of the connection closes until you unmute it. Unix type systems like FreeBSD, Linux and OSX learn about a closed connection upon read. On these platforms, you **must** call `unmute` on a muted connection to have it close. Without calling `unmute` the `TCPConnection` actor will never exit. var _listen: (TCPListener | None) = None var _notify: TCPConnectionNotify var _connect_count: U32 var _fd: U32 = -1 var _event: AsioEventID = AsioEvent.none() var _connected: Bool = false var _readable: Bool = false var _writeable: Bool = false var _throttled: Bool = false var _closed: Bool = false var _shutdown: Bool = false var _shutdown_peer: Bool = false var _in_sent: Bool = false // _pending is used to avoid GC prematurely reaping memory. // See GitHub bug 2526 for more. It looks like a write-only // data structure, but its use is vital to avoid GC races: // _pending_writev's C pointers are invisible to ORCA. embed _pending: Array[ByteSeq] = _pending.create() embed _pending_writev: Array[USize] = _pending_writev.create() var _pending_sent: USize = 0 var _pending_writev_total: USize = 0 var _read_buf: Array[U8] iso var _next_size: USize let _max_size: USize var _read_len: USize = 0 var _expect: USize = 0 var _muted: Bool = false new create( auth: TCPConnectionAuth, notify: TCPConnectionNotify iso, host: String, service: String, from: String = , init_size: USize = 64, max_size: USize = 16384) = Connect via IPv4 or IPv6. If `from` is a non-empty string, the connection will be made from the specified interface. _read_buf = recover Array[U8] . undefined(init_size) end _next_size = init_size _max_size = max_size _notify = consume notify _connect_count = @pony_os_connect_tcp[U32](this, host.cstring(), service.cstring(), from.cstring()) _notify_connecting() new ip4( auth: TCPConnectionAuth, notify: TCPConnectionNotify iso, host: String, service: String, from: String = , init_size: USize = 64, max_size: USize = 16384) = Connect via IPv4. _read_buf = recover Array[U8] . undefined(init_size) end _next_size = init_size _max_size = max_size _notify = consume notify _connect_count = @pony_os_connect_tcp4[U32](this, host.cstring(), service.cstring(), from.cstring()) _notify_connecting() new ip6( auth: TCPConnectionAuth, notify: TCPConnectionNotify iso, host: String, service: String, from: String = , init_size: USize = 64, max_size: USize = 16384) = Connect via IPv6. _read_buf = recover Array[U8] . undefined(init_size) end _next_size = init_size _max_size = max_size _notify = consume notify _connect_count = @pony_os_connect_tcp6[U32](this, host.cstring(), service.cstring(), from.cstring()) _notify_connecting() new _accept( listen: TCPListener, notify: TCPConnectionNotify iso, fd: U32, init_size: USize = 64, max_size: USize = 16384) = A new connection accepted on a server. _listen = listen _notify = consume notify _connect_count = 0 _fd = fd ifdef not windows then _event = @pony_asio_event_create(this, fd, AsioEvent.read_write_oneshot(), 0, true) else _event = @pony_asio_event_create(this, fd, AsioEvent.read_write(), 0, true) end _connected = true ifdef not windows then @pony_asio_event_set_writeable(_event, true) end _writeable = true _read_buf = recover Array[U8] . undefined(init_size) end _next_size = init_size _max_size = max_size _notify.accepted(this) _readable = true _queue_read() _pending_reads() be write(data: ByteSeq) = Write a single sequence of bytes. Data will be silently discarded if the connection has not yet been established though. if _connected and not _closed then _in_sent = true write_final(_notify.sent(this, data)) _in_sent = false end be writev(data: ByteSeqIter) = Write a sequence of sequences of bytes. Data will be silently discarded if the connection has not yet been established though. if _connected and not _closed then _in_sent = true ifdef windows then try var num_to_send: I32 = 0 for bytes in _notify.sentv(this, data).values() do // Add an IOCP write. _pending_writev . push(bytes.size()) . push(bytes.cpointer().usize()) _pending_writev_total = _pending_writev_total + bytes.size() _pending.push(bytes) num_to_send = num_to_send + 1 end // Write as much data as possible. var len = @pony_os_writev[USize](_event, _pending_writev.cpointer(_pending_sent * 2), num_to_send) ? _pending_sent = _pending_sent + num_to_send.usize() if _pending_sent 32 then // If more than 32 asynchronous writes are scheduled, apply // backpressure. The choice of 32 is rather arbitrary an // probably needs tuning _apply_backpressure() end end else for bytes in _notify.sentv(this, data).values() do _pending_writev . push(bytes.cpointer().usize()) . push(bytes.size()) _pending_writev_total = _pending_writev_total + bytes.size() _pending.push(bytes) end _pending_writes() end _in_sent = false end be mute() = Temporarily suspend reading off this TCPConnection until such time as `unmute` is called. _muted = true be unmute() = Start reading off this TCPConnection again after having been muted. _muted = false _pending_reads() be set_notify(notify: TCPConnectionNotify iso) = Change the notifier. _notify = consume notify be dispose() = Close the connection gracefully once all writes are sent. close() fun local_address(): NetAddress = Return the local IP address. let ip = recover NetAddress end @pony_os_sockname[Bool](_fd, ip) ip fun remote_address(): NetAddress = Return the remote IP address. let ip = recover NetAddress end @pony_os_peername[Bool](_fd, ip) ip fun ref expect(qty: USize = 0) = A `received` call on the notifier must contain exactly `qty` bytes. If `qty` is zero, the call can contain any amount of data. This has no effect if called in the `sent` notifier callback. if not _in_sent then _expect = _notify.expect(this, qty) _read_buf_size() end fun ref set_nodelay(state: Bool) = Turn Nagle on/off. Defaults to on. This can only be set on a connected socket. if _connected then set_tcp_nodelay(state) end fun ref set_keepalive(secs: U32) = Sets the TCP keepalive timeout to approximately `secs` seconds. Exact timing is OS dependent. If `secs` is zero, TCP keepalive is disabled. TCP keepalive is disabled by default. This can only be set on a connected socket. if _connected then @pony_os_keepalive[None](_fd, secs) end be _event_notify(event: AsioEventID, flags: U32, arg: U32) = Handle socket events. if event isnt _event then if AsioEvent.writeable(flags) then // A connection has completed. var fd = @pony_asio_event_fd(event) _connect_count = _connect_count - 1 if not _connected and not _closed then // We don't have a connection yet. if _is_sock_connected(fd) then // The connection was successful, make it ours. _fd = fd _event = event _connected = true _writeable = true _readable = true _notify.connected(this) _queue_read() _pending_reads() // Don't call _complete_writes, as Windows will see this as a // closed connection. ifdef not windows then if _pending_writes() then // Sent all data; release backpressure. _release_backpressure() end end else // The connection failed, unsubscribe the event and close. @pony_asio_event_unsubscribe(event) @pony_os_socket_close[None](fd) _notify_connecting() end else // We're already connected, unsubscribe the event and close. @pony_asio_event_unsubscribe(event) @pony_os_socket_close[None](fd) _try_shutdown() end else // It's not our event. if AsioEvent.disposable(flags) then // It's disposable, so dispose of it. @pony_asio_event_destroy(event) end end else // At this point, it's our event. if AsioEvent.writeable(flags) then _writeable = true _complete_writes(arg) ifdef not windows then if _pending_writes() then // Sent all data. Release backpressure. _release_backpressure() end end end if AsioEvent.readable(flags) then _readable = true _complete_reads(arg) _pending_reads() end if AsioEvent.disposable(flags) then @pony_asio_event_destroy(event) _event = AsioEvent.none() end _try_shutdown() end be _read_again() = Resume reading. _pending_reads() fun ref write_final(data: ByteSeq) = Write as much as possible to the socket. Set `_writeable` to `false` if not everything was written. On an error, close the connection. This is for data that has already been transformed by the notifier. Data will be silently discarded if the connection has not yet been established though. if _connected and not _closed then ifdef windows then try // Add an IOCP write. _pending_writev . push(data.size()) . push(data.cpointer().usize()) _pending_writev_total = _pending_writev_total + data.size() _pending.push(data) @pony_os_writev[USize](_event, _pending_writev.cpointer(_pending_sent * 2), I32(1)) ? _pending_sent = _pending_sent + 1 if _pending_sent 32 then // If more than 32 asynchronous writes are scheduled, apply // backpressure. The choice of 32 is rather arbitrary an // probably needs tuning _apply_backpressure() end end else _pending_writev . push(data.cpointer().usize()) . push(data.size()) _pending_writev_total = _pending_writev_total + data.size() _pending.push(data) _pending_writes() end end fun ref _complete_writes(len: U32) = The OS has informed us that `len` bytes of pending writes have completed. This occurs only with IOCP on Windows. ifdef windows then if len == 0 then // IOCP reported a failed write on this chunk. Non-graceful shutdown. _hard_close() return end try _manage_pending_buffer(len.usize(), _pending_writev_total, _pending.size())? end if _pending_sent 16 then // If fewer than 16 asynchronous writes are scheduled, remove // backpressure. The choice of 16 is rather arbitrary and probably // needs to be tuned. _release_backpressure() end end fun ref _pending_writes(): Bool = Send pending data. If any data can't be sent, keep it and mark as not writeable. On an error, dispose of the connection. Returns whether it sent all pending data or not. ifdef not windows then // TODO: Make writev_batch_size user configurable let writev_batch_size: USize = @pony_os_writev_max[I32]().usize() var num_to_send: USize = 0 var bytes_to_send: USize = 0 while _writeable and (_pending_writev_total 0) do try // Determine number of bytes and buffers to send. if (_pending_writev.size() / 2) writev_batch_size then num_to_send = _pending_writev.size() / 2 bytes_to_send = _pending_writev_total else // Have more buffers than a single writev can handle. // Iterate over buffers being sent to add up total. num_to_send = writev_batch_size bytes_to_send = 0 for d in Range[USize](1, num_to_send * 2, 2) do bytes_to_send = bytes_to_send + _pending_writev(d)? end end // Write as much data as possible. var len = @pony_os_writev[USize](_event, _pending_writev.cpointer(), num_to_send.i32()) ? if _manage_pending_buffer(len, bytes_to_send, num_to_send)? then return true end else // Non-graceful shutdown on error. _hard_close() end end end false fun ref _manage_pending_buffer( bytes_sent: USize, bytes_to_send: USize, num_to_send: USize) : Bool ? = Manage pending buffer for data sent. Returns a boolean of whether the pending buffer is empty or not. var len = bytes_sent if len bytes_to_send then while len 0 do let iov_p = ifdef windows then _pending_writev(1)? else _pending_writev(0)? end let iov_s = ifdef windows then _pending_writev(0)? else _pending_writev(1)? end if iov_s = len then len = len - iov_s _pending_writev.shift()? _pending_writev.shift()? _pending.shift()? ifdef windows then _pending_sent = _pending_sent - 1 end _pending_writev_total = _pending_writev_total - iov_s else ifdef windows then _pending_writev.update(1, iov_p+len)? _pending_writev.update(0, iov_s-len)? else _pending_writev.update(0, iov_p+len)? _pending_writev.update(1, iov_s-len)? end _pending_writev_total = _pending_writev_total - len len = 0 end end ifdef not windows then _apply_backpressure() end else // sent all data we requested in this batch _pending_writev_total = _pending_writev_total - bytes_to_send if _pending_writev_total == 0 then _pending_writev.clear() _pending.clear() ifdef windows then _pending_sent = 0 end return true else for d in Range[USize](0, num_to_send, 1) do _pending_writev.shift()? _pending_writev.shift()? _pending.shift()? ifdef windows then _pending_sent = _pending_sent - 1 end end end end false fun ref _complete_reads(len: U32) = The OS has informed us that `len` bytes of pending reads have completed. This occurs only with IOCP on Windows. ifdef windows then match len.usize() | 0 = // The socket has been closed from the other side, or a hard close has // cancelled the queued read. _readable = false _shutdown_peer = true close() return | _next_size = _next_size = _max_size.min(_next_size * 2) end _read_len = _read_len + len.usize() if (not _muted) and (_read_len = _expect) then let data = _read_buf = recover Array[U8] end data.truncate(_read_len) _read_len = 0 _notify.received(this, consume data, 1) _read_buf_size() end _queue_read() end fun ref _read_buf_size() = Resize the read buffer. if _expect != 0 then _read_buf.undefined(_expect) else _read_buf.undefined(_next_size) end fun ref _queue_read() = Begin an IOCP read on Windows. ifdef windows then try @pony_os_recv[USize]( _event, _read_buf.cpointer(_read_len), _read_buf.size() - _read_len) ? else _hard_close() end end fun ref _pending_reads() = Unless this connection is currently muted, read while data is available, guessing the next packet length as we go. If we read 4 kb of data, send ourself a resume message and stop reading, to avoid starving other actors. ifdef not windows then try var sum: USize = 0 var received_called: USize = 0 while _readable and not _shutdown_peer do if _muted then return end // Read as much data as possible. let len = @pony_os_recv[USize]( _event, _read_buf.cpointer(_read_len), _read_buf.size() - _read_len) ? match len | 0 = // Would block, try again later. // this is safe because asio thread isn't currently subscribed // for a read event so will not be writing to the readable flag @pony_asio_event_set_readable(_event, false) _readable = false @pony_asio_event_resubscribe_read(_event) return | _next_size = // Increase the read buffer size. _next_size = _max_size.min(_next_size * 2) end _read_len = _read_len + len if _read_len = _expect then let data = _read_buf = recover Array[U8] end data.truncate(_read_len) _read_len = 0 received_called = received_called + 1 if not _notify.received(this, consume data, received_called) then _read_buf_size() _read_again() return else _read_buf_size() end end sum = sum + len if sum = _max_size then // If we've read _max_size, yield and read again later. _read_again() return end end else // The socket has been closed from the other side. _shutdown_peer = true close() end end fun ref _notify_connecting() = Inform the notifier that we're connecting. if _connect_count 0 then _notify.connecting(this, _connect_count) else _notify.connect_failed(this) _hard_close() end fun ref close() = Attempt to perform a graceful shutdown. Don't accept new writes. If the connection isn't muted then we won't finish closing until we get a zero length read. If the connection is muted, perform a hard close and shut down immediately. ifdef windows then _close() else if _muted then _hard_close() else _close() end end fun ref _close() = _closed = true _try_shutdown() fun ref _try_shutdown() = If we have closed and we have no remaining writes or pending connections, then shutdown. if not _closed then return end if not _shutdown and (_connect_count == 0) and (_pending_writev_total == 0) then _shutdown = true if _connected then @pony_os_socket_shutdown[None](_fd) else _shutdown_peer = true end end if _connected and _shutdown and _shutdown_peer then _hard_close() end ifdef windows then // On windows, wait until all outstanding IOCP operations have completed // or been cancelled. if not _connected and not _readable and (_pending_sent == 0) then @pony_asio_event_unsubscribe(_event) end end fun ref _hard_close() = When an error happens, do a non-graceful close. if not _connected then return end _connected = false _closed = true _shutdown = true _shutdown_peer = true _pending.clear() _pending_writev.clear() _pending_writev_total = 0 ifdef windows then _pending_sent = 0 end ifdef not windows then // Unsubscribe immediately and drop all pending writes. @pony_asio_event_unsubscribe(_event) _readable = false _writeable = false @pony_asio_event_set_readable(_event, false) @pony_asio_event_set_writeable(_event, false) end // On windows, this will also cancel all outstanding IOCP operations. @pony_os_socket_close[None](_fd) _fd = -1 _notify.closed(this) try (_listen as TCPListener)._conn_closed() end // Check this when a connection gets its first writeable event. fun _is_sock_connected(fd: U32): Bool = (let errno: U32, let value: U32) = _OSSocket.get_so_error(fd) (errno == 0) and (value == 0) fun ref _apply_backpressure() = if not _throttled then _throttled = true _notify.throttled(this) end ifdef not windows then _writeable = false // this is safe because asio thread isn't currently subscribed // for a write event so will not be writing to the readable flag @pony_asio_event_set_writeable(_event, false) @pony_asio_event_resubscribe_write(_event) end fun ref _release_backpressure() = if _throttled then _throttled = false _notify.unthrottled(this) end /**************************************/ fun ref getsockopt(level: I32, option_name: I32, option_max_size: USize = 4): (U32, Array[U8] iso^) = General wrapper for TCP sockets to the `getsockopt(2)` system call. The caller must provide an array that is pre-allocated to be at least as large as the largest data structure that the kernel may return for the requested option. In case of system call success, this function returns the 2-tuple: 1. The integer `0`. 2. An `Array[U8]` of data returned by the system call's `void *` 4th argument. Its size is specified by the kernel via the system call's `sockopt_len_t *` 5th argument. In case of system call failure, this function returns the 2-tuple: 1. The value of `errno`. 2. An undefined value that must be ignored. Usage example: ```pony // connected() is a callback function for class TCPConnectionNotify fun ref connected(conn: TCPConnection ref) = match conn.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4) | (0, let gbytes: Array[U8] iso) = try let br = Reader.create(). append(consume gbytes) ifdef littleendian then let buffer_size = br.u32_le()? else let buffer_size = br.u32_be()? end end | (let errno: U32, _) = // System call failed end ``` _OSSocket.getsockopt(_fd, level, option_name, option_max_size) fun ref getsockopt_u32(level: I32, option_name: I32): (U32, U32) = Wrapper for TCP sockets to the `getsockopt(2)` system call where the kernel's returned option value is a C `uint32_t` type / Pony type `U32`. In case of system call success, this function returns the 2-tuple: 1. The integer `0`. 2. The `*option_value` returned by the kernel converted to a Pony `U32`. In case of system call failure, this function returns the 2-tuple: 1. The value of `errno`. 2. An undefined value that must be ignored. _OSSocket.getsockopt_u32(_fd, level, option_name) fun ref setsockopt(level: I32, option_name: I32, option: Array[U8]): U32 = General wrapper for TCP sockets to the `setsockopt(2)` system call. The caller is responsible for the correct size and byte contents of the `option` array for the requested `level` and `option_name`, including using the appropriate machine endian byte order. This function returns `0` on success, else the value of `errno` on failure. Usage example: ```pony // connected() is a callback function for class TCPConnectionNotify fun ref connected(conn: TCPConnection ref) = let sb = Writer sb.u32_le(7744) // Our desired socket buffer size let sbytes = Array[U8] for bs in sb.done().values() do sbytes.append(bs) end match conn.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes) | 0 = // System call was successful | let errno: U32 = // System call failed end ``` _OSSocket.setsockopt(_fd, level, option_name, option) fun ref setsockopt_u32(level: I32, option_name: I32, option: U32): U32 = General wrapper for TCP sockets to the `setsockopt(2)` system call where the kernel expects an option value of a C `uint32_t` type / Pony type `U32`. This function returns `0` on success, else the value of `errno` on failure. _OSSocket.setsockopt_u32(_fd, level, option_name, option) fun ref get_so_error(): (U32, U32) = Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_ERROR, ...)` _OSSocket.get_so_error(_fd) fun ref get_so_rcvbuf(): (U32, U32) = Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)` _OSSocket.get_so_rcvbuf(_fd) fun ref get_so_sndbuf(): (U32, U32) = Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)` _OSSocket.get_so_sndbuf(_fd) fun ref get_tcp_nodelay(): (U32, U32) = Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...)` _OSSocket.getsockopt_u32(_fd, OSSockOpt.sol_socket(), OSSockOpt.tcp_nodelay()) fun ref set_so_rcvbuf(bufsize: U32): U32 = Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)` _OSSocket.set_so_rcvbuf(_fd, bufsize) fun ref set_so_sndbuf(bufsize: U32): U32 = Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)` _OSSocket.set_so_sndbuf(_fd, bufsize) fun ref set_tcp_nodelay(state: Bool): U32 = Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...)` var word: Array[U8] ref = _OSSocket.u32_to_bytes4(if state then 1 else 0 end) _OSSocket.setsockopt(_fd, OSSockOpt.sol_socket(), OSSockOpt.tcp_nodelay(), word)","title":"tcp_connection.pony"},{"location":"src/net/tcp_connection_notify/","text":"interface TCPConnectionNotify Notifications for TCP connections. For an example of using this class please see the documentation for the `TCPConnection` and `TCPListener` actors. fun ref accepted(conn: TCPConnection ref) = Called when a TCPConnection is accepted by a TCPListener. None fun ref connecting(conn: TCPConnection ref, count: U32) = Called if name resolution succeeded for a TCPConnection and we are now waiting for a connection to the server to succeed. The count is the number of connections we're trying. The notifier will be informed each time the count changes, until a connection is made or connect_failed() is called. None fun ref connected(conn: TCPConnection ref) = Called when we have successfully connected to the server. None fun ref connect_failed(conn: TCPConnection ref) Called when we have failed to connect to all possible addresses for the server. At this point, the connection will never be established. It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this: ```pony fun ref connect_failed(conn: TCPConnection ref) = None ``` fun ref auth_failed(conn: TCPConnection ref) = A raw TCPConnection has no authentication mechanism. However, when protocols are wrapped in other protocols, this can be used to report an authentication failure in a lower level protocol (e.g. SSL). None fun ref sent(conn: TCPConnection ref, data: ByteSeq): ByteSeq = Called when data is sent on the connection. This gives the notifier an opportunity to modify sent data before it is written. To swallow data, return an empty string. data fun ref sentv(conn: TCPConnection ref, data: ByteSeqIter): ByteSeqIter = Called when multiple chunks of data are sent to the connection in a single call. This gives the notifier an opportunity to modify the sent data chunks before they are written. To swallow the send, return an empty Array[String]. data fun ref received( conn: TCPConnection ref, data: Array[U8] iso, times: USize) : Bool = Called when new data is received on the connection. Return true if you want to continue receiving messages without yielding until you read max_size on the TCPConnection. Return false to cause the TCPConnection to yield now. Includes the number of times during the current behavior, that received has been called. This allows the notifier to end reads on a regular basis. true fun ref expect(conn: TCPConnection ref, qty: USize): USize = Called when the connection has been told to expect a certain quantity of bytes. This allows nested notifiers to change the expected quantity, which allows a lower level protocol to handle any framing (e.g. SSL). qty fun ref closed(conn: TCPConnection ref) = Called when the connection is closed. None fun ref throttled(conn: TCPConnection ref) = Called when the connection starts experiencing TCP backpressure. You should respond to this by pausing additional calls to `write` and `writev` until you are informed that pressure has been released. Failure to respond to the `throttled` notification will result in outgoing data queuing in the connection and increasing memory usage. None fun ref unthrottled(conn: TCPConnection ref) = Called when the connection stops experiencing TCP backpressure. Upon receiving this notification, you should feel free to start making calls to `write` and `writev` again. None","title":"tcp_connection_notify.pony"},{"location":"src/net/tcp_listen_notify/","text":"interface TCPListenNotify Notifications for TCP listeners. For an example of using this class, please see the documentation for the `TCPListener` actor. fun ref listening(listen: TCPListener ref) = Called when the listener has been bound to an address. None fun ref not_listening(listen: TCPListener ref) Called if it wasn't possible to bind the listener to an address. It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this: ```pony fun ref not_listening(listen: TCPListener ref) = None ``` fun ref closed(listen: TCPListener ref) = Called when the listener is closed. None fun ref connected(listen: TCPListener ref): TCPConnectionNotify iso^ ? Create a new TCPConnectionNotify to attach to a new TCPConnection for a newly established connection to the server.","title":"tcp_listen_notify.pony"},{"location":"src/net/tcp_listener/","text":"type TCPListenerAuth is (AmbientAuth | NetAuth | TCPAuth | TCPListenAuth) actor TCPListener Listens for new network connections. The following program creates an echo server that listens for connections on port 8989 and echoes back any data it receives. ```pony use net class MyTCPConnectionNotify is TCPConnectionNotify fun ref received( conn: TCPConnection ref, data: Array[U8] iso, times: USize) : Bool = conn.write(String.from_array(consume data)) true fun ref connect_failed(conn: TCPConnection ref) = None class MyTCPListenNotify is TCPListenNotify fun ref connected(listen: TCPListener ref): TCPConnectionNotify iso^ = MyTCPConnectionNotify fun ref not_listening(listen: TCPListener ref) = None actor Main new create(env: Env) = try TCPListener(env.root as AmbientAuth, recover MyTCPListenNotify end, , 8989 ) end ``` var _notify: TCPListenNotify var _fd: U32 var _event: AsioEventID = AsioEvent.none() var _closed: Bool = false let _limit: USize var _count: USize = 0 var _paused: Bool = false var _init_size: USize var _max_size: USize new create( auth: TCPListenerAuth, notify: TCPListenNotify iso, host: String = , service: String = 0 , limit: USize = 0, init_size: USize = 64, max_size: USize = 16384) = Listens for both IPv4 and IPv6 connections. _limit = limit _notify = consume notify _event = @pony_os_listen_tcp[AsioEventID](this, host.cstring(), service.cstring()) _init_size = init_size _max_size = max_size _fd = @pony_asio_event_fd(_event) _notify_listening() new ip4( auth: TCPListenerAuth, notify: TCPListenNotify iso, host: String = , service: String = 0 , limit: USize = 0, init_size: USize = 64, max_size: USize = 16384) = Listens for IPv4 connections. _limit = limit _notify = consume notify _event = @pony_os_listen_tcp4[AsioEventID](this, host.cstring(), service.cstring()) _init_size = init_size _max_size = max_size _fd = @pony_asio_event_fd(_event) _notify_listening() new ip6( auth: TCPListenerAuth, notify: TCPListenNotify iso, host: String = , service: String = 0 , limit: USize = 0, init_size: USize = 64, max_size: USize = 16384) = Listens for IPv6 connections. _limit = limit _notify = consume notify _event = @pony_os_listen_tcp6[AsioEventID](this, host.cstring(), service.cstring()) _init_size = init_size _max_size = max_size _fd = @pony_asio_event_fd(_event) _notify_listening() be set_notify(notify: TCPListenNotify iso) = Change the notifier. _notify = consume notify be dispose() = Stop listening. close() fun local_address(): NetAddress = Return the bound IP address. let ip = recover NetAddress end @pony_os_sockname[Bool](_fd, ip) ip be _event_notify(event: AsioEventID, flags: U32, arg: U32) = When we are readable, we accept new connections until none remain. if event isnt _event then return end if AsioEvent.readable(flags) then _accept(arg) end if AsioEvent.disposable(flags) then @pony_asio_event_destroy(_event) _event = AsioEvent.none() end be _conn_closed() = An accepted connection has closed. If we have dropped below the limit, try to accept new connections. _count = _count - 1 if _paused and (_count _limit) then _paused = false _accept() end fun ref _accept(ns: U32 = 0) = Accept connections as long as we have spawned fewer than our limit. ifdef windows then if ns == -1 then // Unsubscribe when we get an invalid socket in the event. @pony_asio_event_unsubscribe(_event) return end if ns 0 then if _closed then @pony_os_socket_close[None](ns) return end _spawn(ns) end // Queue an accept if we're not at the limit. if (_limit == 0) or (_count _limit) then @pony_os_accept[U32](_event) else _paused = true end else if _closed then return end while (_limit == 0) or (_count _limit) do var fd = @pony_os_accept[U32](_event) match fd | -1 = // Something other than EWOULDBLOCK, try again. None | 0 = // EWOULDBLOCK, don't try again. return else _spawn(fd) end end _paused = true end fun ref _spawn(ns: U32) = Spawn a new connection. try TCPConnection._accept(this, _notify.connected(this)?, ns, _init_size, _max_size) _count = _count + 1 else @pony_os_socket_close[None](ns) end fun ref _notify_listening() = Inform the notifier that we're listening. if not _event.is_null() then _notify.listening(this) else _closed = true _notify.not_listening(this) end fun ref close() = Dispose of resources. if _closed then return end _closed = true if not _event.is_null() then // When not on windows, the unsubscribe is done immediately. ifdef not windows then @pony_asio_event_unsubscribe(_event) end @pony_os_socket_close[None](_fd) _fd = -1 _notify.closed(this) end","title":"tcp_listener.pony"},{"location":"src/net/udp_notify/","text":"interface UDPNotify Notifications for UDP connections. For an example of using this class please see the documentatoin for the `UDPSocket` actor. fun ref listening(sock: UDPSocket ref) = Called when the socket has been bound to an address. None fun ref not_listening(sock: UDPSocket ref) Called if it wasn't possible to bind the socket to an address. It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this: ```pony fun ref not_listening(sock: UDPSocket ref) = None ``` fun ref received( sock: UDPSocket ref, data: Array[U8] iso, from: NetAddress) = Called when new data is received on the socket. None fun ref closed(sock: UDPSocket ref) = Called when the socket is closed. None","title":"udp_notify.pony"},{"location":"src/net/udp_socket/","text":"use collections type UDPSocketAuth is (AmbientAuth | NetAuth | UDPAuth) actor UDPSocket Creates a UDP socket that can be used for sending and receiving UDP messages. The following examples create: * an echo server that listens for connections and returns whatever message it receives * a client that connects to the server, sends a message, and prints the message it receives in response The server is implemented like this: ```pony use net class MyUDPNotify is UDPNotify fun ref received( sock: UDPSocket ref, data: Array[U8] iso, from: NetAddress) = sock.write(consume data, from) fun ref not_listening(sock: UDPSocket ref) = None actor Main new create(env: Env) = try UDPSocket(env.root as AmbientAuth, MyUDPNotify, , 8989 ) end ``` The client is implemented like this: ```pony use net class MyUDPNotify is UDPNotify let _out: OutStream let _destination: NetAddress new create( out: OutStream, destination: NetAddress) = _out = out _destination = destination fun ref listening(sock: UDPSocket ref) = sock.write( hello world , _destination) fun ref received( sock: UDPSocket ref, data: Array[U8] iso, from: NetAddress) = _out.print( GOT: + String.from_array(consume data)) sock.dispose() fun ref not_listening(sock: UDPSocket ref) = None actor Main new create(env: Env) = try let destination = DNS.ip4(env.root as AmbientAuth, localhost , 8989 )(0)? UDPSocket(env.root as AmbientAuth, recover MyUDPNotify(env.out, consume destination) end) end ``` var _notify: UDPNotify var _fd: U32 var _event: AsioEventID var _readable: Bool = false var _closed: Bool = false var _packet_size: USize var _read_buf: Array[U8] iso var _read_from: NetAddress iso = NetAddress embed _ip: NetAddress = NetAddress new create( auth: UDPSocketAuth, notify: UDPNotify iso, host: String = , service: String = 0 , size: USize = 1024) = Listens for both IPv4 and IPv6 datagrams. _notify = consume notify _event = @pony_os_listen_udp[AsioEventID](this, host.cstring(), service.cstring()) _fd = @pony_asio_event_fd(_event) @pony_os_sockname[Bool](_fd, _ip) _packet_size = size _read_buf = recover Array[U8] . undefined(size) end _notify_listening() _start_next_read() new ip4( auth: UDPSocketAuth, notify: UDPNotify iso, host: String = , service: String = 0 , size: USize = 1024) = Listens for IPv4 datagrams. _notify = consume notify _event = @pony_os_listen_udp4[AsioEventID](this, host.cstring(), service.cstring()) _fd = @pony_asio_event_fd(_event) @pony_os_sockname[Bool](_fd, _ip) _packet_size = size _read_buf = recover Array[U8] . undefined(size) end _notify_listening() _start_next_read() new ip6( auth: UDPSocketAuth, notify: UDPNotify iso, host: String = , service: String = 0 , size: USize = 1024) = Listens for IPv6 datagrams. _notify = consume notify _event = @pony_os_listen_udp6[AsioEventID](this, host.cstring(), service.cstring()) _fd = @pony_asio_event_fd(_event) @pony_os_sockname[Bool](_fd, _ip) _packet_size = size _read_buf = recover Array[U8] . undefined(size) end _notify_listening() _start_next_read() be write(data: ByteSeq, to: NetAddress) = Write a single sequence of bytes. _write(data, to) be writev(data: ByteSeqIter, to: NetAddress) = Write a sequence of sequences of bytes. for bytes in data.values() do _write(bytes, to) end be set_notify(notify: UDPNotify iso) = Change the notifier. _notify = consume notify be set_broadcast(state: Bool) = Enable or disable broadcasting from this socket. if not _closed then if _ip.ip4() then set_so_broadcast(state) elseif _ip.ip6() then @pony_os_multicast_join[None](_fd, FF02::1 .cstring(), .cstring()) end end be set_multicast_interface(from: String = ) = By default, the OS will choose which address is used to send packets bound for multicast addresses. This can be used to force a specific interface. To revert to allowing the OS to choose, call with an empty string. if not _closed then @pony_os_multicast_interface[None](_fd, from.cstring()) end be set_multicast_loopback(loopback: Bool) = By default, packets sent to a multicast address will be received by the sending system if it has subscribed to that address. Disabling loopback prevents this. if not _closed then set_ip_multicast_loop(loopback) end be set_multicast_ttl(ttl: U8) = Set the TTL for multicast sends. Defaults to 1. if not _closed then set_ip_multicast_ttl(ttl) end be multicast_join(group: String, to: String = ) = Add a multicast group. This can be limited to packets arriving on a specific interface. if not _closed then @pony_os_multicast_join[None](_fd, group.cstring(), to.cstring()) end be multicast_leave(group: String, to: String = ) = Drop a multicast group. This can be limited to packets arriving on a specific interface. No attempt is made to check that this socket has previously added this group. if not _closed then @pony_os_multicast_leave[None](_fd, group.cstring(), to.cstring()) end be dispose() = Stop listening. if not _closed then _close() end fun local_address(): NetAddress = Return the bound IP address. _ip be _event_notify(event: AsioEventID, flags: U32, arg: U32) = When we are readable, we accept new connections until none remain. if event isnt _event then return end if not _closed then if AsioEvent.readable(flags) then _readable = true _complete_reads(arg) _pending_reads() end else ifdef windows then if AsioEvent.readable(flags) then _readable = false _close() end end end if AsioEvent.disposable(flags) then @pony_asio_event_destroy[None](_event) _event = AsioEvent.none() end be _read_again() = Resume reading. if not _closed then _pending_reads() end fun ref _pending_reads() = Read while data is available, guessing the next packet length as we go. If we read 4 kb of data, send ourself a resume message and stop reading, to avoid starving other actors. ifdef not windows then try var sum: USize = 0 while _readable do let size = _packet_size let data = _read_buf = recover Array[U8] . undefined(size) end let from = recover NetAddress end let len = @pony_os_recvfrom[USize](_event, data.cpointer(), data.space(), from) ? if len == 0 then _readable = false return end data.truncate(len) _notify.received(this, consume data, consume from) sum = sum + len if sum (1 12) then _read_again() return end end else _close() end end fun ref _complete_reads(len: U32) = The OS has informed as that len bytes of pending reads have completed. This occurs only with IOCP on Windows. ifdef windows then if _read_buf.space() == 0 then // Socket has been closed _readable = false _close() return end if _closed then return end // Hand back read data let size = _packet_size let data = _read_buf = recover Array[U8] . undefined(size) end let from = _read_from = recover NetAddress end data.truncate(len.usize()) _notify.received(this, consume data, consume from) _start_next_read() end fun ref _start_next_read() = Start our next receive. This is used only with IOCP on Windows. ifdef windows then try @pony_os_recvfrom[USize](_event, _read_buf.cpointer(), _read_buf.space(), _read_from) ? else _readable = false _close() end end fun ref _write(data: ByteSeq, to: NetAddress) = Write the datagram to the socket. if not _closed then try @pony_os_sendto[USize](_fd, data.cpointer(), data.size(), to) ? else _close() end end fun ref _notify_listening() = Inform the notifier that we're listening. if _fd != -1 then _notify.listening(this) else _notify.not_listening(this) end fun ref _close() = Inform the notifier that we've closed. ifdef windows then // On windows, wait until IOCP read operation has completed or been // cancelled. if _closed and not _readable and not _event.is_null() then @pony_asio_event_unsubscribe[None](_event) end else // Unsubscribe immediately. if not _event.is_null() then @pony_asio_event_unsubscribe[None](_event) _readable = false end end _closed = true if _fd != -1 then _notify.closed(this) // On windows, this will also cancel all outstanding IOCP operations. @pony_os_socket_close[None](_fd) _fd = -1 end fun ref getsockopt(level: I32, option_name: I32, option_max_size: USize = 4): (U32, Array[U8] iso^) = General wrapper for UDP sockets to the `getsockopt(2)` system call. The caller must provide an array that is pre-allocated to be at least as large as the largest data structure that the kernel may return for the requested option. In case of system call success, this function returns the 2-tuple: 1. The integer `0`. 2. An `Array[U8]` of data returned by the system call's `void *` 4th argument. Its size is specified by the kernel via the system call's `sockopt_len_t *` 5th argument. In case of system call failure, this function returns the 2-tuple: 1. The value of `errno`. 2. An undefined value that must be ignored. Usage example: ```pony // listening() is a callback function for class UDPNotify fun ref listening(sock: UDPSocket ref) = match sock.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4) | (0, let gbytes: Array[U8] iso) = try let br = Reader.create(). append(consume gbytes) ifdef littleendian then let buffer_size = br.u32_le()? else let buffer_size = br.u32_be()? end end | (let errno: U32, _) = // System call failed end ``` _OSSocket.getsockopt(_fd, level, option_name, option_max_size) fun ref getsockopt_u32(level: I32, option_name: I32): (U32, U32) = Wrapper for UDP sockets to the `getsockopt(2)` system call where the kernel's returned option value is a C `uint32_t` type / Pony type `U32`. In case of system call success, this function returns the 2-tuple: 1. The integer `0`. 2. The `*option_value` returned by the kernel converted to a Pony `U32`. In case of system call failure, this function returns the 2-tuple: 1. The value of `errno`. 2. An undefined value that must be ignored. _OSSocket.getsockopt_u32(_fd, level, option_name) fun ref setsockopt(level: I32, option_name: I32, option: Array[U8]): U32 = General wrapper for UDP sockets to the `setsockopt(2)` system call. The caller is responsible for the correct size and byte contents of the `option` array for the requested `level` and `option_name`, including using the appropriate CPU endian byte order. This function returns `0` on success, else the value of `errno` on failure. Usage example: ```pony // listening() is a callback function for class UDPNotify fun ref listening(sock: UDPSocket ref) = let sb = Writer sb.u32_le(7744) // Our desired socket buffer size let sbytes = Array[U8] for bs in sb.done().values() do sbytes.append(bs) end match sock.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes) | 0 = // System call was successful | let errno: U32 = // System call failed end ``` _OSSocket.setsockopt(_fd, level, option_name, option) fun ref setsockopt_u32(level: I32, option_name: I32, option: U32): U32 = Wrapper for UDP sockets to the `setsockopt(2)` system call where the kernel expects an option value of a C `uint32_t` type / Pony type `U32`. This function returns `0` on success, else the value of `errno` on failure. _OSSocket.setsockopt_u32(_fd, level, option_name, option) fun ref get_so_error(): (U32, U32) = Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_ERROR, ...)` _OSSocket.get_so_error(_fd) fun ref get_so_rcvbuf(): (U32, U32) = Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)` _OSSocket.get_so_rcvbuf(_fd) fun ref get_so_sndbuf(): (U32, U32) = Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)` _OSSocket.get_so_sndbuf(_fd) fun ref set_ip_multicast_loop(loopback: Bool): U32 = Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, IP_MULTICAST_LOOP, ...)` var word: Array[U8] ref = _OSSocket.u32_to_bytes4(if loopback then 1 else 0 end) _OSSocket.setsockopt(_fd, OSSockOpt.sol_socket(), OSSockOpt.ip_multicast_loop(), word) fun ref set_ip_multicast_ttl(ttl: U8): U32 = Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, IP_MULTICAST_TTL, ...)` var word: Array[U8] ref = _OSSocket.u32_to_bytes4(ttl.u32()) _OSSocket.setsockopt(_fd, OSSockOpt.sol_socket(), OSSockOpt.ip_multicast_ttl(), word) fun ref set_so_broadcast(state: Bool): U32 = Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, SO_BROADCAST, ...)` var word: Array[U8] ref = _OSSocket.u32_to_bytes4(if state then 1 else 0 end) _OSSocket.setsockopt(_fd, OSSockOpt.sol_socket(), OSSockOpt.so_broadcast(), word) fun ref set_so_rcvbuf(bufsize: U32): U32 = Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)` _OSSocket.set_so_rcvbuf(_fd, bufsize) fun ref set_so_sndbuf(bufsize: U32): U32 = Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)` _OSSocket.set_so_sndbuf(_fd, bufsize)","title":"udp_socket.pony"},{"location":"src/net-ssl/_ssl_init/","text":"use path:/usr/local/opt/libressl/lib if osx use lib:ssl use lib:crypto use @OPENSSL_init_ssl[I32](opts: U64, settings: Pointer[_OpenSslInitSettings]) use @OPENSSL_INIT_new[Pointer[_OpenSslInitSettings]]() primitive _OpenSslInitSettings // From https://github.com/ponylang/ponyc/issues/330 primitive _OpenSslInitNoLoadSslStrings fun val apply(): U64 = 0x00100000 primitive _OpenSslInitLoadSslStrings fun val apply(): U64 = 0x00200000 primitive _OpenSslInitNoLoadCryptoStrings fun val apply(): U64 = 0x00000001 primitive _OpenSslInitLoadCryptoStrings fun val apply(): U64 = 0x00000002 primitive _SSLInit This initialises SSL when the program begins. fun _init() = ifdef openssl_1.1.0 then let settings = @OPENSSL_INIT_new() @OPENSSL_init_ssl(_OpenSslInitLoadSslStrings.apply() + _OpenSslInitLoadCryptoStrings.apply(), settings) else @SSL_load_error_strings[None]() @SSL_library_init[I32]() let cb = @ponyint_ssl_multithreading[Pointer[U8]](@CRYPTO_num_locks[I32]()) @CRYPTO_set_locking_callback[None](cb) end","title":"_ssl_init.pony"},{"location":"src/net-ssl/_ssl_versions/","text":"primitive _SslCtrlSetMinProtoVersion fun val apply(): I32 = 123 primitive _SslCtrlSetMaxProtoVersion fun val apply(): I32 = 124 primitive _SslCtrlGetMinProtoVersion fun val apply(): I32 = 130 primitive _SslCtrlGetMaxProtoVersion fun val apply(): I32 = 131","title":"_ssl_versions.pony"},{"location":"src/net-ssl/alpn/","text":"use .. interface ALPNProtocolNotify fun ref alpn_negotiated(conn: TCPConnection ref, protocol: (String val | None)): None type ALPNProtocolName is String val primitive ALPNFatal primitive ALPNNoAck primitive ALPNWarning type ALPNMatchResult is (ALPNProtocolName | ALPNNoAck | ALPNWarning | ALPNFatal) interface box ALPNProtocolResolver Controls the protocol name to be chosen for incomming SSLConnections using the ALPN extension. fun box resolve(advertised: Array[ALPNProtocolName] val): ALPNMatchResult class val ALPNStandardProtocolResolver is ALPNProtocolResolver Implements the standard protocol selection akin to the OpenSSL function `SSL_select_next_proto`. let supported: Array[ALPNProtocolName] val let use_client_as_fallback: Bool new val create(supported': Array[ALPNProtocolName] val, use_client_as_fallback': Bool = true) = supported = supported' use_client_as_fallback = use_client_as_fallback' fun box resolve(advertised: Array[ALPNProtocolName] val): ALPNMatchResult = for sup_proto in supported.values() do for adv_proto in advertised.values() do if sup_proto == adv_proto then return sup_proto end end end if use_client_as_fallback then try return advertised.apply(0)? end end ALPNWarning primitive _ALPNMatchResultCode fun ok(): I32 = 0 fun warning(): I32 = 1 fun fatal(): I32 = 2 fun no_ack(): I32 = 3 primitive _ALPNProtocolList fun from_array(protocols: Array[String] box): String val ? = Try to pack the protocol names in `protocols` into a *protocol name list* if protocols.size() == 0 then error end let list = recover trn String end for proto in protocols.values() do let len = proto.size() if (len == 0) or (len 255) then error end list.push(U8.from[USize](len)) list.append(proto) end consume val list fun to_array(protocol_list: String box): Array[ALPNProtocolName] val ? = Try to unpack a *protocol name list* into an `Array[String]` let arr = recover trn Array[ALPNProtocolName] end var index = USize(1) var remain = try protocol_list.apply(0)? else error end var buf: String trn = recover trn String end if remain == 0 then error end while index protocol_list.size() do let ch = try protocol_list.apply(index)? else error end if remain 0 then buf.push(ch) remain = remain - 1 end if remain == 0 then let final_protocol: String val = buf = recover trn String end arr.push(final_protocol) let hasNextChar = index (protocol_list.size() - 1) if hasNextChar then remain = try protocol_list.apply(index + 1)? else error end if remain == 0 then error end index = index + 1 end end index = index + 1 end if remain 0 then error end consume val arr","title":"alpn.pony"},{"location":"src/net-ssl/ssl/","text":"use net use @SSL_ctrl[ILong]( ssl: Pointer[_SSL], op: I32, arg: ILong, parg: Pointer[None]) primitive _SSL primitive _BIO primitive SSLHandshake primitive SSLAuthFail primitive SSLReady primitive SSLError type SSLState is (SSLHandshake | SSLAuthFail | SSLReady | SSLError) class SSL An SSL session manages handshakes, encryption and decryption. It is not tied to any transport layer. let _hostname: String var _ssl: Pointer[_SSL] var _input: Pointer[_BIO] tag var _output: Pointer[_BIO] tag var _state: SSLState = SSLHandshake var _read_buf: Array[U8] iso = recover Array[U8] end new _create( ctx: Pointer[_SSLContext] tag, server: Bool, verify: Bool, hostname: String = ) ? = Create a client or server SSL session from a context. if ctx.is_null() then error end _hostname = hostname _ssl = @SSL_new[Pointer[_SSL]](ctx) if _ssl.is_null() then error end let mode = if verify then I32(3) else I32(0) end @SSL_set_verify[None](_ssl, mode, Pointer[U8]) _input = @BIO_new[Pointer[_BIO]](@BIO_s_mem[Pointer[U8]]()) if _input.is_null() then error end _output = @BIO_new[Pointer[_BIO]](@BIO_s_mem[Pointer[U8]]()) if _output.is_null() then error end @SSL_set_bio[None](_ssl, _input, _output) if (_hostname.size() 0) and not DNS.is_ip4(_hostname) and not DNS.is_ip6(_hostname) then // SSL_set_tlsext_host_name @SSL_ctrl(_ssl, 55, 0, _hostname.cstring()) end if server then @SSL_set_accept_state[None](_ssl) else @SSL_set_connect_state[None](_ssl) @SSL_do_handshake[I32](_ssl) end fun box alpn_selected(): (ALPNProtocolName | None) = Get the protocol identifier negotiated via ALPN var ptr: Pointer[U8] iso = recover Pointer[U8] end var len = U32(0) ifdef openssl_1.1.0 then @SSL_get0_alpn_selected[None](_ssl, addressof ptr, addressof len) end if ptr.is_null() then None else recover val String.copy_cpointer(consume ptr, USize.from[U32](len)) end end fun state(): SSLState = Returns the SSL session state. _state fun ref read(expect: USize = 0): (Array[U8] iso^ | None) = Returns unencrypted bytes to be passed to the application. If `expect` is non-zero, the number of bytes returned will be exactly `expect`. If no data (or less than `expect` bytes) is available, this returns None. let offset = _read_buf.size() var len = if expect 0 then if offset = expect then return _read_buf = recover Array[U8] end end expect - offset else 1024 end let max = if expect 0 then expect - offset else USize.max_value() end let pending = @SSL_pending[I32](_ssl).usize() if pending 0 then if expect 0 then len = len.min(pending) else len = pending end _read_buf.undefined(offset + len) @SSL_read[I32](_ssl, _read_buf.cpointer().usize() + offset, len.i32()) else _read_buf.undefined(offset + len) let r = @SSL_read[I32](_ssl, _read_buf.cpointer().usize() + offset, len.i32()) if r = 0 then match @SSL_get_error[I32](_ssl, r) | 1 | 5 | 6 = _state = SSLError end _read_buf.truncate(offset) else _read_buf.truncate(offset + r.usize()) end end let ready = if expect == 0 then _read_buf.size() 0 else _read_buf.size() == expect end if ready then _read_buf = recover Array[U8] end else None end fun ref write(data: ByteSeq) ? = When application data is sent, add it to the SSL session. Raises an error if the handshake is not complete. if _state isnt SSLReady then error end if data.size() 0 then @SSL_write[I32](_ssl, data.cpointer(), data.size().u32()) end fun ref receive(data: ByteSeq) = When data is received, add it to the SSL session. @BIO_write[I32](_input, data.cpointer(), data.size().u32()) if _state is SSLHandshake then let r = @SSL_do_handshake[I32](_ssl) if r 0 then _verify_hostname() else match @SSL_get_error[I32](_ssl, r) | 1 = _state = SSLAuthFail | 5 | 6 = _state = SSLError end end end fun ref can_send(): Bool = Returns true if there are encrypted bytes to be passed to the destination. @BIO_ctrl_pending[USize](_output) 0 fun ref send(): Array[U8] iso^ ? = Returns encrypted bytes to be passed to the destination. Raises an error if no data is available. let len = @BIO_ctrl_pending[USize](_output) if len == 0 then error end let buf = recover Array[U8] . undefined(len) end @BIO_read[I32](_output, buf.cpointer(), buf.size().u32()) buf fun ref dispose() = Dispose of the session. if not _ssl.is_null() then @SSL_free[None](_ssl) _ssl = Pointer[_SSL] end fun _final() = Dispose of the session. if not _ssl.is_null() then @SSL_free[None](_ssl) end fun ref _verify_hostname() = Verify that the certificate is valid for the given hostname. if _hostname.size() 0 then let cert = @SSL_get_peer_certificate[Pointer[X509]](_ssl) let ok = X509.valid_for_host(cert, _hostname) if not cert.is_null() then @X509_free[None](cert) end if not ok then _state = SSLAuthFail return end end _state = SSLReady","title":"ssl.pony"},{"location":"src/net-ssl/ssl_connection/","text":"use collections use net class SSLConnection is TCPConnectionNotify Wrap another protocol in an SSL connection. let _notify: TCPConnectionNotify let _ssl: SSL var _connected: Bool = false var _expect: USize = 0 var _closed: Bool = false let _pending: List[ByteSeq] = _pending.create() new iso create(notify: TCPConnectionNotify iso, ssl: SSL iso) = Initialise with a wrapped protocol and an SSL session. _notify = consume notify _ssl = consume ssl fun ref accepted(conn: TCPConnection ref) = Forward to the wrapped protocol. _notify.accepted(conn) fun ref connecting(conn: TCPConnection ref, count: U32) = Forward to the wrapped protocol. _notify.connecting(conn, count) fun ref connected(conn: TCPConnection ref) = Swallow this event until the handshake is complete. _poll(conn) fun ref connect_failed(conn: TCPConnection ref) = Forward to the wrapped protocol. _notify.connect_failed(conn) fun ref sent(conn: TCPConnection ref, data: ByteSeq): ByteSeq = Pass the data to the SSL session and check for both new application data and new destination data. let notified = _notify.sent(conn, data) if _connected then try _ssl.write(notified)? else return end else _pending.push(notified) end _poll(conn) fun ref sentv(conn: TCPConnection ref, data: ByteSeqIter): ByteSeqIter = for bytes in data.values() do sent(conn, bytes) end recover val Array[ByteSeq] end fun ref received( conn: TCPConnection ref, data: Array[U8] iso, times: USize) : Bool = Pass the data to the SSL session and check for both new application data and new destination data. _ssl.receive(consume data) _poll(conn) true fun ref expect(conn: TCPConnection ref, qty: USize): USize = Keep track of the expect count for the wrapped protocol. Always tell the TCPConnection to read all available data. _expect = _notify.expect(conn, qty) 0 fun ref closed(conn: TCPConnection ref) = Forward to the wrapped protocol. _closed = true _poll(conn) _ssl.dispose() _connected = false _pending.clear() _notify.closed(conn) fun ref _poll(conn: TCPConnection ref) = Checks for both new application data and new destination data. Informs the wrapped protocol that is has connected when the handshake is complete. match _ssl.state() | SSLReady = if not _connected then _connected = true _notify.connected(conn) match _notify | let alpn_notify: ALPNProtocolNotify = alpn_notify.alpn_negotiated(conn, _ssl.alpn_selected()) end try while _pending.size() 0 do _ssl.write(_pending.shift()?)? end end end | SSLAuthFail = _notify.auth_failed(conn) if not _closed then conn.close() end return | SSLError = if not _closed then conn.close() end return end try var received_called: USize = 0 while true do let r = _ssl.read(_expect) if r isnt None then received_called = received_called + 1 _notify.received(conn, (consume r) as Array[U8] iso^, received_called) else break end end end try while _ssl.can_send() do conn.write_final(_ssl.send()?) end end","title":"ssl_connection.pony"},{"location":"src/net-ssl/ssl_context/","text":"use files use @SSL_CTX_ctrl[ILong]( ctx: Pointer[_SSLContext] tag, op: I32, arg: ULong, parg: Pointer[None]) use @SSLv23_method[Pointer[None]]() use @TLS_method[Pointer[None]]() use @SSL_CTX_new[Pointer[_SSLContext]](method: Pointer[None]) use @SSL_CTX_free[None](ctx: Pointer[_SSLContext] tag) use @SSL_CTX_clear_options[ULong](ctx: Pointer[_SSLContext] tag, opts: ULong) use @SSL_CTX_set_options[ULong](ctx: Pointer[_SSLContext] tag, opts: ULong) primitive _SSLContext primitive _SslCtrlSetOptions fun val apply(): I32 = 32 primitive _SslCtrlClearOptions fun val apply(): I32 = 77 // These are the SSL_OP_NO_{SSL|TLS}vx{_x} in ssl.h. // Since Pony doesn't allow underscore we use camel case // and began them with underscore to keep them private. // Also, in the version strings the v becomes V and // the underscore _ becomes u . So SSL_OP_NO_TLSv1_2 // _SslOpNo_TlsV1u2. primitive _SslOpNoSslV2 fun val apply(): ULong = 0x01000000 // 0 in 1.1 primitive _SslOpNoSslV3 fun val apply(): ULong = 0x02000000 primitive _SslOpNoTlsV1 fun val apply(): ULong = 0x04000000 primitive _SslOpNoTlsV1u2 fun val apply(): ULong = 0x08000000 primitive _SslOpNoTlsV1u1 fun val apply(): ULong = 0x10000000 primitive _SslOpNoTlsV1u3 fun val apply(): ULong = 0x20000000 primitive _SslOpNoDtlsV1 fun val apply(): ULong = 0x04000000 primitive _SslOpNoDtlsV1u2 fun val apply(): ULong = 0x08000000 // Defined as SSL_OP_NO_SSL_MASK in ssl.h primitive _SslOpNoSslMask fun val apply(): ULong = (_SslOpNoSslV3.apply() + _SslOpNoTlsV1.apply() + _SslOpNoTlsV1u1.apply() + _SslOpNoTlsV1u2.apply() + _SslOpNoTlsV1u3.apply()) // Defined as SSL_OP_NO_DTLS_MASK in ssl.h primitive _SslOpNoDtlsMask fun val apply(): ULong = (_SslOpNoDtlsV1.apply() + _SslOpNoDtlsV1u2.apply()) class val SSLContext An SSL context is used to create SSL sessions. var _ctx: Pointer[_SSLContext] tag var _client_verify: Bool = true var _server_verify: Bool = false new create() = Create an SSL context. ifdef openssl_1.1.0 then _ctx = @SSL_CTX_new(@TLS_method()) // Allow only newer ciphers. try set_min_proto_version(Tls1u2Version.apply())? set_max_proto_version(SslAutoVersion.apply())? end else _ctx = @SSL_CTX_new(@SSLv23_method()) // Disable all SSL/TSL options _set_options(_SslOpNoSslMask.apply() + _SslOpNoSslV2.apply()) // Allow only newer ciphers allow_tls_v1_2(true) end fun _set_options(opts: ULong) = ifdef openssl_1.1.0 then @SSL_CTX_set_options(_ctx, opts) else @SSL_CTX_ctrl(_ctx, _SslCtrlSetOptions.apply(), opts, Pointer[None]) end fun _clear_options(opts: ULong) = ifdef openssl_1.1.0 then @SSL_CTX_clear_options(_ctx, opts) else @SSL_CTX_ctrl(_ctx, _SslCtrlClearOptions.apply(), opts, Pointer[None]) end fun client(hostname: String = ): SSL iso^ ? = Create a client-side SSL session. If a hostname is supplied, the server side certificate must be valid for that hostname. let ctx = _ctx let verify = _client_verify recover SSL._create(ctx, false, verify, hostname)? end fun server(): SSL iso^ ? = Create a server-side SSL session. let ctx = _ctx let verify = _server_verify recover SSL._create(ctx, true, verify)? end fun ref set_cert(cert: FilePath, key: FilePath) ? = The cert file is a PEM certificate chain. The key file is a private key. Servers must set this. For clients, it is optional. if _ctx.is_null() or (cert.path.size() == 0) or (key.path.size() == 0) or (0 == @SSL_CTX_use_certificate_chain_file[I32]( _ctx, cert.path.cstring())) or (0 == @SSL_CTX_use_PrivateKey_file[I32]( _ctx, key.path.cstring(), I32(1))) or (0 == @SSL_CTX_check_private_key[I32](_ctx)) then error end fun ref set_authority( file: (FilePath | None), path: (FilePath | None) = None) ? = Use a PEM file and/or a directory of PEM files to specify certificate authorities. Clients must set this. For servers, it is optional. Use None to indicate no file or no path. Raises an error if these verify locations aren't valid, or if both are None. let fs = try (file as FilePath).path else end let ps = try (path as FilePath).path else end let f = if fs.size() 0 then fs.cstring() else Pointer[U8] end let p = if ps.size() 0 then ps.cstring() else Pointer[U8] end if _ctx.is_null() or (f.is_null() and p.is_null()) or (0 == @SSL_CTX_load_verify_locations[I32](_ctx, f, p)) then error end fun ref set_ciphers(ciphers: String) ? = Set the accepted ciphers. This replaces the existing list. Raises an error if the cipher list is invalid. if _ctx.is_null() or (0 == @SSL_CTX_set_cipher_list[I32](_ctx, ciphers.cstring())) then error end fun ref set_client_verify(state: Bool) = Set to true to require verification. Defaults to true. _client_verify = state fun ref set_server_verify(state: Bool) = Set to true to require verification. Defaults to false. _server_verify = state fun ref set_verify_depth(depth: U32) = Set the verify depth. Defaults to 6. if not _ctx.is_null() then @SSL_CTX_set_verify_depth[None](_ctx, depth) end fun ref set_min_proto_version(version: ULong) ? = Set minimum protocol version. Set to SslAutoVersion, 0, to automatically manage lowest version. Supported versions: Ssl3Version, Tls1Version, Tls1u1Version, Tls1u2Version, Tls1u3Version, Dtls1Version, Dtls1u2Version let result = @SSL_CTX_ctrl(_ctx, _SslCtrlSetMinProtoVersion.apply(), version, Pointer[None]) if result == 0 then error end fun ref get_min_proto_version(): ILong = Get minimum protocol version. Returns SslAutoVersion, 0, when automatically managing lowest version. Supported versions: Ssl3Version, Tls1Version, Tls1u1Version, Tls1u2Version, Tls1u3Version, Dtls1Version, Dtls1u2Version @SSL_CTX_ctrl(_ctx, _SslCtrlGetMinProtoVersion.apply(), 0, Pointer[None]) fun ref set_max_proto_version(version: ULong) ? = Set maximum protocol version. Set to SslAutoVersion, 0, to automatically manage higest version. Supported versions: Ssl3Version, Tls1Version, Tls1u1Version, Tls1u2Version, Tls1u3Version, Dtls1Version, Dtls1u2Version let result = @SSL_CTX_ctrl(_ctx, _SslCtrlSetMaxProtoVersion.apply(), version, Pointer[None]) if result == 0 then error end fun ref get_max_proto_version(): ILong = Get maximum protocol version. Returns SslAutoVersion, 0, when automatically managing highest version. Supported versions: Ssl3Version, Tls1Version, Tls1u1Version, Tls1u2Version, Tls1u3Version, Dtls1Version, Dtls1u2Version @SSL_CTX_ctrl(_ctx, _SslCtrlGetMaxProtoVersion.apply(), 0, Pointer[None]) fun ref alpn_set_resolver(resolver: ALPNProtocolResolver box): Bool = Use `resolver` to choose the protocol to be selected for incomming connections. Returns true on success Requires OpenSSL = 1.0.2 ifdef openssl_1.1.0 then @SSL_CTX_set_alpn_select_cb[None](_ctx, addressof SSLContext._alpn_select_cb, resolver) return true end false fun ref alpn_set_client_protocols(protocols: Array[String] box): Bool = Configures the SSLContext to advertise the protocol names defined in `protocols` when connecting to a server protocol names must have a size of 1 to 255 Returns true on success Requires OpenSSL = 1.0.2 ifdef openssl_1.1.0 then try let proto_list = _ALPNProtocolList.from_array(protocols)? let result = @SSL_CTX_set_alpn_protos[I32](_ctx, proto_list.cpointer(), proto_list.size()) return result == 0 end end false fun @_alpn_select_cb( ssl: Pointer[_SSL] tag, out: Pointer[Pointer[U8] tag] tag, outlen: Pointer[U8] tag, inptr: Pointer[U8] box, inlen: U32 val, resolver: ALPNProtocolResolver box) : I32 val = let proto_arr_str = String.copy_cpointer(inptr, USize.from[U32](inlen)) try let proto_arr = _ALPNProtocolList.to_array(proto_arr_str)? match resolver.resolve(proto_arr) | let matched: String val = var size = matched.size() if (size 0) and (size = 255) then var ptr = matched.cpointer() @memcpy[None](out, addressof ptr, size.bitwidth() / 8) @memcpy[None](outlen, addressof size, USize(1)) _ALPNMatchResultCode.ok() else _ALPNMatchResultCode.fatal() end | ALPNNoAck = _ALPNMatchResultCode.no_ack() | ALPNWarning = _ALPNMatchResultCode.warning() | ALPNFatal = _ALPNMatchResultCode.fatal() end else _ALPNMatchResultCode.fatal() end fun ref allow_tls_v1(state: Bool) = Allow TLS v1. Defaults to false. Deprecated: use set_min_proto_version and set_max_proto_version if not _ctx.is_null() then if state then _clear_options(_SslOpNoTlsV1.apply()) else _set_options(_SslOpNoTlsV1.apply()) end end fun ref allow_tls_v1_1(state: Bool) = Allow TLS v1.1. Defaults to false. Deprecated: use set_min_proto_version and set_max_proto_version if not _ctx.is_null() then if state then _clear_options(_SslOpNoTlsV1u1.apply()) else _set_options(_SslOpNoTlsV1u1.apply()) end end fun ref allow_tls_v1_2(state: Bool) = Allow TLS v1.2. Defaults to true. Deprecated: use set_min_proto_version and set_max_proto_version if not _ctx.is_null() then if state then _clear_options(_SslOpNoTlsV1u2.apply()) else _set_options(_SslOpNoTlsV1u2.apply()) end end fun ref dispose() = Free the SSL context. if not _ctx.is_null() then @SSL_CTX_free(_ctx) _ctx = Pointer[_SSLContext] end fun _final() = Free the SSL context. if not _ctx.is_null() then @SSL_CTX_free(_ctx) end","title":"ssl_context.pony"},{"location":"src/net-ssl/ssl_versions/","text":"primitive SslAutoVersion fun val apply(): ULong = 0x0 primitive Ssl3Version fun val apply(): ULong = 0x300 primitive Tls1Version fun val apply(): ULong = 0x301 primitive Tls1u1Version fun val apply(): ULong = 0x302 primitive Tls1u2Version fun val apply(): ULong = 0x303 primitive Tls1u3Version fun val apply(): ULong = 0x304 primitive Dtls1Version fun val apply(): ULong = 0xFEFF primitive Dtls1u2Version fun val apply(): ULong = 0xFEFD primitive TlsMinVersion fun val apply(): ULong = Tls1Version.apply() primitive TlsMaxVersion fun val apply(): ULong = Tls1u3Version.apply() primitive DtlsMinVersion fun val apply(): ULong = Dtls1Version.apply() primitive DtlsMaxVersion fun val apply(): ULong = Dtls1u2Version.apply()","title":"ssl_versions.pony"},{"location":"src/net-ssl/x509/","text":"use net use collections primitive _X509Name primitive _GeneralName primitive _GeneralNameStack primitive X509 fun valid_for_host(cert: Pointer[X509], host: String): Bool = Checks if an OpenSSL X509 certificate is valid for a given host. for name in all_names(cert).values() do if _match_name(host, name) then return true end end false fun common_name(cert: Pointer[X509]): String ? = Get the common name for the certificate. Raises an error if the common name contains any NULL bytes. if cert.is_null() then error end let subject = @X509_get_subject_name[Pointer[_X509Name]](cert) let len = @X509_NAME_get_text_by_NID[I32](subject, I32(13), Pointer[U8], I32(0)) if len 0 then error end let common = recover String(len.usize()) end @X509_NAME_get_text_by_NID[I32](subject, I32(13), common.cstring(), len + 1) common.recalc() if common.size() != len.usize() then error end common fun all_names(cert: Pointer[X509]): Array[String] val = Returns an array of all names for the certificate. Any names containing NULL bytes are not included. This includes the common name and all subject alternate names. let array = recover Array[String] end if cert.is_null() then return array end try array.push(common_name(cert)?) end let stack = @X509_get_ext_d2i[Pointer[_GeneralNameStack]](cert, I32(85), Pointer[U8], Pointer[U8]) if stack.is_null() then return array end var name = ifdef openssl_1.1.0 then @OPENSSL_sk_pop[Pointer[_GeneralName]](stack) else @sk_pop[Pointer[_GeneralName]](stack) end while not name.is_null() do var ptype = I32(0) let value = @GENERAL_NAME_get0_value[Pointer[U8] tag](name, addressof ptype) match ptype | 2 = // GEN_DNS // Check for V_ASN1_IA5STRING if @ASN1_STRING_type[I32](value) == 22 then try array.push( recover // Build a String from the ASN1 data. let data = @ASN1_STRING_data[Pointer[U8]](value) let len = @ASN1_STRING_length[I32](value) let s = String.copy_cstring(data) // If it contains NULL bytes, don't include it. if s.size() != len.usize() then error end consume s end) end end | 7 = // GEN_IPADD // Turn the IP address into a string. array.push( recover // Build a String from the ASN1 data. let data = @ASN1_STRING_data[Pointer[U8]](value) let len = @ASN1_STRING_length[I32](value) String.from_cstring(@pony_os_ip_string[Pointer[U8]](data, len)) end) end @GENERAL_NAME_free[None](name) ifdef openssl_1.1.0 then name = @OPENSSL_sk_pop[Pointer[_GeneralName]](stack) else name = @sk_pop[Pointer[_GeneralName]](stack) end end ifdef openssl_1.1.0 then @OPENSSL_sk_free[None](stack) else @sk_free[None](stack) end array fun _match_name(host: String, name: String): Bool = Returns true if the name extracted from the certificate is valid for the given host. if DNS.is_ip4(host) or DNS.is_ip6(host) then // If the host is a literal IP address, it must match exactly. return host == name end if host.compare_sub(name, name.size(), 0, 0, true) is Equal then // If the names are the same ignoring case, they match. return true end try if name(0)? == '*' then // The name has a wildcard. Must be followed by at least two // non-empty domain levels. if (name.size() 3) or (name(1)? != '.') or (name(2)? == '.') then return false end try // Find the second domain level and make sure it's followed by // something other than a dot. let offset = name.find( . , 3)? if name.at_offset(offset + 1)? == '.' then return false end end // Get the host domain. let domain = host.find( . )? // If the host domain is the wildcard domain ignoring case, they match. return host.compare_sub(name, name.size() - 1, domain, 1, true) is Equal end end false","title":"x509.pony"},{"location":"src/ponytest/_color/","text":"primitive _Color Strings to embedded in text to specify colours. These are copies of the strings defined in packages/term. They are duplicated here to avoid a dependency. fun reset(): String = Resets all colours and text styles to the default. \\x1B[0m fun red(): String = Bright red text. \\x1B[91m fun green(): String = Bright green text. \\x1B[92m","title":"_color.pony"},{"location":"src/ponytest/_group/","text":"trait tag _Group Test exclusion is achieved by organising tests into groups. Each group can be exclusive, ie only one test is run at a time, or simultaneous, ie all tests are run concurrently. be apply(runner: _TestRunner) Run the given test, or queue it and run later, as appropriate. be _test_complete(runner: _TestRunner) The specified test has completed. actor _ExclusiveGroup is _Group Test group in which we only ever have one test running at a time. embed _tests: Array[_TestRunner] = Array[_TestRunner] var _next: USize = 0 var _in_test:Bool = false be apply(runner: _TestRunner) = if _in_test then // We're already running one test, save this one for later _tests.push(runner) else // Run test now _in_test = true runner.run() end be _test_complete(runner: _TestRunner) = _in_test = false if _next _tests.size() then // We have queued tests, run the next one try let next_test = _tests(_next)? _next = _next + 1 _in_test = true next_test.run() end end actor _SimultaneousGroup is _Group Test group in which all tests can run concurrently. be apply(runner: _TestRunner) = // Just run the test runner.run() be _test_complete(runner: _TestRunner) = // We don't care about tests finishing None","title":"_group.pony"},{"location":"src/ponytest/pony_test/","text":"# PonyTest package The PonyTest package provides a unit testing framework. It is designed to be as simple as possible to use, both for the unit test writer and the user running the tests. To help simplify test writing and distribution this package depends on as few other packages as possible. Currently the required packages are: * builtin * time * collections Each unit test is a class, with a single test function. By default all tests run concurrently. Each test run is provided with a helper object. This provides logging and assertion functions. By default log messages are only shown for tests that fail. When any assertion function fails the test is counted as a fail. However, tests can also indicate failure by raising an error in the test function. ## Example program To use PonyTest simply write a class for each test and a TestList type that tells the PonyTest object about the tests. Typically the TestList will be Main for the package. The following is a complete program with 2 trivial tests. ```pony use ponytest actor Main is TestList new create(env: Env) = PonyTest(env, this) new make() = None fun tag tests(test: PonyTest) = test(_TestAdd) test(_TestSub) class iso _TestAdd is UnitTest fun name():String = addition fun apply(h: TestHelper) = h.assert_eq[U32](4, 2 + 2) class iso _TestSub is UnitTest fun name():String = subtraction fun apply(h: TestHelper) = h.assert_eq[U32](2, 4 - 2) ``` The make() constructor is not needed for this example. However, it allows for easy aggregation of tests (see below) so it is recommended that all test Mains provide it. Main.create() is called only for program invocations on the current package. Main.make() is called during aggregation. If so desired extra code can be added to either of these constructors to perform additional tasks. ## Test names Tests are identified by names, which are used when printing test results and on the command line to select which tests to run. These names are independent of the names of the test classes in the Pony source code. Arbitrary strings can be used for these names, but for large projects it is strongly recommended to use a hierarchical naming scheme to make it easier to select groups of tests. You can skip any tests whose names start with a given string by using the `--exclude=[prefix]` command line option. You can run only tests whose names start with a given string by using the `--only=[prefix]` command line option. ## Aggregation Often it is desirable to run a collection of unit tests from multiple different source files. For example, if several packages within a bundle each have their own unit tests it may be useful to run all tests for the bundle together. This can be achieved by writing an aggregate test list class, which calls the list function for each package. The following is an example that aggregates the tests from packages `foo` and `bar`. ```pony use ponytest use foo = foo use bar = bar actor Main is TestList new create(env: Env) = PonyTest(env, this) new make() = None fun tag tests(test: PonyTest) = foo.Main.make().tests(test) bar.Main.make().tests(test) ``` Aggregate test classes may themselves be aggregated. Every test list class may contain any combination of its own tests and aggregated lists. ## Long tests Simple tests run within a single function. When that function exits, either returning or raising an error, the test is complete. This is not viable for tests that need to use actors. Long tests allow for delayed completion. Any test can call long_test() on its TestHelper to indicate that it needs to keep running. When the test is finally complete it calls complete() on its TestHelper. The complete() function takes a Bool parameter to specify whether the test was a success. If any asserts fail then the test will be considered a failure regardless of the value of this parameter. However, complete() must still be called. Since failing tests may hang, a timeout must be specified for each long test. When the test function exits a timer is started with the specified timeout. If this timer fires before complete() is called the test is marked as a failure and the timeout is reported. On a timeout the timed_out() function is called on the unit test object. This should perform whatever test specific tidy up is required to allow the program to exit. There is no need to call complete() if a timeout occurs, although it is not an error to do so. Note that the timeout is only relevant when a test hangs and would otherwise prevent the test program from completing. Setting a very long timeout on tests that should not be able to hang is perfectly acceptable and will not make the test take any longer if successful. Timeouts should not be used as the standard method of detecting if a test has failed. ## Exclusion groups By default all tests are run concurrently. This may be a problem for some tests, eg if they manipulate an external file or use a system resource. To fix this issue any number of tests may be put into an exclusion group. No tests that are in the same exclusion group will be run concurrently. Exclusion groups are identified by name, arbitrary strings may be used. Multiple exclusion groups may be used and tests in different groups may run concurrently. Tests that do not specify an exclusion group may be run concurrently with any other tests. The command line option --sequential prevents any tests from running concurrently, regardless of exclusion groups. This is intended for debugging rather than standard use. ## Labels Test can have label. Labels are used to filter which tests are run, by setting command line argument `--label=[some custom label]`. It can be used to separate unit tests from integration tests. By default label is empty. You can set it up by overriding `label(): String` method in unit test. ```pony use ponytest class iso _I8AddTest is UnitTest fun name(): String = _I8AddTest fun label(): String = simple fun apply(h: TestHelper) = h.assert_eq[I8](1, 1) ``` ## Setting up and tearing down a test environment ### Set Up Any kind of fixture or environment necessary for executing a [UnitTest](ponytest-UnitTest) can be set up either in the tests constructor or in a function called [set_up()](ponytest-UnitTest#set_up). [set_up()](ponytest-UnitTest#set_up) is called before the test is executed. It is partial, if it errors, the test is not executed but reported as failing during set up. The test's [TestHelper](ponytest-TestHelper) is handed to [set_up()](ponytest-UnitTest#set_up) in order to log messages or access the tests [Env](builtin-Env) via [TestHelper.env](ponytest-TestHelper#let-env-env-val). ### Tear Down Each unit test object may define a [tear_down()](ponytest-UnitTest#tear_down) function. This is called after the test has finished to allow tearing down of any complex environment that had to be set up for the test. The [tear_down()](ponytest-UnitTest#tear_down) function is called for each test regardless of whether it passed or failed. If a test times out [tear_down()](ponytest-UnitTest#tear_down) will be called after timed_out() returns. When a test is in an exclusion group, the [tear_down()](ponytest-UnitTest#tear_down) call is considered part of the tests run. The next test in the exclusion group will not start until after [tear_down()](ponytest-UnitTest#tear_down) returns on the current test. The test's [TestHelper](ponytest-TestHelper) is handed to [tear_down()](ponytest-UnitTest#tear_down) and it is permitted to log messages and call assert functions during tear down. ### Example The following example creates a temporary directory in the [set_up()](ponytest-UnitTest#set_up) function and removes it in the [tear_down()](ponytest-UnitTest#tear_down) function, thus simplifying the test function itself: ```pony use ponytest use files class iso TempDirTest var tmp_dir: (FilePath | None) = None fun name(): String = temp-dir fun ref set_up(h: TestHelper)? = tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, temp-dir )? fun ref tear_down(h: TestHelper) = try (tmp_dir as FilePath).remove() end fun apply(h: TestHelper)? = let dir = tmp_dir as FilePath // do something inside the temporary directory ``` use time actor PonyTest Main test framework actor that organises tests, collates information and prints results. embed _groups: Array[(String, _Group)] = Array[(String, _Group)] embed _records: Array[_TestRecord] = Array[_TestRecord] let _env: Env let _timers: Timers = Timers var _do_nothing: Bool = false var _verbose: Bool = false var _sequential: Bool = false var _no_prog: Bool = false var _list_only: Bool = false var _started: USize = 0 var _finished: USize = 0 var _any_found: Bool = false var _all_started: Bool = false // Filtering options var _exclude: String = var _label: String = var _only: String = new create(env: Env, list: TestList tag) = Create a PonyTest object and use it to run the tests from the given TestList _env = env _process_opts() _groups.push(( , _SimultaneousGroup)) list.tests(this) _all_tests_applied() be apply(test: UnitTest iso) = Run the given test, subject to our filters and options. if _do_nothing then return end var name = test.name() // Ignore any tests that satisfy our exclude filter if (_exclude != ) and name.at(_exclude, 0) then return end // Ignore any tests that don't satisfy our only filter if (_only != ) and (not name.at(_only, 0)) then return end // Ignore tests when label arg is set and test label doesn't match if (_label != ) and (_label != test.label()) then return end _any_found = true if _list_only then // Don't actually run tests, just list them _env.out.print(name) return end var index = _records.size() _records.push(_TestRecord(_env, name)) var group = _find_group(test.exclusion_group()) group(_TestRunner(this, index, consume test, group, _verbose, _env, _timers)) fun ref _find_group(group_name: String): _Group = Find the group to use for the given group name, subject to the --sequential flag. var name = group_name if _sequential then // Use the same group for all tests. name = all end for g in _groups.values() do if g._1 == name then return g._2 end end // Group doesn't exist yet, make it. // We only need one simultaneous group, which we've already made. All new // groups are exclusive. let g = _ExclusiveGroup _groups.push((name, g)) g be _test_started(id: USize) = A test has started running, update status info. The id parameter is the test identifier handed out when we created the test helper. _started = _started + 1 try if not _no_prog then _env.out.print( _started.string() + test + _plural(_started) + started, + _finished.string() + complete: + _records(id)?.name + started ) end end be _test_complete(id: USize, pass: Bool, log: Array[String] val) = A test has completed, restore its result and update our status info. The id parameter is the test identifier handed out when we created the test helper. _finished = _finished + 1 try _records(id)?._result(pass, log) if not _no_prog then _env.out.print( _started.string() + test + _plural(_started) + started, + _finished.string() + complete: + _records(id)?.name + complete ) end end if _all_started and (_finished == _records.size()) then // All tests have completed _print_report() end be _all_tests_applied() = All our tests have been handed to apply(), setup for finishing if _do_nothing then return end if not _any_found then // No tests left after applying our filters _env.out.print( No tests found ) return end if _list_only then // No tests to run return end _all_started = true if _finished == _records.size() then // All tests have completed _print_report() end fun ref _process_opts() = Process our command line options. All command line arguments given must be recognised and make sense. State for specified options is stored in object fields. We don't use the options package because we aren't already dependencies. var exe_name = for arg in _env.args.values() do if exe_name == then exe_name = arg continue end if arg == --sequential then _sequential = true elseif arg == --verbose then _verbose = true elseif arg == --noprog then _no_prog = true elseif arg == --list then _list_only = true elseif arg.compare_sub( --exclude= , 10) is Equal then _exclude = arg.substring(10) elseif arg.compare_sub( --label= , 8) is Equal then _label = arg.substring(8) elseif arg.compare_sub( --only= , 7) is Equal then _only = arg.substring(7) else _env.out.print( Unrecognised argument \\ + arg + \\ ) _env.out.print( ) _env.out.print( Usage: ) _env.out.print( + exe_name + [options] ) _env.out.print( ) _env.out.print( Options: ) _env.out.print( --exclude=prefix - Don't run tests whose names + start with the given prefix. ) _env.out.print( --only=prefix - Only run tests whose names + start with the given prefix. ) _env.out.print( --verbose - Show all test output. ) _env.out.print( --sequential - Run tests sequentially. ) _env.out.print( --noprog - Do not print progress messages. ) _env.out.print( --list - List but do not run tests. ) _env.out.print( --label=label - Only run tests with given label ) _do_nothing = true return end end fun _print_report() = The tests are all complete, print out the results. var pass_count: USize = 0 var fail_count: USize = 0 // First we print the result summary for each test, in the order that they // were given to us. for rec in _records.values() do if rec._report(_verbose) then pass_count = pass_count + 1 else fail_count = fail_count + 1 end end // Next we print the pass / fail stats. _env.out.print( ---- ) _env.out.print( ---- + _records.size().string() + test + _plural(_records.size()) + ran. ) _env.out.print(_Color.green() + ---- Passed: + pass_count.string() + _Color.reset()) if fail_count == 0 then // Success, nothing failed. return end // Not everything passed. _env.out.print(_Color.red() + **** FAILED: + fail_count.string() + test + _plural(fail_count) + , listed below: + _Color.reset()) // Finally print our list of failed tests. for rec in _records.values() do rec._list_failed() end _env.exitcode(-1) fun _plural(n: USize): String = Return a s or an empty string depending on whether the given number is 1. For use when printing possibly plural words, eg test or tests . if n == 1 then else s end","title":"pony_test.pony"},{"location":"src/ponytest/test_helper/","text":"interface ITest fun apply() ? class val TestHelper Per unit test class that provides control, logging and assertion functions. Each unit test is given a TestHelper when it is run. This is val and so can be passed between methods and actors within the test without restriction. The assertion functions check the relevant condition and mark the test as a failure if appropriate. The success or failure of the condition is reported back as a Bool which can be checked if a different code path is needed when that condition fails. All assert functions take an optional message argument. This is simply a string that is printed as part of the error message when the condition fails. It is intended to aid identifying what failed. let _runner: _TestRunner let env: Env The process environment. This is useful for getting the [root authority](builtin-AmbientAuth) in order to access the filesystem (See [files](files--index)) or the network (See [net](net--index)) in your tests. new val _create(runner: _TestRunner, env': Env) = Create a new TestHelper. env = env' _runner = runner fun log(msg: String, verbose: Bool = false) = Log the given message. The verbose parameter allows messages to be printed only when the --verbose command line option is used. For example, by default assert failures are logged, but passes are not. With --verbose both passes and fails are reported. Logs are printed one test at a time to avoid interleaving log lines from concurrent tests. _runner.log(msg, verbose) fun fail(msg: String = Test failed ) = Flag the test as having failed. _runner.fail(msg) fun assert_true(actual: Bool, msg: String = , loc: SourceLoc = __loc) : Bool = Assert that the given expression is true. if not actual then fail(_format_loc(loc) + Assert true failed. + msg) return false end log(_format_loc(loc) + Assert true passed. + msg, true) true fun assert_false(actual: Bool, msg: String = , loc: SourceLoc = __loc) : Bool = Assert that the given expression is false. if actual then fail(_format_loc(loc) + Assert false failed. + msg) return false end log(_format_loc(loc) + Assert false passed. + msg, true) true fun assert_error(test: ITest box, msg: String = , loc: SourceLoc = __loc) : Bool = Assert that the given test function throws an error when run. try test()? fail(_format_loc(loc) + Assert error failed. + msg) false else log(_format_loc(loc) + Assert error passed. + msg, true) true end fun assert_no_error( test: ITest box, msg: String = , loc: SourceLoc = __loc) : Bool = Assert that the gived test function does not throw an error when run. try test()? log(_format_loc(loc) + Assert no error passed. + msg, true) true else fail(_format_loc(loc) + Assert no error failed. + msg) true end fun assert_is[A]( expect: A, actual: A, msg: String = , loc: SourceLoc = __loc) : Bool = Assert that the 2 given expressions resolve to the same instance _check_is[A]( is , consume expect, consume actual, msg, loc) fun _check_is[A]( check: String, expect: A, actual: A, msg: String, loc: SourceLoc) : Bool = Check that the 2 given expressions resolve to the same instance if expect isnt actual then fail(_format_loc(loc) + Assert + check + failed. + msg + Expected ( + (digestof expect).string() + ) is ( + (digestof actual).string() + ) ) return false end log( _format_loc(loc) + Assert + check + passed. + msg + Got ( + (digestof expect).string() + ) is ( + (digestof actual).string() + ) , true) true fun assert_eq[A: (Equatable[A] #read Stringable #read)] (expect: A, actual: A, msg: String = , loc: SourceLoc = __loc): Bool = Assert that the 2 given expressions are equal. _check_eq[A]( eq , expect, actual, msg, loc) fun _check_eq[A: (Equatable[A] #read Stringable)] (check: String, expect: A, actual: A, msg: String, loc: SourceLoc) : Bool = Check that the 2 given expressions are equal. if expect != actual then fail(_format_loc(loc) + Assert + check + failed. + msg + Expected ( + expect.string() + ) == ( + actual.string() + ) ) return false end log(_format_loc(loc) + Assert + check + passed. + msg + Got ( + expect.string() + ) == ( + actual.string() + ) , true) true fun assert_isnt[A]( not_expect: A, actual: A, msg: String = , loc: SourceLoc = __loc) : Bool = Assert that the 2 given expressions resolve to different instances. _check_isnt[A]( isn't , consume not_expect, consume actual, msg, loc) fun _check_isnt[A]( check: String, not_expect: A, actual: A, msg: String, loc: SourceLoc) : Bool = Check that the 2 given expressions resolve to different instances. if not_expect is actual then fail(_format_loc(loc) + Assert + check + failed. + msg + Expected ( + (digestof not_expect).string() + ) isnt ( + (digestof actual).string() + ) ) return false end log( _format_loc(loc) + Assert + check + passed. + msg + Got ( + (digestof not_expect).string() + ) isnt ( + (digestof actual).string() + ) , true) true fun assert_ne[A: (Equatable[A] #read Stringable #read)] (not_expect: A, actual: A, msg: String = , loc: SourceLoc = __loc): Bool = Assert that the 2 given expressions are not equal. _check_ne[A]( ne , not_expect, actual, msg, loc) fun _check_ne[A: (Equatable[A] #read Stringable)] (check: String, not_expect: A, actual: A, msg: String, loc: SourceLoc) : Bool = Check that the 2 given expressions are not equal. if not_expect == actual then fail(_format_loc(loc) + Assert + check + failed. + msg + Expected ( + not_expect.string() + ) != ( + actual.string() + ) ) return false end log( _format_loc(loc) + Assert + check + passed. + msg + Got ( + not_expect.string() + ) != ( + actual.string() + ) , true) true fun assert_array_eq[A: (Equatable[A] #read Stringable #read)]( expect: ReadSeq[A], actual: ReadSeq[A], msg: String = , loc: SourceLoc = __loc) : Bool = Assert that the contents of the 2 given ReadSeqs are equal. var ok = true if expect.size() != actual.size() then ok = false else try var i: USize = 0 while i expect.size() do if expect(i)? != actual(i)? then ok = false break end i = i + 1 end else ok = false end end if not ok then fail(_format_loc(loc) + Assert EQ failed. + msg + Expected ( + _print_array[A](expect) + ) == ( + _print_array[A](actual) + ) ) return false end log( _format_loc(loc) + Assert EQ passed. + msg + Got ( + _print_array[A](expect) + ) == ( + _print_array[A](actual) + ) , true) true fun assert_array_eq_unordered[A: (Equatable[A] #read Stringable #read)]( expect: ReadSeq[A], actual: ReadSeq[A], msg: String = , loc: SourceLoc = __loc) : Bool = Assert that the contents of the 2 given ReadSeqs are equal ignoring order. try let missing = Array[box- A] let consumed = Array[Bool].init(false, actual.size()) for e in expect.values() do var found = false var i: USize = -1 for a in actual.values() do i = i + 1 if consumed(i)? then continue end if e == a then consumed.update(i, true)? found = true break end end if not found then missing.push(e) end end let extra = Array[box- A] for (i, c) in consumed.pairs() do if not c then extra.push(actual(i)?) end end if (extra.size() != 0) or (missing.size() != 0) then fail( _format_loc(loc) + Assert EQ_UNORDERED failed. + msg + Expected ( + _print_array[A](expect) + ) == ( + _print_array[A](actual) + ): + \\nMissing: + _print_array[box- A](missing) + \\nExtra: + _print_array[box- A](extra)) return false end log( _format_loc(loc) + Assert EQ_UNORDERED passed. + msg + Got ( + _print_array[A](expect) + ) == ( + _print_array[A](actual) + ) , true) true else fail( Assert EQ_UNORDERED failed from an internal error. ) false end fun _format_loc(loc: SourceLoc): String = loc.file() + : + loc.line().string() + : fun _print_array[A: Stringable #read](array: ReadSeq[A]): String = Generate a printable string of the contents of the given readseq to use in error messages. [len= + array.size().string() + : + , .join(array.values()) + ] fun long_test(timeout: U64) = Indicate that this is a long running test that may continue after the test function exits. Once this function is called, complete() must be called to finish the test, unless a timeout occurs. The timeout is specified in nanseconds. _runner.long_test(timeout) fun complete(success: Bool) = MUST be called by each long test to indicate the test has finished, unless a timeout occurs. The success parameter specifies whether the test succeeded. However if any asserts fail the test will be considered a failure, regardless of the value of this parameter. Once this is called tear_down() may be called at any time. _runner.complete(success) fun expect_action(name: String) = Can be called in a long test to set up expectations for one or more actions that, when all completed, will complete the test. This pattern is useful for cases where you have multiple things that need to happen to complete your test, but don't want to have to collect them all yourself into a single actor that calls the complete method. The order of calls to expect_action don't matter - the actions may be completed in any other order to complete the test. _runner.expect_action(name) fun complete_action(name: String) = MUST be called for each action expectation that was set up in a long test to fulfill the expectations. Any expectations that are still outstanding when the long test timeout runs out will be printed by name when it fails. Completing all outstanding actions is enough to finish the test. There's no need to also call the complete method when the actions are finished. Calling the complete method will finish the test immediately, without waiting for any outstanding actions to be completed. _runner.complete_action(name, true) fun fail_action(name: String) = Call to fail an action, which will also cause the entire test to fail immediately, without waiting the rest of the outstanding actions. The name of the failed action will be included in the failure output. Usually the action name should be an expected action set up by a call to expect_action, but failing unexpected actions will also fail the test. _runner.complete_action(name, false) fun dispose_when_done(disposable: DisposableActor) = Pass a disposable actor to be disposed of when the test is complete. The actor will be disposed no matter whether the test succeeds or fails. If the test is already tearing down, the actor will be disposed immediately. _runner.dispose_when_done(disposable)","title":"test_helper.pony"},{"location":"src/ponytest/test_list/","text":"trait TestList Source of unit tests for a PonyTest object. See package doc string for further information and example use. fun tag tests(test: PonyTest) Add all the tests in this suite to the given test object. Typically the implementation of this function will be of the form: ```pony fun tests(test: PonyTest) = test(_TestClass1) test(_TestClass2) test(_TestClass3) ```","title":"test_list.pony"},{"location":"src/ponytest/unit_test/","text":"trait UnitTest Each unit test class must provide this trait. Simple tests only need to define the name() and apply() functions. The remaining functions specify additional test options. fun name(): String Report the test name, which is used when printing test results and on the command line to select tests to run. fun exclusion_group(): String = Report the test exclusion group, returning an empty string for none. The default body returns an empty string. fun ref apply(h: TestHelper) ? Run the test. Raising an error is interpreted as a test failure. fun ref timed_out(h: TestHelper) = Tear down a possibly hanging test. Called when the timeout specified by to long_test() expires. There is no need for this function to call complete(false). tear_down() will still be called after this completes. The default is to do nothing. None fun ref set_up(h: TestHelper) ? = Set up the testing environment before a test method is called. Default is to do nothing. None fun ref tear_down(h: TestHelper) = Tidy up after the test has completed. Called for each run test, whether that test passed, succeeded or timed out. The default is to do nothing. None fun label(): String = Report the test label, returning an empty string for none. It can be later use to filter tests which we want to run, by labels.","title":"unit_test.pony"},{"location":"src/promises/_then/","text":"class _Then[A: Any #share, B: Any #share] A step in a promise pipeline. let _fulfill: Fulfill[A, B] let _rejected: Reject[B] let _promise: Promise[B] var _active: Bool = true new iso create(fulfill: Fulfill[A, B], rejected: Reject[B]) = A step is represented by a fulfill function and a reject function. _fulfill = consume fulfill _rejected = consume rejected _promise = Promise[B] fun promise(): Promise[B] = Returns the next promise in the chain. _promise fun ref apply(value: A) = Called with the result of the previous promise when it is fulfilled. if _active then _active = false try _promise(_fulfill(value)?) else _promise.reject() end end fun ref reject() = Called when the previous promise is rejected. if _active then _active = false try _promise(_rejected()?) else _promise.reject() end end interface _IThen[A: Any #share] An interface representing an abstract Then. This allows for any Then that accepts an input of type A, regardless of the output type. fun ref apply(value: A) fun ref reject()","title":"_then.pony"},{"location":"src/promises/fulfill/","text":"primitive _Pending primitive _Reject interface iso Fulfill[A: Any #share, B: Any #share] A function from A to B that is called when a promise is fulfilled. fun ref apply(value: A): B ? interface iso Reject[A: Any #share] A function on A that is called when a promise is rejected. fun ref apply(): A ? class iso FulfillIdentity[A: Any #share] An identity function for fulfilling promises. fun ref apply(value: A): A = consume value class iso RejectAlways[A: Any #share] A reject that always raises an error. fun ref apply(): A ? = error","title":"fulfill.pony"},{"location":"src/promises/promise/","text":"# Promises Package A `Promise` represents a value that will be available at a later time. `Promise`s can either be fulfilled with a value or rejected. Any number of function handlers can be added to the `Promise`, to be called when the `Promise` is fulfilled or rejected. These handlers themselves are also wrapped in `Promise`s so that they can be chained together in order for the fulfilled value of one `Promise` to be used to compute a value which will be used to fulfill the next `Promise` in the chain, or so that if the `Promise` is rejected then the subsequent reject functions will also be called. The input and output types of a fulfill handler do not have to be the same, so a chain of fulfill handlers can transform the original value into something new. Fulfill and reject handlers can either be specified as classes that implment the `Fulfill` and `Reject` interfaces, or as functions with the same signatures as the `apply` methods in `Fulfill` and `Reject`. In the following code, the fulfillment of the `Promise` causes the execution of several fulfillment functions. The output is: ``` fulfilled + foo fulfilled + bar fulfilled + baz ``` ```pony use promises class PrintFulfill is Fulfill[String, String] let _env: Env let _msg: String new create(env: Env, msg: String) = _env = env _msg = msg fun apply(s: String): String = _env.out.print( + .join([s; _msg].values())) s actor Main new create(env: Env) = let promise = Promise[String] promise.next[String](recover PrintFulfill(env, foo ) end) promise.next[String](recover PrintFulfill(env, bar ) end) promise.next[String](recover PrintFulfill(env, baz ) end) promise( fulfilled ) ``` In the following code, the fulfill functions are chained together so that the fulfilled value of the first one is used to generate a value which fulfills the second one, which in turn is used to compute a value which fulfills the third one, which in turn is used to compute a value which fulfills the fourth one. The output is the average length of the words passed on the command line or `0` if there are no command line arguments. ```pony use promises primitive Computation fun tag string_to_strings(s: String): Array[String] val = recover s.split() end fun tag strings_to_sizes(sa: Array[String] val): Array[USize] val = recover let len = Array[USize] for s in sa.values() do len.push(s.size()) end len end fun tag sizes_to_avg(sza: Array[USize] val): USize = var acc = USize(0) for sz in sza.values() do acc = acc + sz end acc / sza.size() fun tag output(env: Env, sz: USize): None = env.out.print(sz.string()) actor Main new create(env: Env) = let promise = Promise[String] promise.next[Array[String] val](recover Computation~string_to_strings() end) .next[Array[USize] val](recover Computation~strings_to_sizes() end) .next[USize](recover Computation~sizes_to_avg() end) .next[None](recover Computation~output(env) end) promise( .join(env.args.slice(1).values())) ``` use time actor Promise[A: Any #share] A promise to eventually produce a result of type A. This promise can either be fulfilled or rejected. Any number of promises can be chained after this one. var _value: (_Pending | _Reject | A) = _Pending embed _list: Array[_IThen[A]] = _list.create() be apply(value: A) = Fulfill the promise. if _value isnt _Pending then return end _value = value for f in _list.values() do f(value) end _list.clear() be reject() = Reject the promise. if _value isnt _Pending then return end _value = _Reject for f in _list.values() do f.reject() end _list.clear() fun tag next[B: Any #share]( fulfill: Fulfill[A, B], rejected: Reject[B] = RejectAlways[B]) : Promise[B] = Chain a promise after this one. When this promise is fulfilled, the result of type A is passed to the fulfill function, generating in an intermediate result of type B. This is then used to fulfill the next promise in the chain. If there is no fulfill function, or if the fulfill function raises an error, then the next promise in the chain will be rejected. If this promise is rejected, this step's reject function is called with no input, generating an intermediate result of type B which is used to fulfill the next promise in the chain. If there is no reject function, of if the reject function raises an error, then the next promise in the chain will be rejected. let attach = _Then[A, B](consume fulfill, consume rejected) let promise = attach.promise() _attach(consume attach) promise fun tag add[B: Any #share = A](p: Promise[B]): Promise[(A, B)] = Add two promises into one promise that returns the result of both when they are fulfilled. If either of the promises is rejected then the new promise is also rejected. let p' = Promise[(A, B)] let c = object var _a: (A | _None) = _None var _b: (B | _None) = _None be fulfill_a(a: A) = match _b | let b: B = p'((a, b)) else _a = a end be fulfill_b(b: B) = match _a | let a: A = p'((a, b)) else _b = b end end next[None]( {(a) = c.fulfill_a(a) }, {() = p'.reject() }) p.next[None]( {(b) = c.fulfill_b(b) }, {() = p'.reject() }) p' fun tag join(ps: Iterator[Promise[A]]): Promise[Array[A] val] = Create a promise that is fulfilled when the receiver and all promises in the given iterator are fulfilled. If the receiver or any promise in the sequence is rejected then the new promise is also rejected. Join `p1` and `p2` with an existing promise, `p3`. ```pony use promises actor Main new create(env: Env) = let p1 = Promise[String val] let p2 = Promise[String val] let p3 = Promise[String val] p3.join([p1; p2].values()) .next[None]({(a: Array[String val] val) = for s in a.values() do env.out.print(s) end }) p2( second ) p3( third ) p1( first ) ``` Promises[A].join( [this] . concat(ps) .values()) fun tag select(p: Promise[A]): Promise[(A, Promise[A])] = Return a promise that is fulfilled when either promise is fulfilled, resulting in a tuple of its value and the other promise. let p' = Promise[(A, Promise[A])] let s = object tag var _complete: Bool = false let _p: Promise[(A, Promise[A])] = p' be apply(a: A, p: Promise[A]) = if not _complete then _p((a, p)) _complete = true end end next[None]({(a) = s(a, p) }) p.next[None]({(a)(p = this) = s(a, p) }) p' fun tag timeout(expiration: U64) = Reject the promise after the given expiration in nanoseconds. Timers.apply(Timer( object iso is TimerNotify let _p: Promise[A] = this fun ref apply(timer: Timer, count: U64): Bool = _p.reject() false end, expiration)) be _attach(attach: _IThen[A] iso) = Attaches a step asynchronously. If this promise has already been fulfilled or rejected, immediately fulfill or reject the incoming step. Otherwise, keep it in a list. if _value is _Pending then _list.push(consume attach) elseif _value is _Reject then attach.reject() else try attach(_value as A) end end primitive Promises[A: Any #share] fun join(ps: Iterator[Promise[A]]): Promise[Array[A] val] = Create a promise that is fulfilled when all promises in the given sequence are fulfilled. If any promise in the sequence is rejected then the new promise is also rejected. The order that values appear in the final array is based on when each promise is fulfilled and not the order that they are given. Join three existing promises to make a fourth. ```pony use promises actor Main new create(env: Env) = let p1 = Promise[String val] let p2 = Promise[String val] let p3 = Promise[String val] Promises[String val].join([p1; p2; p3].values()) .next[None]({(a: Array[String val] val) = for s in a.values() do env.out.print(s) end }) p2( second ) p3( third ) p1( first ) ``` let p' = Promise[Array[A] val] let ps' = Array[Promise[A]] . concat(consume ps) if ps'.size() == 0 then p'(recover Array[A] end) return p' end let j = _Join[A](p', ps'.size()) for p in ps'.values() do p.next[None]({(a)(j) = j(a)}, {() = p'.reject()}) end p' actor _Join[A: Any #share] embed _xs: Array[A] let _space: USize let _p: Promise[Array[A] val] new create(p: Promise[Array[A] val], space: USize) = (_xs, _space, _p) = (Array[A](space), space, p) be apply(a: A) = _xs.push(a) if _xs.size() == _space then let len = _xs.size() let xs = recover Array[A](len) end for x in _xs.values() do xs.push(x) end _p(consume xs) end primitive _None","title":"promise.pony"},{"location":"src/random/dice/","text":"class Dice A simple dice roller. var r: Random new create(from: Random) = Initialise with a random number generator. r = from fun ref apply(count: U64, sides: U64): U64 = Return the sum of `count` rolls of a die with the given number of `sides`. The die is numbered from 1 to `sides`. For example, count = 2 and sides = 6 will return a value between 2 and 12. var sum = count var i: U64 = 0 while i count do sum = sum + r.int(sides) i = i + 1 end sum","title":"dice.pony"},{"location":"src/random/mt/","text":"class MT is Random A Mersenne Twister. This is a non-cryptographic random number generator. This should only be used for legacy applications that require a Mersenne Twister, otherwise use Rand. embed _state: Array[U64] var _index: USize new create(x: U64 = 5489, y: U64 = 0) = Create with the specified seed. Returned values are deterministic for a given seed. _state = Array[U64](_n()) _index = _n() var seed = x xor y _state.push(seed) var i: USize = 1 while i _n() do seed = ((seed xor (seed 62)) * 6364136223846793005) + i.u64() _state.push(seed) i = i + 1 end fun ref next(): U64 = A random integer in [0, 2^64) if _index = _n() then _populate() end try var x = _state(_index)? _index = _index + 1 x = x xor ((x 29) and 0x5555555555555555) x = x xor ((x 17) and 0x71d67fffeda60000) x = x xor ((x 37) and 0xfff7eee000000000) x xor (x 43) else 0 end fun ref _populate() = Repopulates the state array. try _index = 0 var x = _state(0)? var i: USize = 0 while i _m() do x = _lower(i, x)? i = i + 1 end x = _state(_m())? i = _m() while i _n1() do x = _upper(i, x)? i = i + 1 end _wrap()? end fun tag _n(): USize = 312 fun tag _m(): USize = 156 fun tag _n1(): USize = _n() - 1 fun tag _mask(x: U64, y: U64): U64 = (x and 0xffffffff80000000) or (y and 0x000000007fffffff) fun tag _matrix(x: U64): U64 = (x and 1) * 0xb5026f5aa96619e9 fun tag _mix(x: U64, y: U64): U64 = let z = _mask(x, y) (z 1) xor _matrix(z) fun ref _lower(i: USize, x: U64): U64 ? = let y = _state(i + 1)? _state(i)? = _state(i + _m())? xor _mix(x, y) y fun ref _upper(i: USize, x: U64): U64 ? = let y = _state(i + 1)? _state(i)? = _state(i - _m())? xor _mix(x, y) y fun ref _wrap(): U64 ? = let x = _state(_n1())? let y = _state(0)? _state(_n1())? = _state(_m() - 1)? xor _mix(x, y) y","title":"mt.pony"},{"location":"src/random/random/","text":"# Random package The Random package provides support generating random numbers. The package provides random number generators you can use in your code, a dice roller and a trait for implementing your own random number generator. If your application does not require a specific generator, use Rand. Seed values can contain up to 128 bits of randomness in the form of two U64s. A common non-cryptographically secure way to seed a generator is with `Time.now`. ```pony let rand = Rand let n = rand.next() ``` type Rand is XorOshiro128Plus trait Random The `Random` trait should be implemented by all random number generators. The only method you need to implement is `fun ref next(): 64`. Once that method has been implemented, the `Random` trait provides default implementations of conversions to other number types. new create(x: U64 = 5489, y: U64 = 0) Create with the specified seed. Returned values are deterministic for a given seed. fun tag has_next(): Bool = If used as an iterator, this always has another value. true fun ref next(): U64 A random integer in [0, 2^64) fun ref u8(): U8 = A random integer in [0, 2^8) (next() 56).u8() fun ref u16(): U16 = A random integer in [0, 2^16) (next() 48).u16() fun ref u32(): U32 = A random integer in [0, 2^32) (next() 32).u32() fun ref u64(): U64 = A random integer in [0, 2^64) next() fun ref u128(): U128 = A random integer in [0, 2^128) (next().u128() 64) or next().u128() fun ref ulong(): ULong = A random integer in [0, ULong.max_value()] ifdef ilp32 or llp64 then (next() 32).ulong() else next().ulong() end fun ref usize(): USize = A random integer in [0, USize.max_value()] ifdef ilp32 then (next() 32).usize() else next().usize() end fun ref i8(): I8 = A random integer in [-2^7, 2^7) u8().i8() fun ref i16(): I16 = A random integer in [-2^15, 2^15) u16().i16() fun ref i32(): I32 = A random integer in [-2^31, 2^31) u32().i32() fun ref i64(): I64 = A random integer in [-2^63, 2^63) u64().i64() fun ref i128(): I128 = A random integer in [-2^127, 2^127) u128().i128() fun ref ilong(): ILong = A random integer in [ILong.min_value(), ILong.max_value()] ulong().ilong() fun ref isize(): ISize = A random integer in [ISize.min_value(), ISize.max_value()] usize().isize() fun ref int[N: (Unsigned val Real[N] val) = U64](n: N): N = A random integer in [0, n) N.from[F64](real() * n.f64()) fun ref real(): F64 = A random number in [0, 1) (next() 11).f64() * (F64(1) / 9007199254740992) fun ref shuffle[A](array: Array[A]) = Shuffle the elements of the array into a random order, mutating the array. var i: USize = array.size() try while i 1 do let ceil = i = i - 1 array.swap_elements(i, int[USize](ceil))? end end","title":"random.pony"},{"location":"src/random/xoroshiro/","text":"class XorOshiro128Plus is Random This is an implementation of xoroshiro128+, as detailed at: http://xoroshiro.di.unimi.it This is currently the default Rand implementation. var _x: U64 var _y: U64 new create(x: U64 = 5489, y: U64 = 0) = Create with the specified seed. Returned values are deterministic for a given seed. _x = x _y = y next() fun ref next(): U64 = A random integer in [0, 2^64) let x = _x var y = _y let r = x + y y = x xor y _x = x.rotl(55) xor y xor (y 14) _y = y.rotl(36) r","title":"xoroshiro.pony"},{"location":"src/random/xorshift/","text":"class XorShift128Plus is Random This is an implementation of xorshift+, as detailed at: http://xoroshiro.di.unimi.it This should only be used for legacy applications that specifically require XorShift128Plus, otherwise use Rand. var _x: U64 var _y: U64 new create(x: U64 = 5489, y: U64 = 0) = Create with the specified seed. Returned values are deterministic for a given seed. _x = x _y = y next() fun ref next(): U64 = A random integer in [0, 2^64) var y = _x let x = _y let r = x + y _x = x y = y xor (y 23) _y = y xor x xor (y 18) xor (x 5) r","title":"xorshift.pony"},{"location":"src/signals/sig/","text":"# Signals package The Signals package provides support for handling Unix style signals. For each signal that you want to handle, you need to create a `SignalHandler` and a corresponding `SignalNotify` object. Each SignalHandler runs as it own actor and upon receiving the signal will call its corresponding `SignalNotify`'s apply method. ## Example program The following program will listen for the TERM signal and output a message to standard out if it is received. ```pony use signals actor Main new create(env: Env) = // Create a TERM handler let signal = SignalHandler(TermHandler(env), Sig.term()) // Raise TERM signal signal.raise() class TermHandler is SignalNotify let _env: Env new iso create(env: Env) = _env = env fun ref apply(count: U32): Bool = _env.out.print( TERM signal received ) true ``` ## Signal portability The `Sig` primitive provides support for portable signal handling across Linux, FreeBSD and OSX. Signals are not supported on Windows and attempting to use them will cause a compilation error. ## Shutting down handlers Unlike a `TCPConnection` and other forms of input receiving, creating a `SignalHandler` will not keep your program running. As such, you are not required to call `dispose` on your signal handlers in order to shutdown your program. primitive Sig Define the portable signal numbers. Other signals can be used, but they are not guaranteed to be portable. fun hup(): U32 = 1 fun int(): U32 = 2 fun quit(): U32 = 3 fun ill(): U32 = ifdef linux or bsd or osx then 4 else compile_error no SIGINT end fun trap(): U32 = ifdef linux or bsd or osx then 5 else compile_error no SIGTRAP end fun abrt(): U32 = 6 fun emt(): U32 = ifdef bsd or osx then 7 else compile_error no SIGEMT end fun fpe(): U32 = ifdef linux or bsd or osx then 8 else compile_error no SIGFPE end fun kill(): U32 = 9 fun bus(): U32 = ifdef bsd or osx then 10 elseif linux then 7 else compile_error no SIGBUS end fun segv(): U32 = ifdef linux or bsd or osx then 11 else compile_error no SIGSEGV end fun sys(): U32 = ifdef bsd or osx then 12 elseif linux then 31 else compile_error no SIGSYS end fun pipe(): U32 = ifdef linux or bsd or osx then 13 else compile_error no SIGPIPE end fun alrm(): U32 = 14 fun term(): U32 = 15 fun urg(): U32 = ifdef bsd or osx then 16 elseif linux then 23 else compile_error no SIGURG end fun stkflt(): U32 = ifdef linux then 16 else compile_error no SIGSTKFLT end fun stop(): U32 = ifdef bsd or osx then 17 elseif linux then 19 else compile_error no SIGSTOP end fun tstp(): U32 = ifdef bsd or osx then 18 elseif linux then 20 else compile_error no SIGTSTP end fun cont(): U32 = ifdef bsd or osx then 19 elseif linux then 18 else compile_error no SIGCONT end fun chld(): U32 = ifdef bsd or osx then 20 elseif linux then 17 else compile_error no SIGCHLD end fun ttin(): U32 = ifdef linux or bsd or osx then 21 else compile_error no SIGTTIN end fun ttou(): U32 = ifdef linux or bsd or osx then 22 else compile_error no SIGTTOU end fun io(): U32 = ifdef bsd or osx then 23 elseif linux then 29 else compile_error no SIGIO end fun xcpu(): U32 = ifdef linux or bsd or osx then 24 else compile_error no SIGXCPU end fun xfsz(): U32 = ifdef linux or bsd or osx then 25 else compile_error no SIGXFSZ end fun vtalrm(): U32 = ifdef linux or bsd or osx then 26 else compile_error no SIGVTALRM end fun prof(): U32 = ifdef linux or bsd or osx then 27 else compile_error no SIGPROF end fun winch(): U32 = ifdef linux or bsd or osx then 28 else compile_error no SIGWINCH end fun info(): U32 = ifdef bsd or osx then 29 else compile_error no SIGINFO end fun pwr(): U32 = ifdef linux then 30 else compile_error no SIGPWR end fun usr1(): U32 = ifdef bsd or osx then 30 elseif linux then 10 else compile_error no SIGUSR1 end fun usr2(): U32 = ifdef not scheduler_scaling_pthreads then ifdef bsd or osx then 31 elseif linux then 12 else compile_error no SIGUSR2 end else ifdef linux or bsd or osx then compile_error SIGUSR2 reserved for runtime use else compile_error no SIGUSR2 end end fun rt(n: U32): U32 ? = ifdef bsd then if n = 61 then 65 + n.u32() else error end elseif linux then if n = 32 then 32 + n.u32() else error end else compile_error no SIGRT end","title":"sig.pony"},{"location":"src/signals/signal_handler/","text":"use @pony_asio_event_create[AsioEventID]( owner: AsioEventNotify, fd: U32, flags: U32, nsec: U64, noisy: Bool) use @pony_asio_event_unsubscribe[None](event: AsioEventID) use @pony_asio_event_destroy[None](event: AsioEventID) actor SignalHandler Listen for a specific signal. If the wait parameter is true, the program will not terminate until the SignalHandler's dispose method is called, or if the SignalNotify returns false, after handling the signal as this also disposes the SignalHandler and unsubscribes it. let _notify: SignalNotify let _sig: U32 var _event: AsioEventID new create(notify: SignalNotify iso, sig: U32, wait: Bool = false) = Create a signal handler. _notify = consume notify _sig = sig _event = @pony_asio_event_create(this, 0, AsioEvent.signal(), sig.u64(), wait) be raise() = Raise the signal. SignalRaise(_sig) be dispose() = Dispose of the signal handler. _dispose() be _event_notify(event: AsioEventID, flags: U32, arg: U32) = Called when the signal is received, or when the AsioEventID can be destroyed. if AsioEvent.disposable(flags) then @pony_asio_event_destroy(event) elseif event is _event then if not _notify(arg) then _dispose() end end fun ref _dispose() = Dispose of the AsioEventID. if not _event.is_null() then @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() _notify.dispose() end","title":"signal_handler.pony"},{"location":"src/signals/signal_notify/","text":"interface SignalNotify Notifications for a signal. fun ref apply(count: U32): Bool = Called with the the number of times the signal has fired since this was last called. Return false to stop listening for the signal. true fun ref dispose() = Called if the signal is disposed. This is also called if the notifier returns false. None primitive SignalRaise Raise a signal. fun apply(sig: U32) = ifdef osx then // On Darwin, @raise delivers the signal to the current thread, not the // process, but kqueue EVFILT_SIGNAL will only see signals delivered to // the process. @kill delivers the signal to a specific process. @kill[I32](@getpid[I32](), sig) else @raise[I32](sig) end","title":"signal_notify.pony"},{"location":"src/strings/common_prefix/","text":"primitive CommonPrefix Creates a string that is the common prefix of the supplied strings, possibly empty. fun apply(data: ReadSeq[Stringable]): String iso^ = var res = .clone() try let iter = data.values() if iter.has_next() then res = iter.next()?.string() for d in iter do var idx: USize = 0 let s = d.string() while (idx res.size()) and (idx s.size()) do if res(idx)? != s(idx)? then break end idx = idx + 1 end res = res.substring(0, idx.isize()) end end end res","title":"common_prefix.pony"},{"location":"src/term/ansi/","text":"primitive ANSI These strings can be embedded in text when writing to a StdStream to create a text-based UI. fun up(n: U32 = 0): String = Move the cursor up n lines. 0 is the same as 1. if n = 1 then \\x1B[A else \\x1B[ + n.string() + A end fun down(n: U32 = 0): String = Move the cursor down n lines. 0 is the same as 1. if n = 1 then \\x1B[B else \\x1B[ + n.string() + B end fun right(n: U32 = 0): String = Move the cursor right n columns. 0 is the same as 1. if n = 1 then \\x1B[C else \\x1B[ + n.string() + C end fun left(n: U32 = 0): String = Move the cursor left n columns. 0 is the same as 1. if n = 1 then \\x1B[D else \\x1B[ + n.string() + D end fun cursor(x: U32 = 0, y: U32 = 0): String = Move the cursor to line y, column x. 0 is the same as 1. This indexes from the top left corner of the screen. if (x = 1) and (y = 1) then \\x1B[H else \\x1B[ + y.string() + ; + x.string() + H end fun clear(): String = Clear the screen and move the cursor to the top left corner. \\x1B[H\\x1B[2J fun erase(): String = Erases everything to the left of the cursor on the line the cursor is on. \\x1B[0K fun reset(): String = Resets all colours and text styles to the default. \\x1B[0m fun bold(state: Bool = true): String = Bold text. Does nothing on Windows. if state then \\x1B[1m else \\x1B[22m end fun underline(state: Bool = true): String = Underlined text. Does nothing on Windows. if state then \\x1B[4m else \\x1B[24m end fun blink(state: Bool = true): String = Blinking text. Does nothing on Windows. if state then \\x1B[5m else \\x1B[25m end fun reverse(state: Bool = true): String = Swap foreground and background colour. if state then \\x1B[7m else \\x1B[27m end fun black(): String = Black text. \\x1B[30m fun red(): String = Red text. \\x1B[31m fun green(): String = Green text. \\x1B[32m fun yellow(): String = Yellow text. \\x1B[33m fun blue(): String = Blue text. \\x1B[34m fun magenta(): String = Magenta text. \\x1B[35m fun cyan(): String = Cyan text. \\x1B[36m fun grey(): String = Grey text. \\x1B[90m fun white(): String = White text. \\x1B[97m fun bright_red(): String = Bright red text. \\x1B[91m fun bright_green(): String = Bright green text. \\x1B[92m fun bright_yellow(): String = Bright yellow text. \\x1B[93m fun bright_blue(): String = Bright blue text. \\x1B[94m fun bright_magenta(): String = Bright magenta text. \\x1B[95m fun bright_cyan(): String = Bright cyan text. \\x1B[96m fun bright_grey(): String = Bright grey text. \\x1B[37m fun black_bg(): String = Black background. \\x1B[40m fun red_bg(): String = Red background. \\x1B[41m fun green_bg(): String = Green background. \\x1B[42m fun yellow_bg(): String = Yellow background. \\x1B[43m fun blue_bg(): String = Blue background. \\x1B[44m fun magenta_bg(): String = Magenta background. \\x1B[45m fun cyan_bg(): String = Cyan background. \\x1B[46m fun grey_bg(): String = Grey background. \\x1B[100m fun white_bg(): String = White background. \\x1B[107m fun bright_red_bg(): String = Bright red background. \\x1B[101m fun bright_green_bg(): String = Bright green background. \\x1B[102m fun bright_yellow_bg(): String = Bright yellow background. \\x1B[103m fun bright_blue_bg(): String = Bright blue background. \\x1B[104m fun bright_magenta_bg(): String = Bright magenta background. \\x1B[105m fun bright_cyan_bg(): String = Bright cyan background. \\x1B[106m fun bright_grey_bg(): String = Bright grey background. \\x1B[47m","title":"ansi.pony"},{"location":"src/term/ansi_notify/","text":"interface ANSINotify Receive input from an ANSITerm. fun ref apply(term: ANSITerm ref, input: U8) = None fun ref up(ctrl: Bool, alt: Bool, shift: Bool) = None fun ref down(ctrl: Bool, alt: Bool, shift: Bool) = None fun ref left(ctrl: Bool, alt: Bool, shift: Bool) = None fun ref right(ctrl: Bool, alt: Bool, shift: Bool) = None fun ref delete(ctrl: Bool, alt: Bool, shift: Bool) = None fun ref insert(ctrl: Bool, alt: Bool, shift: Bool) = None fun ref home(ctrl: Bool, alt: Bool, shift: Bool) = None fun ref end_key(ctrl: Bool, alt: Bool, shift: Bool) = None fun ref page_up(ctrl: Bool, alt: Bool, shift: Bool) = None fun ref page_down(ctrl: Bool, alt: Bool, shift: Bool) = None fun ref fn_key(i: U8, ctrl: Bool, alt: Bool, shift: Bool) = None fun ref prompt(term: ANSITerm ref, value: String) = None fun ref size(rows: U16, cols: U16) = None fun ref closed() = None","title":"ansi_notify.pony"},{"location":"src/term/ansi_term/","text":"use time use signals use @ioctl[I32](fx: I32, cmd: ULong, ...) if posix struct _TermSize var row: U16 = 0 var col: U16 = 0 var xpixel: U16 = 0 var ypixel: U16 = 0 primitive _EscapeNone primitive _EscapeStart primitive _EscapeSS3 primitive _EscapeCSI primitive _EscapeMod type _EscapeState is ( _EscapeNone | _EscapeStart | _EscapeSS3 | _EscapeCSI | _EscapeMod ) class _TermResizeNotify is SignalNotify let _term: ANSITerm tag new create(term: ANSITerm tag) = _term = term fun apply(times: U32): Bool = _term.size() true primitive _TIOCGWINSZ fun apply(): ULong = ifdef linux then 21523 elseif osx or bsd then 1074295912 else 0 end actor ANSITerm Handles ANSI escape codes from stdin. let _timers: Timers var _timer: (Timer tag | None) = None let _notify: ANSINotify let _source: DisposableActor var _escape: _EscapeState = _EscapeNone var _esc_num: U8 = 0 var _esc_mod: U8 = 0 embed _esc_buf: Array[U8] = Array[U8] var _closed: Bool = false new create( notify: ANSINotify iso, source: DisposableActor, timers: Timers = Timers) = Create a new ANSI term. _timers = timers _notify = consume notify _source = source ifdef not windows then SignalHandler(recover _TermResizeNotify(this) end, Sig.winch()) end _size() be apply(data: Array[U8] iso) = Receives input from stdin. if _closed then return end for c in (consume data).values() do match _escape | _EscapeNone = if c == 0x1B then _escape = _EscapeStart _esc_buf.push(0x1B) else _notify(this, c) end | _EscapeStart = match c | 'b' = // alt-left _esc_mod = 3 _left() | 'f' = // alt-right _esc_mod = 3 _right() | 'O' = _escape = _EscapeSS3 _esc_buf.push(c) | '[' = _escape = _EscapeCSI _esc_buf.push(c) else _esc_flush() end | _EscapeSS3 = match c | 'A' = _up() | 'B' = _down() | 'C' = _right() | 'D' = _left() | 'H' = _home() | 'F' = _end() | 'P' = _fn_key(1) | 'Q' = _fn_key(2) | 'R' = _fn_key(3) | 'S' = _fn_key(4) else _esc_flush() end | _EscapeCSI = match c | 'A' = _up() | 'B' = _down() | 'C' = _right() | 'D' = _left() | 'H' = _home() | 'F' = _end() | '~' = _keypad() | ';' = _escape = _EscapeMod | if (c = '0') and (c = '9') = // Escape number. _esc_num = (_esc_num * 10) + (c - '0') _esc_buf.push(c) else _esc_flush() end | _EscapeMod = match c | 'A' = _up() | 'B' = _down() | 'C' = _right() | 'D' = _left() | 'H' = _home() | 'F' = _end() | '~' = _keypad() | if (c = '0') and (c = '9') = // Escape modifier. _esc_mod = (_esc_mod * 10) + (c - '0') _esc_buf.push(c) else _esc_flush() end end end // If we are in the middle of an escape sequence, set a timer for 25 ms. // If it fires, we send the escape sequence as if it was normal data. if _escape isnt _EscapeNone then if _timer isnt None then try _timers.cancel(_timer as Timer tag) end end let t = recover object is TimerNotify let term: ANSITerm = this fun ref apply(timer: Timer, count: U64): Bool = term._timeout() false end end let timer = Timer(consume t, 25000000) _timer = timer _timers(consume timer) end be prompt(value: String) = Pass a prompt along to the notifier. _notify.prompt(this, value) be size() = _size() fun ref _size() = Pass the window size to the notifier. let ws: _TermSize = _TermSize ifdef posix then @ioctl[I32](0, _TIOCGWINSZ(), ws) // do error handling _notify.size(ws.row, ws.col) end be dispose() = Stop accepting input, inform the notifier we have closed, and dispose of our source. if not _closed then _esc_clear() _notify.closed() _source.dispose() _closed = true end be _timeout() = Our timer since receiving an ESC has expired. Send the buffered data as if it was not an escape sequence. _timer = None _esc_flush() fun ref _mod(): (Bool, Bool, Bool) = Set the modifier bools. let r = match _esc_mod | 2 = (false, false, true) | 3 = (false, true, false) | 4 = (false, true, true) | 5 = (true, false, false) | 6 = (true, false, true) | 7 = (true, true, false) | 8 = (true, true, true) else (false, false, false) end _esc_mod = 0 r fun ref _keypad() = An extended key. match _esc_num | 1 = _home() | 2 = _insert() | 3 = _delete() | 4 = _end() | 5 = _page_up() | 6 = _page_down() | 11 = _fn_key(1) | 12 = _fn_key(2) | 13 = _fn_key(3) | 14 = _fn_key(4) | 15 = _fn_key(5) | 17 = _fn_key(6) | 18 = _fn_key(7) | 19 = _fn_key(8) | 20 = _fn_key(9) | 21 = _fn_key(10) | 23 = _fn_key(11) | 24 = _fn_key(12) | 25 = _fn_key(13) | 26 = _fn_key(14) | 28 = _fn_key(15) | 29 = _fn_key(16) | 31 = _fn_key(17) | 32 = _fn_key(18) | 33 = _fn_key(19) | 34 = _fn_key(20) end fun ref _up() = Up arrow. (let ctrl, let alt, let shift) = _mod() _notify.up(ctrl, alt, shift) _esc_clear() fun ref _down() = Down arrow. (let ctrl, let alt, let shift) = _mod() _notify.down(ctrl, alt, shift) _esc_clear() fun ref _left() = Left arrow. (let ctrl, let alt, let shift) = _mod() _notify.left(ctrl, alt, shift) _esc_clear() fun ref _right() = Right arrow. (let ctrl, let alt, let shift) = _mod() _notify.right(ctrl, alt, shift) _esc_clear() fun ref _delete() = Delete key. (let ctrl, let alt, let shift) = _mod() _notify.delete(ctrl, alt, shift) _esc_clear() fun ref _insert() = Insert key. (let ctrl, let alt, let shift) = _mod() _notify.insert(ctrl, alt, shift) _esc_clear() fun ref _home() = Home key. (let ctrl, let alt, let shift) = _mod() _notify.home(ctrl, alt, shift) _esc_clear() fun ref _end() = End key. (let ctrl, let alt, let shift) = _mod() _notify.end_key(ctrl, alt, shift) _esc_clear() fun ref _page_up() = Page up key. (let ctrl, let alt, let shift) = _mod() _notify.page_up(ctrl, alt, shift) _esc_clear() fun ref _page_down() = Page down key. (let ctrl, let alt, let shift) = _mod() _notify.page_down(ctrl, alt, shift) _esc_clear() fun ref _fn_key(i: U8) = Function key. (let ctrl, let alt, let shift) = _mod() _notify.fn_key(i, ctrl, alt, shift) _esc_clear() fun ref _esc_flush() = Pass a partial or unrecognised escape sequence to the notifier. for c in _esc_buf.values() do _notify(this, c) end _esc_clear() fun ref _esc_clear() = Clear the escape state. if _timer isnt None then try _timers.cancel(_timer as Timer tag) end _timer = None end _escape = _EscapeNone _esc_buf.clear() _esc_num = 0 _esc_mod = 0","title":"ansi_term.pony"},{"location":"src/term/readline/","text":"use collections use files use promises use strings = strings class Readline is ANSINotify Line editing, history, and tab completion. let _notify: ReadlineNotify let _out: OutStream let _path: (FilePath | None) embed _history: Array[String] embed _queue: Array[String] = Array[String] let _maxlen: USize var _edit: String iso = recover String end var _cur_prompt: String = var _cur_line: USize = 0 var _cur_pos: ISize = 0 var _blocked: Bool = true new iso create( notify: ReadlineNotify iso, out: OutStream, path: (FilePath | None) = None, maxlen: USize = 0) = Create a readline handler to be passed to stdin. It begins blocked. Set an initial prompt on the ANSITerm to begin processing. _notify = consume notify _out = out _path = path _history = Array[String](maxlen) _maxlen = maxlen _load_history() fun ref apply(term: ANSITerm ref, input: U8) = Receives input. match input | 0x01 = home() // ctrl-a | 0x02 = left() // ctrl-b | 0x04 = // ctrl-d if _edit.size() == 0 then _out.write( \\n ) term.dispose() else delete() end | 0x05 = end_key() // ctrl-e | 0x06 = right() // ctrl-f | 0x08 = _backspace() // ctrl-h | 0x09 = _tab() | 0x0A = _dispatch(term) // LF | 0x0B = // ctrl-k, delete to the end of the line. _edit.truncate(_cur_pos.usize()) | 0x0C = _clear() // ctrl-l | 0x0D = _dispatch(term) // CR | 0x0E = down() // ctrl-n | 0x10 = up() // ctrl-p | 0x14 = _swap() // ctrl-t | 0x15 = // ctrl-u, delete the whole line. _edit.clear() home() | 0x17 = _delete_prev_word() // ctrl-w | 0x7F = _backspace() // backspace | if input 0x20 = None // unknown control character else // Insert. _edit.insert_byte(_cur_pos, input) _cur_pos = _cur_pos + 1 _refresh_line() end fun ref prompt(term: ANSITerm ref, value: String) = Set a new prompt, unblock, and handle the pending queue. _cur_prompt = value _blocked = false try let line = _queue.shift()? _add_history(line) _out.print(_cur_prompt + line) _handle_line(term, line) else _refresh_line() end fun ref closed() = No more input is available. _save_history() fun ref up(ctrl: Bool = false, alt: Bool = false, shift: Bool = false) = Previous line. try if _cur_line 0 then _cur_line = _cur_line - 1 _edit = _history(_cur_line)?.clone() end_key() end end fun ref down(ctrl: Bool = false, alt: Bool = false, shift: Bool = false) = Next line. try if _cur_line (_history.size() - 1) then _cur_line = _cur_line + 1 _edit = _history(_cur_line)?.clone() else _cur_line = _history.size() _edit.clear() end end_key() end fun ref left(ctrl: Bool = false, alt: Bool = false, shift: Bool = false) = Move left. if _cur_pos == 0 then return end try repeat _cur_pos = _cur_pos - 1 until (_cur_pos == 0) or ((_edit.at_offset(_cur_pos)? and 0xC0) != 0x80) end _refresh_line() end fun ref right(ctrl: Bool = false, alt: Bool = false, shift: Bool = false) = Move right. try if _cur_pos _edit.size().isize() then _cur_pos = _cur_pos + 1 end while (_cur_pos _edit.size().isize()) and ((_edit.at_offset(_cur_pos)? and 0xC0) == 0x80) do _cur_pos = _cur_pos + 1 end _refresh_line() end fun ref home(ctrl: Bool = false, alt: Bool = false, shift: Bool = false) = Beginning of the line. _cur_pos = 0 _refresh_line() fun ref end_key( ctrl: Bool = false, alt: Bool = false, shift: Bool = false) = End of the line. _cur_pos = _edit.size().isize() _refresh_line() fun ref _backspace() = Backward delete. if _cur_pos == 0 then return end try var c = U8(0) repeat _cur_pos = _cur_pos - 1 c = _edit.at_offset(_cur_pos)? _edit.delete(_cur_pos, 1) until (_cur_pos == 0) or ((c and 0xC0) != 0x80) end _refresh_line() end fun ref delete(ctrl: Bool = false, alt: Bool = false, shift: Bool = false) = Forward delete. try if _cur_pos _edit.size().isize() then _edit.delete(_cur_pos, 1) end while (_cur_pos _edit.size().isize()) and ((_edit.at_offset(_cur_pos)? and 0xC0) == 0x80) do _edit.delete(_cur_pos, 1) end _refresh_line() end fun ref _clear() = Clear the screen. _out.write(ANSI.clear()) _refresh_line() fun ref _swap() = Swap the previous character with the current one. try if (_cur_pos 0) and (_cur_pos _edit.size().isize()) then _edit(_cur_pos.usize())? = _edit((_cur_pos - 1).usize())? = _edit(_cur_pos.usize())? end _refresh_line() end fun ref _delete_prev_word() = Delete the previous word. try let old = _cur_pos while (_cur_pos 0) and (_edit((_cur_pos - 1).usize())? == ' ') do _cur_pos = _cur_pos - 1 end while (_cur_pos 0) and (_edit((_cur_pos - 1).usize())? != ' ') do _cur_pos = _cur_pos - 1 end _edit.delete(_cur_pos, (old - _cur_pos).usize()) _refresh_line() end fun ref _tab() = Tab completion. TODO: Improve this. let r = _notify.tab(_edit.clone()) match r.size() | 0 = None | 1 = try _edit = r(0)?.clone() end_key() end else _out.write( \\n ) for completion in r.values() do _out.print(completion) end _edit = strings.CommonPrefix(r) end_key() end fun ref _dispatch(term: ANSITerm) = Send a finished line to the notifier. if _edit.size() 0 then let line: String = _edit = recover String end if _blocked then _queue.push(line) else _add_history(line) _out.write( \\n ) _handle_line(term, line) end end fun ref _handle_line(term: ANSITerm, line: String) = Dispatch a single line. let promise = Promise[String] promise.next[Any tag]( recover term~prompt() end, recover term~dispose() end) _notify(line, promise) _cur_pos = 0 _blocked = true fun ref _refresh_line() = Refresh the line on screen. if not _blocked then let len = 40 + _cur_prompt.size() + _edit.size() let out = recover String(len) end // Move to the left edge. out.append( \\r ) // Print the prompt. out.append(_cur_prompt) // Print the current line. out.append(_edit.clone()) // Erase to the right edge. out.append(ANSI.erase()) // Set the cursor position. var pos = _cur_prompt.codepoints() if _cur_pos 0 then pos = pos + _edit.codepoints(0, _cur_pos) end out.append( \\r ) out.append(ANSI.right(pos.u32())) _out.write(consume out) end fun ref _add_history(line: String) = Add a line to the history, trimming an earlier line if necessary. try if (_history.size() 0) and (_history(_history.size() - 1)? == line) then _cur_line = _history.size() return end end if (_maxlen 0) and (_history.size() = _maxlen) then try _history.shift()? end end _history.push(line) _cur_line = _history.size() fun ref _load_history() = Load the history from a file. _history.clear() try with file = File.open(_path as FilePath) do for line in file.lines() do _add_history(consume line) end end end fun _save_history() = Write the history back to a file. try with file = File(_path as FilePath) do for line in _history.values() do file.print(line) end end end","title":"readline.pony"},{"location":"src/term/readline_notify/","text":"use promises interface ReadlineNotify Notifier for readline. fun ref apply(line: String, prompt: Promise[String]) = Receives finished lines. The next prompt is set by fulfilling the promise. If the promise is rejected, readline will stop handling input. None fun ref tab(line: String): Seq[String] box = Return tab completion possibilities. Array[String]","title":"readline_notify.pony"},{"location":"src/time/_timing_wheel/","text":"use collections class _TimingWheel A timing wheel in a hierarchical set of timing wheels. Each wheel covers 6 bits of precision. let _shift: U64 let _adjust: U64 var _pending: U64 = 0 embed _list: Array[List[Timer]] new create(index: USize) = Create a timing wheel at the given hierarchical level. _shift = (index * _bits()).u64() _adjust = if index 0 then 1 else 0 end _list = Array[List[Timer]](_max()) for i in Range(0, _max()) do _list.push(List[Timer]) end fun ref schedule(timer: Timer) = Schedule a timer on this wheel. Mark the bit indicating that the given slot has timers in its list. let slot = ((timer._next() _shift) - _adjust) and _mask() try let list = _list(slot.usize())? _list(slot.usize())?.append_node(timer._get_node()) _pending = _pending or (1 slot) end fun ref advance(list: List[Timer], current: U64, elapsed: U64): Bool = Remove pending timers from this timing wheel and put them on the pending list supplied. Needs the current time and the elapsed time since the previous advance. Returns true if the next timing wheel in the hierarchy should be advanced. let time = (elapsed _shift).max(1) let pending = if time = _mask() then let slot = time and _mask() let slots = (1 slot) - 1 let old_slot = _slot(current - elapsed) let new_slot = _slot(current) slots.rotl(old_slot) or slots.rotl(new_slot).rotr(slot) or (1 new_slot) else -1 end while (pending and _pending) != 0 do let slot = (pending and _pending).ctz() try list.append_list(_list(slot.usize())?) end _pending = _pending and not (1 slot) end (pending and 1) != 0 fun next(current: U64): U64 = Given a current time, return the next time at which this timing wheel should be advanced. Returns -1 if no timers are on this timing wheel. if _pending != 0 then let slot = _slot(current) let mask = (1 _shift) - 1 ((_pending.rotr(slot).ctz() + _adjust).u64() _shift.u64()) - (current and mask) else -1 end fun ref clear() = Cancels all pending timers. for list in _list.values() do for timer in list.values() do timer._cancel() end end fun _slot(time: U64): U64 = Return the slot for a given time. (time _shift) and _mask() fun tag _bits(): USize = 6 fun tag _max(): USize = 1 _bits() fun tag _mask(): U64 = (_max() - 1).u64()","title":"_timing_wheel.pony"},{"location":"src/time/nanos/","text":"primitive Nanos Collection of utility functions for converting various durations of time to nanoseconds, for passing to other functions in the time package. fun from_seconds(t: U64): U64 = t * 1_000_000_000 fun from_millis(t: U64): U64 = t * 1_000_000 fun from_micros(t: U64): U64 = t * 1_000 fun from_seconds_f(t: F64): U64 = (t * 1_000_000_000).trunc().u64() fun from_millis_f(t: F64): U64 = (t * 1_000_000).trunc().u64() fun from_micros_f(t: F64): U64 = (t * 1_000).trunc().u64() fun from_wall_clock(wall: (I64, I64)): U64 = ((wall._1 * 1000000000) + wall._2).u64()","title":"nanos.pony"},{"location":"src/time/posix_date/","text":"class PosixDate Represents a proleptic Gregorian date and time, without specifying a time zone. The day of month, month, day of week, and day of year are all indexed from 1, i.e. January is 1, Monday is 1. var nsec: I32 = 0 var sec: I32 = 0 var min: I32 = 0 var hour: I32 = 0 var day_of_month: I32 = 1 var month: I32 = 1 var year: I32 = 1970 var day_of_week: I32 = 4 var day_of_year: I32 = 1 new create(seconds: I64 = 0, nanoseconds: I64 = 0) = Create a date from a POSIX time. Negative arguments will be changed to zero. @ponyint_gmtime[None](this, _negative_to_zero(seconds), _negative_to_zero(nanoseconds)) fun time(): I64 = Return a POSIX time. Treats the date as UTC. @ponyint_timegm[I64](this) fun ref normal() = Normalise all the fields of the date. For example, if the hour is 24, it is set to 0 and the day is advanced. This allows fields to be changed naively, eg. adding 1000 to hours to advance the time by 1000 hours, and then normalising the date. @ponyint_gmtime[None](this, time(), nsec) fun format(fmt: String): String = Format the time as for strftime. recover String.from_cstring(@ponyint_formattime[Pointer[U8]](this, fmt.cstring())) end fun _negative_to_zero(value: I64): I64 = if value 0 then value else 0 end","title":"posix_date.pony"},{"location":"src/time/time/","text":"# Time Package The Time Package provides classes and methods for timing operations, dealing with dates and times, and scheduling tasks. use lib:rt if linux use @clock_gettime[I32](clock: U32, ts: Pointer[(I64, I64)]) if lp64 and (linux or bsd) use @clock_gettime[I32](clock: U32, ts: Pointer[(I32, I32)]) if ilp32 and (linux or bsd) use @mach_absolute_time[U64]() if osx type _Clock is (_ClockRealtime | _ClockMonotonic) primitive _ClockRealtime fun apply(): U32 = ifdef linux or bsd then 0 else compile_error no clock_gettime realtime clock end primitive _ClockMonotonic fun apply(): U32 = ifdef linux then 1 elseif bsd then 4 else compile_error no clock_gettime monotonic clock end primitive Time A collection of ways to fetch the current time. fun now(): (I64 /*sec*/, I64 /*nsec*/) = The wall-clock adjusted system time with nanoseconds. Return: (seconds, nanoseconds) ifdef osx then var ts: (I64, I64) = (0, 0) @gettimeofday[I32](addressof ts, U64(0)) (ts._1, ts._2 * 1000) elseif linux or bsd then _clock_gettime(_ClockRealtime) elseif windows then var ft: (U32, U32) = (0, 0) @GetSystemTimeAsFileTime[None](addressof ft) var qft = ft._1.u64() or (ft._2.u64() 32) var epoch = qft.i64() - 116444736000000000 var sec = epoch / 10000000 var nsec = (epoch - (sec * 10000000)) * 100 (sec, nsec) else compile_error unsupported platform end fun seconds(): I64 = The wall-clock adjusted system time. @time[I64](U64(0)) fun millis(): U64 = Monotonic unadjusted milliseconds. ifdef osx then @mach_absolute_time() / 1000000 elseif linux or bsd then var ts = _clock_gettime(_ClockMonotonic) ((ts._1 * 1000) + (ts._2 / 1000000)).u64() elseif windows then (let qpc, let qpf) = _query_performance_counter() (qpc * 1000) / qpf else compile_error unsupported platform end fun micros(): U64 = Monotonic unadjusted microseconds. ifdef osx then @mach_absolute_time() / 1000 elseif linux or bsd then var ts = _clock_gettime(_ClockMonotonic) ((ts._1 * 1000000) + (ts._2 / 1000)).u64() elseif windows then (let qpc, let qpf) = _query_performance_counter() (qpc * 1000000) / qpf else compile_error unsupported platform end fun nanos(): U64 = Monotonic unadjusted nanoseconds. ifdef osx then @mach_absolute_time() elseif linux or bsd then var ts = _clock_gettime(_ClockMonotonic) ((ts._1 * 1000000000) + ts._2).u64() elseif windows then (let qpc, let qpf) = _query_performance_counter() (qpc * 1000000000) / qpf else compile_error unsupported platform end fun cycles(): U64 = Processor cycle count. Don't use this for performance timing, as it does not control for out-of-order execution. @ llvm.readcyclecounter [U64]() fun perf_begin(): U64 = Get a cycle count for beginning a performance testing block. This will will prevent instructions from before this call leaking into the block and instructions after this call being executed earlier. ifdef x86 then @ internal.x86.cpuid [(I32, I32, I32, I32)](I32(0)) @ llvm.x86.rdtsc [U64]() else compile_error perf_begin only supported on x86 end fun perf_end(): U64 = Get a cycle count for ending a performance testing block. This will will prevent instructions from after this call leaking into the block and instructions before this call being executed later. ifdef x86 then var aux: I32 = 0 var ts = @ internal.x86.rdtscp [U64](addressof aux) @ internal.x86.cpuid [(I32, I32, I32, I32)](I32(0)) ts else compile_error perf_end only supported on x86 end fun _clock_gettime(clock: _Clock): (I64, I64) = Return a clock time on linux and bsd. ifdef lp64 and (linux or bsd) then var ts: (I64, I64) = (0, 0) @clock_gettime(clock(), addressof ts) ts elseif ilp32 and (linux or bsd) then var ts: (I32, I32) = (0, 0) @clock_gettime(clock(), addressof ts) (ts._1.i64(), ts._2.i64()) else compile_error no clock_gettime end fun _query_performance_counter(): (U64 /* qpc */, U64 /* qpf */) = Return QPC and QPF. ifdef windows then var pf: (U32, U32) = (0, 0) var pc: (U32, U32) = (0, 0) @QueryPerformanceFrequency[U32](addressof pf) @QueryPerformanceCounter[U32](addressof pc) let qpf = pf._1.u64() or (pf._2.u64() 32) let qpc = pc._1.u64() or (pc._2.u64() 32) (qpc, qpf) else compile_error no QueryPerformanceCounter end","title":"time.pony"},{"location":"src/time/timer/","text":"use collections class Timer The `Timer` class represents a timer that fires after an expiration time, and then fires at an interval. When a `Timer` fires, it calls the `apply` method of the `TimerNotify` object that was passed to it when it was created. The following example waits 5 seconds and then fires every 2 seconds, and when it fires the `TimerNotify` object prints how many times it has been called: ```pony use time actor Main new create(env: Env) = let timers = Timers let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000) timers(consume timer) class Notify is TimerNotify let _env: Env var _counter: U32 = 0 new iso create(env: Env) = _env = env fun ref apply(timer: Timer, count: U64): Bool = _env.out.print(_counter.string()) _counter = _counter + 1 true ``` var _expiration: U64 var _interval: U64 let _notify: TimerNotify embed _node: ListNode[Timer] new iso create( notify: TimerNotify iso, expiration: U64, interval: U64 = 0) = Create a new timer. The expiration time should be a nanosecond count until the first expiration. The interval should also be in nanoseconds. _expiration = expiration + Time.nanos() _interval = interval _notify = consume notify _node = ListNode[Timer] try _node()? = this end new abs(notify: TimerNotify, expiration: (I64, I64), interval: U64 = 0) = Creates a new timer with an absolute expiration time rather than a relative time. The expiration time is wall-clock adjusted system time. _expiration = _abs_expiration_time(expiration) _interval = interval _notify = notify _node = ListNode[Timer] try _node()? = this end fun ref _cancel() = Remove the timer from any list. _node.remove() _notify.cancel(this) fun ref _get_node(): ListNode[Timer] = Returns the list node pointing to the timer. Used to schedule the timer in a queue. _node fun ref _slop(bits: USize) = Apply slop bits to the expiration time and interval. This reduces the precision by the given number of bits, effectively quantizing time. _expiration = _expiration bits.u64() if _interval 0 then _interval = (_interval bits.u64()).max(1) end fun ref _fire(current: U64): Bool = A timer is fired if its expiration time is in the past. The notifier is called with a count based on the elapsed time since expiration and the timer interval. The expiration time is set to the next expiration. Returns true if the timer should be rescheduled, false otherwise. let elapsed = current - _expiration if elapsed (1 63) then let count = (elapsed / _interval) + 1 _expiration = _expiration + (count * _interval) if not _notify(this, count) then _notify.cancel(this) return false end end (_interval 0) or ((_expiration - current) (1 63)) fun _next(): U64 = Returns the next expiration time. _expiration fun tag _abs_expiration_time(wall: (I64, I64)): U64 = Converts a wall-clock adjusted system time to absolute expiration time let wall_now = Time.now() Time.nanos() + (((wall._1 * 1000000000) + wall._2) - ((wall_now._1 * 1000000000) + wall_now._2)).u64()","title":"timer.pony"},{"location":"src/time/timer_notify/","text":"interface TimerNotify Notifications for timer. fun ref apply(timer: Timer, count: U64): Bool = Called with the the number of times the timer has fired since this was last called. Usually, the value of `count` will be 1. If it is not 1, it means that the timer isn't firing on schedule. For example, if your timer is set to fire every 10 milliseconds, and `count` is 2, that means it has been between 20-29 milliseconds since the last time your timer fired. Non 1 values for a timer are rare and indicate a system under heavy load. Return true to reschedule the timer (if it has an interval), or false to cancel the timer (even if it has an interval). true fun ref cancel(timer: Timer) = Called if the timer is cancelled. This is also called if the notifier returns false from its `apply` method. None","title":"timer_notify.pony"},{"location":"src/time/timers/","text":"use collections use @pony_asio_event_create[AsioEventID]( owner: AsioEventNotify, fd: U32, flags: U32, nsec: U64, noisy: Bool) use @pony_asio_event_setnsec[U32](event: AsioEventID, nsec: U64) use @pony_asio_event_unsubscribe[None](event: AsioEventID) use @pony_asio_event_destroy[None](event: AsioEventID) actor Timers A hierarchical set of timing wheels. var _current: U64 = 0 let _slop: USize embed _map: MapIs[Timer tag, Timer] = MapIs[Timer tag, Timer] embed _wheel: Array[_TimingWheel] = Array[_TimingWheel](_wheels()) embed _pending: List[Timer] = List[Timer] var _event: AsioEventID = AsioEvent.none() new create(slop: USize = 20) = Create a timer handler with the specified number of slop bits. No slop bits means trying for nanosecond resolution. 10 slop bits is approximately microsecond resolution, 20 slop bits is approximately millisecond resolution. _slop = slop _set_time() for i in Range(0, _wheels()) do _wheel.push(_TimingWheel(i)) end be apply(timer: Timer iso) = Sets a timer. Fire it if need be, schedule it on the right timing wheel, then rearm the timer. let timer': Timer ref = consume timer _map(timer') = timer' timer'._slop(_slop) _fire(timer') _advance() be cancel(timer: Timer tag) = Cancels a timer. try (_, let timer') = _map.remove(timer)? timer'._cancel() if (_map.size() == 0) and (not _event.is_null()) then // Unsubscribe an existing event. @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end end be dispose() = Dispose of this set of timing wheels. for wheel in _wheel.values() do wheel.clear() end _map.clear() if not _event.is_null() then @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end be _event_notify(event: AsioEventID, flags: U32, arg: U32) = When the event fires, advance the timing wheels. if AsioEvent.disposable(flags) then @pony_asio_event_destroy(event) elseif event is _event then _advance() end fun ref _advance() = Update the current time, process all the timing wheels, and set the event for the next time we need to advance. let elapsed = _set_time() try for i in Range(0, _wheels()) do if not _wheel(i)?.advance(_pending, _current, elapsed) then break end end for timer in _pending.values() do _fire(timer) end end _pending.clear() var nsec = _next() if _event.is_null() then if nsec != -1 then // Create a new event. _event = @pony_asio_event_create(this, 0, AsioEvent.timer(), nsec, true) end else if nsec != -1 then // Update an existing event. @pony_asio_event_setnsec(_event, nsec) else // Unsubscribe an existing event. @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end end fun ref _fire(timer: Timer) = Fire a timer if necessary, then schedule it on the correct timing wheel based on how long it is until it expires. if not timer._fire(_current) then try _map.remove(timer)? end return end try let rem = timer._next() - _current _get_wheel(rem)?.schedule(consume timer) end fun _next(): U64 = Return the next time at which the timing wheels should be advanced. This is adjusted for slop, so it yields nanoseconds. If no events are pending, this returns -1. var next: U64 = -1 try for i in Range(0, _wheels()) do next = next.min(_wheel(i)?.next(_current)) end end if next != -1 then next = next _slop.u64() end next fun ref _set_time(): U64 = Set the current time with precision reduced by the slop bits. Return the elapsed time. let previous = _current = Time.nanos() _slop.u64() _current - previous fun ref _get_wheel(rem: U64): _TimingWheel ? = Get the hierarchical timing wheel for the given time until expiration. let t = rem.min(_expiration_max()) let i = ((t.bitwidth() - t.clz()) - 1).usize() / _bits() _wheel(i)? fun tag _expiration_max(): U64 = Get the maximum time the timing wheels cover. Anything beyond this is scheduled on the last timing wheel. ((1 (_wheels() * _bits())) - 1).u64() fun tag _wheels(): USize = 4 fun tag _bits(): USize = 6","title":"timers.pony"}]}